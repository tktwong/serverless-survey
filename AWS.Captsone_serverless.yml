service:
  name: Book-library-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    AUTHORS_TABLE: ahs-BookApp-Authors-${self:provider.stage}
    AUTHORS_S3_BUCKET: ahs-bookapp-authors-${self:provider.stage}
    AUTHORS_ID_INDEX: AuthorIdIndex

    BOOKS_TABLE: ahs-BookApp-Books-${self:provider.stage}
    BOOKS_S3_BUCKET: ahs-bookapp-books-${self:provider.stage}
    BOOKS_ID_INDEX: BookIdIndex

    USER_REVIEW_TABLE: ahs-BookApp-User-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex

    BUCKET_REGION: ${self:provider.region}
    SIGNED_URL_EXPIRATION: 300
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.AUTHORS_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
      Resource:
        - '*'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Book Library API
        description: Serverless app that keeps record of books and their authors
    models:
      - name: AuthorRequest
        contentType: application/json
        schema: ${file(models/create-author-request.json)}
      - name: AuthorUpdateRequest
        contentType: application/json
        schema: ${file(models/update-author-request.json)}
      - name: BookRequest
        contentType: application/json
        schema: ${file(models/create-book-request.json)}
      - name: BookUpdateRequest
        contentType: application/json
        schema: ${file(models/update-book-request.json)}
      - name: ReviewRequest
        contentType: application/json
        schema: ${file(models/create-review-request.json)}
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateAuthor:
    handler: src/lambda/http/createAuthor.handler
    events:
      - http:
          method: post
          path: authors
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Creates Author
            description: Creates Author
            requestModels:
              'application/json': AuthorRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUTHORS_TABLE}

  GetAuthors:
    handler: src/lambda/http/getAuthors.handler
    events:
      - http:
          method: get
          path: authors
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUTHORS_TABLE}

  GetAuthor:
    handler: src/lambda/http/getAuthor.handler
    events:
      - http:
          method: get
          path: authors/{authorId}
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUTHORS_TABLE}

  UpdateAuthor:
    handler: src/lambda/http/updateAuthor.handler
    events:
      - http:
          method: patch
          path: authors/{authorId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update author
            description: Update a author item
            requestModels:
              'application/json': AuthorUpdateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUTHORS_TABLE}

  CreateBook:
    handler: src/lambda/http/createBook.handler
    events:
      - http:
          method: post
          path: books
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Creates book
            description: Creates book
            requestModels:
              'application/json': BookRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUTHORS_TABLE}

  GetBooks:
    handler: src/lambda/http/getBooks.handler
    events:
      - http:
          method: get
          path: books
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

  GetBook:
    handler: src/lambda/http/getBook.handler
    events:
      - http:
          method: get
          path: books/{bookId}
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}
  GetBookOfAuthor:
    handler: src/lambda/http/getBookByAuthor.handler
    events:
      - http:
          method: get
          path: books/author/{authorId}
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUTHORS_TABLE}

  UpdateBook:
    handler: src/lambda/http/updateBook.handler
    events:
      - http:
          method: patch
          path: books/{bookId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update book
            description: Update a book item
            requestModels:
              'application/json': BookUpdateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUTHORS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}

  CreateReview:
    handler: src/lambda/http/createReview.handler
    events:
      - http:
          method: post
          path: userReview
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Creates Review for a book
            description: Creates Review for a book
            requestModels:
              'application/json': ReviewRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_REVIEW_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}
  deleteReview:
    handler: src/lambda/http/deleteReview.handler
    events:
      - http:
          method: delete
          path: userReview/{bookId}
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_REVIEW_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}

  getUserReviews:
    handler: src/lambda/http/getAllUserReviews.handler
    events:
      - http:
          method: get
          path: userReview/all
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_REVIEW_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUTHORS_TABLE}

  getBookReviews:
    handler: src/lambda/http/getAllBookReviews.handler
    events:
      - http:
          method: get
          path: userReview/all/{bookId}
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_REVIEW_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_REVIEW_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}

  UpdateReview:
    handler: src/lambda/http/updateReview.handler
    events:
      - http:
          method: patch
          path: userReview/{bookId}
          authorizer: Auth
          cors: true

    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_REVIEW_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: commons/{itemId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatementsInherit: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AuthorDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: authorId
            AttributeType: S

        KeySchema:
          - AttributeName: authorId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.AUTHORS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.AUTHORS_ID_INDEX}
            KeySchema:
              - AttributeName: authorId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    BookDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: authorId
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S

        KeySchema:
          - AttributeName: authorId
            KeyType: HASH
          - AttributeName: bookId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOOKS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BOOKS_ID_INDEX}
            KeySchema:
              - AttributeName: bookId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    UserDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S

        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: bookId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_REVIEW_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: bookId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    AuthorsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.AUTHORS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    AuthorsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.AUTHORS_S3_BUCKET}/*'
        Bucket: !Ref AuthorsBucket
    BooksBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BOOKS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BooksBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*'
        Bucket: !Ref BooksBucket

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
