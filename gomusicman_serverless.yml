# See AWS GO MOD section at this link for how this project was created..
# https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/go/
# sls create --template aws-go-mod --path GoConchRepublicBackEnd

# For full config options, check the docs:
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: gomusicman
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=2.0.0 <3.0.0'

provider:
  name: aws
  runtime: go1.x
  # Set the default stage used. Default is dev
  stage: "dev"
  # Overwrite the default region used. Default is us-east-1
  region: "us-east-1"
  # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  #timeout: 10
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  versionFunctions: false
  logRetentionInDays: 30 # Set the default RetentionInDays for a CloudWatch LogGroup
  #extra role permissions required for skill to operate
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
      Resource: ${env:DynamoDBARN}
    - Effect: "Allow"
      Action:
        - sns:Publish
      Resource: ${env:SNSTopic}

#BY DEFAULT, these logging group/events role statements come built-in
#    - Effect: "Allow"
#      Action:
#        - "logs:CreateLogStream"
#        - "logs:CreateLogGroup"
#        - "logs:PutLogEvents"

# you can define service wide environment variables here
#environment:

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  main:
    handler: bin/main
    # Function level environment variables
    environment:
      #ENV values should be used to provide defaults as well as secure the Alexa skill backend code, to ensure it can only be invoked
      #by our Alexa skill defined in the Developer console
      AppARN: ${env:AppARN}
      AplTemplate: ${env:AplTemplate}
      SkillTitle: ${env:SkillTitle}
      SmallImg: ${env:SmallImg}
      LargeImg: ${env:LargeImg}
      #The above items are fairly common to all skills, these below are custom for the skill
      APIKey: ${env:APIKey}
      SNS_TOPIC: ${env:SNSTopic}
      DYNAMO_DB_TABLENAME: ${env:DynamoDBTable}
    events:
      - alexaSkill: # This sets up and creates the association of the Alexa skill to this Lambda function
          appId: ${env:AppARN}
          enabled: true

