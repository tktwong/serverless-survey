# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: chalaline-serverless-lambda

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  profile: chalaline
  runtime: nodejs8.10
  stage: dev
  region: ap-southeast-1
  environment:
    STORE_TABLE: Store
    PRODUCT_TABLE: Product
    REGION: ap-southeast-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cognito-idp:*"
        - "cognito-identity:*"
        - "dynamodb:*"
      Resource: "*"

# The `functions` block defines what code to deploy
functions:
  helloWorld:
    handler: handler.helloWorld
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: hello-world
          method: get
          cors: true

  createBranch:
    handler: store/createBranch.createBranch
    events:
      - http:
          path: create-branch
          method: post
          cors: true
  removeBranch:
    handler: store/removeBranch.removeBranch
    events:
      - http:
          path: remove-branch
          method: post
          cors: true
  removeStore:
    handler: store/removeStore.removeStore
    events:
      - http:
          path: remove-store
          method: post
          cors: true
  listAllBranch:
    handler: store/listAllBranch.listAllBranch
    events:
      - http:
          path: list-all-branch
          method: post
          cors: true
  listAllStore:
    handler: store/listAllStore.listAllStore
    events:
      - http:
          path: list-all-store
          method: get
          cors: true
  showStoreDatabase:
    handler: store/showStoreDatabase.showStoreDatabase
    events:
      - http:
          path: show-store-database
          method: get
          cors: true

  addProductToDatabase:
    handler: products/addProductToDatabase.addProductToDatabase
    events:
      - http:
          path: add-product-to-database
          method: post
          cors: true
  addProductToStock:
    handler: products/addProductToStock.addProductToStock
    events:
      - http:
          path: add-product-to-stock
          method: post
          cors: true
  listProductsInDatabase:
    handler: products/listProductsInDatabase.listProductsInDatabase
    events:
      - http:
          path: list-products-in-database
          method: get
          cors: true
  listProductsInStock:
    handler: products/listProductsInStock.listProductsInStock
    events:
      - http:
          path: list-products-in-stock
          method: post
          cors: true
  listPublicProducts:
    handler: products/listPublicProducts.listPublicProducts
    events:
      - http:
          path: list-public-products
          method: post
          cors: true
  removeProductInDatabase:
    handler: products/removeProductInDatabase.removeProductInDatabase
    events:
      - http:
          path: remove-product-in-database
          method: post
          cors: true
  removeProductInStock:
    handler: products/removeProductInStock.removeProductInStock
    events:
      - http:
          path: remove-product-in-stock
          method: post
          cors: true
  setProductAttributesInStock:
    handler: products/setProductAttributesInStock.setProductAttributesInStock
    events:
      - http:
          path: set-product-attributes-in-stock
          method: post
          cors: true
  buyProductFromOnlineMarket:
    handler: products/buyProductFromOnlineMarket.buyProductFromOnlineMarket
    events:
      - http:
          path: buy-product-from-online-market
          method: post
          cors: true
  listLowQuantityProductsInStock:
    handler: products/listLowQuantityProductsInStock.listLowQuantityProductsInStock
    events:
      - http:
          path: list-low-quantity-products-in-stock
          method: post
          cors: true
  listLowQuantityProductsInStore:
    handler: products/listLowQuantityProductsInStore.listLowQuantityProductsInStore
    events:
      - http:
          path: list-low-quantity-products-in-store
          method: post
          cors: true

  registerAsAdmin:
    handler: users/registerAsAdmin.registerAsAdmin
    events:
      - http:
          path: register-as-admin
          method: post
          cors: true
  addStaff:
    handler: users/addStaff.addStaff
    events:
      - http:
          path: add-staff
          method: post
          cors: true
  listStaffs:
    handler: users/listStaffs.listStaffs
    events:
      - http:
          path: list-staffs
          method: get
          cors: true
  getUser:
    handler: users/getUser.getUser
    events:
      - http:
          path: get-user
          method: get
          cors: true
  logout:
    handler: users/logout.logout
    events:
      - http:
          path: logout
          method: post
          cors: true
  login:
    handler: users/login.login
    events:
      - http:
          path: login
          method: post
          cors: true
  resendConfirmationCode:
    handler: users/resendConfirmationCode.resendConfirmationCode
    events:
      - http:
          path: resend-confirmation-code
          method: post
          cors: true
  confirmUser:
    handler: users/confirmUser.confirmUser
    events:
      - http:
          path: confirm-user
          method: post
          cors: true

  changePassword:
    handler: users/changePassword.changePassword
    events:
      - http:
          path: change-password
          method: post
          cors: true


plugins:
  - serverless-offline

iamRoleStatements:
  - Action:
      - cognito-idp:AdminGetUser
    Resource: ${self:custom.extra.cognito.userPoolArn}
    Effect: Allow


# resources:
#   Resources:
#     StoreTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: Store
#         AttributeDefinitions:
#           - AttributeName: storeName
#             AttributeType: S
#           - AttributeName: branchName
#             AttributeType: S
#         KeySchema:
#           - AttributeName: storeName
#             KeyType: HASH
#           - AttributeName: branchName
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 5
#           WriteCapacityUnits: 5
#     ProductTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: Product
#         AttributeDefinitions:
#           - AttributeName: productID
#             AttributeType: S
#         KeySchema:
#           - AttributeName: productID
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 5
#           WriteCapacityUnits: 5
