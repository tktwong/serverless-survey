# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: frootube
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  generic_bucket_prefix: "com-cloudership-${self:provider.region}"
  bucket_prefix: "${self:custom.generic_bucket_prefix}-${self:service}"
  video_upload_bucket_name: "${self:custom.bucket_prefix}-video-upload"
  video_download_bucket_name: "${self:custom.bucket_prefix}-video-download"
  video_upload_bucket_create_object_topic: "VideoUploadBucketCreateObjectTopic"
provider:
  name: aws
  runtime: python3.8

  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1
  stage: prod
  region: eu-west-1

  # you can add statements to the Lambda function's IAM Role here
  #  iamRoleStatements:
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:ListBucket"
  #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:PutObject"
  #      Resource:
  #        Fn::Join:
  #          - ""
  #          - - "arn:aws:s3:::"
  #            - "Ref" : "ServerlessDeploymentBucket"
  #            - "/*"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "s3:putObject"
      Resource:
        - "arn:aws:s3:::${self:custom.video_upload_bucket_name}/*"
    - Effect: Allow
      Action:
        - "mediaconvert:*"
      Resource: "*"
    - Effect: Allow
      Action: "iam:PassRole"
      Resource: !GetAtt MediaConvertRole.Arn

  # you can define service wide environment variables here
  #  environment:
  #    variable1: value1

  deploymentBucket:
    name: "${self:custom.generic_bucket_prefix}-deployment-support"
    maxPreviousDeploymentArtifacts: 3
    blockPublicAccess: true

  # you can add packaging information here
  #package:
  #  include:
  #    - include-me.py
  #    - include-me-dir/**
  #  exclude:
  #    - exclude-me.py
  #    - exclude-me-dir/**
  include:
    - encoder-job-creator-media-convert-config.json

functions:

  uploadLinkGenerator:
    handler: upload_link_generator.handler
    memorySize: 256
    environment:
      UPLOAD_BUCKET: "${self:custom.video_upload_bucket_name}"
    events:
      - http:
          path: upload-link
          method: post

  encoderJobCreator:
    handler: encoder_job_creator.handler
    memorySize: 256
    environment:
      DEBUG: true
      DESTINATION_BUCKET: "${self:custom.video_download_bucket_name}"
      MEDIA_CONVERT_ROLE: !GetAtt MediaConvertRole.Arn
    events:
      - sns:
          arn: !Ref VideoUploadBucketCreateObjectTopic
          topicName: "${self:custom.video_upload_bucket_create_object_topic}"

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    VideoUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:custom.video_upload_bucket_name}"
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['Authorization', 'Content-*', 'Host']
              AllowedMethods: ['POST']
              AllowedOrigins: ['*']
              MaxAge: 3000
        NotificationConfiguration:
          TopicConfigurations:
            - Event: "s3:ObjectCreated:*"
              Topic: !Ref VideoUploadBucketCreateObjectTopic
        Tags:
          - { Key: Service, Value: "${self:service}" }
    VideoUploadBucketCreateObjectTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "${self:custom.video_upload_bucket_create_object_topic}"
        DisplayName: "${self:custom.video_upload_bucket_create_object_topic}"
        Tags:
          - { Key: Service, Value: "${self:service}" }
    VideoUploadBucketCreateObjectTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: { AWS: "*" }
              Action: "sns:Publish"
              Resource: !Ref VideoUploadBucketCreateObjectTopic
              Condition:
                ArnLike:
                  aws:SourceArn: "arn:aws:s3:::${self:custom.video_upload_bucket_name}"
        Topics: [!Ref VideoUploadBucketCreateObjectTopic]
    VideoDownloadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:custom.video_download_bucket_name}"
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['Authorization', 'Content-*', 'Host']
              AllowedMethods: ['GET']
              AllowedOrigins: ['*']
              MaxAge: 3000
        Tags:
          - { Key: Service, Value: "${self:service}" }
    VideoDownloadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref VideoDownloadBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: "s3:GetObject"
              Effect: "Allow"
              Resource: "arn:aws:s3:::${self:custom.video_download_bucket_name}/*"
              Principal: '*'
    MediaConvertRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: { Service: "mediaconvert.amazonaws.com" }
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "MediaConvertRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action: "s3:*"
                  Resource:
                    - "arn:aws:s3:::${self:custom.video_download_bucket_name}/*"
                - Effect: "Allow"
                  Action: "s3:Get*"
                  Resource:
                    - "arn:aws:s3:::${self:custom.video_upload_bucket_name}/upload/*"
