service: serverless-challenge-ycfr
frameworkVersion: '2'

custom:
  bucket:
    dev: solvimm-ycfr-bucket-challenge
    prod: solvimm-ycfr-bucket-challenge-prd

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    shouldStartNameWithService: true
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
functions:
  hello:
    handler: handler.hello
    events:
     - http:
         path: /
         method: get
  getMetadata:
    handler: handler.getMetadata
    description:
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: images
          method: get
          cors: true
  extractMetadata:
    handler: handler.extractMetadata
    description:
    memorySize: 128
    timeout: 30
    events:
      - s3:
          bucket:  ${self:custom.bucket.${self:provider.stage}}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
      - s3:
          bucket:  ${self:custom.bucket.${self:provider.stage}}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpeg
      - s3:
          bucket:  ${self:custom.bucket.${self:provider.stage}}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .png
      - s3:
          bucket:  ${self:custom.bucket.${self:provider.stage}}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .TIF
      - s3:
          bucket:  ${self:custom.bucket.${self:provider.stage}}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .gif
      - s3:
          bucket:  ${self:custom.bucket.${self:provider.stage}}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .exif
      - s3:
          bucket:  ${self:custom.bucket.${self:provider.stage}}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .bmp
      - s3:
          bucket:  ${self:custom.bucket.${self:provider.stage}}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .psd
  getImage:
    handler: handler.getImage
    description:
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: download
          method: get
          cors: true
  infoImages:
    handler: handler.infoImages
    description:
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: infoImages/
          method: get
          cors: true
resources:
  Resources:
    ImagesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: s3objectkey
            AttributeType: S
        KeySchema:
          -
            AttributeName: s3objectkey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

