service: virtualrun-app-api2

plugins:
  - serverless-webpack

custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: ap-southeast-1

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createPost:
    handler: create.post
    events:
      - http:
          path: posts
          method: post
          cors: true
          authorizer: aws_iam
  getPost:
    handler: get.post
    events:
      - http:
          path: posts/{id}
          method: post
          cors: true
          authorizer: aws_iam
  listPost:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.post
    events:
      - http:
          path: posts
          method: get
          cors: true
          authorizer: aws_iam

  updatePost:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.post
    events:
      - http:
          path: posts/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deletePost:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.post
    events:
      - http:
          path: posts/{id}
          method: delete
          cors: true
          authorizer: aws_iam


  createUserRaces:
    handler: create.userRaces
    events:
      - http:
          path: user/races
          method: post
          cors: true
          authorizer: aws_iam

  getUserRaces:
    handler: get.userRaces
    events:
      - http:
          path: user/races/{id}
          method: post
          cors: true
          authorizer: aws_iam
          
  listUserRaces:
    handler: list.userRaces
    events:
      - http:
          path: user/races
          method: get
          cors: true
          authorizer: aws_iam
  
  deleteUserRaces:
    handler: delete.userRaces
    events:
      - http:
          path: user/races/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  
  createUserRaceLog:
    handler: create.userRaceLog
    events:
      - http:
          path: user/log
          method: post
          cors: true
          authorizer: aws_iam

  getUserRaceLog:
    handler: get.userRaceLog
    events:
      - http:
          path: user/log/{id}
          method: get
          cors: true
          authorizer: aws_iam

  createUserRaceLogEntry:
    handler: create.userRaceLogEntry
    events:
      - http:
          path: user/log
          method: post
          cors: true
          authorizer: aws_iam

  deleteUserRaceLogEntry:
    handler: delete.userRaceLogEntry
    events:
      - http:
          path: user/log/{id}/{logId}
          method: delete
          cors: true
          authorizer: aws_iam
