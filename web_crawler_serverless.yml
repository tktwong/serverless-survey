# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: crawler
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  websocketApiName: crawler-api
  websocketApiSelectionExpression: $request.body.action

# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
      Resource:
        "arn:aws:dynamodb:us-east-1:*:*"
    - Effect: "Allow"
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: "Allow"
      Action:
        - "sqs:ReceiveMessage"
        - "sqs:SendMessage"
      Resource:
        Fn::GetAtt: [SQSQueue, Arn]


functions:
  connectionManager:
    handler: handler.connection_manager
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  startCrawl:
    handler: handler.start_crawl
    environment:
      SQS_URL:
        Ref: SQSQueue
    events:
      - websocket:
          route: $default
  crawlUrl:
    handler: handler.crawl_url
    environment:
      SQS_URL:
        Ref: SQSQueue
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSQueue, Arn]

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "PendingUrls"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    noDeploy: []