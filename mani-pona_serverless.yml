service: ${env:CLIENT}-mani-pona

provider:
  name: aws
  runtime: nodejs12.x
  region: ${env:REGION, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  tracing: # this tracks a request through the AWS infrastructure, to figure out bottle-necks, etc. Could reasonably be turned off.
    apiGateway: ${env:XRAY, self:custom.debug}
  logs:
    restApi: ${env:LOG_REST_API, self:custom.debug} # Adds a log stream (we could turn this off).

plugins:
  # - serverless-webpack
  - serverless-dotenv-plugin
  # WARNING! This is serverless-dynamodb-local from https://github.com/99x/serverless-dynamodb-local
  # it is different from the official serverless docs!
  - serverless-dynamodb-local
  - serverless-offline 

functions:
  graphql:
    handler: dist/server.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
      - http:
          path: graphql
          method: get
  environment:
    DYN_REGION: ${env:DYN_REGION}
    DYN_ENDPOINT: ${env:DYN_ENDPOINT} # TODO: replace with 'Ref'
    DYN_TABLE: ${env:DYN_TABLE}
    DEBUG: ${env:DEBUG, self:custom.debug}

    # From the documentation (https://www.serverless.com/framework/docs/providers/aws/events/apigateway/):
    # If you want more control over which attributes are exposed as claims you can switch to integration: lambda and add the following configuration. The claims will be exposed at events.cognitoPoolClaims.
    # E.g.
    #  integration: lambda
    #  authorizer:
    #    arn: arn:aws:cognito-idp:us-east-1:xxx:userpool/us-east-1_ZZZ
    #    claims:
    #      - email
    #      - nickname
    #
    # If you are creating the Cognito User Pool in the resources section of the same template, you can refer to the ARN using the Fn::GetAtt attribute from CloudFormation. To do so, you must give your authorizer a name and specify a type of COGNITO_USER_POOLS:
    #
    # authorizer:
    #   name: MyAuthorizer
    #   type: COGNITO_USER_POOLS
    #     arn:
    #       Fn::GetAtt:
    #         - CognitoUserPool
    #         - Arn
    #
    # ---
    # resources:
    #   Resources:
    #     CognitoUserPool:
    #       Type: 'AWS::Cognito::UserPool'
    #       Properties: ...

resources:
  Resources:
    ledger:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYN_TABLE}
        AttributeDefinitions:
          - AttributeName: ledger
            AttributeType: S
          - AttributeName: entry
            AttributeType: S
        KeySchema:
          - AttributeName: ledger
            KeyType: HASH
          - AttributeName: entry
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

# Warning: the dynamodb shell does NOT work in Firefox, only in Chrome
custom:
  debug: ${env:DEBUG, false} # debug mode (string values or 0|1 are converted)
  dotenv:
    basePath: env/
  dynamodb:
    stages:
      - test
      - dev
    start:
      inMemory: true
      migrate: true
#      seed: false
#    seed:
#      test:
#        sources:
#          - table: manipona
#            sources: [./tests/seeds/manipona.json]

