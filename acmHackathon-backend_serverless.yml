
# each service has a provider
# if u have a complex app, you can have multiple services (modules)
service: sls-acmhackathon-backend-api

custom:
  dynamodb:
    start:
      port: 8000
      migration: true
      inMemory: true
      # onStart: true

frameworkVersion: '2'

# AWS serverless configurations f
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  stage: prod
  profile: acmHackathon
  # setting environmnet variable for tables
  environment:
    MEMBERS: ${self:service}-${self:opt, self:provider.stage}-members

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - ses:*
      Resource: "*"

# initializing dev dependencies we have
plugins:
 - serverless-offline
 - serverless-dynamodb-local

# endpoints
functions:
  # hello:
  #   handler: handlers/handler.hello
  # yolo:
  #   handler: handlers/handler.handler  
  # listJobs:
  #   handler: handlers/handler.list
  #   events:
  #     - http:
  #         method: GET
  #         path: /jobList
  # createJobs:
  #   handler: handlers/handler.createJob
  #   events:
  #     - http:
  #         method: POST
  #         path: /jobList
  # fetchJobs:
  #   handler: handlers/handler.fetchJob
  #   events:
  #     - http:
  #         method: GET
  #         path: /job/{id}
  #         request:
  #           parameters:
  #             id: true
  postMember:
    handler: handlers/handler.newMember
    events:
      - http:
          method: POST
          path: /members
          cors: true

# Setting up Dynamo Table 
resources:
  Resources:
    Members:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MEMBERS}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: Email
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
            - AttributeName: Email
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


# Setting up Dynamo Table 
# TODO: look up correct way to add GSI and query it 
# resources:
#   Resources:
#     Members:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${self:provider.environment.MEMBERS}
#         AttributeDefinitions:
#           - AttributeName: ID
#             AttributeType: S
#           # - AttributeName: Email
#           #   AttributeType: S
#         KeySchema:
#           - AttributeName: ID
#             KeyType: HASH
#         # GlobalSecondaryIndexes:
#         #   - IndexName: EmailIndex
#         #     KeySchema:
#         #     - AttributeName: Email
#         #       KeyType: HASH
#         #     Projection:
#         #       ProjectionType: ALL
#         #     ProvisionedThroughput:
#         #       ReadCapacityUnits: 1
#         #       WriteCapacityUnits: 1
#         ProvisionedThroughput: 
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1