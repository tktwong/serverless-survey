# For complete reference:
# https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: GraphQlService
frameworkVersion: ">=1.1.0 <2.0.0"

custom:
  parent: MRxCore
  codename: Prometheus

  # Mandatory tags applied to resources.
  tags:
    name: ${self:custom.parent}-${self:custom.codename}-${self:service}-Service

    # Allowed values: dev, test, prod, sandbox-op1
    environment: ${opt:environment, 'dev'}
    application: ${opt:application, 'MRx-Prometheus-Api'}
    applicationVersion: ${opt:applicationVersion, '1.0.0'}
    infrastructureVersion: ${opt:infrastructureVersion, '1.0.0'}

    # Allowed values: data
    tier: ${opt:tier, 'data'}
    projectCostCenter: ${opt:projectCostCenter, '0570025003'}
    operatingCostCenter: ${opt:operatingCostCenter, '0570025003'}
    owner: ${opt:owner, 'SlcItdNotifications@magellanhealth.com'}
    securityContact: ${opt:securityContact, 'SlcItdNotifications@magellanhealth.com'}

    # Allowed: public, private, confidential, pii/phi
    confidentiality: ${opt:confidentiality, 'pii/phi'}

    # Allowed values: hipaa, sox, fips, other, none
    compliance: ${opt:compliance, 'hipaa'}

  # Used in naming of resources.
  # Allowed values: dev, test, prod.
  stages:
    dev: Dev
    test: Test
    prod: Prod

  topicName: ${self:custom.parent}-${self:custom.codename}-${self:service}-SnsTopic
  topicArn:
    Fn::Join:
      [
        "",
        [
          "arn:aws:sns:",
          Ref: AWS::Region,
          ":",
          Ref: AWS::AccountId,
          ":",
          Fn::GetAtt: SnsTopic.TopicName,
        ],
      ]

# Serverless provider settings.
provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  stage: ${opt:stage, 'dev'}

  # CloudFormation stack and API names.
  stackName: ${self:custom.parent}-${self:custom.codename}-${self:service}-Stack
  apiName: ${self:custom.parent}-${self:custom.codename}-${self:service}-Api

  # Service wide environment variables.
  environment:
    TOPIC_NAME: ${self:custom.topicName}
    TOPIC_ARN: ${self:custom.topicArn}
    DYNAMODB_TABLE: ${self:custom.parent}-${self:custom.codename}-${self:service}-${self:custom.stages.${self:provider.stage}}-Table

  # IAM role statements so services can be accessed in AWS account.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: ${self:custom.topicArn}

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:dynamodb:*:*:table/"
            - Ref: NicknamesGqlDynamoDbTable

  # Deployment bucket name. Default is generated by the framework if not specified.
  deploymentBucket:
    name: ${self:provider.stage}-serenity-mh-artifacts
    serverSideEncryption: AES256

  # S3 prefix under which deployed artifacts should be stored.
  deploymentPrefix: cloudformation

  # Overwrite the default IAM role which is used for all functions.
  role:
    Fn::ImportValue: MagellanStandardLambdaS3VPC

  # Note that VPC endpoint-enabled services should already have
  # their VPC endpoints created and associated with route tables & traffic
  # related to the below subnets and security groups. In this service, we're
  # relying on the VPC endpoints: SNS

  # Optional VPC, ensure for security.
  vpc:
    # MH-Core-Infrastructure-Security-Groups-WebAccessSecurityGroup
    securityGroupIds:
      - Fn::ImportValue: ${self:provider.stage}-WebAccessSecurityGroup

    # MH-Infrastructure-Core-Networking-PrivateSubnet1
    # MH-Infrastructure-Core-Networking-PrivateSubnet2
    subnetIds:
      - Fn::ImportValue: ${self:provider.stage}-PrivateSubnet1
      - Fn::ImportValue: ${self:provider.stage}-PrivateSubnet2

  # API keys to secure endpoints.
  apiKeys:
    - ${self:custom.parent}-${self:custom.codename}-${self:service}-ApiKey
  usagePlan:
    quota:
      limit: "5000"
      offset: "2"
      period: MONTH
    throttle:
      burstLimit: "200"
      rateLimit: "100"

  # Optional CloudFormation stack tags to tag all resources
  # that are taggable.
  stackTags:
    Parent: ${self:custom.parent}
    Codename: ${self:custom.codename}
    Service: ${self:service}
    Name: ${self:custom.tags.name}
    Environment: ${self:custom.tags.environment}
    Application: ${self:custom.tags.application}
    ApplicationVersion: ${self:custom.tags.applicationVersion}
    InfrastructureVersion: ${self:custom.tags.infrastructureVersion}
    Tier: ${self:custom.tags.tier}
    ProjectCostCenter: ${self:custom.tags.projectCostCenter}
    OperatingCostCenter: ${self:custom.tags.operatingCostCenter}
    Owner: ${self:custom.tags.owner}
    SecurityContact: ${self:custom.tags.securityContact}
    Confidentiality: ${self:custom.tags.confidentiality}
    Compliance: ${self:custom.tags.compliance}

  # Optional service tags not applied in the stackTags properties.
  tags:

package:
  include:
    - functions/**
  exclude:
    - .git/**
    - .idea/**
    - .vscode/**
    - tests/**

functions:
  read:
    handler: functions/graphql.handler
    name: ${self:custom.parent}-${self:custom.codename}-${self:service}-${self:custom.stages.${self:provider.stage}}-GraphQl-Func
    events:
      - http:
          path: graphql
          method: any
          cors: "true"
          private: "true"

    # Optional function tags not applied in the stackTags properties.
    tags:

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/sns.yml)}

  - Outputs:
      ${file(resources/outputs.yml)}
