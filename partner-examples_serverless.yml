org: serverlesspartners
app: orders
service: orders-gateway

frameworkVersion: '>=1.38.0 <2.0.0'

provider:
  name: aws
  runtime: python3.7
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:createTopic'
        - 'sns:deleteTopic'
        - 'sns:publish'
        - 'dynamodb:putItem'
      Resource:
        - '*'
  logs:
    restApi: true

functions:
  formSubmit:
    runtime: nodejs10.x
    handler: handler.submit
    events:
      - http:
          path: submit
          method: post
          cors: true
  formProcess:
    runtime: python3.7
    handler: handler.process
    events:
      - http:
          path: process
          method: post
          cors: true
  pingEndpoints:
    runtime: python3.7
    handler: ping.ping
    events:
      - schedule: rate(5 minutes)

resources:
  Resources:
    ordersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

outputs:
  ordersTableStreamArn: 
      Fn::GetAtt: [ordersTable, StreamArn]

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

package:
  individually: true
  exclude:
    - .git/**
    - .serverless_plugins/**