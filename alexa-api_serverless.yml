service: alexa-api
package:
  exclude:
    - ./**/**
  excludeDevDependencies: false
  include:
    - alexa_api/**

provider:
  name: aws
  runtime: python3.7
  stage: ${self:custom.environment}
  stackName: ${self:service}
  deploymentBucket:
    name: ${self:custom.deploymentBucket}
  environment:
    ENVIRONMENT: ${self:custom.environment}
    LOG_LEVEL: ${self:custom.logLevel}
    STAGE: ${self:custom.environment}
    TIMER_FENCE_ARN: ${self:custom.timerFenceStateMachineArn}
    DB_DEVICES_TABLE: ${self:custom.databaseTables.devicesTable}
    DB_INTENTS_TABLE: ${self:custom.databaseTables.dialogsTable}
    S3_CERTIFICATES: ${self:custom.certificatesBucket}
    S3_CLIENT_CERTIFICATES: ${self:custom.clientCertificatesBucket}
    IOT_CA_ROOT: ${self:custom.certs.caRoot}
    IOT_PRIV_PEM: ${self:custom.certs.privatePem}
    IOT_CERT_PEM: ${self:custom.certs.certificatePem}
    IOT_CLIENT_ID: ${self:custom.iot.clientId}
    IOT_ENDPOINT: ${self:custom.iot.endpoint}
    IOT_PORT: ${self:custom.iot.port}
    IOT_THING_NAME: ${self:custom.iot.thingName}
    IOT_DESIRED_TOPIC: ${self:custom.iot.desiredTopic}
    IOT_REPORTED_TOPIC: ${self:custom.iot.reportedTopic}
    IOT_BASE_TOPIC: ${self:custom.iot.baseTopic}
    OW_ENDPOINT: ${self:custom.openWeather.endpoint}
    OW_APPID: ${self:custom.openWeather.appid}
    OW_LAT: ${self:custom.openWeather.lat}
    OW_LON: ${self:custom.openWeather.lon}
  apiName: ${self:service}
  apiKeys:
    - ${self:service}

plugins:
  - serverless-plugin-composed-vars
  - serverless-pseudo-parameters
  - serverless-aws-resource-names
  - serverless-python-requirements
  - serverless-alexa-skills
  - serverless-kms-grants
  - serverless-iam-roles-per-function
  - serverless-s3-deploy
  - serverless-step-functions
  - serverless-domain-manager

custom:
  environment: ${opt:stage, "develop"}
  branch: ${opt:branch, 'develop'}
  customDomain:
    domainName: ${self:custom.serviceDomain}
    basePath: ${self:service}
    stage: ${self:custom.environment}
    createRoute53Record: false
  databaseTables:
    devicesTable: ${self:custom.serviceName}.devices
    dialogsTable: ${self:custom.serviceName}.dialogs
  pythonRequirements:
    dockerizePip: true
    usePoetry: true
    noDeploy:
      - awscli
      - black
      - boto3
      - botocore
      - mypy
      - pre-commit
      - pytest
      - pytest-coverage
    layer:
      name: AlexaApiPythonLayer
      description: Python Lambda layer for alexa-api
      compatibleRuntimes:
        - python3.7
    useDownloadCache: false
    useStaticCache: false
  output:
    file: ${env:DEPLOYMENT_INFO, 'deployment.toml'}
  serverless-aws-resource-names:
    source: mapping.json
    variables:
      functionPrefix: alexa-api${env:FEATURE_BRANCH_UNDERSCORED, ''}
  lambdaPrefixArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function
  timerFenceStateMachineArn: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:TimerFenceStateMachine
  tracing:
    lambda: true
    apiGateway: true
  tags:
    service: ${self:service}
  dashboard:
    lambda:
      enabled: true
  alexa:
    clientId: ${ssm.${self:custom.region}:/resource/alexa/client-id~true}
    clientSecret: ${ssm.${self:custom.region}:/resource/alexa/client-secret~true}
    vendorId: ${ssm.${self:custom.region}:/resource/alexa/vendor-id~true}
    localServerPort: 9500
  assets:
    auto: true
    targets:
      - bucket: ${self:custom.certificatesBucket}
        files:
          - source: certificates/
            globs:
              - '**/*.pem'
              - '**/*.crt'
              - '**/*.key'
      - bucket: ${self:custom.clientCertificatesBucket}
        files:
          - source: client_certificates/
            globs:
              - '**/*.pem'
              - '**/*.crt'
              - '**/*.key'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
        - xray:GetSamplingRules
        - xray:GetSamplingTargets
        - xray:GetSamplingStatisticSummaries
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: '*'
    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource: '*'

functions:
  get_config:
    description: Config for remote device
    module: alexa_api/controller
    handler: alexa_api.controller.get_config
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource:
          - arn:aws:s3:::${self:custom.certificatesBucket}
          - arn:aws:s3:::${self:custom.clientCertificatesBucket}

      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource:
          - arn:aws:s3:::${self:custom.certificatesBucket}/*
          - arn:aws:s3:::${self:custom.clientCertificatesBucket}/*
    events:
      - http:
          path: /config
          method: get
          private: true

  iot_to_sns_dispatcher:
   description: Sends SNS events from any IoT event
   module: alexa_api/controller
   handler: alexa_api.controller.iot_to_sns_dispatcher
   layers:
     - {Ref: PythonRequirementsLambdaLayer}
   iamRoleStatements:
     - Effect: "Allow"
       Action:
         - s3:ListBucket
       Resource: arn:aws:s3:::${self:custom.certificatesBucket}
     - Effect: "Allow"
       Action:
         - s3:GetObject
       Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
     - Effect: "Allow"
       Action:
         - SNS:Publish
         - SNS:SetTopicAttributes
       Resource: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:DeviceChanged
     - Effect: "Allow"
       Action:
         - dynamodb:Scan
         - dynamodb:Query
         - dynamodb:UpdateItem
       Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
     - Effect: "Allow"
       Action:
        - iot:Publish
        - iot:Connect
        - iot:Subscribe
        - iot:Receive
       Resource:
        - arn:aws:iot:#{AWS::Region}:#{AWS::AccountId}:topicfilter/${self:custom.iot.baseTopic}/*
        - arn:aws:iot:#{AWS::Region}:#{AWS::AccountId}:topic/${self:custom.iot.baseTopic}/*
        - arn:aws:iot:#{AWS::Region}:#{AWS::AccountId}:client/${self:custom.iot.clientId}
     - Effect: Allow
       Action:
         - lambda:InvokeFunction
       Resource: '*'
   environment:
     SNS_ARN: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:DeviceChanged
   events:
     - iot:
         name: 'iot_to_sns_dispatcher'
         sql: "SELECT * FROM '${self:custom.iot.baseTopic}/#'"
         description: 'Gets all IoT events and resend them as a SNS message'

  create_device:
   description: Endpoint for creating a new device
   module: alexa_api/controller
   handler: alexa_api.controller.create_device
   layers:
     - {Ref: PythonRequirementsLambdaLayer}
   iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Scan
       - dynamodb:Query
       - dynamodb:PutItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
    - Effect: "Allow"
      Action:
        - dynamodb:Scan
        - dynamodb:Query
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}/index/*
    - Effect: "Allow"
      Action:
        - s3:ListBucket
      Resource: arn:aws:s3:::${self:custom.certificatesBucket}
    - Effect: "Allow"
      Action:
        - s3:GetObject
      Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
   events:
    - http:
        path: /devices
        method: post

  update_device:
    description: Endpoint for updating devices
    module: alexa_api/controller
    handler: alexa_api.controller.update_device
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}/index/*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - http:
          path: /devices/{device_id}
          method: put

  delete_device:
    description: Endpoint for deleting a device
    module: alexa_api/controller
    handler: alexa_api.controller.delete_device
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - http:
          path: /devices/{device_id}
          method: delete

  get_device:
    description: Enpoint for getting device values
    module: alexa_api/controller
    handler: alexa_api.controller.get_device
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}/index/*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - http:
          path: /devices/{device_id}
          method: get

  get_device_list:
    description: List of active devices
    module: alexa_api/controller
    handler: alexa_api.controller.get_device_list
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
    events:
      - http:
          path: /devices
          method: get

  iot_send_order:
    description: Publishes an IoT order and waits confirmation
    module: alexa_api/controller
    handler: alexa_api.controller.iot_send_order
    timeout: 30
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
      - Effect: "Allow"
        Action:
          - iot:Publish
          - iot:Connect
          - iot:Subscribe
          - iot:Receive
        Resource:
          - arn:aws:iot:#{AWS::Region}:#{AWS::AccountId}:topicfilter/${self:custom.iot.baseTopic}/*
          - arn:aws:iot:#{AWS::Region}:#{AWS::AccountId}:topic/${self:custom.iot.baseTopic}/*
          - arn:aws:iot:#{AWS::Region}:#{AWS::AccountId}:client/${self:custom.iot.clientId}
    events:
      - http:
          path: /change/{device_id}
          method: post

  timer_fence:
    description: checks if the device has a timer and starts it
    module: alexa_api/controller
    handler: alexa_api.controller.timer_fence
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
      - Effect: Allow
        Action:
          - states:StartExecution
          - states:ListExecutions
        Resource: ${self:custom.timerFenceStateMachineArn}
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
    events:
      - sns:
          arn: !Ref SNSTopic
          topicName: DeviceChanged
          filterPolicy:
            action:
              - reported
            status:
              - "True"

  skill_handler:
    description: Alexa skill controller
    module: alexa_api/controller
    handler: alexa_api.controller.skill_handler
    timeout: 50
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.dialogsTable}*
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.dialogsTable}/index/*
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.databaseTables.devicesTable}*
    events:
      - alexaSkill: amzn1.ask.skill.e9533954-285e-4996-aadf-ca1d531d9e65

  stop_device:
    description: stops a device depending on the timer fence value
    module: alexa_api/controller
    handler: alexa_api.controller.stop_device
    timeout: 50
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:ListBucket
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:custom.certificatesBucket}/*
      - Effect: Allow
        Action:
          - states:ListExecutions
        Resource: ${self:custom.timerFenceStateMachineArn}
      - Effect: "Allow"
        Action:
          - iot:Publish
          - iot:Connect
          - iot:Subscribe
          - iot:Receive
        Resource:
          - arn:aws:iot:#{AWS::Region}:#{AWS::AccountId}:topicfilter/${self:custom.iot.baseTopic}/*
          - arn:aws:iot:#{AWS::Region}:#{AWS::AccountId}:topic/${self:custom.iot.baseTopic}/*
          - arn:aws:iot:#{AWS::Region}:#{AWS::AccountId}:client/${self:custom.iot.clientId}

stepFunctions:
  stateMachines:
    TimerFenceStateMachine:
      name: TimerFenceStateMachine
      definition:
        StartAt: StartTimer
        States:
          StartTimer:
            Type: Wait
            SecondsPath: $.delay
            Next: StopDevice
          StopDevice:
            Type: Task
            Resource: ${self:custom.lambdaPrefixArn}:${self:custom.serviceName}_stop_device
            Next: CheckIotStatus
          CheckIotStatus:
            Type: Choice
            Choices:
            - Variable: "$.result"
              NumericEquals: 0
              Next: Completed
            - Variable: "$.result"
              NumericEquals: 1
              Next: Failed
            - Variable: "$.result"
              NumericEquals: 2
              Next: SendAlarm
          Completed:
            Type: Succeed
          Failed:
            Type: Fail
          SendAlarm:
            Type: Fail

resources:
  Resources:
    AlexaApiDevicesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.databaseTables.devicesTable}
        AttributeDefinitions:
          - AttributeName: device_id
            AttributeType: S
          - AttributeName: position
            AttributeType: N
          - AttributeName: GPIO
            AttributeType: N
        KeySchema:
          - AttributeName: device_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: by_position
            KeySchema:
              - AttributeName: position
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: by_GPIO
            KeySchema:
                - AttributeName: GPIO
                  KeyType: HASH
            Projection:
              ProjectionType: ALL
    AlexaApiDialogsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.databaseTables.dialogsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: intent_id
            AttributeType: S
          - AttributeName: iot_err
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: by_intent_id
            KeySchema:
              - AttributeName: intent_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: by_intent_id_and_iot_err
            KeySchema:
              - AttributeName: intent_id
                KeyType: HASH
              - AttributeName: iot_err
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    S3Bucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.certificatesBucket}
    S3ClientBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.clientCertificatesBucket}

    SNSTopic:
      Type: AWS::SNS::Topic
      DeletionPolicy: Retain
      Properties:
        TopicName: DeviceChanged
