
service: testing

custom:
  settings:
    POSTS_TABLE: UserReg
    UserPoolId: "us-east-1_dxsLZ05D0"
    ClientId: "6r6cdd31j334ilsbis5cap9pah"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  environment: ${self:custom.settings}

  iamRoleStatements:
   - Effect: "Allow"
     Action: '*'
     Resource:
      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.POSTS_TABLE}"
      - "arn:aws:cognito-idp:us-east-1:863001571818:userpool/us-east-1_VgnmxXYMF"
      - "arn:aws:cognito-idp:us-east-1:863001571818:userpool/us-east-1_dxsLZ05D0"

functions:
  createUser:
    handler: handler.createUser
    events:
    - http:
        path: /post
        method: post
  
  signup:
    handler: handler.signup
    events:
    - http:
        path: /post/addusers
        method: post
  login:
    handler: handler.login
    events:
    - http:
        path: /getUser
        method: post
    
  TestingUser:
    handler: handler.testing
    events:
    - http:
        path: /testing
        method: post
        
  UserVerification:
    handler: handler.auth
    events:
    - http:
        path: /auth
        method: post
            
  GetUserAttribute:
    handler: handler.getUser
    events:
    - http:
        path: /getUser
        method: GET
        
  AdminDeleteUser:
    handler: handler.checkUserExists
    events:
    - http:
        path: /admindlt
        method: POST


resources:
  Resources:
    UserRegisterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.POSTS_TABLE}
        



        