# TO USE:
# serverless deploy -v --stage ENVIRONMENT_NAME --region us-west-2
service: lambdasharp-log-parser
provider:
  name: aws
  runtime: dotnetcore1.0
  profile: lambdasharp
  region: ${opt:region}
  timeout: 300
  memorySize: 256
  stage: dev
  versionFunctions: false
  environment:
    LOGS_BUCKET: ${self:custom.environmentName}-lambda-sharp-s3-logs

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
      Resource:
        - Fn::Join: ['', ['arn:aws:s3:::', Ref: ServerlessDeploymentBucket]]
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
        - 's3:PutObject' 
        - 's3:GetObject' 
        - 's3:DeleteObject'  
      Resource:
        - Fn::Join: ['', ['arn:aws:s3:::', Ref: S3Logs]]
        - Fn::Join: ['', ['arn:aws:s3:::', Ref: S3Logs, '/*']]
custom:
  environmentName: ${opt:stage}
  logGroupName: /lambda-sharp/log-parser/dev
  logStreamName: test-log-stream

# you can add packaging information here
package:
  artifact: ../bin/release/netcoreapp1.0/deploy-package.zip

functions:
  LogParser:
    # Assembly::Namespace.Class::FunctionName
    handler: LogParser::LogParser.Function::Handler
    name: ${opt:stage}-log-parser
    events:
      - cloudwatchLog: ${self:custom.logGroupName}

resources: 
  Parameters:
    DeploymentStage:
      Description: Deployment name (e.g. production, stage)
      Type: String
      Default: ${self:custom.environmentName}
    LogGroupName:
      Description: The name of the log group
      Type: String
      Default: ${self:custom.logGroupName}
    LogStreamName:
      Description: The name of the log stream
      Type: String
      Default: ${self:custom.logStreamName}
   
   # Get the resources from the cloud formation template
  Resources: 
    CloudWatchLogGroup: ${file(./resources-cfn.yml):Resources.CloudWatchLogGroup}
    CloudWatchLogStream: ${file(./resources-cfn.yml):Resources.CloudWatchLogStream}
    S3Logs: ${file(./resources-cfn.yml):Resources.S3Logs}
    