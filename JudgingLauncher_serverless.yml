# serverless.yml
service: CompleteJudging

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-2
  stage: ${opt:stage, "development"}

  environment:
    ACTIVE_TOURNAMENT_KEYS: ${self:provider.stage}-activeTournamentKeys
    TOURNAMENT_INFO: ${self:provider.stage}-tournamentInfo
    ACTIVE_POOLS: ${self:provider.stage}-activePools
    ACTIVE_RESULTS: ${self:provider.stage}-activeResults
    RESULTS_BUCKET: ${self:provider.stage}-completejudging-results
    CONSTANTS_BUCKET: ${self:provider.stage}-completejudging-constants

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACTIVE_TOURNAMENT_KEYS}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TOURNAMENT_INFO}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACTIVE_POOLS}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACTIVE_RESULTS}"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectAcl
      Resource: "arn:aws:s3:::${self:provider.environment.RESULTS_BUCKET}/*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:PutObjectAcl
      Resource: "arn:aws:s3:::${self:provider.environment.CONSTANTS_BUCKET}/*"

functions:
  createTournament:
    handler: source/createTournament.handler
    events:
      - http:
          path: createTournament
          method: post
          cors: true
  getActiveTournaments:
    handler: source/getActiveTournaments.handler
    events:
      - http:
          path: getActiveTournaments
          method: get
          cors: true
  hideTournament:
    handler: source/createTournament.handler
    events:
      - http:
          path: hideTournament
          method: post
          cors: true
  finishTournament:
    handler: source/createTournament.handler
    events:
      - http:
          path: finishTournament
          method: post
          cors: true
  setPlayingPool:
    handler: source/setPlayingPool.handler
    events:
      - http:
          path: tournamentName/{tournamentName}/setPlayingPool
          method: post
          cors: true
  getPlayingPool:
    handler: source/getPlayingPool.handler
    events:
      - http:
          path: tournamentName/{tournamentName}/getPlayingPool
          method: get
          cors: true
  reportJudgeScore:
    handler: source/reportJudgeScore.handler
    events:
      - http:
          path: reportJudgeScore
          method: post
          cors: true
  getPoolResults:
    handler: source/getPoolResults.handler
    events:
      - http:
          path: tournamentName/{tournamentName}/divisionIndex/{divisionIndex}/roundIndex/{roundIndex}/poolIndex/{poolIndex}/getPoolResults
          method: get
          cors: true
  getBackupResults:
    handler: source/getBackupResults.handler
    events:
      - http:
          path: judge/{judgeName}/time/{startTime}/getBackupResults
          method: get
          cors: true
  setScoreboardData:
    handler: source/setScoreboardData.handler
    events:
      - http:
          path: tournamentName/{tournamentName}/setScoreboardData
          method: post
          cors: true
  setJudgeState:
    handler: source/setJudgeState.handler
    events:
      - http:
          path: tournamentName/{tournamentName}/setJudgeState
          method: post
          cors: true
  exportTournamentData:
    handler: source/exportTournamentData.handler
    events:
      - http:
          path: tournamentName/{tournamentName}/exportTournamentData
          method: get
          cors: true
  importTournamentData:
    handler: source/importTournamentData.handler
    events:
      - http:
          path: tournamentName/{tournamentName}/importTournamentData
          method: post
          cors: true
  clearPoolResults:
    handler: source/clearPoolResults.handler
    events:
      - http:
          path: tournamentName/{tournamentName}/divisionIndex/{divisionIndex}/roundIndex/{roundIndex}/poolIndex/{poolIndex}/clearPoolResults
          method: post
          cors: true
  stopPlayingPools:
    handler: source/stopPlayingPools.handler
    events:
      - http:
          path: tournamentName/{tournamentName}/stopPlayingPools
          method: post
          cors: true

resources:
  Resources:
    activeTournamentKeys:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ACTIVE_TOURNAMENT_KEYS}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    tournamentInfo:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TOURNAMENT_INFO}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    activePools:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ACTIVE_POOLS}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    activeResults:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ACTIVE_RESULTS}
        AttributeDefinitions:
          - AttributeName: judgeName
            AttributeType: S
          - AttributeName: time
            AttributeType: N
        KeySchema:
          - AttributeName: judgeName
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    resultsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.RESULTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
    constantsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.CONSTANTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
