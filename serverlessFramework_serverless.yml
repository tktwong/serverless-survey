# For full config options, check the docs:
#    docs.serverless.com

service: dcf-dfym2c
plugins:
  - serverless-offline
  - serverless-step-functions

provider:
  name: aws
  region: us-east-1
  runtime: nodejs8.10
  stage: dev
  stageAbbr: d
  #d-dev stage, cf - for cloudFormation, dfym2c - project code at dev stage
  pr_prefix: ${self:provider.stageAbbr}cf-${self:provider.stageAbbr}fym2c 

# this role is used for Step functions only. Lambda function roles are defined in Resources section below
iamRoleStatements:
    Effect: "Allow"
    Action:
        - "states:StartExecution"
    Resource:
        - "*"

functions:
  # this POST function does not have API Gateway endpoint now (commented out below - but can be added any time).
  # It is started in Console (using 'Test' button) just to populate usersTable in DynamoDB with
  # pseudo users just once - right after CloudFormation deployment is complete.
  FYM-post:
    handler: find-the-match-post.handler  #POST
    role: dcfDfym2cFymAddMessageRole

  # Since we work with pseudo-users only the USER Deletion function
  # is not used. But the function is kept just in case
  # FYM-delete:
    # handler: find-the-match-delete.handler  #DELETE
    # role: dcfDfym2cFymDeleteRole

  FYM-get:
    handler: find-the-match-get.handler  #GET
    role: dcfDfym2cFymAddMessageRole
    environment:
      statemachine_arn:
        'Fn::Join':
        - ':'
        -
          - 'arn:aws:states'
          - Ref: 'AWS::Region'
          - Ref: 'AWS::AccountId'
          - 'stateMachine:dcfDfym2cStepPollyCWatch'

  FYMaddMessage:
    handler: fymAddMessage.handler
    role: dcfDfym2cFymAddMessageRole
    environment: 
      DB_TABLE_NAME: dcf-dfym2c-pollyTable
      QUEUE_URL:
        'Fn::Join':
        - ''
        -
          - 'https://sqs.'
          - Ref: 'AWS::Region'
          - '.amazonaws.com/'
          - Ref: 'AWS::AccountId'
          - '/dcfDfym2cTextToSpeechQueue'

  FYMgetMessage:
    handler: fymGetMessage.handler
    role: dcfDfym2cFymAddMessageRole
    environment: 
      DB_TABLE_NAME: dcf-dfym2c-pollyTable
      statemachine_arn:
        'Fn::Join':
        - ':'
        -
          - 'arn:aws:states'
          - Ref: 'AWS::Region'
          - Ref: 'AWS::AccountId'
          - 'stateMachine:dcfDfym2cStepPollyCWatch'

  dcfDfym2cFYMconvertMessageToAudio:
    handler: fymConvertMessageToAudio.handler
    role: dcfDfym2cFymAddMessageRole
    memorySize: 800
    timeout: 30
    environment: 
      BUCKET_NAME: dcf-dfym2c-polly
      DB_TABLE_NAME: dcf-dfym2c-pollyTable
    events:
      - sqs:
          batchSize: 1
          enabled: true
          arn: 
            'Fn::GetAtt':
            - 'dcfDfym2cTextToSpeechQueue'
            - 'Arn'
            
  FYMimageUploadFromURL:
    handler: fymUrlToS3.handler
    role: dcfDfym2cFymAddMessageRole
    memorySize: 800
    timeout: 40 
    environment:
      BUCKET_NAME: dcf-dfym2c-rekognition

  FYMlocalImageUpload:
    handler: fymLocalImageUpload.handler
    role: dcfDfym2cFymAddMessageRole
    environment:
      BUCKET_NAME: dcf-dfym2c-rekognition

  FYMdeleteDataIn20Mins:
    handler: fymDeleteDataIn20Mins.handler
    role: dcfDfym2cFymAddMessageRole
    environment:
      DB_TABLE_NAME: dcf-dfym2c-pollyTable
      BUCKET_REK: dcf-dfym2c-rekognition
      BUCKET_POLLY: dcf-dfym2c-polly


#  STEP FUNCTIONS definition
stepFunctions:
  stateMachines:
    dcfDfym2cStepPollyCWatch:
      name: "dcfDfym2cStepPollyCWatch"
      definition:
        Comment: "DoInParallelPollyAndCWatch"
        StartAt: "PassData"
        States: 
          PassData: 
            Type: "Pass"
            InputPath: "$"
            ResultPath: "$"
            OutputPath: "$"
            Next: "DoInParallel"
          DoInParallel: 
            Type: "Parallel"
            End: true
            Branches: 
              - StartAt: "StartAudioMessageGeneration"
                States: 
                  StartAudioMessageGeneration: 
                    Type: "Task"
                    # I know that instead of passing arn text I have to use Fn::Join, but in case of 
                    # step function using Serverless I could not make it work. Should try with AWS SAM.
                    Resource: "arn:aws:lambda:us-east-1:@cc*^nt:function:dcf-dfym2c-dev-FYMaddMessage"
                    End: true
              - StartAt: "isFirstWithNewID"
                States: 
                  isFirstWithNewID: 
                    Type: "Choice"
                    Choices: 
                    -
                      Not: 
                        Variable: "$.lastFive"
                        StringEquals: "-0ULA"
                      Next: "EndNow"
                    Default: "Wait20MinsBeforeDelete"
                  EndNow: 
                    Type: "Pass"
                    End: true
                  Wait20MinsBeforeDelete: 
                    Type: "Wait"
                    Seconds: 300
                    Next: "DeleteImagesMp3sDynamoRecords"
                  DeleteImagesMp3sDynamoRecords: 
                    Type: "Task"
                    Resource: "arn:aws:lambda:us-east-1:@cc*^nt:function:dcf-dfym2c-dev-FYM-deleteDataIn20Mins"
                    End: true


    # events:
      # EVENTS AND SQS AND others are defined below in Resources section

# you can add CloudFormation resource templates here
resources:
  Resources:

    # Lambda roles
    dcfDfym2cFymPostRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: dcfDfym2cFymPostRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: dcfDfym2cFymPost
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/dcf-dfym2c-usersTable'
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: 'arn:aws:s3:::dfym-permanent-files'
    # since Delete user Lambda function is not USED so far its role was also commented out
    # dcfDfym2cFymDeleteRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: dcfDfym2cFymDeleteRole
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: dcfDfym2cFymDelete
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - logs:CreateLogGroup
    #                 - logs:CreateLogStream
    #                 - logs:PutLogEvents
    #               Resource: 
    #                 - 'Fn::Join':
    #                   - ':'
    #                   -
    #                     - 'arn:aws:logs'
    #                     - Ref: 'AWS::Region'
    #                     - Ref: 'AWS::AccountId'
    #                     - 'log-group:/aws/lambda/*:*:*'
    #             - Effect: Allow
    #               Action:
    #                 - dynamodb:DeleteItem
    #               Resource: 
    #                 - 'Fn::Join':
    #                   - ':'
    #                   -
    #                     - 'arn:aws:dynamodb'
    #                     - Ref: 'AWS::Region'
    #                     - Ref: 'AWS::AccountId'
    #                     - 'table/dcf-dfym2c-usersTable'
    dcfDfym2cFymGetRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: dcfDfym2cFymGetRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: dcfDfym2cFymGet
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/dcf-dfym2c-usersTable'
                - Effect: Allow
                  Action:
                    - states:*
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:states'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'stateMachine:dcfDfym2c*'
                - Effect: "Allow"
                  Action:
                    - "states:StartExecution"
                  Resource:
                    - "*"
    
    # in IAM Role definitions above I tried to apply Least Priveledge Principle.
    # In case of below permission I decided to save some time by giving some broader permissions
    dcfDfym2cFymAddMessageRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: dcfDfym2cFymAddMessageRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: dcfDfym2cFymAddMessage
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:*
                    - s3:*
                    - sqs:*
                    - polly:*
                    - rekognition:*
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - states:*
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:states'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'stateMachine:dcfDfym2c*' 
    
    # DYNAMO DB tables definition 
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dcf-dfym2c-usersTable
        AttributeDefinitions:
          - AttributeName: UserID
            AttributeType: S
          - AttributeName: criteriaSet
            AttributeType: S

        KeySchema:
          - AttributeName: UserID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: 'criteriaSet-index'
            KeySchema:
              - AttributeName: criteriaSet
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    # DYNAMO DB table FOR POLLY
    pollyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dcf-dfym2c-pollyTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
    # creating S3 bucket for polly
    pollyBucket:
      Type: AWS::S3::Bucket
      Properties:
       BucketName: dcf-dfym2c-polly

    # SQS used when using Polly service.
    # This SQS is enabled using CloudFormation 
    # in definition of Lambda function that uses this SQS 
    # - in definition of 'dcfDfym2cFYMconvertMessageToAudio' function above
    dcfDfym2cTextToSpeechQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: 'dcfDfym2cTextToSpeechQueue'
    
    # creating S3 bucket for REKOGNITION

    rekognitionBucket:
      Type: AWS::S3::Bucket
      Properties:
       BucketName: dcf-dfym2c-rekognition

    # API DEFINITION using SWAGGER
    FYMapi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Name: FYMapi
        Description: A demo API for FYM
        Body:
          swagger: "2.0"
          info:
            version: "2018-11-15T18:34:04Z"
            title: "FYMapi"
          host: "lmpyzv9fz8.execute-api.us-east-1.amazonaws.com"
          basePath: "/development"
          schemes:
          - "https"
          paths:
            /find-your-match:
              # post:
              #   consumes:
              #   - "application/json"
              #   produces:
              #   - "application/json"
              #   parameters:
              #   - name: "accessToken"
              #     in: "query"
              #     required: true
              #     type: "string"
              #   - in: "body"
              #     name: "candidate"
              #     required: true
              #     schema:
              #       $ref: "#/definitions/candidate"
              #   responses:
              #     '200':
              #       description: "200 response"
              #       schema:
              #         $ref: "#/definitions/Empty"
              #       headers:
              #         Access-Control-Allow-Origin:
              #           type: "string"
              #   security:
              #   - FYM-Cognito-cognito-authorizer: []
              #   x-amazon-apigateway-request-validator: "Validate body"
              #   x-amazon-apigateway-integration:
              #     uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:@cc*^nt:function:dcf-dfym2c-dev-FYM-post/invocations"
              #     responses:
              #       default:
              #         statusCode: "200"
              #         responseParameters:
              #           method.response.header.Access-Control-Allow-Origin: "'*'"
              #     requestTemplates:
              #       application/json: "#set($inputRoot = $input.path('$'))\n\n{\n    \"id\"\
              #         \ : \"$inputRoot.candidate.id\",\n    \"userName\" : \"$inputRoot.candidate.userName\"\
              #         ,\n    \"otherDetails\" : \"$inputRoot.candidate.otherDetails\",\n   \
              #         \ \"accessToken\" : \"$input.params('accessToken')\"\n}\n"
              #     passthroughBehavior: "when_no_templates"
              #     httpMethod: "POST"
              #     contentHandling: "CONVERT_TO_TEXT"
              #     type: "aws"
              # delete:
              #   consumes:
              #   - "application/json"
              #   produces:
              #   - "application/json"
              #   parameters:
              #   - name: "accessToken"
              #     in: "query"
              #     required: true
              #     type: "string"
              #   - name: "candidateID"
              #     in: "query"
              #     required: true
              #     type: "string"
              #   responses:
              #     '200':
              #       description: "200 response"
              #       schema:
              #         $ref: "#/definitions/Empty"
              #       headers:
              #         Access-Control-Allow-Origin:
              #           type: "string"
              #   security:
              #   - FYM-Cognito-cognito-authorizer: []
              #   x-amazon-apigateway-request-validator: "Validate query string parameters and\
              #     \ headers"
              #   x-amazon-apigateway-integration:
              #     uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:@cc*^nt:function:dcf-dfym2c-dev-FYM-delete/invocations"
              #     responses:
              #       default:
              #         statusCode: "200"
              #         responseParameters:
              #           method.response.header.Access-Control-Allow-Origin: "'*'"
              #     requestTemplates:
              #       application/json: "{\n    \"accessToken\": \"$util.escapeJavaScript($input.params('accessToken'))\"\
              #         ,\n    \"candidateID\": \"$util.escapeJavaScript($input.params('candidateID'))\"\
              #         \n\n}"
              #     passthroughBehavior: "when_no_templates"
              #     httpMethod: "POST"
              #     contentHandling: "CONVERT_TO_TEXT"
              #     type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'DELETE,POST,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
            /find-your-match/{type}:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "type"
                  in: "path"
                  required: true
                  type: "string"
                - name: "accessToken"
                  in: "query"
                  required: true
                  type: "string"
                - name: "candidateID"
                  in: "query"
                  required: true
                  type: "string"
                - name: "criteriaSet"
                  in: "query"
                  required: true
                  type: "string"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - FYM-Cognito-cognito-authorizer: []
                x-amazon-apigateway-request-validator: "Validate query string parameters and\
                  \ headers"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:@cc*^nt:function:dcf-dfym2c-dev-FYM-get/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"accessToken\": \"$util.escapeJavaScript($input.params('accessToken'))\"\
                      ,\n    \"type\": \"$util.escapeJavaScript($input.params('type'))\",\n\
                      \    \"criteriaSet\": \"$util.escapeJavaScript($input.params('criteriaSet'))\"\
                      ,\n    \"candidateID\": \"$util.escapeJavaScript($input.params('candidateID'))\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
            /start-relations:
              post:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  credentials: "arn:aws:iam::@cc*^nt:role/APIGatewayToStepFunctions"
                  uri: "arn:aws:apigateway:us-east-1:states:action/StartExecution"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "## #set($inputRoot = $input.path('$')) {\n##     \"a\"\
                      \ : \"$inputRoot.a\",\n##     \"b\" : \"$inputRoot.b\",\n\n{\n    \"input\"\
                      : \"$util.escapeJavaScript($input.json('$'))\",\n    \"stateMachineArn\"\
                      : \"arn:aws:states:us-east-1:@cc*^nt:stateMachine:find-the-match-start-relations-step-functions\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
            /start-relations/audio:
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
            /start-relations/audio/{type}:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "type"
                  in: "path"
                  required: true
                  type: "string"
                - name: "accessToken"
                  in: "query"
                  required: true
                  type: "string"
                - name: "candidateID"
                  in: "query"
                  required: true
                  type: "string"
                - name: "params"
                  in: "query"
                  required: true
                  type: "string"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - FYM-Cognito-cognito-authorizer: []
                x-amazon-apigateway-request-validator: "Validate query string parameters and\
                  \ headers"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:@cc*^nt:function:dcf-dfym2c-dev-FYMgetMessage/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"type\": \"$util.escapeJavaScript($input.params('type'))\"\
                      ,\n    \"candidateID\": \"$util.escapeJavaScript($input.params('candidateID'))\"\
                      ,\n    \"params\": \"$util.escapeJavaScript($input.params('params'))\"\
                      ,\n    \"accessToken\": \"$util.escapeJavaScript($input.params('accessToken'))\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
            /start-relations/imagerekog:
              get:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "accessToken"
                  in: "query"
                  required: true
                  type: "string"
                - name: "candidateID"
                  in: "query"
                  required: true
                  type: "string"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - FYM-Cognito-cognito-authorizer: []
                x-amazon-apigateway-request-validator: "Validate query string parameters and\
                  \ headers"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:@cc*^nt:function:dcf-dfym2c-dev-FYMimageUploadFromURL/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"accessToken\": \"$util.escapeJavaScript($input.params('accessToken'))\"\
                      ,\n    \"type\": \"$util.escapeJavaScript($input.params('type'))\",\n\
                      \    \"candidateID\": \"$util.escapeJavaScript($input.params('candidateID'))\"\
                      ,\n    \"imageUrl\": \"$util.escapeJavaScript($input.params('imageUrl'))\"\
                      \n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              post:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                parameters:
                - name: "accessToken"
                  in: "query"
                  required: true
                  type: "string"
                - name: "candidateID"
                  in: "query"
                  required: true
                  type: "string"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                security:
                - FYM-Cognito-cognito-authorizer: []
                x-amazon-apigateway-request-validator: "Validate body"
                x-amazon-apigateway-integration:
                  uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:@cc*^nt:function:dcf-dfym2c-dev-FYMlocalImageUpload/invocations"
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\n    \"image\": $input.json('$'),\n    \"candidateID\"\
                      : \"$util.escapeJavaScript($input.params('candidateID'))\",\n    \"accessToken\"\
                      : \"$util.escapeJavaScript($input.params('accessToken'))\"\n}"
                  passthroughBehavior: "when_no_templates"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws"
              options:
                consumes:
                - "application/json"
                produces:
                - "application/json"
                responses:
                  '200':
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          securityDefinitions:
            FYM-Cognito-cognito-authorizer:
              type: "apiKey"
              name: "Authorization"
              in: "header"
              x-amazon-apigateway-authtype: "cognito_user_pools"
              x-amazon-apigateway-authorizer:
                providerARNs:
                - "arn:aws:cognito-idp:us-east-1:@cc*^nt:userpool/us-east-1_6wmO1o7KH"
                type: "cognito_user_pools"
          definitions:
            Empty:
              type: "object"
              title: "Empty Schema"
            candidate:
              type: "object"
              properties:
                otherDetails:
                  type: "string"
                id:
                  type: "string"
                userName:
                  type: "string"
              title: "candidate"
          x-amazon-apigateway-request-validators:
            Validate body:
              validateRequestParameters: false
              validateRequestBody: true
            Validate query string parameters and headers:
              validateRequestParameters: true
              validateRequestBody: false

  Outputs:
    NewOutput:
      Description: "Description for the output"
      Value: "Some output value"
