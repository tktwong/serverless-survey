service: exampleService

custom:
  host:
    ${opt:host, 'local'}
  profile:
    ci:
    local: medly-${opt:stage}
  databaseCredentials: ${ssm:/aws/reference/secretsmanager/exampleDatabaseCredentials~true}

provider:
  name: aws
  stage: ${opt:stage, 'sandbox'}
  profile: ${self:custom.profile.${self:custom.host}}
  runtime: java11
  memorySize: 2048
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"

  apiGateway:
    restApiId: ${ssm:/${opt:stage}/exampleServiceRestApiId}
    restApiRootResourceId: ${ssm:/${opt:stage}/exampleServiceApiRootResourceId}
    description: API Gateway for example

  vpc:
    securityGroupIds:
      - Ref: LambdaSecurityGroup
    subnetIds:
      "Fn::Split":
        - ","
        - ${ssm:/${opt:stage}/exampleServicePrivateSubnets}

resources:
  Resources:
    LambdaSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: ${self:service}-${self:provider.stage}-lambda
        GroupDescription: Allow all outbound traffic, no inbound
        SecurityGroupIngress:
          - IpProtocol: -1
            CidrIp: 127.0.0.1/32
        VpcId: ${ssm:/${opt:stage}/exampleServiceVpcId}

package:
  artifact: kotlin-micronaut-example-0.1-all.jar

functions:
  exampleApi:
    handler: example.api.StreamLambdaHandler::handleRequest
    description: Lambda function for the example API
    timeout: 20
    environment:
      DATABASE_URL: ${self:custom.databaseCredentials.url}
      DATABASE_USERNAME: ${self:custom.databaseCredentials.username}
      DATABASE_PASSWORD: ${self:custom.databaseCredentials.password}
    events:
      - http:
          path: /{proxy+}
          method: any

  exampleEventHandler:
    handler: example.event.exampleEventListener
    description: Lambda function for the example Event Handler
    timeout: 20
    environment:
      DATABASE_URL: ${self:custom.databaseCredentials.url}
      DATABASE_USERNAME: ${self:custom.databaseCredentials.username}
      DATABASE_PASSWORD: ${self:custom.databaseCredentials.password}
    events:
      - stream:
          arn: ${ssm:/${opt:stage}/prescriptionStreamARN}
          batchSize: 100
          maximumRetryAttempts: 10
          startingPosition: LATEST
          enabled: true
