service:
  name: poc-ws-graphql${opt:developerStack, ''}

provider:
  name: aws
  runtime: nodejs12.x

plugins:
  - serverless-dynamodb-local
  - serverless-appsync-plugin
  - serverless-appsync-offline
  - serverless-offline

custom:
  appSync: # appsync plugin configuration
    name: poc-ws-graphql${opt:developerStack, ''}
    authenticationType: API_KEY # use API_KEY
    dataSources:
      - type: AMAZON_DYNAMODB
        name: paymentRequestSource # name of the resource
        config:
          tableName: ${self:service}-${self:provider.stage}-payment-requests-table # name of our DynamoDB table
    mappingTemplates:
      - dataSource: paymentRequestSource
        type: Query
        field: getPaymentRequests # from the query in schema.graphql
        request: "get_payment_requests/request.vtl"
        response: "get_payment_requests/response.vtl"
      - dataSource: paymentRequestSource
        type: Query
        field: getPaymentRequest # from the query in schema.graphql
        request: "get_payment_request/request.vtl"
        response: "get_payment_request/response.vtl"  
      - dataSource: paymentRequestSource
        type: Mutation
        field: createPaymentRequest # from the mutation in schema.graphql
        request: "put_payment_request/request.vtl"
        response: "put_payment_request/response.vtl"
      - dataSource: paymentRequestSource
        type: Mutation
        field: updatePaymentRequest # from the mutation in schema.graphql
        request: "update_payment_request/request.vtl"
        response: "update_payment_request/response.vtl"  
    schema: schema.graphql
  appsync-offline: # appsync-offline configuration
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
      server:
        port: 8000
  dynamodb:
    stages:
      - dev    
resources:
  Resources:
    paymentRequestTable: ${file(resources/paymentRequestTable.yml)}
