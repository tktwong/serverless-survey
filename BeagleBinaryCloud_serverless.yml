# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: BeagleBoneBackend

custom:
  sensorTableName: 'Sensor'
  dataTableName: 'SensorData'
  userTableName: 'User'

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["SensorDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["DataDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["UserDynamoDBTable", "Arn" ] }
  environment:
    SENSOR_TABLE_NAME: ${self:custom.sensorTableName}
    DATA_TABLE_NAME: ${self:custom.dataTableName}
    USER_TABLE_NAME: ${self:custom.userTableName}

package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

#Sensor Stuff
functions:
  createSensor:
    handler: com.serverless.SensorFiles.CreateSensorHandler
    events:
      - http:
          path: /sensors
          method: post
          cors: true

  deleteSensor:
    handler: com.serverless.SensorFiles.DeleteSensorHandler
    events:
      - http:
          path: /sensors/{id}
          method: delete
          cors: true
  getSensor:
    handler: com.serverless.SensorFiles.GetSensorHandler
    events:
      - http:
          path: /sensors/{id}
          method: get
          cors: true
  getSensorByExternalAddress:
    handler: com.serverless.SensorFiles.GetSensorByExternalAddressHandler
    events:
      - http:
          path: /sensors/getByExternal/{address}
          method: get
          cors: true
  listSensor:
    handler: com.serverless.SensorFiles.ListSensorsHandler
    events:
      - http:
          path: /sensors
          method: get
          cors: true


  #Sensor Data stuff

  deleteSensorData:
    handler: com.serverless.SensorDataFiles.DeleteSensorDataHandler
    events:
      - http:
          path: /data/{id}
          method: delete
          cors: true

  getSensorData:
    handler: com.serverless.SensorDataFiles.GetSensorDataHandler
    events:
      - http:
          path: /data/{id}
          method: get
          cors: true

  getSensorDataBySensor:
    handler: com.serverless.SensorDataFiles.GetSensorDataBySensorHandler
    events:
      - http:
          path: /data/bySensor/{sensorId}
          method: get
          cors: true

  #Userstuff

  createUser:
    handler: com.serverless.UserFiles.CreateUserHandler
    events:
      - http:
          path: /users
          method: post
          cors: true

  deleteUser:
    handler: com.serverless.UserFiles.DeleteUserHandler
    events:
      - http:
          path: /users/{id}
          method: delete
          cors: true

  getUser:
    handler: com.serverless.UserFiles.GetUserHandler
    events:
      - http:
          path: /users/{id}
          method: get
          cors: true

  getUserSensors:
    handler: com.serverless.UserFiles.GetUserSensorsHandler
    events:
      - http:
          path: /user/getSensors/{id}
          method: get
          cors: true
  listUsers:
    handler: com.serverless.UserFiles.ListUsersHandler
    events:
      - http:
          path: /users
          method: get
          cors: true

  loginUser:
    handler: com.serverless.UserFiles.UserLoginHandler
    events:
      - http:
          path: /users/login
          method: post
          cors: true

resources:
  Resources:
    SensorDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.sensorTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


    DataDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dataTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

        KeySchema:
          - AttributeName: id
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


    UserDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

        KeySchema:
          - AttributeName: id
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


