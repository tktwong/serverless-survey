service:
  name: sample-serverless-simple-api

plugins:
  - serverless-python-requirements

provider:
  name: aws
  region: ap-northeast-1
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${opt:stage, self:custom.defaultStage}}
  runtime: python3.8
  stackName: sample-serverless-simple-api
  apiName: sample-serverless-simple-api
  logRetentionInDays: 7
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - lambda:GetLayerVersion
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
  environment:
    DEFAULT_DATA_LIMIT: "20"
    ENV: ${self:custom.environments.ENV}
    AUTH0_DOMAIN: ${self:custom.environments.AUTH0_DOMAIN}
    TOKEN_ISSUER: ${self:custom.environments.TOKEN_ISSUER}
    AUTH0_AUDIENCE: ${self:custom.environments.AUTH0_AUDIENCE}
    LOG_LEVEL: ${self:custom.environments.LOG_LEVEL}
    POWERTOOLS_SERVICE_NAME: ${self:custom.environments.ENV}-sample-serverless-api

custom:
  defaultStage: itg
  profiles:
    itg: sls-itg
    stg: sls-stg
  pythonRequirements:
    dockerizePip: true
    usePipenv: true
    layer: true
  environments: ${file(./config/config.${opt:stage, self:custom.defaultStage}.yaml)}

package:
  individually: true
  exclude:
    - config/**
    - .git/**
    - .venv/**
    - tests/**
    - sample/**
    - README.md
    - .pytest_cache/**
    - .circleci/**
    - package**
    - Pipfile**
    - node_modules/**

functions:
  # カスタムオーソライザー
  Auth:
    name: authorizer
    handler: src/handlers/service/authorizer.handler
    layers:
      - !Ref PythonRequirementsLambdaLayer
      - !Ref CommonLambdaLayer
    identitySource: method.request.header.Authorization
    identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
    type: token
  ListItems:
    name: list_items
    handler: src/handlers/list_items.handler
    description: "販促品一覧"
    layers:
      - !Ref PythonRequirementsLambdaLayer
      - !Ref CommonLambdaLayer
    events:
      - http:
          path: /items
          method: get
          authorizer:
            name: Auth
          cors: true
          request:
            parameters:
              querystrings:
                limit: false
  GetItem:
    name: get_item
    handler: src/handlers/get_item.handler
    description: "販促品取得"
    layers:
      - !Ref PythonRequirementsLambdaLayer
      - !Ref CommonLambdaLayer
    events:
      - http:
          path: /items/{itemId}
          method: get
          authorizer:
            name: Auth
          cors: true

layers:
  Common:
    path: src/layers/share
    name: common
    description: sample-serverless-simple-api layer
    # compatibleRuntimes:
    #   - python3.8
    retain: false

resources:
  Resources:
    ItemTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: Items
        AttributeDefinitions:
          - { AttributeName: item_id, AttributeType: S }
        KeySchema:
          - { AttributeName: item_id, KeyType: HASH }
        BillingMode: PAY_PER_REQUEST
