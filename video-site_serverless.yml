service:
  name: serverless-video-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function


provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    VIDEOS_TABLE: Videos-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret
    VIDEOS_ATTACHMENT_S3_BUCKET: serverless-video-attachments-dabit-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatementsInherit: true
    iamRoleStatements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource: !Ref Auth0Secret
        - Effect: Allow
          Action:
            - kms:Decrypt
          Resource: !GetAtt KMSKey.Arn

  GetVideos:
    handler: src/lambda/http/getVideos.handler
    events:
      - http:
          method: get
          path: videos
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  CreateVideo:
    handler: src/lambda/http/createVideo.handler
    events:
      - http:
          method: post
          path: videos
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}

  UpdateVideo:
    handler: src/lambda/http/updateVideo.handler
    events:
      - http:
          method: patch
          path: videos/{videoId}
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}


  DeleteVideo:
    handler: src/lambda/http/deleteVideo.handler
    events:
      - http:
          method: delete
          path: videos/{videoId}
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: videos/{videoId}/attachment
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: arn:aws:s3:::${self:provider.environment.VIDEOS_ATTACHMENT_S3_BUCKET}/*
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}

resources:
  Resources:
    VideosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: videoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: videoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VIDEOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ':'
                    - - 'arn:aws:iam:'
                      - Ref: AWS::AccountId
                      - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias # Human readable alias for KMS Key
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.VIDEOS_ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.VIDEOS_ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
