service:
  name: serverless-receiptman-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    RECEIPT_TABLE: Receipts-${self:provider.stage}
    IMAGES_S3_BUCKET: receipt-images-ns-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetReceipts:
    handler: src/lambda/http/getReceipts.handler
    events:
      - http:
          method: get
          path: receipts
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPT_TABLE}
  
  CreateReceipt:
    handler: src/lambda/http/createReceipt.handler
    events:
      - http:
          method: post
          path: receipts
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Receipt item
            description: Create a Receipt item
            requestModels:
              'application/json': CreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPT_TABLE}

  DeleteReceipt:
    handler: src/lambda/http/deleteReceipt.handler
    events:
      - http:
          method: delete
          path: receipts/{receiptId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query # Need this to get the receipt imageId, so that can be deleted
          - dynamodb:DeleteItem
          - dynamodb:Delete
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPT_TABLE}
      # Need this to delete the image from s3
      - Effect: Allow 
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: receipts/{receiptId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query # Need this to get the receipt imageId, so that can be deleted
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPT_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

resources:
  Resources:
    receiptsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: receiptId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: receiptId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECEIPT_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Receipt manager app API
        description: Serverless application for managing receipts
    models:
      - name: CreateRequest
        contentType: application/json
        schema: ${file(src/models/create-receipt-request.json)}


