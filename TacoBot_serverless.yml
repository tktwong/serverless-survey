# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# NOTE: update this with your service name
service: tacobot

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
  - serverless-offline

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true
  default_stage: dev

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.default_stage}
  environment: ${file(./serverless.env.yml):${opt:stage, self:custom.default_stage}}
  region: us-east-1
  role: ${file(./serverless.env.yml):${opt:stage, self:custom.default_stage}.PROVIDER_ROLE_ARN}
  # vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required
    # securityGroupIds:
      # - sg-xxx # e.g. SG that grants acces to RDS (inside of your VPC).
    # subnetIds: # Subnets that redirect outgoing traffic through the NAT configured for these private subnets (inside of your VPC).
      # - subnet-xxx

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:DescribeTable
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource: "arn:aws:dynamodb:us-east-1:*:*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  helloWorld:
    name: HelloWorld_${opt:stage, self:custom.default_stage} # Different names are needed in order to deploy the same functions in different stages.
    handler: src/functions/hello.world
    events:
      - http: # Will create an API Gateway Handler for this function
          path: hello
          method: get
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    - path: url path
#    - method: GET/PUT/POST/PATCH/DELETE request
#    - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross domain api call
#    - authorizer: authenticate using the AWS IAM role

# Example Get Call
# someGetCall:
  # name: SomeGetCall_${opt:stage, self:custom.default_stage} # Different names are needed in order to deploy the same functions in different stages.
  # handler: src/functions/file.functionName
  # events:
    # - http: # Will create an API Gateway Handler for this function
        # path: resource/{resourceId}
        # method: get
        # cors: true
        # authorizer: aws_iam # In case this is not a public call.

# someSNSTriggeredFunction:
#       name: SomeSMSSendingJob_${opt:stage, self:custom.default_stage}
#       handler: src/functions/file.snsEventFunctionName
#       timeout: 300 # 300 max
#       events: 
#         - sns: ${file(./serverless.env.yml):${opt:stage, self:custom.default_stage}.SOME_SNS_TOPIC_ARN}

# helloworld:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
