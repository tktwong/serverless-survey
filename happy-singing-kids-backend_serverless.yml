# Wel4569come to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: happy-singing-kids
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-webpack
  - serverless-localstack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  bucket: hello-world
  customDomain:
    domainName: ${env:DOMAIN}
    createRoute53Record: true
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  localstack:
    stages:
      - local
    host: http://localhost
    lambda:
      mountCode: True

provider:
  name: aws
  profile: serverless-admin
  runtime: nodejs10.x
  tage: dev
  environment:
    CUSTOMER_TABLE: "${self:service}-db-${opt:stage, self:provider.stage}"
    FILES_BUCKET_NAME: "${self:service}-files-${opt:stage, self:provider.stage}"
    SALT: "salt"
    # CANDIDATE_EMAIL_TABLE: "candidate-email-${opt:stage, self:provider.stage}"
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - "sns:Publish"
      Resource:
        - ${env:PAYMENT_TOPIC_ARN}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:GetObject
        # Resource: arn:aws:s3:::${cf:${self:custom.infraStack}.PhotosBucket}*
      Resource:
        - ${env:FILES_BUCKET_ARN}/*

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:

# Meow meow meow meow

  home:
    handler: src/functions/home.handle
    events:
      - http:
          path: /
          method: get

  processPaymentLive:
    handler: src/functions/processPaymentLive.handle
    environment:
      stripeSecretKey: ${env:STRIPE_SECRET_KEY}
      stripeWebhookSecret: ${env:STRIPE_WEBHOOK_SECRET}
      sendInBlueApiKey: ${env:SENDINBLUE_API_KEY}
      websiteUrl: ${env:WEBSITE_URL}
    events:
      - http:
          path: /live
          method: post
          cors: true

  dashboard:
    handler: src/functions/getCustomerDashboard.handle
    environment:
      stripeSecretKey: ${env:STRIPE_SECRET_KEY}
      websiteUrl: ${env:WEBSITE_URL}
      apiUrl: ${env:API_URL}
    events:
      - http:
          path: /dashboard/{token}
          method: get
          cors: true

  download:
    handler: src/functions/download.handle
    environment:
      stripeSecretKey: ${env:STRIPE_SECRET_KEY}
      websiteUrl: ${env:WEBSITE_URL}
    events:
      - http:
          path: /download/{token}/{key}
          method: get
          cors: true


# Spike

  spikePut:
    handler: src/functions/spike.handlePut
    events:
      - http:
          path: /spike/put
          method: get

  spikeQuery:
    handler: src/functions/spike.handleQuery
    events:
      - http:
          path: /spike/query
          method: get

  spikeScan:
    handler: src/functions/spike.handleScan
    events:
      - http:
          path: /spike/scan
          method: get


# Stripe integration (frontend)

  getCatalogue:
    handler: src/functions/getCatalogue.handle
    environment:
      stripeSecretKey: ${env:STRIPE_SECRET_KEY}
      websiteUrl: ${env:WEBSITE_URL}
    events:
      - http:
          path: /catalogue
          method: get
          cors: true

  createCheckoutSession:
    handler: src/functions/createCheckoutSession.handle
    environment:
      stripeSecretKey: ${env:STRIPE_SECRET_KEY}
      websiteUrl: ${env:WEBSITE_URL}
    events:
      - http:
          path: /sessions
          method: post
          cors: true

  retrieveCheckoutSession:
    handler: src/functions/retrieveCheckoutSession.handle
    environment:
      stripeSecretKey: ${env:STRIPE_SECRET_KEY}
      websiteUrl: ${env:WEBSITE_URL}
    events:
      - http:
          path: /session/{sessionId}
          method: get
          cors: true

# Stripe integration (backend)

  paymentWebhook:
    handler: src/functions/paymentWebhook.handle
    environment:
      stripeSecretKey: ${env:STRIPE_SECRET_KEY}
      stripeWebhookSecret: ${env:STRIPE_WEBHOOK_SECRET}
      # awsAccessKeyId: ${env:AWS_ACCESS_KEY_ID}
      # awsSecretAccessKey: ${env:AWS_SECRET_ACCESS_KEY}
    events:
      - http:
          path: /webhook
          method: post

  processPaymentQueue:
    handler: src/functions/processPaymentQueue.handle
    reservedConcurrency: 1
    environment:
      stripeSecretKey: ${env:STRIPE_SECRET_KEY}
      stripeWebhookSecret: ${env:STRIPE_WEBHOOK_SECRET}
      sendInBlueApiKey: ${env:SENDINBLUE_API_KEY}
      websiteUrl: ${env:WEBSITE_URL}
    events:
      - sqs:
          arn: ${env:PAYMENT_QUEUE_ARN}
          batchSize: 10

resources:
  Resources:
    customerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CUSTOMER_TABLE}
        AttributeDefinitions:
          - AttributeName: internalId
            AttributeType: S
          - AttributeName: purchaseId
            AttributeType: S
        KeySchema:
          - AttributeName: internalId
            KeyType: HASH
          - AttributeName: purchaseId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # songsBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:provider.environment.FILES_BUCKET_NAME}
    #     AccessControl: Private

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
