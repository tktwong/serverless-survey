service: locus-websocket

provider:
  name: aws
  profile: ${file(../../locus-custom.yml):${self:custom.stage}.profile}
  runtime: nodejs10.x
  environment: ${file(../../locus-env.yml):${self:custom.stage}}
  region: ${file(../../locus-custom.yml):${self:custom.stage}.region}
  memorySize: 512
  timeout: 30
  websocketsApiName: locus-websockets-api
  websocketsApiRouteSelectionExpression: $request.body.action
  logRetentionInDays: 30
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - s3:*
      Resource:
        - arn:aws:s3:::*
    - Effect: 'Allow'
      Action:
        - cloudfront:*
      Resource:
        - "*"
  vpc:
    securityGroupIds:
      - ${file(../../locus-custom.yml):${self:custom.stage}.securityGroupIds}
    subnetIds:
      - ${file(../../locus-custom.yml):${self:custom.stage}.subnet1}
      - ${file(../../locus-custom.yml):${self:custom.stage}.subnet2}

custom:
  stage: "${opt:stage, self:provider.stage}"
  cors:
    origins:
      - '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - x-token
    allowCredentials: false
  customDomain:
    basePath: "/"
    domainName: ${file(../../locus-custom.yml):${self:custom.stage}.wsdomain}
    stage: ${self:custom.stage}
    createRoute53Record: ${file(../../locus-custom.yml):${self:custom.stage}.createRoute53Record}

functions:
  connectionHandler:
    handler: functions/api.run
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  defaultHandler:
    handler: functions/api.run
    events:
      - websocket:
          route: $default

plugins:
  - serverless-offline
  - serverless-domain-manager