service:
  name: quarantine-help-backend

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    models: 
      - CreateUserRequest:
        contentType: "application/json"
        schema:
          type: object
          required:
            - username
            - email
            - password
          properties:
            username:
              type: string
            email:
              type: string
            password:
              type: string
      - LoginRequest:
        contentType: "application/json"
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
            password:
              type: string
      - CreateBookRequest:
        contentType: "application/json"
        schema:
          type: object
          required:
            - email
            - title
            - description
            - author
          properties:
            email:
              type: string
            title:
              type: string
            description:
              type: string
            author:
              type: string
      - UpdateBookRequest:
        contentType: "application/json"
        schema:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            author:
              type: string
            

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    USER_TABLE: USER-${self:provider.stage}
    BOOK_TABLE: BOOK-${self:provider.stage}
    BOOK_USER_INDEX: BookUserIndex
    BOOK_RANGE_INDEX: BookRangeIndex
    IMAGES_S3_BUCKET: images-bucket-quarbooks4${self:provider.stage}
    SALT_ROUNDS: 5
    PASS_SECRET: xDaXd
    SIGNED_URL_EXPIRATION: 500
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

functions:
  createUser:
    handler: src/lambda/user/createUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
    events:
      - http:
          method: post
          path: user
          cors: true
          reqValidatorName: 'xRequestValidator'
          requestModels:
              "application/json": CreateUserRequest
  loginUser:
    handler: src/lambda/user/loginUser.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
    events:
      - http:
          method: post
          path: user/login
          cors: true
          reqValidatorName: 'xRequestValidator'
          requestModels:
              "application/json": LoginRequest
  createBook:
    handler: src/lambda/book/createBook.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}
    events:
      - http:
          method: post
          path: book
          cors: true
          authorizer: Auth
          reqValidatorName: 'xRequestValidator'
          requestModels:
              "application/json": CreateBookRequest
  getBooks:
    handler: src/lambda/book/getBooks.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}/index/*
    events:
      - http:
          method: get
          path: books
          cors: true
          authorizer: Auth
  deleteBook:
    handler: src/lambda/book/deleteBook.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}
    events:
      - http:
          method: delete
          path: book/{bookId}
          cors: true
          authorizer: Auth
  updateBook:
    handler: src/lambda/book/updateBook.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}
    events:
      - http:
          method: put
          path: book/{bookId}
          cors: true
          authorizer: Auth
          reqValidatorName: 'xRequestValidator'
          requestModels:
              "application/json": UpdateBookRequest
  GenerateUploadUrl:
    handler: src/lambda/book/generateUploadUrl.handler
    iamRoleStatementsName: generateUploadUrlRole
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: book/{bookId}/attachment
          cors: true
  Auth:
    handler: src/auth/authentication.handler

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    
    UserDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_TABLE}

    BookDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOOK_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BOOK_USER_INDEX}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.BOOK_RANGE_INDEX}
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    xRequestValidator:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'my-req-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false  
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
