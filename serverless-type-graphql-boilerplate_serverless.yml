service: typegraphql-api

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  environment:
    DB_NAME: ${env:DB_NAME}
    DB_TABLE: ${env:DB_TABLE}
    DB_USER: ${env:DB_USER}
    DB_PASS: ${env:DB_PASS}
    DATABASE_URL: ${self:custom.database.${self:provider.stage}}

#  apiKeys:
#    - x-api-key

resources:
  Resources:
    ServerlessRDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: RDS
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '5432'
            ToPort: '5432'
            CidrIp: 0.0.0.0/0
    Database:
      DependsOn: ServerlessRDSSecurityGroup
      Type: 'AWS::RDS::DBInstance'
      DeletionPolicy: Retain
      Properties:
        Engine: postgres
        DBInstanceClass: db.t2.micro
        AllocatedStorage: 5
        DBInstanceIdentifier: ${self:service}-${self:provider.stage}
        DBName: ${self:provider.environment.DB_NAME}
        MasterUsername: ${self:provider.environment.DB_USER}
        MasterUserPassword: ${self:provider.environment.DB_PASS}
        PubliclyAccessible: true
        VPCSecurityGroups:
          - Fn::GetAtt:
            - ServerlessRDSSecurityGroup
            - GroupId

functions:
  graphql:
    handler: dist/handler.graphql
    events:
      - http:
          path: graphql
          method: get
          timeout: 30
      - http:
          path: graphql
          method: post
          cors: true
          timeout: 30

package:
  include:
    - dist/**
    - node_modules/**

plugins:
  - serverless-offline

custom:
  serverless-offline:
    port: 9000
  database:
    local: "${env:DATABASE_URL}"
    prod:
      "Fn::Join": ["", [
      "postgres://${env:DB_USER}:${env:DB_PASS}@",
      "Fn::GetAtt": [Database, Endpoint.Address],
      ":",
      "Fn::GetAtt": [Database, Endpoint.Port],
      "/${env:DB_NAME}"
    ]]
