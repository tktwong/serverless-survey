# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: linked-offline
# app and org for use with dashboard.serverless.com
app: linked-offline
org: calebschoepp

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  region: us-west-2
  stage: dev
  runtime: python3.6 # Specified here for python dependency plugin docker build
  apiGateway:
    binaryMediaTypes:
      - "application/pdf"

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::url-pdfs/*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::html-pdfs/*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::merged-pdfs/*"
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource: "*" # TODO: Make this a more specific ARN

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  include:
    - bin/*
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  parseEmail:
    handler: parseEmail.handler
    memorySize: 1024
    runtime: nodejs10.x
    timeout: 20
    events:
      - http:
          path: email
          method: post

  urlToPdf:
    handler: urlToPdf.handler
    memorySize: 1024
    runtime: nodejs10.x
    timeout: 60 # Limited to 30 by API gateway
    events:
      - http:
          path: urlToPdf
          method: get

  htmlToPdf:
    handler: htmlToPdf.handler
    memorySize: 1024
    runtime: nodejs10.x
    timeout: 60 # Limited to 30 by API gateway
    events:
      - http:
          path: htmlToPdf
          method: get

  mergePdf:
    handler: mergePdf.handler
    memorySize: 512
    runtime: python3.6
    events:
      - http:
          path: mergePdf
          method: get

  # Testing step functions
  SFparseEmail:
    handler: sftest.parseEmail
    memorySize: 128
    runtime: nodejs10.x
    timeout: 10

  SFurlToPdf:
    handler: sftest.urlToPdf
    memorySize: 128
    runtime: nodejs10.x
    timeout: 10

  SFhtmlToPdf:
    handler: sftest.htmlToPdf
    memorySize: 128
    runtime: nodejs10.x
    timeout: 10

  SFmergePdf:
    handler: sftest.mergePdf
    memorySize: 128
    runtime: nodejs10.x
    timeout: 10

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-step-functions

custom:
  pythonRequirements:
    dockerizePip: true

stepFunctions:
  stateMachines:
    stepFunctionTest:
      events:
        - http:
            path: sftest
            method: GET
      name: stepFunctionTest
      id: stepFunctionTest
      definition:
        Comment: "Testing my state machine design"
        StartAt: htmlToPdf
        States:
          htmlToPdf:
            Type: Task
            Next: urlsIntoPdfs
            ResultPath: $.htmlPdfUri
            Resource:
              Fn::GetAtt: [htmlToPdf, Arn]
          urlsIntoPdfs:
            Type: Map
            Next: mergePdf
            ItemsPath: $.links
            ResultPath: $.urlPdfUris
            Iterator:
              StartAt: urlToPdf
              States:
                urlToPdf:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [urlToPdf, Arn]
                  End: true
          mergePdf:
            Type: Task
            Resource:
              Fn::GetAtt: [mergePdf, Arn]
            End: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    urlPdfsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: url-pdfs #${self:service}-${self:provider.stage}-
    htmlPdfsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: html-pdfs #${self:service}-${self:provider.stage}-
    mergedPdfsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: merged-pdfs #${self:service}-${self:provider.stage}-
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"