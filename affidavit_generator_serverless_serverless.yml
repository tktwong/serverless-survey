# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: backend
# app and org for use with dashboard.serverless.com
app: backend-app
org: kevinbmccall14

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  httpApi:
    cors: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::backend-dev-uploadbucket*"
    - Effect: "Allow"
      Action:
        - textract:StartDocumentAnalysis
        - textract:GetDocumentAnalysis
      Resource: "*"
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource:
        Fn::Join: ["", [Fn::GetAtt: [AnalysisBucket, Arn], "/*"]]

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  presignS3:
    handler: functions/presignS3.handler
    runtime: nodejs12.x
    events:
      - httpApi:
          path: /presignS3
          method: POST
  textract:
    handler: functions/textract.handler
    runtime: nodejs12.x
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - UploadQueue
              - Arn
          batchSize: 1
  createFile:
    handler: functions/createFile.handler
    runtime: nodejs12.x
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CreateFileQueue
              - Arn
          batchSize: 1
  processAnalysis:
    handler: functions/processAnalysis.handler
    runtime: python3.8
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AnalysisQueue
              - Arn
          batchSize: 1
    package:
      include:
        - helpers/textractParser
  storeAnalysis:
    handler: functions/storeAnalysis.handler
    runtime: python3.8
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TextractQueue
              - Arn
          batchSize: 1

# CloudFormation resources
resources:
  Resources:
    ################################## FILE UPLOAD ##################################
    UploadQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "uploadQueue"
        MessageRetentionPeriod: 60
        VisibilityTimeout: 60
    UploadQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2008-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - SQS:SendMessage
              Resource: "*"
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: UploadTopic
        Queues:
          - Ref: UploadQueue
    UploadTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "uploadTopic"
        # Subscription:
        # - Endpoint:
        #     Fn::GetAtt:
        #       - UploadQueue
        #       - Arn
        #   Protocol: sqs DISABLES TEXTRACT
        # - Endpoint:
        #     Fn::GetAtt:
        #       - CreateFileQueue
        #       - Arn
        #   Protocol: sqs
    UploadTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: UploadTopicPolicy
              Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action: sns:Publish
              Resource: "*"
        Topics:
          - Ref: UploadTopic
    UploadBucket:
      Type: AWS::S3::Bucket
      DependsOn: UploadTopicPolicy
      Properties:
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:*
              Topic:
                Ref: UploadTopic
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    ################################## FILE DOCUMENT CREATION ##################################
    CreateFileQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "createFileQueue"
        MessageRetentionPeriod: 60
        VisibilityTimeout: 60
    CreateFileQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2008-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - SQS:SendMessage
              Resource: "*"
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: UploadTopic
        Queues:
          - Ref: CreateFileQueue
    ################################## TEXTRACT ##################################
    TextractQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "textractQueue"
        MessageRetentionPeriod: 60
        VisibilityTimeout: 60
    TextractQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2008-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - SQS:SendMessage
              Resource: "*"
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: TextractTopic
        Queues:
          - Ref: TextractQueue
    TextractTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "textractTopic"
        Subscription:
          - Endpoint:
              Fn::GetAtt:
                - TextractQueue
                - Arn
            Protocol: sqs
    TextractTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: TextractTopicPolicy
              Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action: sns:Publish
              Resource: "*"
        Topics:
          - Ref: TextractTopic
    TextractRole:
      Type: AWS::IAM::Role
      Properties:
        Description: IAM Role for Textract service to publish to SNS
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - textract.amazonaws.com
              Action:
                - sts:AssumeRole
    TextractRolePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: TextractPublishSNS
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sns:Publish
              Resource:
                Ref: TextractTopic
        Roles:
          - Ref: TextractRole
    ################################## ANALYSIS ##################################
    AnalysisQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "analysisQueue"
        MessageRetentionPeriod: 60
        VisibilityTimeout: 60
    AnalysisQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2008-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - SQS:SendMessage
              Resource: "*"
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    Ref: AnalysisTopic
        Queues:
          - Ref: AnalysisQueue
    AnalysisTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "analysisTopic"
        Subscription:
          - Endpoint:
              Fn::GetAtt:
                - AnalysisQueue
                - Arn
            Protocol: sqs
    AnalysisTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AnalysisTopicPolicy
              Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action: sns:Publish
              Resource: "*"
        Topics:
          - Ref: AnalysisTopic
    AnalysisBucket:
      Type: AWS::S3::Bucket
      DependsOn: AnalysisTopicPolicy
      Properties:
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:*
              Topic:
                Ref: AnalysisTopic
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    ################################## SUBSCRIPTIONS ##################################
    SNSSubscription:
      Type: AWS::SNS::Subscription
      DependsOn: CreateFileQueue
      Properties:
        TopicArn: { "Ref": "UploadTopic" }
        # - Endpoint:
        #     Fn::GetAtt:
        #       - UploadQueue
        #       - Arn
        #   Protocol: sqs
        Endpoint:
          Fn::GetAtt:
            - CreateFileQueue
            - Arn
        Protocol: sqs
  ################################## OUTPUTS ##################################
  Outputs:
    UploadBucketName:
      Description: "Bucket for file uploads"
      Value:
        Ref: UploadBucket
    AnalysisBucketName:
      Description: "Bucket for textract analysis json"
      Value:
        Ref: AnalysisBucket

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
