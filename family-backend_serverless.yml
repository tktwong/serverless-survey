service: family-backend

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-1
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

plugins:
  - serverless-webpack

custom:
  deploy: ${file(./deploy-config.yml)}
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    PhotoStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.deploy.prefix}-photo-storage

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.deploy.prefix}-user-pool
        UsernameAttributes:
          - email
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: False
            RequireNumbers: False
            RequireSymbols: False
            RequireUppercase: False

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.deploy.prefix}-user-pool-client
        UserPoolId:
          Ref: UserPool
        AllowedOAuthFlows:
          - implicit
        CallbackURLs: ${self:custom.deploy.callbackUrls}
        GenerateSecret: false
        RefreshTokenValidity: 30

    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.deploy.prefix}-identity-pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              Fn::GetAtt: ['UserPool', 'ProviderName']

    IdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [UserAuthRole, Arn]

    UserAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: IdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: ${self:custom.deploy.prefix}-cognito-authorized-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'execute-api:Invoke'
                  Resource:
                    - Fn::Join:
                        - '/'
                        - - Fn::Join:
                              [
                                ':',
                                [
                                  'arn:aws:execute-api',
                                  { 'Ref': 'AWS::Region' },
                                  { 'Ref': 'AWS::AccountId' },
                                  { 'Ref': 'ApiGatewayRestApi' },
                                ],
                              ]
                          - '*'
                - Effect: 'Allow'
                  Action:
                    - 's3:*'
                  Resource:
                    - Fn::GetAtt: [PhotoStorage, Arn]

  Outputs:
    UserPoolId:
      Description: 'Cognito User Pool Id'
      Value:
        Ref: UserPool
    UserPoolClientId:
      Description: 'Cognito User Pool Client Id'
      Value:
        Ref: UserPoolClient
    IdentityPoolId:
      Description: 'Cognito Identity Pool Id'
      Value:
        Ref: IdentityPool
