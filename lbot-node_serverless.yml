service: lbot-node

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/task"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/user"

    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "*"
custom:
  defaultStage: dev
  profiles:
    dev: sls
    prd: sls
  conf:
    environment:
      dev: ${file(./conf/dev.json)}
      prd: ${file(./conf/prd.json)}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: api/hello
          method: get
  getTasksList:
    handler: dist/tasks/handler.getTasksList
    events:
      - http:
          path: api/tasks
          method: get
  getTasksById:
    handler: dist/tasks/handdler.getTasksById
    events:
      - http:
          path: api/tasks/{id}
          method: get
  addTasks:
    handler: dist/tasks/handler.addTasks
    events:
      - http:
          path: api/tasks
          method: post
  deleteTasks:
    handler: dist/tasks/handler.deleteTasks
    events:
      - http:
          path: api/tasks
          method: delete
  postLine:
    handler: dist/line/handler.postLine
    events:
      - http:
          path: api/line
          method: post
    environment:
      CHANNEL_ACCESS_TOKEN: ${self:custom.conf.environment.${self:provider.stage}.CHANNEL_ACCESS_TOKEN}
      API_URI: ${self:custom.conf.environment.${self:provider.stage}.API_URI}

  updateTasks:
    handler: dist/tasks/handler.updateTasks
    events:
      - http:
          path: tasks
          method: put
  updateComplicationStatus:
    handler: dist/tasks/handler.updateComplicationStatus
    events:
      - http:
          path: tasks/complicationStatus
          method: put
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: ownerId
            AttributeType: S
          -
            AttributeName: timestamp
            AttributeType: S
        KeySchema:
          -
            AttributeName: ownerId
            KeyType: HASH
          -
            AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: task
    UserDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: user