service: xmlws

provider:
  name: aws
  region: us-east-1
  runtime: python3.8
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:${self:provider.region}:*:function:${self:service}*"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource: "arn:aws:sqs:${self:provider.region}:*:*"
  environment:
    STAGE: ${self:custom.stage}
    EMAIL_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/657729777987/EmailQueue
    LOCATION_QUEUE_URL: https://sqs.us-east-1.amazonaws.com/657729777987/LocationQueue

plugins:
  - serverless-offline
  - serverless-offline-ssm
  - serverless-python-requirements

resources:
  Resources:
    EmailQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "EmailQueue"
    LocationQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "LocationQueue"

custom:
  stage: ${opt:stage, self:provider.stage}
  serverless-offline-ssm:
    stages:
      - offline
  pythonRequirements:
    dockerizePip: non-linux

functions:
  email_sqs:
    handler: app.service.MailService.handle
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - EmailQueue
              - Arn
          batchSize: 1

  email:
    handler: app.handler.Email.handle
    events:
      - http:
          path: email
          method: post
          cors: true

  location_sqs:
    handler: app.service.LocationService.handle
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - LocationQueue
              - Arn
          batchSize: 1

  location:
    handler: app.handler.Location.handle
    events:
      - http:
          path: location
          method: post
          cors: true

  locate:
    handler: app.handler.Locate.handle
    events:
      - http:
          path: locate
          method: get
          cors: true
