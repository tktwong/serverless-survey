# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: resizePDF # NOTE: update this with your service name

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - aws-amplify-serverless-plugin
  
provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  stackTags:
    Application: resize-pdf
  tags:
    Application: resize-pdf

custom:
  resizePDFBucketNameBase: resize-and-pdf
  pythonRequirements:
    dockerizePip: false
  DockerImageArn: !Sub '#{AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/codebuild/python-serverless:latest'
  RepositoryName: test-deploy-serverless
  amplify:
    - filename: ../Frontend/src/aws-exports.js
      type: javascript
      appClient: AppClient
      s3bucket: disabled

functions:
  buildSignedUrlUpload:
    handler: buildSignedUrlUpload.buildSignedUrlUpload
    events:
      - http:
          path: buildSignedUrlUpload
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-east-1:315777477680:userpool/us-east-1_1shJPiBk5
          request:
            parameters:
              querystrings:
                prefix: true
                filename: true

    environment:
      bucketName: !Ref ResizePDFBucket
      
    role: buildSignedUrlUploadRole

  resizePDF:
    handler: resizePDF.resizePDF
    events:
      - http:
          path: resizePDF
          method: get
          cors: true
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-east-1:315777477680:userpool/us-east-1_1shJPiBk5
          request:
            parameters:
              querystrings:
                prefix: true
                compression: true

    environment:
      bucketName: !Ref ResizePDFBucket
      tmpPath: "/tmp/"
      
    role: resizePDFRole

# you can add CloudFormation resource templates here
resources:
  Mappings:
    envValues:
      dev:
        resizePDFBucketName: ${self:custom.resizePDFBucketNameBase}-dev
      prod:
        resizePDFBucketName: ${self:custom.resizePDFBucketNameBase}-prod
  Resources:
    ResizePDFBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 
          Fn::FindInMap:
            - envValues
            - ${self:provider.stage}
            - resizePDFBucketName
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 1
              Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - PUT
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
    resizePDFRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: resizePDFRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action: # Gives permission to S3
                    - s3:ListBucket
                    - s3:GetObject
                    - s3:PutObject
                  Resource: 
                    - arn:aws:s3:::${self:custom.resizePDFBucketNameBase}-${self:provider.stage}
                    - arn:aws:s3:::${self:custom.resizePDFBucketNameBase}-${self:provider.stage}/*
                - Effect: Allow
                  Action:
                    - ses:SendEmail
                    - ses:SendRawEmail
                  Resource: "*"
                  
    buildSignedUrlUploadRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: buildSignedUrlUploadRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action: # Gives permission to S3
                    - s3:PutObject
                  Resource: 
                    - arn:aws:s3:::${self:custom.resizePDFBucketNameBase}-${self:provider.stage}
                    - arn:aws:s3:::${self:custom.resizePDFBucketNameBase}-${self:provider.stage}/*
      
    # CodeBuildS3Bucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: test-deploy-serverless-codebuild
    #     VersioningConfiguration:
    #       Status: Enabled

    CodePipelineS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: test-deploy-serverless-codepipeline
        VersioningConfiguration:
          Status: Enabled
          
    CodeBuildIAMRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                  - codebuild.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess

    CodePipelineIAMRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                  - codepipeline.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
          - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
          - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess

    CloudWatchIAMRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "CodePipelineExecution"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - codepipeline:StartPipelineExecution
                  Resource: "*"

    CodeBuildProject:
      Type: AWS::CodeBuild::Project
      Properties:
        Artifacts:
          Type: CODEPIPELINE
        Source:
          BuildSpec: buildSpec.yml
          Type: CODEPIPELINE
        ServiceRole: 
          Fn::GetAtt: [ CodeBuildIAMRole , Arn ]
        Environment:
          Type: LINUX_CONTAINER
          Image: ${self:custom.DockerImageArn}
          ComputeType: BUILD_GENERAL1_SMALL
          EnvironmentVariables:
            -
              Name: STAGE
              Value: ${self:provider.stage}

    CodePipelinePipeline:
      Type: AWS::CodePipeline::Pipeline
      Properties:
        RoleArn:
          Fn::GetAtt: [ CodePipelineIAMRole , Arn ]
        ArtifactStore:
          Location:
            Ref: CodePipelineS3Bucket
          Type: S3
        Stages:
          - 
            Name: Source
            Actions: 
              -
                Name: Source
                ActionTypeId:
                  Category: Source
                  Owner: AWS
                  Provider: CodeCommit
                  Version: 1
                OutputArtifacts:
                  -
                    Name: SourceArtifact
                Configuration:
                  BranchName: master
                  RepositoryName: ${self:custom.RepositoryName}
          - 
            Name: Build
            Actions: 
              -
                Name: Build
                InputArtifacts:
                  - 
                    Name: SourceArtifact
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Provider: CodeBuild
                  Version: 1
                OutputArtifacts:
                  -
                    Name: BuildArtifact
                Configuration:
                  ProjectName:
                    Ref: CodeBuildProject
    
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AdminCreateUserConfig: 
          AllowAdminCreateUserOnly: true
        UsernameAttributes: 
          - email
        UserPoolName: pdfBuilder
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
    AppClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
          ClientName: pdfBuilderApp1
          ExplicitAuthFlows:
            - USER_PASSWORD_AUTH
          GenerateSecret: false
          UserPoolId: !Ref UserPool

    # CodePipelineTrigger:
    #   Type: AWS::Events::Rule
    #   Properties:
    #     State: ENABLED
    #     EventPattern: 
    #       source:
    #         - "aws.codecommit"
    #       detail-type:
    #         - "CodeCommit Repository State Change"
    #       resources:
    #         - !Join [ '', [ 'arn:aws:codecommit:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', ${self:custom.RepositoryName} ] ]
    #       detail:
    #         event:
    #           - referenceCreated
    #           - referenceUpdated
    #         referenceType:
    #           - branch
    #         referenceName:
    #           - master
    #     Targets:
    #       -
    #         Arn:
    #           Fn::Join:
    #             - ':'
    #             - - arn:aws:codepipeline
    #               - { Ref: AWS::Region }
    #               - { Ref: AWS::AccountId }
    #               - { Ref: CodePipelinePipeline }
    #         RoleArn: 
    #           Fn::GetAtt: [ CloudWatchIAMRole , Arn ]
    #         Id:
    #           Ref: CodePipelinePipeline
    
  # Outputs:
  #   buildSignedUrlUploadURL:
  #     Description: "buildSignedUrlUpload endpoint"
  #     Value: buildSignedUrlUpload.endpoint
