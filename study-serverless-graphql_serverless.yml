service:
  name: board

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  timeout: 30
  environment:
    NODE_DEV: ${self:provider.stage}
    MYSQL_HOST: ${self:custom.mysqlHost.${self:provider.stage}} 
    MYSQL_PORT: ${self:custom.mysqlPort.${self:provider.stage}}
    MYSQL_USER: ${self:custom.mysqlUser.${self:provider.stage}}
    MYSQL_PASS: ${self:custom.mysqlPass.${self:provider.stage}}
    MYSQL_DATABASE: ${self:custom.mysqlDatabase.${self:provider.stage}}
    MYSQL_SYNC: ${self:custom.mysqlSync.${self:provider.stage}}
    MYSQL_LOG: ${self:custom.mysqlLog.${self:provider.stage}}
    SLS_DEBUG: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: 'arn:aws:s3:::sls-board-upload/*'

custom:
  serverless-offline:
    port: 3000
  stages:
    - dev
    - product
  mysqlHost:
    dev: 'localhost'
    product: 'xxxxx.rds.amazonaws.com'
  mysqlPort:
    dev: 3308
    product: 3306
  mysqlUser:
    dev: 'board'
    product: 'userid'
  mysqlPass:
    dev: 'password'
    product: 'awspassword'
  mysqlDatabase:
    dev: 'board'
    product: 'board'
  mysqlSync:
    dev: true
    product: true
  mysqlLog:
    dev: 'all'
    product: 'all'

functions:
  graphql:
    handler: src/handler.graphql
    events:
      - http:
          path: graphql
          method: get
          cors: true
      - http:
          path: graphql
          method: post
          cors: true
