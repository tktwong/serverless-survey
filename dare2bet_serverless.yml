service: dare2bet

provider:
  name: aws
  runtime: python3.6
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
          - "*"
package:
  exclude:
    - venv/**
functions:
  add_player:
    dependsOn: S3BucketState
    handler: add_player.run
    events:
    - http:
        path: users/create
        method: get
        request:
          parameters:
            querystrings:
              player_name: true
  reset_game:
    handler: reset_game.run
    events:
    - http:
        path: reset/game
        method: get
  get_question:
    handler: get_question.run
    events:
    - http:
        path: get_question
        method: get
  post_answer:
    handler: post_answer.run
    events:
    - http:
        path: post_answer
        method: get
        request:
          parameters:
            querystrings:
              player_name: true
              answer: true
  get_result:
    handler: get_result.run
    events:
    - http:
        path: get_result
        method: get

resources:
  Resources:
    S3BucketState:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: dare-to-bet-state-store

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
