# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: stockboy
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

  # you can overwrite defaults here
  stage: production
  region: ca-central-1

  # you can add statements to the Lambda function's IAM Role here
  #  iamRoleStatements:
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:ListBucket"
  #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:PutObject"
  #      Resource:
  #        Fn::Join:
  #          - ""
  #          - - "arn:aws:s3:::"
  #            - "Ref" : "ServerlessDeploymentBucket"
  #            - "/*"

  # you can define service wide environment variables here
  environment:
    MAPQUEST_GEOCODING_TOKEN: "D68gsHRDpqx7cn3i8fJvoWzUx55N5d6e"
    MAPQUEST_GEOCODING_SECRET: "MBGjGEtTLPNRnj1O"
    USDA_FOOD_DATA_CENTRE_TOKEN: "5UGYYLbuiJwiGy0ORFHzUj8zFfWZKExWPDNMubfJ"
    AWS_COGNITO_POOL_ID: ca-central-1_LQVujfodU
    AWS_COGNITO_CLIENT_ID: 1kkpe5jqemlolio1or8b7c7vbj

# you can add packaging information here
#package:
#  individually: true

functions:
  # Category endpoints
  getCategories:
    handler: ./functions/categories/getCategories.getCategories
    events:
      - http:
          path: categories
          method: get
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  addCategory:
    handler: ./functions/categories/addCategory.addCategory
    events:
      - http:
          path: categories
          method: post
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer

  # User endpoints
  loginUser:
    handler: ./functions/users/loginUser.loginUser
    # environment:
    #   AWS_COGNITO_POOL_ID: ca-central-1_TXbgPtPRG
    #   AWS_COGNITO_CLIENT_ID: 403arphk7skderch1sssaesfgn
    events:
      - http:
          path: users/login
          method: post
  registerUser:
    handler: ./functions/users/registerUser.registerUser
    environment:
      AWS_COGNITO_POOL_ID: ca-central-1_LQVujfodU
      AWS_COGNITO_CLIENT_ID: 1kkpe5jqemlolio1or8b7c7vbj
    events:
      - http:
          path: users/register
          method: post
  confirmUser:
    handler: ./functions/users/confirmUser.confirmUser
    environment:
      AWS_COGNITO_POOL_ID: ca-central-1_LQVujfodU
      AWS_COGNITO_CLIENT_ID: 1kkpe5jqemlolio1or8b7c7vbj
    events:
      - http:
          path: users/confirm-user
          method: post

  # Vendor endpoints
  getVendors:
    handler: ./functions/vendors/getVendors.getVendors
    events:
      - http:
          path: vendors
          method: get
  getVendor:
    handler: ./functions/vendors/getVendor.getVendor
    events:
      - http:
          path: vendors/{id}
          method: get
  addVendor:
    handler: ./functions/vendors/addVendor.addVendor
    environment:
      MAPQUEST_GEOCODING_TOKEN: "D68gsHRDpqx7cn3i8fJvoWzUx55N5d6e"
    events:
      - http:
          path: vendors
          method: post
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer

  # Products endpoints
  getProducts:
    handler: ./functions/products/getProducts.getProducts
    events:
      - http:
          path: products
          method: get
  getProduct:
    handler: ./functions/products/getProduct.getProduct
    events:
      - http:
          path: products/{id}
          method: get
  addProduct:
    handler: ./functions/products/addProduct.addProduct
    environment:
      USDA_FOOD_DATA_CENTRAL_TOKEN: "5UGYYLbuiJwiGy0ORFHzUj8zFfWZKExWPDNMubfJ"
    events:
      - http:
          path: products
          method: post
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  updateProduct:
    handler: ./functions/products/updateProduct.updateProduct
    environment:
      USDA_FOOD_DATA_CENTRAL_TOKEN: "5UGYYLbuiJwiGy0ORFHzUj8zFfWZKExWPDNMubfJ"
    events:
      - http:
          path: products/{id}
          method: put
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  deleteProduct:
    handler: ./functions/products/deleteProduct.deleteProduct
    events:
      - http:
          path: products/{id}
          method: delete
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer

  # VendorProduct endpoints
  getAllVendorProducts:
    handler: ./functions/vendorProducts/getAllVendorProducts.getAllVendorProducts
    events:
      - http:
          path: vendorProducts
          method: get
  getVendorProductsByVendorId:
    handler: ./functions/vendorProducts/getVendorProductsByVendorId.getVendorProductsByVendorId
    events:
      - http:
          path: vendorProducts/searchByVendor/{id}
          method: get
  getVendorProductsByProductName:
    handler: ./functions/vendorProducts/getVendorProductsByProductName.getVendorProductsByProductName
    events:
      - http:
          path: vendorProducts/searchByProduct/{name}
          method: get
  getVendorProduct:
    handler: ./functions/vendorProducts/getVendorProduct.getVendorProduct
    events:
      - http:
          path: vendorProducts/{id}
          method: get
  addVendorProduct:
    handler: ./functions/vendorProducts/addVendorProduct.addVendorProduct
    environment:
      USDA_FOOD_DATA_CENTRAL_TOKEN: "5UGYYLbuiJwiGy0ORFHzUj8zFfWZKExWPDNMubfJ"
    events:
      - http:
          path: vendorProducts
          method: post
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  updateVendorProduct:
    handler: ./functions/vendorProducts/updateVendorProduct.updateVendorProduct
    events:
      - http:
          path: vendorProducts/{id}
          method: put
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  deleteVendorProduct:
    handler: ./functions/vendorProducts/deleteVendorProduct.deleteVendorProduct
    events:
      - http:
          path: vendorProducts/{id}
          method: delete
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer

  # ShoppingList endpoints
  getShoppingListItems:
    handler: ./functions/shoppingList/getShoppingListItems.getShoppingListItems
    events:
      - http:
          path: shoppingList/{id}
          method: get
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  getShoppingListItem:
    handler: ./functions/shoppingList/getShoppingListItem.getShoppingListItem
    events:
      - http:
          path: shoppingList/{id}
          method: get
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  addShoppingListItem:
    handler: ./functions/shoppingList/addShoppingListItem.addShoppingListItem
    events:
      - http:
          path: shoppingList
          method: post
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  updateShoppingListItem:
    handler: ./functions/shoppingList/updateShoppingListItem.updateShoppingListItem
    events:
      - http:
          path: shoppingList/{id}
          method: put
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  deleteShoppingListItem:
    handler: ./functions/shoppingList/deleteShoppingListItem.deleteShoppingListItem
    events:
      - http:
          path: shoppingList/{id}
          method: delete
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer

# plugins
plugins:
  - serverless-cognito-add-custom-attributes
# you can add CloudFormation resource templates here
resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: stockboy-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: given_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: stockboy-user-pool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: stockboy-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient

# custom attributes
custom:
  CognitoAddCustomAttributes:
    CognitoUserPoolIdOutputKey: "UserPoolId" # The key of the outputted UserPool Ref
    CognitoUserPoolClientIdOutputKey: "UserPoolClientId" # The key of the outputted UserPoolClient Ref
    CustomAttributes:
      - AttributeDataType: Boolean
        DeveloperOnlyAttribute: False
        Mutable: True
        Name: "isVendor" # this will end up being custom:isVendor
        Required: False
