service: template-security

provider:
  name: aws
  runtime: nodejs4.3
  region: ${env:AWS_REGION}
  stage: ${opt:stage, env:STAGE}
  stackTags:
    Type: service-security

resources:
  Resources:
    AppKey:
      Type: AWS::KMS::Key
      DependsOn:
      - Role
      - KeyUploadGroup
      Properties:
        Description: 'Key used to encrypt secrets for this stage'
        Enabled: true
        EnableKeyRotation: true
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
          - Sid: Allow administration of the key by root
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ''
                  - - 'arn:aws:iam::'
                    - Ref: AWS::AccountId
                    - ':root'
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow admin by CodeBuild service role defined in pipelines security directory
            Effect: Allow
            Principal:
              AWS:
                Fn::ImportValue: codebuild-arn-${self:service}-${self:provider.stage}
            Action:
              - kms:*
            Resource: '*'
          - Sid: ${self:service} ${self:provider.stage} Allow Key usage to Lambda Execution Role
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt: [ Role, Arn ]
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'

    SecretsBucket:
      Type: AWS::S3::Bucket
      Properties:
        VersioningConfiguration:
          Status: Enabled
        LoggingConfiguration:
          DestinationBucketName:
            Fn::ImportValue:
              AppSecretLoggingBucket
          LogFilePrefix: logs-${self:service}-${self:provider.stage}

    SecretsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn:
      - AppKey
      - Role
      - KeyUploadGroup
      Properties:
        Bucket:
          Ref: SecretsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: Allow root to upload encrypted secrets using stack key
            Action:
            - s3:PutObject
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ''
                  - - 'arn:aws:iam::'
                    - Ref: AWS::AccountId
                    - ':root'
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: SecretsBucket
                  - '/*'
            Condition:
              StringEquals:
                s3:x-amz-server-side-encryption: aws:kms
                s3:x-amz-server-side-encryption-aws-kms-key-id:
                  Fn::GetAtt: [ AppKey, Arn ]
              Bool:
                aws:SecureTransport: true
          - Sid: Do not allow other keys to be used in this bucket
            Effect: Deny
            Principal: '*'
            Action:
              - s3:PutObject
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: SecretsBucket
                  - '/*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption-aws-kms-key-id:
                  Fn::GetAtt: [ AppKey, Arn ]
          - Sid: Allow Lambda execution role to download and decrypt secrets
            Effect: Allow
            Action:
            - s3:GetObject
            Principal:
              AWS:
                Fn::GetAtt: [ Role, Arn ]
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: SecretsBucket
                  - '/*'
            Condition:
               Bool:
                 aws:SecureTransport: true

    ManagedKeyPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Groups:
          - Ref: KeyUploadGroup
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
              Resource:
                Fn::GetAtt: [ AppKey, Arn ]
            -
              Effect: Allow
              Action:
              - s3:PutObject
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: SecretsBucket
                    - '/*'

    KeyUploadGroup:
      Type: AWS::IAM::Group

    Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: '/'
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - Ref: AWS::Region
                      - ':'
                      - Ref: AWS::AccountId
                      - ':table/'
                      - ${env:SERVICE}
                      - '-'
                      - ${self:provider.stage}
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:logs:'
                        - Ref: AWS::Region
                        - ':*:*'

  Outputs:
    SecretsBucket:
      Description: Bucket to store secrets for ${self:service}-${self:provider.stage}
      Value:
        Ref: SecretsBucket
      Export:
        Name: ${self:service}-secrets-${self:provider.stage}
    KmsKeyId:
      Description: Stage ${self:provider.stage} KMS Key Id
      Value:
        Ref: AppKey
    RoleARN:
      Description: Stage ${self:provider.stage} IAM Role ARN
      Value:
        Fn::GetAtt:
          - Role
          - Arn
      Export:
        Name: ${self:service}-${self:provider.stage}
    KeyUploadGroupARN:
      Description: Group ARN for key uploaders
      Value:
        Fn::GetAtt:
          - KeyUploadGroup
          - Arn

