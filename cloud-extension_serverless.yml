service: serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-api-compression

custom:
  tableName: "ExtensionTable"
  contentCompression: 0

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  profile: prod
  apiGateway:
    binaryMediaTypes:
      - "*/*"
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AWSLambdaExecute
    - arn:aws:iam::aws:policy/AWSLambdaFullAccess
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetBucketNotification"
        - "s3:PutBucketNotification"
        - "s3:DeleteObject"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::extension-staging/*"
    - Effect: "Allow"
      Action:
        - "s3:GetBucketNotification"
        - "s3:PutBucketNotification"
        - "s3:DeleteObject"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::extension-live/*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ExtensionTable, Arn]
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"

functions:
  pkgReader:
    handler: upload.handler
    timeout: 900
    reservedConcurrency: 20
    environment:
      tableName: ${self:custom.tableName}
      runtime: "nodejs10.x"
      iamRole:
        Fn::GetAtt: [IamRoleLambdaExecution, Arn]
    events:
      - s3:
          bucket: extension-staging
          event: s3:ObjectCreated:*
          rules:
            - suffix: .zip
          existing: true
  functor:
    handler: functor.handler
    events:
      - http:
          method: post
          path: functor
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
            maxAge: 600

resources:
  Resources:
    ExtensionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ExtensionId
            AttributeType: S
          - AttributeName: Name
            AttributeType: S
        KeySchema:
          - AttributeName: ExtensionId
            KeyType: HASH
          - AttributeName: Name
            KeyType: RANGE
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST
