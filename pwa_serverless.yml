service: pwa-asset-service

frameworkVersion: ">=2.0.0 <3.0.0"

provider:
  name: aws
  runtime: nodejs10.x

  apiGateway:
    minimumCompressionSize: 1024

  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'us-east-1'}
  baseDomainName: ${file(config/env.yml):${self:provider.stage}.baseDomainName}
  domainName: ${file(config/env.yml):${self:provider.stage}.domainName}
  memorySize: 256
  timeout: 30

  tracing: true

  environment: ${file(config/env.yml):${self:provider.stage}.environment}

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-plugin-tracing
  - serverless-apigw-binary
  - serverless-apigwy-binary

custom:
  alarmTopic: ${file(config/env.yml):${self:provider.stage}.alarmTopic}
  customDomain:
    domainName: ${file(config/env.yml):${self:provider.stage}.domainName}
    certificateName: ${file(config/env.yml):${self:provider.stage}.acmName}
    createRoute53Record: true
    basePath: ""
  apigwBinary:
    types:
      - application/zip

functions:
  postAssets:
    handler: build/node_modules/${self:service}.postAssets
    events:
      - http:
          contentHandling: CONVERT_TO_BINARY
          path: api/assets
          method: post
          cors: &corsConfiguration
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - PWA-ASSET-SERVICE-API-VERSION

resources:
  Resources:
    SNSTopicLambdaDeadLetterQueue:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:service}-${self:provider.stage}-lambda-dlq
        TopicName: ${self:service}-${self:provider.stage}-lambda-dlq

