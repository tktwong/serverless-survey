service: serverless-Dev-hello-world

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-southeast-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - s3:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - cloudwatch:GetMetricData
      Resource: "*"
    # - Effect: "Allow"
    #   Action:
    #     - rds:*
    #   Resource: ""

  

# The `functions` block defines what code to deploy
functions:
  AddA :
    handler: account/AddAccount.AddA
    events:
      - http:
          path: AddAccount
          integration : lambda
          method: post
          cors: true 
  DelA :
    handler: ccount/DelAccount.DelA
    events:
      - http:
          path: DeleteAccount
          integration : lambda
          method: post
          cors: true 
  EditA :
    handler: account/EditAccount.EditA
    events:
      - http:
          path: EditAccount
          integration : lambda
          method: post
          cors: true 
  GetImg :
    handler: image/DynamoGetImgLink.DGIL
    events:
      - http:
          path: DynamoGetImg
          integration : lambda
          method: post
          cors: true
  AddImg :
    handler: image/DynamoAddDiagram.AddImg
    events:
      - http:
          path: DynamoAddImg
          integration : lambda
          method: post
          cors: true 
  EditCus :
    handler: customer/EditCustomer.EditCus
    events:
      - http:
          path: EditCustomer
          integration : lambda
          method: post
          cors: true 
  EditP :
    handler: project/EditProject.EditP
    events:
      - http:
          path: EditProject
          integration : lambda
          method: post
          cors: true 
  AddCus :
    handler: customer/AddCustomer.AddCus
    events:
      - http:
          path: AddCustomer
          integration : lambda
          method: post
          cors: true 
  AddAut :
    handler: authorized/AddAuthorized.AddAut
    events:
      - http:
          path: AddAuthorized
          integration : lambda
          method: post
          cors: true 
  DelAut :
    handler: authorized/DelAuthorized.DelAut
    events:
      - http:
          path: DeleteAuthorized
          integration : lambda
          method: post
          cors: true 
  EditAut :
    handler: authorized/EditAuthorized.EditAut
    events:
      - http:
          path: EditAuthorized
          integration : lambda
          method: post
          cors: true
  AddOwner :
    handler: owner/AddOwner.AddOwner
    events:
      - http:
          path: Owner
          integration : lambda
          method: post
          cors: true
  DelOwner:
    handler: owner/DelOwner.DelOwner
    events:
      - http:
          path: Owner
          integration : lambda
          method: get
          cors: true
  EditOwner:
    handler: owner/EditOwner.EditOwner
    events:
      - http:
          path: Owner
          integration : lambda
          method: put
          cors: true
  PUTTicket:
    handler: ticket/AddTicket.AddTicket
    events:
      - http:
          path: PUTTicket
          integration : lambda
          method: post
          cors: true
  DelTicket:
    handler: ticket/DelTicket.DelTicket
    events:
      - http:
          path: DelTicket
          integration : lambda
          method: post
          cors: 
  EditTicket:
    handler: ticket/EditTicket.EditTicket
    events:
      - http:
          path: EditTicket
          integration : lambda
          method: post
          cors: true
  GetTicket:
    handler: ticket/GetTicket.GetTicket
    events:
      - http:
          path: GetTicket
          integration : lambda
          method: post
          cors: true
   