
plugins: 
  - "serverless-pseudo-parameters"

#Declare variable that can be reused :)
custom: 
  accountId: #{AWS::AccountId}
  awsRegion: "${file(properties.yml):aws-region}"
  stage: ${opt:stage, 'dev'}
  DmiDefaultLambdaRoleName: "dmi-default-lambda-role-${self:custom.stage}--${self:custom.serviceName}"
  dmiDefaultAppSyncRoleName: "dmi-default-appsync-role-${self:custom.stage}--${self:custom.serviceName}"
  blogsTableName: "DmiBlogsTable-${self:custom.stage}"
  dynamodb: 
    blogsTable: 
      rcu: "${file(properties.yml):blogs-table-rcu}"
      wcu: "${file(properties.yml):blogs-table-wcu}"
    blogCategoryGsi: 
      rcu: "${file(properties.yml):blogs-table-gsi-blog-category-rcu}"
      wcu: "${file(properties.yml):blogs-table-gsi-blog-category-wcu}"
  serviceName: "${file(properties.yml):service-name}"

provider: 
  name: aws
  region: #{AWS::Region}
  role: AppSyncServiceRole
  runtime: nodejs8.10
  stage: "${self:custom.stage}"
  #environment:
    #ENV_VAR_1: "<VALUE-X>"
    #ENV_VAR_2: "<VALUE-X>"

service: "${self:custom.serviceName}"

resources: 
  Resources:
    BlogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.blogsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: blogCategory
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: "${self:custom.dynamodb.blogsTable.rcu}"
          WriteCapacityUnits: "${self:custom.dynamodb.blogsTable.wcu}"
        GlobalSecondaryIndexes:
          - 
            IndexName: blogCategoryIndex
            KeySchema:
              - AttributeName: blogCategory
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: "${self:custom.dynamodb.blogCategoryGsi.rcu}"
              WriteCapacityUnits: "${self:custom.dynamodb.blogCategoryGsi.wcu}"

# Let's define a role assumed by AppSync to access resources  
    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "${self:custom.dmiDefaultAppSyncRoleName}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "appsync-policy-${self:custom.serviceName}"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "*"
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "*"
#Let's define GraphQLApi, once created other AppSync resources will be attached to it :)
    AppSyncApi:
      Type: "AWS::AppSync::GraphQLApi"
      Description: "The GraphQL API for Blog Management"
      Properties: 
        AuthenticationType: API_KEY
        Name: "${self:provider.stage}-${self:custom.serviceName}"

# AppSyncApi defined above will use this Schema  
    AppSyncSchema:
      Type: "AWS::AppSync::GraphQLSchema"
      Properties: 
        ApiId:
           Fn::GetAtt:
              - AppSyncApi
              - ApiId
        Definition: |
            type Blog {
              id: String
              blogCategory: String
              blogDescription: String
              bloggerEmail: String
              likes: Int
              disLikes: Int
            }

            type Query {
              getBlogs: [Blog]
            }
            type Mutation {
              createBlog(
                    id: String
                    blogCategory: String
                    blogDescription: String
                    bloggerEmail: String
                    likes: Int
                    disLikes: Int 
                  ): Blog
            }
            type Subscription {
              createdBlog: Blog
              @aws_subscribe(mutations: ["createBlog"])
            }
            schema {
              query: Query
              mutation: Mutation
              subscription: Subscription
            }

    GetBlogsResolver: 
      DependsOn: AppSyncSchema
      Type: "AWS::AppSync::Resolver"
      Properties:
        TypeName: Query
        ApiId:
           Fn::GetAtt:
              - AppSyncApi
              - ApiId
        DataSourceName:
           Fn::GetAtt:
              - BlogsTableDataSource
              - Name
        FieldName: getBlogs
        RequestMappingTemplate: |
            {
                "version" : "2017-02-28",
                "operation" : "Scan"
            }
        ResponseMappingTemplate: $util.toJson($context.result.items)

  
    CreateBlogResolver: 
      DependsOn:
         - AppSyncSchema
         - BlogsTableDataSource
      Type: "AWS::AppSync::Resolver"
      Properties:
        TypeName: Mutation 
        ApiId:
           Fn::GetAtt:
              - AppSyncApi
              - ApiId
        DataSourceName:
           Fn::GetAtt:
              - BlogsTableDataSource
              - Name
        FieldName: createBlog
        RequestMappingTemplate: |
            {
              "version": "2017-02-28",
              "operation": "PutItem",
              "key": {
                "id": $util.dynamodb.toDynamoDBJson($util.autoId()),
              },
              "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args),
              "condition": {
                "expression": "attribute_not_exists(#id)",
                "expressionNames": {
                  "#id": "id",
                },
              },
            }
        ResponseMappingTemplate: $util.toJson($context.result)

# We need Datasources that can be used by Resolvers to resolve values of fields in the Schema  
    BlogsTableDataSource:
      DependsOn: BlogsTable
      Type: "AWS::AppSync::DataSource"
      Properties:
        Type: AMAZON_DYNAMODB
        Name: blogsDataSource
        Description: "Datasource for blog operations"
        DynamoDBConfig:
          TableName: ${self:custom.blogsTableName}
          AwsRegion: ${self:custom.awsRegion}
        ApiId:
           Fn::GetAtt: 
              - AppSyncApi 
              - ApiId
        ServiceRoleArn:
            Fn::GetAtt:
              - AppSyncServiceRole
              - Arn
