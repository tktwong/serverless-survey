service:
  name: sls-enhanced-todo

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-canary-deployments

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true
  
  environment:
    TODOS_TABLE: Todos-enhanced-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    IMAGES_S3_BUCKET: serverless-todos-enhanced-pravin-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'

custom:
  topicName: todostopic-${self:provider.stage}
  topicPublisher: sls-enhanced-todo-dev-SyncWithElasticsearch

  documentation:
    api:
      info:
        version: v1.0.0
        title: TODOS API
        description: Serverless application for Todos
    models:
      - name: TodoRequestCreate
        contentType: application/json
        schema: ${file(src/requests/create-todo-request.json)}
      - name: TodoRequestUpdate
        contentType: application/json
        schema: ${file(src/requests/update-todo-request.json)}
      - name: TodoRequestDelete
        contentType: application/json
        schema: ${file(src/requests/delete-todo-request.json)}
      - name: TodoRequestSearch
        contentType: application/json
        schema: ${file(src/requests/search-todo-request.json)}

  serverless-offline:
    port: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages: # Add this section of the config
      - dev
      
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Function for get all todos for user
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
          documentation:
            summary: Get all todos for user
            description: All Todos of user
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  # function to create new Todo
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new Todo
            requestModels:
              'application/json': TodoRequestCreate

    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # Function to update existing todo
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update existing todo
            description: Update existing todo and save the modified one
            requestModels:
              'application/json': TodoRequestUpdate
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
          
  # Function delete the existing todo for the user
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: delete existing todo
            description: delete existing todo
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
          

  # Function generates new presign url for uploading meta content
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      
  # Uncomment if you want to enable Elasticsearch sync
  SyncWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt TodoSearch.DomainEndpoint
      SNS_ARN:
        Fn::Join:
          - ':'
          - - arn:aws:sns
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - ${self:custom.topicName}
      TOPIC_NAME: ${self:custom.topicName}
    handler: src/lambda/dynamodb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TodoDynamoDBTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sns:Publish
        Resource: 
          Fn::Join:
            - ':'
            - - arn:aws:sns
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.topicName}

  QueryTodo:
    environment:
      ES_ENDPOINT: !GetAtt TodoSearch.DomainEndpoint
    handler: src/lambda/http/searchTodo.handler
    events:
      - http:
          method: post
          path: todos/search/
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Query todos
            description: Query todos based on startwith logic
            requestModels:
              'application/json': TodoRequestSearch
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

      
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicyForTodoEnhanced
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForTODOSBucketEnhanced
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    
    TodoDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    TodosTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Todos channel topic
        TopicName: ${self:custom.topicName}

  #  SNSTopicPolicy:
  #    Type: AWS::SNS::TopicPolicy
  #    Properties:
  #      PolicyDocument:
  #        Version: "2012-10-17"
  #        Statement:
  #          - Effect: Allow
  #            Principal:
  #              AWS: "*"
  #            Action: sns:Publish
  #            Resource:
  #              !Ref TodosTopic
  #            Condition:
  #              ArnLike:
  #                AWS:SourceArn: arn:aws:lambda:::${self:custom.topicPublisher}
  #      Topics:
  #        - !Ref TodosTopic
          
    # Uncomment if you want to create Elasticsearch
    TodoSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: todos-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'
    
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'