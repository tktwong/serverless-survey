
service: feature-flag-service

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  runtime: nodejs12.x
  memorySize: 512
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminConfirmSignUp
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:AdminSetUserSettings
        - cognito-idp:ChangePassword
        - cognito-idp:ConfirmSignUp
        - cognito-idp:GetUser
        - cognito-idp:ListUsers
        - s3:*
      Resource: "*"

custom:
  prefix: ${self:provider.stage}-${self:service}
  serverless-offline:
    httpPort: 8080
  apiGatewayCaching:
    enabled: true
    ttlInSeconds: 0

plugins:
  - serverless-offline
  - serverless-api-gateway-caching


package:
  individually: true
  exclude:
    - ui/**
    - node_modules/**
    - infrastructure/**


functions:
  auth:
    environment:
      NODE_ENV: production
      COGNITO_USER_POOL_ID: ${opt:appPoolId, 'eu-west-1_TijnuyGsL'}
      COGNITO_APP_CLIENT_ID: ${opt:appPoolClientId, '4b8vhokqp1upoa5t4hlp9ourhk'}
    handler: auth/serverless/index.handler

    events:
      - http:
          path: /auth/{any+}
          method: POST
          cors: true
          access: public
  api:
    environment:
      FEATURE_S3_BUCKET: ${opt:featureDatabucketName, '${self:provider.stage}-feature-service-bucket'}
      FEATURE_CACHE_TTL_MINS: 1
      COGNITO_APP_POOL_ID: ${opt:appPoolId, 'eu-west-1_TijnuyGsL'}
      COGNITO_USER_POOL_ID: eu-west-1_bxc84ueLv

    handler: service/serverless/index.handler
    events:
      - http:
          path: /api/{any+}
          method: ANY
          cors:
            origin: '*' # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-client-type
            allowCredentials: true
          access: public
          caching:
            enabled: true
            ttlInSeconds: 60
            cacheKeyParameters:
              - name: request.querystring.productName
              - name: request.querystring.timestamp
              - name: request.querystring.name
resources:
  Resources:
    FeatureServiceUIS3Website:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        BucketName: ${opt:featureUIbucketName}
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: "FeatureServiceUIS3Website"
        PolicyDocument:
          Statement:
            -
              Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource:
                Fn::Join:
                  - ""
                  -
                    - "arn:aws:s3:::"
                    -
                      Ref: "FeatureServiceUIS3Website"
                    - "/*"
              Principal: "*"
    FeatureServiceDataBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: Private
        BucketName: ${opt:featureDatabucketName}
    FeatureServiceUICloudFrontCDN:
      Type: AWS::CloudFront::Distribution
      DependsOn:
      - FeatureServiceUIS3Website
      Properties:
        DistributionConfig:
          Comment: Cloudfront Distribution pointing to S3 bucket
          Origins:
          - DomainName: !Select [2, !Split ["/", !GetAtt FeatureServiceUIS3Website.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
          Enabled: true
          HttpVersion: 'http2'
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            Compress: true
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          CustomErrorResponses:
            - ErrorCode: '404'
              ResponsePagePath: "/index.html"
              ResponseCode: '200'
              ErrorCachingMinTTL: '300'
          PriceClass: PriceClass_100
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
            MinimumProtocolVersion: TLSv1.2_2019

  Outputs:
    WebsiteURL:
      Value: !GetAtt
        - FeatureServiceUIS3Website
        - WebsiteURL
      Description: URL for features UI website hosted on S3
    FeatureUIBucketName:
      Value: !Ref 'FeatureServiceUIS3Website'
      Description: Name of S3 bucket to hold website content
    FeatureServiceDataBucketName:
      Value: !Ref 'FeatureServiceDataBucket'
      Description: Name of S3 bucket to hold feature service data
    CloudfrontEndpoint:
      Value: !GetAtt [FeatureServiceUICloudFrontCDN, DomainName]
      Description: Endpoint for Cloudfront distribution
