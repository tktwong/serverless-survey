service: prs-workshop
frameworkVersion: "1"

custom:
    name: adil
    email: uganoghli@gmail.com

provider:
    name: aws
    runtime: nodejs12.x
    environment: 
        serviceName: ${self:service}
        stage: ${self:provider.stage}
    iamRoleStatements:
        - Effect: Allow
          Action: dynamodb:scan
          Resource: !GetAtt RestaurantsTable.Arn
        - Effect: Allow
          Action: execute-api:Invoke
          Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:#{ApiGatewayRestApi}/${self:provider.stage}/GET/restaurants/
        - Effect: Allow
          Action: ssm:GetParameters*
          Resource:
            - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/${self:provider.stage}/get-restaurants/config
            - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/${self:provider.stage}/search-restaurants/config
            - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/${self:provider.stage}/search-restaurants/secretString
        - Effect: Allow
          Action: kms:Decrypt
          Resource: ${ssm:/dev/kmsArn}
# add an iam role to give permission for dynamodb scan

plugins:
    - serverless-export-env
    - serverless-pseudo-parameters

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
    get-index:
        handler: functions/get-index.handler
        events:
            - http:
                  path: /
                  method: get
        environment:
            restaurants_api: 
                Fn::Join:
                    -   ""
                    -   - https://
                        - !Ref ApiGatewayRestApi
                        - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/restaurants
            cognito_user_pool_id: !Ref CognitoUserPool
            cognito_client_id: !Ref WebCognitoUserPoolClient
    get-restaurants:
        handler: functions/get-restaurants.handler
        events:
            - http:
                  path: /restaurants/
                  method: get
                  authorizer: aws_iam
        environment:
            restaurants_table: !Ref RestaurantsTable
    search-restaurants:
        handler: functions/search-restaurants.handler
        events:
            - http:
                  path: /restaurants/search/
                  method: post
                  authorizer:
                    name: CognitoAuthorizer
                    type: COGNITO_USER_POOLS
                    arn: !GetAtt CognitoUserPool.Arn
        environment:
            restaurants_table: !Ref RestaurantsTable
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
    Resources:
        RestaurantsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                BillingMode: PAY_PER_REQUEST
                AttributeDefinitions:
                    - AttributeName: name
                      AttributeType: S
                KeySchema:
                    - AttributeName: name
                      KeyType: HASH
        CognitoUserPool:
            Type: AWS::Cognito::UserPool
            Properties:
                AliasAttributes:
                    - email
                UsernameConfiguration:
                    CaseSensitive: false
                AutoVerifiedAttributes:
                    - email
                Policies:
                    PasswordPolicy:
                        MinimumLength: 8
                        RequireLowercase: true
                        RequireNumbers: true
                        RequireUppercase: true
                        RequireSymbols: true
                Schema:
                    - AttributeDataType: String
                      Mutable: true
                      Name: given_name
                      Required: true
                      StringAttributeConstraints:
                          MinLength: "1"
                    - AttributeDataType: String
                      Mutable: true
                      Name: family_name
                      Required: true
                      StringAttributeConstraints:
                          MinLength: "1"
                    - AttributeDataType: String
                      Mutable: true
                      Name: email
                      Required: true
                      StringAttributeConstraints:
                          MinLength: "1"
        WebCognitoUserPoolClient:
            Type: AWS::Cognito::UserPoolClient
            Properties:
              ClientName: web
              UserPoolId: !Ref CognitoUserPool
              ExplicitAuthFlows:
                - ALLOW_USER_SRP_AUTH
                - ALLOW_REFRESH_TOKEN_AUTH
              PreventUserExistenceErrors: ENABLED
        ServerCognitoUserPoolClient:
            Type: AWS::Cognito::UserPoolClient
            Properties:
              ClientName: server
              UserPoolId: !Ref CognitoUserPool
              ExplicitAuthFlows:
                - ALLOW_ADMIN_USER_PASSWORD_AUTH
                - ALLOW_REFRESH_TOKEN_AUTH
              PreventUserExistenceErrors: ENABLED
        ServiceUrlParameter:
            Type: AWS::SSM::Parameter
            Properties:
                Type: String
                Name: /${self:service}/${self:provider.stage}/serviceUrl
                Value:
                    Fn::Join:
                        -   ""
                        -   - https://
                            - !Ref ApiGatewayRestApi
                            - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket

    Outputs:
        RestApiUrl:
            Value: 
                Fn::Join:
                    -   ""
                    -   - https://
                        - !Ref ApiGatewayRestApi
                        - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
        RestaurantsTableName:
            Value: !Ref RestaurantsTable
        CognitoUserPoolId:
            Value: !Ref CognitoUserPool
        CognitoUserPoolArn:
            Value: !GetAtt CognitoUserPool.Arn
        CognitoUserPoolWebClientId:
            Value: !Ref WebCognitoUserPoolClient
        CognitoUserPoolServerClientId:
            Value: !Ref ServerCognitoUserPoolClient
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
