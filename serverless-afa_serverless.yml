# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: serverless-afa

# Configuration variables
custom:
  stripe-secrets: ${file(credentials/stripe-secrets.json)}
  donation-sheet-credentials: ${file(credentials/donation-sheet-credentials.json)}
  location-sheet-credentials: ${file(credentials/location-sheet-credentials.json)}
  webpack:
    webpackConfig: ./webpack.config.js # serverless-webpack configuration
    includeModules: true # Enable auto-packing of external modules


# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  # profile: personal
  # region: ap-southeast-1
  environment:
    STRIPE_TEST_SECRET_KEY: ${self:custom.stripe-secrets.stripeTestSecretKey} # Stripe secret API key
    STRIPE_LIVE_SECRET_KEY: ${self:custom.stripe-secrets.stripeLiveSecretKey} # Stripe secret API key
    DONATION_SHEET_CLIENT_ID: ${self:custom.donation-sheet-credentials.installed.client_id} # Sheet client ID 
    DONATION_SHEET_CLIENT_SECRET: ${self:custom.donation-sheet-credentials.installed.client_secret} # Sheet Client Secret 
    DONATION_SHEET_REDIRECT_URI_1: ${self:custom.donation-sheet-credentials.installed.redirect_uris[0]} # Sheet redirect uri (1 of 2) 
    LOCATION_SHEET_CLIENT_ID: ${self:custom.location-sheet-credentials.installed.client_id} # Sheet client ID 
    LOCATION_SHEET_CLIENT_SECRET: ${self:custom.location-sheet-credentials.installed.client_secret} # Sheet Client Secret 
    LOCATION_SHEET_REDIRECT_URI_1: ${self:custom.location-sheet-credentials.installed.redirect_uris[0]} # Sheet redirect uri (1 of 2) 


# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless optimization
package:
  individually: true

# The `functions` block defines what code to deploy
functions:
  createCharge:
    handler: functions/createCharge.handler
    description: Lambda function to send charge to stripe
    # The `events` block defines how to trigger the handler.createCharge code
    events:
      - http:
          path: charges
          method: post
          cors: true

  updateGoogleSheet:
    handler: functions/updateGoogleSheet.handler
    description: Lambda function to update Donations Google Spreadsheet
    # timeout: 900
    events:
      - http:
          path: updateGoogleSheet
          method: post
          cors: true
    # - schedule:
    #     rate: rate(1 hour)
    #     enabled: tru
  getDonationData:
    handler: functions/getDonationData.handler
    description: Lambda function to get donation data from Google Sheets 
    # timeout: 900
    events:
      - http:
          path: getDonationData
          method: get 
          cors: true
    # - schedule:
    #     rate: rate(1 hour)
    #     enabled: tru
  getPublicDonationData:
    handler: functions/getPublicDonationData.handler
    description: Lambda function to get donation data from Google Sheets 
    # timeout: 900
    events:
      - http:
          path: getPublicDonationData 
          method: get 
          cors: true
    # - schedule:
    #     rate: rate(1 hour)
    #     enabled: tru
  updateLocationSheet:
    handler: functions/updateLocationSheet.handler
    description: Lambda function to update Locations Google Spreadsheet
    # timeout: 900
    events:
      - http:
          path: updateLocationSheet
          method: post
          cors: true
    # - schedule:
    #     rate: rate(1 hour)
    #     enabled: tru
  getLocationData:
    handler: functions/getLocationData.handler
    description: Lambda function to get donation data from Google Sheets 
    # timeout: 900
    events:
      - http:
          path: getLocationData 
          method: get 
          cors: true
    # - schedule:
    #     rate: rate(1 hour)
    #     enabled: tru