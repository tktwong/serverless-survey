service: serverless-playground

useDotenv: true

package:
  include:
    - dist/**.js
  exclude:
    - ./**.md
    - ./**.env*
    - ./tsconfig*.json
    - coverage/**
    - nest-cli.json
    - src/**
    - test/**

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, env:SLS_REGION}
  stage: ${opt:stage, 'develop'}
  apiGateway:
    shouldStartNameWithService: true
  deploymentBucket:
    name: ${env:SLS_DEPLOYMENT_BUCKET}
    blockPublicAccess: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: ${env:LAMBDA_AWS_NODEJS_CONNECTION_REUSE_ENABLED}
  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
        - 's3:GetObject'
        - 's3:PutObject'
      Resource: 
        - 'arn:aws:s3:::${env:S3_OBJECTS_BUCKET_NAME}'
        - 'arn:aws:s3:::${env:S3_OBJECTS_BUCKET_NAME}/*'
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
      Resource:
        - ${env:SQS_OBJECTS_QUEUE_ARN}
  tags:
    app:environment: ${opt:stage, self:provider.stage}
    app:service: ${self:service}
    app:team: fpusch

functions:
  main:
    handler: dist/serverless.handler
    environment:
      S3_OBJECTS_BUCKET_NAME: ${env:S3_OBJECTS_BUCKET_NAME}
      SQS_OBJECTS_QUEUE_URL: ${env:SQS_OBJECTS_QUEUE_URL}
    events:
      - http:
          method: any
          path: /{any+}