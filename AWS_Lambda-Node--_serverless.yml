# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-nodejs # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=1.2"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
#  stage: dev
  region: ap-southeast-2

# you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  #    - Effect: "Allow"
  #      Action:
  #        - "dynamodb:*"
  #      Resource:
  #         Fn::Join:
  #          - ""
  #          - - "arn:aws:dynamodb:*:*:table/*"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  writeData:
    handler: handler.writeData
    events:
     - http:
         path: users/create
         method: post
  readData:
    handler: handler.readData
    events:
     - http:
         path: users/read/userid/{userid}/notebookId/{notebookId}
         method: get
  readById:
    handler: handler.readById
    events:
     - http:
         path: users/userid/{userid}/noteid/{noteid}
         method: get
  deleteData:
    handler: handler.deleteData
    events:
      - http:
          path: users/delete/userid/{userid}/noteid/{noteid}
          method: delete
  updateData:
    handler: handler.updateData
    events:
      - http:
          path: users/update
          method: put
  readByNotebook:
    handler: handler.readByNotebook
    events:
      - http:
          path: new/userid/{userid}/notebookId/{notebookId}
          method: get
  deleteByNotebook:
    handler: handler.deleteByNotebook
    events:
      - http:
          path: users/userid/{userid}/byNotebook/{notebookId}
          method: delete
  writeFeedback:
    handler: feedbackHandler.writeFeedback
    events:
      - http:
          path: feedback
          method: post

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
