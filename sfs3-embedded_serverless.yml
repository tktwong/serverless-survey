#
# VPC Notes
#
# To use this sample with a VPC, you need the security groups and private
# subnets for your VPC content. Uncomment the VPC sections under 
# stepA - stepF function definitions, and uncomment the eniPolicy section 
# under resources, being sure to provide the appropriate IDs associated with 
# your deployment environment.


service: sfs3embedded

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs8.10
  apiKeys:
    - sfs3embedded-${opt:stage, self:provider.stage}
  usagePlan:
    throttle:
      burstLimit: 10
      rateLimit: 5
  environment:
    BUCKET_NAME: ${self:custom.bucketName}
    STEP_FN_ARN: 'arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:sfn-${self:service}-${self:provider.stage}'
    DOWNSTREAM_ARN: 'arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:sfnsubprocess-${self:service}-${self:provider.stage}'
custom:
  bucketName: ds97068processinput-${self:service}-${self:provider.stage}

functions:
  startProc:
    handler: facade.startProcess
    role: processStartRole
    events:
      - http: POST start-process
  processState:
    handler: facade.processState
    role: processStateRole
    events:
      - http: GET process-state
  processData:
    handler: facade.processData
    role: processDataRole
    events:
      - http: GET process-data
  stepA:
    handler: aprocess.stepA
    timeout: 10
    role:
      stepRole
#    vpc:
#      securityGroupIds:
#        - sg-b05da5fd
#      subnetIds:
#        - subnet-c4239ba3
#        - subnet-7cd91642

  stepB:
    handler: aprocess.stepB
    timeout: 10
    role:
      stepRole
#    vpc:
#      securityGroupIds:
#        - sg-b05da5fd
#      subnetIds:
#        - subnet-c4239ba3
#        - subnet-7cd91642

  stepC:
    handler: aprocess.stepC
    timeout: 10
    role:
      stepRole
#    vpc:
#      securityGroupIds:
#        - sg-b05da5fd
#      subnetIds:
#        - subnet-c4239ba3
#        - subnet-7cd91642

  stepD:
    handler: aprocess.stepD
    timeout: 10
    role:
      stepRole
#    vpc:
#      securityGroupIds:
#        - sg-b05da5fd
#      subnetIds:
#        - subnet-c4239ba3
#        - subnet-7cd91642

  stepE:
    handler: aprocess.stepE
    timeout: 10
    role:
      stepRole
#    vpc:
#      securityGroupIds:
#        - sg-b05da5fd
#      subnetIds:
#        - subnet-c4239ba3
#        - subnet-7cd91642

  stepF:
    handler: aprocess.stepF
    timeout: 10
    role:
      stepRole
 #   vpc:
 #     securityGroupIds:
 #       - sg-b05da5fd
 #     subnetIds:
 #       - subnet-c4239ba3
 #       - subnet-7cd91642

  downstreamA:
    handler: downstream.A
    role:
      minimalStepRole
  downstreamB:
    handler: downstream.B
    role:
      minimalStepRole
  downstreamC:
    handler: downstream.C
    role:
      minimalStepRole



stepFunctions:
  stateMachines:
    ProcessA:
      name: sfn-${self:service}-${opt:stage}
      role: "arn:aws:iam::#{AWS::AccountId}:role/stateMachineRole-${self:service}-${opt:stage}"
      definition:
        Comment: "A process model"
        StartAt: step-a
        States:
          step-a:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-stepA"
            TimeoutSeconds: 11
            Next: step-b
          step-b:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-stepB"
            TimeoutSeconds: 11
            Next: step-c
            Retry:
            - ErrorEquals:
              - S3DataPreconditionError
              IntervalSeconds: 1
              BackoffRate: 1
              MaxAttempts: 3
          step-c:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-stepC"
            TimeoutSeconds: 11
            Next: step-d
            Retry:
            - ErrorEquals:
              - S3DataPreconditionError
              IntervalSeconds: 1
              BackoffRate: 1
              MaxAttempts: 3
          step-d:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-stepD"
            TimeoutSeconds: 11
            Next: step-e
            Retry:
            - ErrorEquals:
              - S3DataPreconditionError
              IntervalSeconds: 1
              BackoffRate: 1
              MaxAttempts: 3
          step-e:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-stepE"
            TimeoutSeconds: 11
            Next: step-f
            Retry:
            - ErrorEquals:
              - S3DataPreconditionError
              IntervalSeconds: 1
              BackoffRate: 1
              MaxAttempts: 3
          step-f:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-stepF"
            TimeoutSeconds: 11
            End: true
            Retry:
            - ErrorEquals:
              - S3DataPreconditionError
              IntervalSeconds: 1
              BackoffRate: 1
              MaxAttempts: 3

    DownstreamProcess:
      name: sfnsubprocess-${self:service}-${opt:stage}
      role: "arn:aws:iam::#{AWS::AccountId}:role/subprocSMRole-${self:service}-${opt:stage}"
      definition:
        Comment: 'downstream process invoked from hellostepfunc1'
        StartAt:
          downstream-a
        States:
          downstream-a:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-downstreamA"
            Next: downstream-b
          downstream-b:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-downstreamB"
            Next: downstream-c
          downstream-c:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-downstreamC"
            End: true


resources:
  Resources:
    ProcessInputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: BucketOwnerFullControl
 


    stepRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Join: [ '-', ['stepRole', '${self:service}',  '${self:provider.stage}' ]]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"

#    eniPolicy:
#      Type: AWS::IAM::ManagedPolicy
#      Properties:
#        PolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#          - Effect: Allow
#            Action:
#            - ec2:CreateNetworkInterface
#            - ec2:DescribeNetworkInterfaces
#            - ec2:DeleteNetworkInterface
#            Resource: '*'
#        Roles:
#        - Ref: stepRole


    logsPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
        Roles:
        - Ref: stepRole
        - Ref: minimalStepRole
        - Ref: processStartRole
        - Ref: processDataRole
        - Ref: processStateRole
        
    stepfnPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "states:StartExecution"
            Resource:
              - 'Fn::Join':
                  - ''
                  -
                    - "arn:aws:states:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":stateMachine:sfnsubprocess-"
                    - ${self:service}
                    - "-"
                    - ${self:provider.stage}
        Roles:
        - Ref: stepRole

    s3ReadWritePolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            Resource:
              - 'Fn::Join':
                - '/'
                -
                  - Fn::GetAtt: [ ProcessInputBucket, Arn ]
                  - '*'
        Roles:
        - Ref: stepRole

    minimalStepRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Join: [ '-', ['minimalStepRole', '${self:service}',  '${self:provider.stage}' ]]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
                  
    stateMachineRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Join: [ '-', ['stateMachineRole', '${self:service}',  '${self:provider.stage}' ]]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - 'Fn::Join':
                    - ''
                    -
                      - 'states.'
                      - Ref: 'AWS::Region'
                      - '.amazonaws.com'
              Action: "sts:AssumeRole"
        Path: "/"

    stateMachinePolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource:
                - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-stepA"
                - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-stepB"
                - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-stepC"
                - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-stepD"
                - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-stepE"
                - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-stepF"
        Roles:
        - Ref: stateMachineRole

    subprocStateMachineRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Join: [ '-', ['subprocSMRole', '${self:service}',  '${self:provider.stage}' ]]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - 'Fn::Join':
                    - ''
                    -
                      - 'states.'
                      - Ref: 'AWS::Region'
                      - '.amazonaws.com'
              Action: "sts:AssumeRole"
        Path: "/"

    subprocStateMachinePolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource:
                - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-downstreamA"
                - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-downstreamB"
                - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-downstreamC"
        Roles:
        - Ref: subprocStateMachineRole


    processStartRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Join: [ '-', ['processStartRole', '${self:service}',  '${self:provider.stage}' ]]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"


    startStateMachinePolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "states:StartExecution"
            Resource:
              - 'Fn::Join':
                  - ''
                  -
                    - "arn:aws:states:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":stateMachine:sfn-"
                    - ${self:service}
                    - '-'
                    - ${self:provider.stage}
        Roles:
        - Ref: processStartRole

    writeBucketPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource:
              - 'Fn::Join':
                - '/'
                -
                  - Fn::GetAtt: [ ProcessInputBucket, Arn ]
                  - '*'
        Roles:
        - Ref: processStartRole
  
    processDataRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Join: [ '-', ['processDataRole', '${self:service}',  '${self:provider.stage}' ]]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"

    readBucketPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
              - 'Fn::Join':
                - '/'
                -
                  - Fn::GetAtt: [ ProcessInputBucket, Arn ]
                  - '*'
        Roles:
        - Ref: processDataRole

    processStateRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName:
          Fn::Join: [ '-', ['processStateRole', '${self:service}',  '${self:provider.stage}' ]]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"


    sfnGetStatePolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "states:DescribeExecution"
            Resource:
              - 'Fn::Join':
                  - ''
                  -
                    - "arn:aws:states:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":execution:sfn-"
                    - ${self:service}
                    - '-'
                    - ${self:provider.stage}
                    - ':*'

        Roles:
        - Ref: processStateRole


plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
