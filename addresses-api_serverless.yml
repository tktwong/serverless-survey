service: addresses-api
provider:
  name: aws
  runtime: dotnetcore3.1
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
package:
  individually: true

functions:
  addressesApi:
    name: ${self:service}-${self:provider.stage}
    handler: AddressesAPI::AddressesAPI.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    package:
      artifact: ./AddressesAPI/bin/release/netcoreapp3.1/addresses-api.zip
    environment:
      CONNECTION_STRING: Host=${ssm:/addresses-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/addresses-api/${self:provider.stage}/postgres-port};Database=addresses_api;Username=${ssm:/addresses-api/${self:provider.stage}/postgres-username};Password=${ssm:/addresses-api/${self:provider.stage}/postgres-password}
      ELASTICSEARCH_DOMAIN_URL: ${ssm:/addresses-api/${self:provider.stage}/elasticsearch-domain}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: true
          cors: true
          authorizer:
            arn: ${ssm:/platform-apis-lambda-authorizer-arn}
            type: request
  reindexElasticsearchAlias:
    name: ${self:service}-reindex-es-alias-${self:provider.stage}
    handler: Reindex::Reindex.Handler::ReindexAlias
    role: lambdaExecutionRole
    timeout: 60
    package:
      artifact: ./Reindex/bin/release/netcoreapp3.1/reindex-es-alias.zip
    environment:
      SQS_QUEUE_URL: ${ssm:/addresses-api/${self:provider.stage}/reindexing-queue}
      ELASTICSEARCH_DOMAIN_URL: ${ssm:/addresses-api/${self:provider.stage}/elasticsearch-domain}
    events:
      - schedule:
          rate: cron(0 01 * * ? *)
          input:
            alias: "hackney_addresses"
            fromIndex: "hackney_address"
            deleteAfterReindex: true
      - schedule:
          rate: cron(0 02 * * ? *)
          input:
            alias: "national_addresses"
            fromIndex: "national_address"
            deleteAfterReindex: true
  switchElasticsearchAliasAfterReindex:
    name: ${self:service}-switch-es-alias-after-reindex-${self:provider.stage}
    handler: Reindex::Reindex.Handler::SwitchAlias
    role: lambdaExecutionRole
    timeout: 30
    package:
      artifact: ./Reindex/bin/release/netcoreapp3.1/reindex-es-alias.zip
    environment:
      SQS_QUEUE_URL: ${ssm:/addresses-api/${self:provider.stage}/reindexing-queue}
      ELASTICSEARCH_DOMAIN_URL: ${ssm:/addresses-api/${self:provider.stage}/elasticsearch-domain}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - sqsQueueReindexingAlias
              - Arn
          batchSize: 1
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: sqsQueueTrigger
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "sqs:ReceiveMessage"
                    - "sqs:GetQueueAttributes"
                    - "sqs:DeleteMessage"
                    - "sqs:SendMessage"
                  Resource: "*"
    sqsQueueReindexingAlias:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: sqs-addresses-api-reindex-${self:provider.stage}
custom:
  vpc:
    development:
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      securityGroupIds:
        - sg-0721d1d066b247b8f
        - sg-0828e84a9e427392a
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      securityGroupIds:
        - sg-0559e24a4d1ee0ddc
        - sg-0d6c0357cc2febe32
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
