service: aws-rekognition-sample

frameworkVersion: '>=1.2.0 <2.0.0'

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.7
  environment:
    S3_FACE_INDEX_BUCKET: ${env:S3_FACE_INDEX_BUCKET}
    S3_FACE_SEARCH_BUCKET: ${env:S3_FACE_SEARCH_BUCKET}
    DYNAMODB_FACE_INDEX_TABLE: ${env:DYNAMODB_FACE_INDEX_TABLE}
    DYNAMODB_FACE_SEARCH_TABLE: ${env:DYNAMODB_FACE_SEARCH_TABLE}
    REKOGNITION_FACE_COLLECTION: ${env:REKOGNITION_FACE_COLLECTION}
  stage: demo
  region: ${env:AWS_REGION}
  iamRoleStatements:
    -
      Effect: Allow
      Action:
        - s3:Get*
      Resource:
        - Fn::Join: [':', ['arn', 'aws', 's3', '', '', '${self:provider.environment.S3_FACE_INDEX_BUCKET}/*']]
        - Fn::Join: [':', ['arn', 'aws', 's3', '', '', '${self:provider.environment.S3_FACE_SEARCH_BUCKET}/*']]
    -
      Effect: Allow
      Action:
        - s3:Put*
        - s3:Copy*
      Resource:
        - Fn::Join: [':', ['arn', 'aws', 's3', '', '', '${self:provider.environment.S3_FACE_SEARCH_BUCKET}/*']]
    -
      Effect: Allow
      Action:
        - rekognition:IndexFaces
        - rekognition:DetectFaces
        - rekognition:SearchFacesByImage
        - rekognition:CreateCollection
        - rekognition:DeleteCollection
        - rekognition:ListCollections
      Resource: "*"
    -
      Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - Fn::Join: [':', ['arn', 'aws', 'dynamodb', Ref: AWS::Region, Ref: AWS::AccountId, 'table/${self:provider.environment.DYNAMODB_FACE_INDEX_TABLE}']]
        - Fn::Join: [':', ['arn', 'aws', 'dynamodb', Ref: AWS::Region, Ref: AWS::AccountId, 'table/${self:provider.environment.DYNAMODB_FACE_SEARCH_TABLE}']]

functions:
  CreateFaceCollection:
    handler: lambda/create-collection.lambda_handler
    description: Custom resource function to create Rekognition collection (not yet supported by CloudFormation)
    memorySize: 128
    timeout: 5

  FaceIndexation:
    handler: lambda/face-indexation.lambda_handler
    description: Triggered by S3, indexes faces against a collection in Amazon Rekognition
    memorySize: 128
    timeout: 5
    events:
      - s3:
          bucket: ${env:S3_FACE_INDEX_BUCKET}
          event: s3:ObjectCreated:*

  FaceSearch:
    handler: lambda/face-search.lambda_handler
    description: Triggered by S3, searches faces against a collection in Amazon Rekognition
    memorySize: 128
    timeout: 5
    events:
      - s3:
          bucket: ${env:S3_FACE_SEARCH_BUCKET}
          event: s3:ObjectCreated:Put

resources:
  Resources:
    FaceIndexTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: RekognitionId
            AttributeType: S
        KeySchema:
          -
            AttributeName: RekognitionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.DYNAMODB_FACE_INDEX_TABLE}

    FaceSearchTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: SearchId
            AttributeType: S
        KeySchema:
          -
            AttributeName: SearchId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.DYNAMODB_FACE_SEARCH_TABLE}
