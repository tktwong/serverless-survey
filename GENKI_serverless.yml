service: genki-vn-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminRemoveUserFromGroup
      Resource: 'arn:aws:cognito-idp:us-west-2:132323314018:userpool/us-west-2_WV9ZxGPoJ'

functions:
  addUserToGroup:
    role: CognitoAccessRole
    handler: addUserToGroup.main
    events:
      - http:
          path: group
          method: post
          cors: true
          authorizer: aws_iam
  handlePendingTeacher:
    role: CognitoDynamoAccessRole
    handler: handlePendingTeacher.main
    events:
      - http:
          path: handlePendingTeacher
          method: post
          cors: true
          authorizer: aws_iam
  listGroup:
    role: CognitoAccessRole
    handler: listGroup.main
    events:
      - http:
          path: listGroup/{groupName}
          method: get
          cors: true
          authorizer: aws_iam
  getClassList:
    role: DynamoDBAccessRole
    handler: getClassList.main
    events:
      - http:
          path: classList/{Username}
          method: get
          cors: true
          authorizer: aws_iam
  createVirtualClass:
    role: DynamoDBAccessRole
    handler: createVirtualClass.main
    events:
      - http:
          path: createClass
          method: post
          cors: true
          authorizer: aws_iam
  classAdd:
    role: DynamoDBAccessRole
    handler: classAdd.main
    events:
      - http:
          path: classAdd
          method: post
          cors: true
          authorizer: aws_iam
  removeFromClass:
    role: DynamoDBAccessRole
    handler: removeStudentFromClass.main
    events:
      - http:
          path: removeFromClass
          method: post
          cors: true
          authorizer: aws_iam
  createUserNoClassID:
    role: DynamoDBAccessRole
    handler: createUserNoClassID.main
    events:
      - http:
          path: createUser
          method: post
          cors: true
          authorizer: aws_iam
  addAnnouncement:
    role: DynamoDBAccessRole
    handler: addAnnouncement.main
    events:
      - http:
          path: addAnnouncement
          method: post
          cors: true
          authorizer: aws_iam
  getAnnouncements:
    role: DynamoDBAccessRole
    handler: getAnnouncements.main
    events:
      - http:
          path: getAnnouncements/{ClassID}
          method: get
          cors: true
          authorizer: aws_iam
  getClassRoster:
    role: DynamoDBAccessRole
    handler: getClassRoster.main
    events:
      - http:
          path: getClassRoster/{ClassID}
          method: get
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  - ${file(resources/cognito-group-policy.yml)}
  - ${file(resources/dynamodb-policies.yml)}
  - ${file(resources/cognito-dynamo-policy.yml)}
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
