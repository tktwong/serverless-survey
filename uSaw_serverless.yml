service: usaw-tools

custom:
  defaultStage: "dev"
  defaultRegion: "us-east-1"
  # set variables from command arguments or default to provider
  stage: "${opt:stage, self:provider.stage}"
  region: "${opt:region, self:provider.region}"
  BUCKET: "sbd-usaw-hackathon"
  USAW_TOOL_TABLE: "usaw-tools"


provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::sbd-usaw-hackathon"
        - Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - "sbd-usaw-hackathon"
              - "/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:*:*:table/usaw-tools"

# you can define service wide environment variables here
  environment:
    USAW_TOOL_TABLE: "${self:custom.USAW_TOOL_TABLE}"
    BUCKET: "${self:custom.BUCKET}"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  usaw-tools:
    handler: api.router
    events:
      - http:
          path: tools
          method: post
      - http:
          path: tools/detect
          method: put
  usaw-events:
    handler: events.handler
    events:
      - s3:
          bucket: sbd-usaw-hackathon
          event: s3:ObjectCreated:*
          rules:
            - prefix: saw/
            - suffix: .jpg

# you can add CloudFormation resource templates here
resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usaw-tools
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
