service: story-class

provider:
  name: aws
  region: eu-west-2
  runtime: nodejs6.10
  stage: ${opt:stage,'dev'}
  profile: story-serverless

plugins:
  - serverless-plugin-typescript  # compile our handlers
  - serverless-offline            # enjoy a local dev env 
  - serverless-aws-documentation  # generate documentation on deploy
  - serverless-domain-manager     # serve API gateway from our own domain
  - serverless-spec-uploader      # upload spec to S3 after deployment

package:
  exclude:
    - .gitignore
    - .git/**

functions:

  # root:
  #   handler: handlers/get_root.index
  #   environment:
  #     STAGE: ${self:provider.stage}
  #     CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
  #     CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
  #     AWS_PROFILE: story-serverless
  #   events:
  #     - http:
  #         path: /
  #         method: get
  #         cors: true
  #         documentation:
  #           summary: Get a list of class IDs available through Story
  #           tags: 
  #             - class
  #           methodResponses:
  #             - statusCode: "200"
  #               description: Classes were fetched successfully
  #               responseModels:
  #                 "application/json": RootResponse

  # get_classes:
  #   handler: handlers/get_classes.index
  #   environment:
  #     STAGE: ${self:provider.stage}
  #     CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
  #     CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
  #     AWS_PROFILE: story-serverless
  #   events:
  #     - http:
  #         path: /class
  #         method: get
  #         cors: true
  #         documentation:
  #           summary: Get details for all classes with the given IDs
  #           tags: 
  #             - class
  #           queryParams:
  #             - name: ids
  #               description: Class IDs to fetch
  #           methodResponses:
  #             - statusCode: "200"
  #               description: Classes were fetched successfully
  #               responseModels:
  #                 "application/json": ClassResponse

  # get_teachers:
  #   handler: handlers/get_teachers.index
  #   environment:
  #     STAGE: ${self:provider.stage}
  #     CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
  #     CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
  #     AWS_PROFILE: story-serverless
  #   events:
  #     - http:
  #         path: /teacher
  #         method: get
  #         cors: true
  #         documentation:
  #           summary: Get all teachers for the given IDs
  #           tags: 
  #             - class
  #           queryParams:
  #             - name: ids
  #               description: Teacher IDs to fetch
  #           methodResponses:
  #             - statusCode: "200"
  #               description: Teachers were fetched successfully
  #               responseModels:
  #                 "application/json": TeacherResponse

  get_user_meta:
    handler: handlers/get_user_meta.index
    environment:
      STAGE: ${self:provider.stage}
      CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
      CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
      AWS_PROFILE: story-serverless
    events:
      - http:
          path: /user/{id}
          method: get
          cors: true
          documentation:
            summary: Get user meta-data given an ID
            tags: 
              - course
            parameters:
              - in: path
                name: id
                schema:
                   type: string
                required: true
                description: ID of the user to retrieve
            methodResponses:
              - statusCode: "200"
                description: Returned after the class has been added
              - statusCode: "500"
                description: Triggered if something else goes wrong on the server.
                responseModels:
                  "application/json": APIError


  get_course_meta:
    handler: handlers/get_course_meta.index
    environment:
      STAGE: ${self:provider.stage}
      CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
      CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
      AWS_PROFILE: story-serverless
    events:
      - http:
          path: /course/{id}
          method: get
          cors: true
          documentation:
            summary: Get course meta-data given a course ID
            tags: 
              - course
            parameters:
              - in: path
                name: id
                schema:
                   type: string
                required: true
                description: ID of the course to retrieve
            methodResponses:
              - statusCode: "200"
                description: Returned after the class has been added
              - statusCode: "500"
                description: Triggered if something else goes wrong on the server.
                responseModels:
                  "application/json": APIError

  # get_courses:
  #   handler: handlers/get_all_course_meta.index
  #   # handler: handlers/get_courses.index
  #   environment:
  #     STAGE: ${self:provider.stage}
  #     CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
  #     CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
  #     AWS_PROFILE: story-serverless
  #   events:
  #     - http:
  #         path: /course
  #         method: get
  #         cors: true
  #         documentation:
  #           summary: Get all courses for the given IDs
  #           tags: 
  #             - class
  #           queryParams:
  #             - name: ids
  #               description: Course IDs to fetch
  #           methodResponses:
  #             - statusCode: "200"
  #               description: Courses were fetched successfully

  addToClass:
    handler: handlers/add_course_to_class.index
    environment:
      STAGE: ${self:provider.stage}
      CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
      CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
      STRIPE_SECRET_KEY: ${file(keys.yml):STRIPE_SECRET_KEY.${self:provider.stage}}
      CENTURY_ORG_ID: 0adee573-b3e3-46cf-a16b-32980590e2fe
      AWS_PROFILE: story-serverless
    events:
      - http:
          path: /user/{id}/course
          method: put
          cors: true
          documentation:
            summary: Add a course to a given user's class
            tags: 
              - user
            parameters:
              - in: path
                name: id
                schema:
                   type: string
                required: true
                description: ID of the user we are adding to the class
            requestBody:
              description: JSON body containing details of the class to add
            requestModels:
                "application/json": AddToCourseRequest
            methodResponses:
              - statusCode: "200"
                description: Returned after the course has been added to the class
              - statusCode: "500"
                description: Triggered if something else goes wrong on the server.
                responseModels:
                  "application/json": APIError

  createUser:
    handler: handlers/createUser.index
    environment:
      STAGE: ${self:provider.stage}
      CENTURY_ADMIN_EMAIL: ${file(keys.yml):CENTURY_ADMIN_EMAIL}
      CENTURY_ADMIN_PASSWORD: ${file(keys.yml):CENTURY_ADMIN_PASSWORD}
      AWS_PROFILE: story-serverless
      MAILCHIMP_API_KEY: ${file(keys.yml):MAILCHIMP_API_KEY}
      MAILCHIMP_LIST_ID: 2c3438ed55

    events:
      - http:
          path: /user
          method: post
          cors: true
          documentation:
            summary: "Create a new Story user"
            tags: 
              - user
            requestBody:
              description: "JSON body containing the new user's name and email address."
            requestModels:
                "application/json": "CreateUserRequest"
            methodResponses:
              - statusCode: "200"
                description: "Returned after the user has successfully been created"
                responseModels:
                  "application/json": "CreateUserResponse"
              - statusCode: "409"
                description: "Triggered when the email address has already been used to register for CENTURY."
                responseModels:
                  "application/json": "APIError"
              - statusCode: "422"
                description: "Triggered if any user fields fail validation."
                responseModels:
                  "application/json": "APIError"
              - statusCode: "500"
                description: "Triggered if something else goes wrong on the server."
                responseModels:
                  "application/json": "APIError"


resources:
  Resources:

    DynamoDBUsers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-story-user
        AttributeDefinitions:
          - AttributeName: _id
            AttributeType: S
          - AttributeName: referral_code
            AttributeType: S
        KeySchema:
          - AttributeName: _id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: ReferralCode
            KeySchema:
              - AttributeName: referral_code
                KeyType: HASH
            Projection:
              ProjectionType: ALL          
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5


    # DynamoDBCourses:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:provider.stage}-story-course
    #     AttributeDefinitions:
    #       - AttributeName: _id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: _id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5

    # DynamoDBClasses:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:provider.stage}-story-class
    #     AttributeDefinitions:
    #       - AttributeName: _id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: _id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5

    # DynamoDBDiscountTemplates:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:provider.stage}-story-discount-templates
    #     AttributeDefinitions:
    #       - AttributeName: _id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: _id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5

    # DynamoDBTeachers:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:provider.stage}-story-teacher
    #     AttributeDefinitions:
    #       - AttributeName: _id
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: _id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5

    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: 
        # - DynamoDBTeachers
        # - DynamoDBClasses
        # - DynamoDBCourses
        - DynamoDBUsers
        # - DynamoDBDiscountTemplates
      Properties:
        PolicyName: ${self:provider.stage}-lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:BatchGetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query

              Resource: 
                # - arn:aws:dynamodb:*:*:table/${self:provider.stage}-story-teacher
                # - arn:aws:dynamodb:*:*:table/${self:provider.stage}-story-class
                - arn:aws:dynamodb:*:*:table/${self:provider.stage}-story-user
                # - arn:aws:dynamodb:*:*:table/${self:provider.stage}-story-course
                # - arn:aws:dynamodb:*:*:table/${self:provider.stage}-story-discount-templates
                - arn:aws:dynamodb:*:*:table/${self:provider.stage}-story-user/*
        Roles:
          - Ref: IamRoleLambdaExecution

    # Name the API something more memorable in API Gateway
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: Class Service (${self:provider.stage})

    # Add a proxy resource in API Gateway to represent the API spec
    # TODO: Move this into serverless-spec-uploader
    ProxyResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: spec 
        RestApiId:
          Ref: ApiGatewayRestApi
          
    # Add a proxy method to API Gateway to retrieve the spec from S3
    # TODO: Move this into serverless-spec-uploader
    ProxyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        ResourceId:
          Ref: ProxyResource
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: GET 
        AuthorizationType: NONE
        MethodResponses:
          - StatusCode: "200"
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Origin: true
        Integration:
          IntegrationHttpMethod: GET
          Type: HTTP
          Uri: https://s3.eu-west-2.amazonaws.com/${self:custom.spec_bucket}/${self:service}-${self:provider.stage}.json
          IntegrationResponses:
            - StatusCode: "200"
              ResponseParameters:
                method.response.header.Access-Control-Allow-Origin : "'*'"

custom:
  domains:
    prod: api.story-ai.com
    dev: api.staging.story-ai.com
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    basePath: class
    stage: ${self:provider.stage}
    createRoute53Record: true

  documentation: ${file(docs.yml)}

  serverless-offline:
    port: 4000

  spec_bucket: specs.story-ai.com
