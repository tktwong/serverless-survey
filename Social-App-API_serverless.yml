service: social-app-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: us-west-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    posts_table: posts
    likes_table: likes
    comments_table: comments
    user_table: users

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

functions:

  get_users:
    handler: get_users.main
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: aws_iam

  create_user:
    handler: create_user.main
    events:
      - http:
          path: user/
          method: post
          cors: true
          authorizer: aws_iam

  get_user:
    handler: get_user.main
    events:
      - http:
          path: user/{handle}
          method: get
          cors: true
          #authorizer: aws_iam

  create_post:
    handler: create_post.main
    events:
      - http:
          path: post
          method: post
          cors: true
          authorizer: aws_iam

  get_auth_user:
    handler: get_auth_user.main
    events:
      - http:
          path: auth/{handle}
          method: get
          cors: true
          authorizer: aws_iam

  # get_post:
  #   handler: get_post.main
  #   events:
  #     - http:
  #         path: /{userHandle}/post/{postId}/
  #         method: get
  #         cors: true
  #         authorizer: aws_iam

  # like_post:
  #   handler: like_post.main
  #   events:
  #     - http:
  #         path: /{userHandle}/post/{postId}/like
  #         method: get
  #         cors: true
  #         authorizer: aws_iam

  # unlike_post:
  #   handler: unlike_post.main
  #   events:
  #     - http:
  #         path: /{userHandle}/post/{postId}/unlike
  #         method: get
  #         cors: true
  #         authorizer: aws_iam

  get_posts:
    handler: get_posts.main
    events:
      - http:
          path: posts
          method: get
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
