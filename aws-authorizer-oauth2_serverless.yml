# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: oauth2

custom:
  salt: 'add some salt'
  stage: ${opt:stage, self:provider.stage}
  server:
    environment:
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
      DYNAMODB_CREDENTIALS_TABLE: ${self:service}-${self:provider.stage}-credentials
      DYNAMODB_OAUTH_AUTHORIZATIONS_TABLE: ${self:service}-${self:provider.stage}-oAuthAuthorizations
      DYNAMODB_OAUTH_CLIENTS_TABLE: ${self:service}-${self:provider.stage}-oAuthClients
      DYNAMODB_OAUTH_ACCESS_TOKENS_TABLE: ${self:service}-${self:provider.stage}-oAuthAccessTokens
      DYNAMODB_OAUTH_REFRESH_TOKENS_TABLE: ${self:service}-${self:provider.stage}-oAuthRefreshTokens
      LOG_LEVEL: debug
      SALT: ${env:SALT, self:custom.salt}
  client:
    environment:
      REGION: ${self:provider.region}
      STAGE: ${self:custom.stage}
      LOG_LEVEL: debug
  dynamodb:
    readCapacityUnits: 5
    writeCapacityUnits: 5
    readCapacityUnitsMax: 100
    writeCapacityUnitsMax: 100
    stages:
      dev

provider:
  name: aws
  runtime: nodejs12.x

  stage: dev
  region: us-west-2
  deploymentBucket: build-${self:service}

  iamRoleStatements:
    - Effect: Allow
      Resource: '*'
      Action:
        - 'cloudwatch:*'
        - 'dynamodb:*'
        - 'logs:CreateLogGroup'
        - 'logs:CreateLogStream'
        - 'logs:PutLogEvents'

package:
  exclude:
     - .idea/**
     - aws-authorizer-oauth2.iml
     - .gitignore
     - .serverless
     - .eslintignore
     - .eslintrc
     - bin/**
     - lib/__mocks__/**
     - coverage/**
     - test/**
     - README.md
     - yarn.lock
     - yarn-error.log
     - apache-jmeter-4.0/**
     - jmeter.log
     - Test-Plan.jmx
     - performance/**
  individually: true

plugins:
  - serverless-plugin-include-dependencies
  - serverless-dynamodb-local
  - serverless-offline

functions:
  clients:
    handler: src/lambda/clients.handler
    environment: ${self:custom.server.environment}
  credentials:
    handler: src/lambda/credentials.handler
    environment: ${self:custom.server.environment}
    
  token:
    handler: src/authorizationServer/lambda.tokenHandler
    events:
      - http:
          path: token
          method: post
    environment: ${self:custom.server.environment}
  authorize:
    handler: src/authorizationServer/lambda.authorizeHandler
    events:
      - http:
          path: authorize
          method: get
    environment: ${self:custom.server.environment}
  authorizer:
    handler: src/authorizationServer/lambda.bearerTokenAuthorizer
    environment: ${self:custom.server.environment}

  # TODO: This should be a separate serverless template using output CloudFormation variables
  callback:
    handler: src/resourceServer/lambda.callbackHandler
    events:
      - http:
          path: callback
          method: any
    environment: ${self:custom.client.environment}
  protected:
    handler: src/resourceServer/lambda.protectedHandler
    events:
      - http:
          path: protected
          method: any
          authorizer: authorizer
    environment: ${self:custom.server.environment}

resources:
  Resources:
    OAuthClientsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: client_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: client_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdClientIdGSI
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
              - AttributeName: client_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.dynamodb.readCapacityUnits}
              WriteCapacityUnits: ${self:custom.dynamodb.writeCapacityUnits}
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodb.readCapacityUnits}
          WriteCapacityUnits: ${self:custom.dynamodb.writeCapacityUnits}
        TableName: ${self:service}-${self:custom.stage}-oAuthClients
    OAuthAuthorizationsTable:
      Type: 'AWS::DynamoDB::Table'
      DependsOn: OAuthClientsTable
      Properties:
        AttributeDefinitions:
          - AttributeName: code
            AttributeType: S
        KeySchema:
          - AttributeName: code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodb.readCapacityUnits}
          WriteCapacityUnits: ${self:custom.dynamodb.writeCapacityUnits}
        TableName: ${self:service}-${self:custom.stage}-oAuthAuthorizations
        TimeToLiveSpecification:
          AttributeName: code_expires_on
          Enabled: true
    OAuthAccessTokensTable:
      Type: 'AWS::DynamoDB::Table'
      DependsOn: OAuthAuthorizationsTable
      Properties:
        AttributeDefinitions:
          - AttributeName: access_token
            AttributeType: S
        KeySchema:
          - AttributeName: access_token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodb.readCapacityUnits}
          WriteCapacityUnits: ${self:custom.dynamodb.writeCapacityUnits}
        TableName: ${self:service}-${self:custom.stage}-oAuthAccessTokens
        TimeToLiveSpecification:
          AttributeName: access_token_expires_on
          Enabled: true
    OAuthRefreshTokensTable:
      Type: 'AWS::DynamoDB::Table'
      DependsOn: OAuthAccessTokensTable
      Properties:
        AttributeDefinitions:
          - AttributeName: refresh_token
            AttributeType: S
        KeySchema:
          - AttributeName: refresh_token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodb.readCapacityUnits}
          WriteCapacityUnits: ${self:custom.dynamodb.writeCapacityUnits}
        TableName: ${self:service}-${self:custom.stage}-oAuthRefreshTokens
        TimeToLiveSpecification:
          AttributeName: refresh_token_expires_on
          Enabled: true
    CredentialsTable:
      Type: 'AWS::DynamoDB::Table'
      DependsOn: OAuthRefreshTokensTable
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: IdUsernameGSI
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: username
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.dynamodb.readCapacityUnits}
              WriteCapacityUnits: ${self:custom.dynamodb.writeCapacityUnits}
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.dynamodb.readCapacityUnits}
          WriteCapacityUnits: ${self:custom.dynamodb.writeCapacityUnits}
        TableName: ${self:service}-${self:custom.stage}-credentials
    ScalingRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - application-autoscaling.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'dynamodb:DescribeTable'
                    - 'dynamodb:UpdateTable'
                    - 'cloudwatch:PutMetricAlarm'
                    - 'cloudwatch:DescribeAlarms'
                    - 'cloudwatch:GetMetricStatistics'
                    - 'cloudwatch:SetAlarmState'
                    - 'cloudwatch:DeleteAlarms'
                  Resource: '*'
    CredentialsTableWriteCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: CredentialsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.writeCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.writeCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: CredentialsTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
        ServiceNamespace: dynamodb
    CredentialsTableWriteScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: CredentialsTable
      Properties:
        PolicyName: WriteAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: CredentialsTableWriteCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
    CredentialsIndexWriteCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: CredentialsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.writeCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.writeCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: CredentialsTable
              - index
              - IdUsernameGSI
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:index:WriteCapacityUnits'
        ServiceNamespace: dynamodb
    CredentialsTableReadCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: CredentialsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.readCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.readCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: CredentialsTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
        ServiceNamespace: dynamodb
    CredentialsTableReadScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: CredentialsTable
      Properties:
        PolicyName: ReadAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: CredentialsTableReadCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
    CredentialsIndexReadCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: CredentialsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.readCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.readCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: CredentialsTable
              - index
              - IdUsernameGSI
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:index:ReadCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthClientsTableWriteCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthClientsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.writeCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.writeCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthClientsTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthClientsTableWriteScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: OAuthClientsTable
      Properties:
        PolicyName: WriteAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: OAuthClientsTableWriteCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
    OAuthClientsIndexWriteCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthClientsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.writeCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.writeCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthClientsTable
              - index
              - UserIdClientIdGSI
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:index:WriteCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthClientsTableReadCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthClientsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.readCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.readCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthClientsTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthClientsTableReadScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: OAuthClientsTable
      Properties:
        PolicyName: ReadAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: OAuthClientsTableReadCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
    OAuthClientsIndexReadCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthClientsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.readCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.readCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthClientsTable
              - index
              - UserIdClientIdGSI
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:index:ReadCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthAuthorizationsTableWriteCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthAuthorizationsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.writeCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.writeCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthAuthorizationsTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthAuthorizationsTableWriteScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: OAuthAuthorizationsTable
      Properties:
        PolicyName: WriteAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: OAuthAuthorizationsTableWriteCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
    OAuthAuthorizationsTableReadCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthAuthorizationsTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.readCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.readCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthAuthorizationsTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthAuthorizationsTableReadScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: OAuthAuthorizationsTable
      Properties:
        PolicyName: ReadAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: OAuthAuthorizationsTableReadCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
    OAuthAccessTokensTableWriteCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthAccessTokensTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.writeCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.writeCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthAccessTokensTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthAccessTokensTableWriteScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: OAuthAccessTokensTable
      Properties:
        PolicyName: WriteAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: OAuthAccessTokensTableWriteCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
    OAuthAccessTokensTableReadCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthAccessTokensTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.readCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.readCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthAccessTokensTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthAccessTokensTableReadScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: OAuthAccessTokensTable
      Properties:
        PolicyName: ReadAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: OAuthAccessTokensTableReadCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
    OAuthRefreshTokensTableWriteCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthRefreshTokensTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.writeCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.writeCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthRefreshTokensTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthRefreshTokensTableWriteScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: OAuthRefreshTokensTable
      Properties:
        PolicyName: WriteAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: OAuthRefreshTokensTableWriteCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBWriteCapacityUtilization
    OAuthRefreshTokensTableReadCapacityScalableTarget:
      Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
      DependsOn: OAuthRefreshTokensTable
      Properties:
        MaxCapacity: ${self:custom.dynamodb.readCapacityUnitsMax}
        MinCapacity: ${self:custom.dynamodb.readCapacityUnits}
        ResourceId:
          "Fn::Join":
            - /
            -
              - table
              - Ref: OAuthRefreshTokensTable
        RoleARN:
          "Fn::GetAtt": [ ScalingRole, Arn ]
        ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
        ServiceNamespace: dynamodb
    OAuthRefreshTokensTableReadScalingPolicy:
      Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
      DependsOn: OAuthRefreshTokensTable
      Properties:
        PolicyName: ReadAutoScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: OAuthRefreshTokensTableReadCapacityScalableTarget
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 70
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: DynamoDBReadCapacityUtilization
  Outputs:
    CredentialsTableNameExport:
      Value:
        Ref: CredentialsTable
      Export:
        Name: CredentialsTableName-${self:custom.stage}
    CredentialsLambdaFunctionNameExport:
      Value:
        Ref: CredentialsLambdaFunction
      Export:
        Name: CredentialsLambdaFunctionName-${self:custom.stage}
    ClientsLambdaFunctionNameExport:
      Value:
        Ref: ClientsLambdaFunction
      Export:
        Name: ClientsLambdaFunctionName-${self:custom.stage}
    ServiceEndpoint:
      Export:
        Name: OAuth2ServiceInternalEndpoint-${self:custom.stage}
