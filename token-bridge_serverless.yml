service: blockchain-watcher

plugins:
  - serverless-offline
  - serverless-offline-scheduler

frameworkVersion: "<=1.28.0"

provider:
  name: aws
  runtime: nodejs8.10
  role: ${env:ROLE}
  region: ${env:REGION}
  stage: ${opt:stage, 'dev'}
  environment:
    WATCHER_NETWORK_URL: ${env:WATCHER_NETWORK_URL}
    WATCHER_NETWORK_ID: ${env:WATCHER_NETWORK_ID}
    WATCHER_NETWORK_ACCOUNT: ${env:WATCHER_NETWORK_ACCOUNT}
    WATCHER_CONTRACT_ADDRESS: ${env:WATCHER_CONTRACT_ADDRESS}
    WATCHER_MINT_PK: ${env:WATCHER_MINT_PK}
    WATCHER_MINT_PK_PATH: ${env:WATCHER_MINT_PK_PATH}
    DEFAULT_MINT_NETWORK_URL: ${env:DEFAULT_MINT_NETWORK_URL}
    DEFAULT_MINT_NETWORK_ID: ${env:DEFAULT_MINT_NETWORK_ID}
    DEFAULT_MINT_CONTRACT_ADDRESS: ${env:DEFAULT_MINT_CONTRACT_ADDRESS}
    MULTIPLE_MINT_NETWORK_ID: ${env:MULTIPLE_MINT_NETWORK_ID}
    MULTIPLE_MINT_NETWORK_URL: ${env:MULTIPLE_MINT_NETWORK_URL}
    MULTIPLE_MINT_CONTRACT_ADDRESS: ${env:MULTIPLE_MINT_CONTRACT_ADDRESS}
    REGION: ${env:REGION}
    SHARD_LIMIT: ${env:SHARD_LIMIT}
    TB_WATCHER: ${env:TB_WATCHER}
    TB_WATCHER_BLOCKS: ${env:TB_WATCHER_BLOCKS}
    DEBUG: ${env:DEBUG}
  tags:
    Namespace: hara
    Name: hara-blockchain-log-watcher-${self:provider.stage}
    Stage: ${self:provider.stage}
  stackTags:
    Namespace: hara
    Name: hara-blockchain-log-watcher-${self:provider.stage}
    Stage: ${self:provider.stage}

package:
  exclude:
    - node_modules/dynamodb-localhost/**
    - node_modules/serverless-dynamodb-local/**
    - node_modules/serverless-offline/**
    - tests/**

functions:
  get_address_transactions:
    handler: handler._getAddressTransaction
    timeout: 10
    events:
    - http:
        path: bridge/get_transaction_by_address
        method: get
        cors: true

  get_id_transactions:
    handler: handler._getIDTransaction
    timeout: 10
    events:
    - http:
        path: bridge/get_transaction_by_id
        method: get
        cors: true

  get_timestamp_transactions:
    handler: handler._getTimestampTransaction
    timeout: 10
    events:
    - http:
        path: bridge/get_transaction_by_timestamp
        method: get
        cors: true
  
  get_data_transactions:
    handler: handler._getDataTransaction
    timeout: 10
    events:
    - http:
        path: bridge/get_transaction_by_data
        method: get
        cors: true

  external_request:
    handler: handler._externalRequest
    timeout: 10
    events:
    - http:
        path: bridge/external_request
        method: post
        cors: true
  
  upload_data:
    handler: handler._uploadData
    timeout: 10
    events:
    - http:
        path: bridge/upload_data
        method: post
        cors: true

  burn_watcher:
    handler: handler._burnWatcher
    timeout: 55
    events:
    - schedule: rate(1 minute)
    - http:
        path: bridge/manual_trigger_burn
        method: get
        cors: true

  mint_watcher:
    handler: handler._mintWatcher
    timeout: 55
    events:
    - schedule: rate(1 minute)
    - http:
        path: bridge/manual_trigger_mint
        method: get
        cors: true

  manual_mint:
    handler: handler._postManualMint
    timeout: 20
    events:
    - http:
        path: bridge/manual_mint
        method: post
        cors: true

  get_total_supply:
    handler: handler._getTotalSupply
    timeout: 20
    events:
    - http:
        path: bridge/get_total_supply
        method: get
        cors: true