service: tileserverless

frameworkVersion: ">=2.14.0 <3.0.0"

plugins:
  - serverless-content-encoding

package:
  exclude:
    - .git/**
    - src/**
    - docs/**
    - .*
    - tsconfig.*
    - package-lock.json
    - yarn.lock
    - README.md
    - serverless.yml

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  region: us-east-1
  apiGateway:
    binaryMediaTypes:
      - "application/x-protobuf"
      - "application/vnd.mapbox-vector-tile"
    shouldStartNameWithService: true # serverless@^2

  stage: dev
  vpc:
    securityGroupIds:
      - ${self:custom.sgId}
    subnetIds:
      - ${self:custom.subnetId}
  environment:
    MOUNT_PATH: ${self:custom.mountPath}
    DEFAULT_MBTILES_FILENAME: ${self:custom.defaultMbtilesFilename}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - "elasticfilesystem:ClientMount"
        - "elasticfilesystem:ClientWrite"
      Resource:
        - ${self:custom.efsApArn}

custom:
  sgId: ${env:TILESERVERLESS_SECURITY_GROUP_ID}
  subnetId: ${env:TILESERVERLESS_SUBNET_ID}
  accessPointId: ${env:TILESERVERLESS_FILESYSTEM_ACCESS_POINT_ID}
  fsId: ${env:TILESERVERLESS_FILESYSTEM_ID}
  mountPath: /mnt/efs
  defaultMbtilesFilename: tiles.mbtiles
  efsApArn:
    Fn::Join:
      - ":"
      - - arn:aws:elasticfilesystem
        - ${self:provider.region}
        - Ref: "AWS::AccountId"
        - access-point/${self:custom.accessPointId}

  # plugin configs
  contentEncoding:
    minimumCompressionSize: 0

resources:
  extensions:
    TileLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: ${self:custom.efsApArn}
            LocalMountPath: ${self:custom.mountPath}
    MetaLambdaFunction:
      Properties:
        FileSystemConfigs:
          - Arn: ${self:custom.efsApArn}
            LocalMountPath: ${self:custom.mountPath}

functions:
  tile:
    handler: dist/tile.handler
    events:
      - http:
          path: tiles/{proxy+}
          method: get
          integration: lambda
          response:
            contentHandling: CONVERT_TO_BINARY
            headers:
              "Content-Type": "'application/vnd.mapbox-vector-tile'"
              "Cache-Control": "'max-age=3600'"
              "Access-Control-Allow-Origin": "'*'"
              "X-Frame-Options": "'SAMEORIGIN'"
              "Access-Control-Allow-Methods": "'GET, HEAD'"
              "Access-Control-Allow-Headers": "'Content-Type'"
            statusCodes:
              400:
                pattern: '.*"status" *: *400.*'
                template: |
                  #set ($obj = $util.parseJson($input.path('$.errorMessage')))
                  { "message" : "$obj.message" }

  meta:
    handler: dist/meta.handler
    events:
      - http:
          path: tiles.json
          method: get
