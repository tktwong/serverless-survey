service: notes-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-webpack # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables


provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: notes
  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  notes-api:
    handler: services/notes-api/main.handler
    events:
      - http:
          method: any
          path: /{proxy+}

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'yarn'