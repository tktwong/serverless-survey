service: foo-api

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  fooTableName: 'foo-table-${self:provider.stage}'
  dynamodb:
    stages:
      - dev

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  profile: foo-deploy
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        - { "Fn::GetAtt": ["FooDynamoDBTable", "Arn" ] }
  environment:
    FOO_TABLE: ${self:custom.fooTableName}
    LOGGING_LEVEL: "silly"
#    SOME_SECRET: "${file(./config/secrets/secrets.json):someSecret}"

functions:
  app:
    handler: src/index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    FooDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.fooTableName}
