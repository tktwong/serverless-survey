service:
  name: acceptessa-admission2

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_master_data"]]
        - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_master_data/index/*"]]
        - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_log_data"]]

custom:
  domain: familiar-life.info
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: tessa_master_data
            sources: [./dev/circle.json]
  serverless-offline:
    httpsProtocol: ./.cert
    host: 0.0.0.0
    port: 3200

functions:
  main:
    handler: handler.main
    events:
      - http:
          method: any
          path: endpoint

resources:
  Resources:
    MasterDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_master_data
        AttributeDefinitions:
          - { AttributeType: S, AttributeName: id }
          - { AttributeType: S, AttributeName: parent }
          - { AttributeType: S, AttributeName: data_key }
          - { AttributeType: S, AttributeName: data_value }
        KeySchema:
          - { KeyType: HASH,  AttributeName: id }
          - { KeyType: RANGE, AttributeName: data_key }
        GlobalSecondaryIndexes:
          - IndexName: tessa_master_by_exhibition
            KeySchema:
              - { KeyType: HASH,  AttributeName: parent }
              - { KeyType: RANGE, AttributeName: id }
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: tessa_master_by_datakey
            KeySchema:
              - { KeyType: HASH,  AttributeName: data_key }
              - { KeyType: RANGE, AttributeName: data_value }
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    LogDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_log_data
        AttributeDefinitions:
          - { AttributeType: S, AttributeName: id }
          - { AttributeType: S, AttributeName: data_key }
          #- { AttributeType: L, AttributeName: data_value }
        KeySchema:
          - { KeyType: HASH,  AttributeName: id }
          - { KeyType: RANGE, AttributeName: data_key }
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ## static file domain setting
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
       BucketName: "${self:service}-assets"

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: Bucket }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Principal:
                AWS:
                  Fn::Join:
                    - ""
                    - ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ", { Ref: CloudFrontOriginAccessIdentity }]
              Resource:
                Fn::Join:
                  -  ""
                  - [ { Fn::GetAtt: [ Bucket, Arn ] }, "/*" ]

    Cloudfront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: acceptessa admission
          Aliases: ["admission.${self:custom.domain}"]
          HttpVersion: http2
          ViewerCertificate:
            AcmCertificateArn: "${ssm:/tessa_checklist/acm_cert_arn~true}"
            SslSupportMethod: sni-only
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: true
            MinTTL: 8640000
            MaxTTL: 8640000
            DefaultTTL: 8640000
          Enabled: true
          Origins:
            - Id: S3Origin
              DomainName: "${self:service}-assets.s3.amazonaws.com"
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - ["origin-access-identity/cloudfront/", { Ref: CloudFrontOriginAccessIdentity }]
            - Id: ApiGwOrigin
              #OriginPath: "/${self:provider.stage}"
              DomainName:
                Fn::Join:
                  - ""
                  - [ { Ref: ApiGatewayRestApi }, ".execute-api.", { Ref: AWS::Region } , ".", { Ref: AWS::URLSuffix } ]
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
                OriginSSLProtocols: [TLSv1.2]
          CacheBehaviors:
            - TargetOriginId: ApiGwOrigin
              ViewerProtocolPolicy: redirect-to-https
              PathPattern: "/${self:provider.stage}/*"
              AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
              ForwardedValues:
                QueryString: true
                Headers: ["Authorization"]
              MinTTL: 0
              MaxTTL: 0
              DefaultTTL: 0
          CustomErrorResponses:
            - ErrorCachingMinTTL: 86400
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref AWS::StackName

    RecordSetOfAssets:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: "admission.${self:custom.domain}"
        Type: A
        HostedZoneName: "${self:custom.domain}."
        AliasTarget:
          DNSName: { Fn::GetAtt: [Cloudfront, DomainName] }
          HostedZoneId: Z2FDTNDATAQYW2

  Outputs:
    PageUrl:
      Value:
        Fn::Join:
          - ""
          - ["https://", {Ref: RecordSetOfAssets}]
    ApiUrl:
      Value:
        Fn::Join:
          - ""
          - ["https://", {Ref: RecordSetOfAssets}, "/${self:provider.stage}/endpoint"]
    AssetBucket:
      Value:
        Ref: Bucket
    DistributionId:
      Value:
        Ref: Cloudfront

