service: zwc-custom-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table names here so we can use them while testing locally
  customCategoriesTableName: ${self:custom.stage}-user-custom-categories
  customProblemsTableName: ${self:custom.stage}-user-custom-problems
  customSolutionsTableName: ${self:custom.stage}-user-custom-solutions
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiRootResourceId

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    customCategoriesTableName: ${self:custom.customCategoriesTableName}
    customProblemsTableName: ${self:custom.customProblemsTableName}
    customSolutionsTableName: ${self:custom.customSolutionsTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific tables for the stage
      Resource:
        - "Fn::ImportValue": ${self:custom.stage}-UserCustomCategoriesTableArn
        - "Fn::ImportValue": ${self:custom.stage}-UserCustomProblemsTableArn
        - "Fn::ImportValue": ${self:custom.stage}-UserCustomSolutionsTableArn

functions:
  # Defines an HTTP API endpoint that calls the main function in custom-categories/create.js
  # - path: url path is /user-custom-category
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createCustomCategory:
    handler: custom-categories/create.main
    events:
      - http:
          path: user-custom-category
          method: post
          cors: true
          authorizer: aws_iam

  getCustomCategory:
    # Defines an HTTP API endpoint that calls the main function in custom-categories/get.js
    # - path: url path is /user-custom-category/{id}
    # - method: GET request
    handler: custom-categories/get.main
    events:
      - http:
          path: user-custom-category/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listCustomCategories:
    # Defines an HTTP API endpoint that calls the main function in custom-categories/list.js
    # - path: url path is /user-custom-categories
    # - method: GET request
    handler: custom-categories/list.main
    events:
      - http:
          path: user-custom-categories
          method: get
          cors: true
          authorizer: aws_iam

  updateCustomCategory:
    # Defines an HTTP API endpoint that calls the main function in custom-categories/update.js
    # - path: url path is /user-custom-category/{id}
    # - method: PUT request
    handler: custom-categories/update.main
    events:
      - http:
          path: user-custom-category/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteCustomCategory:
    # Defines an HTTP API endpoint that calls the main function in custom-categories/delete.js
    # - path: url path is /user-custom-category/{id}
    # - method: DELETE request
    handler: custom-categories/delete.main
    events:
      - http:
          path: user-custom-category/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  # Defines an HTTP API endpoint that calls the main function in custom-problems/create.js
  # - path: url path is /user-custom-problem
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createCustomProblem:
    handler: custom-problems/create.main
    events:
      - http:
          path: user-custom-problem
          method: post
          cors: true
          authorizer: aws_iam

  getCustomProblem:
    # Defines an HTTP API endpoint that calls the main function in custom-problems/get.js
    # - path: url path is /user-custom-problem/{id}
    # - method: GET request
    handler: custom-problems/get.main
    events:
      - http:
          path: user-custom-problem/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listCustomProblems:
    # Defines an HTTP API endpoint that calls the main function in custom-problems/list.js
    # - path: url path is /user-custom-problems
    # - method: GET request
    handler: custom-problems/list.main
    events:
      - http:
          path: user-custom-problems
          method: get
          cors: true
          authorizer: aws_iam

  listCustomProblemsForCategory:
    # Defines an HTTP API endpoint that calls the main function in custom-problems/list.js
    # - path: url path is /user-custom-problems/{id}
    # - method: GET request
    handler: custom-problems/list.main
    events:
      - http:
          path: user-custom-problems/{id}
          method: get
          cors: true
          authorizer: aws_iam

  updateCustomProblem:
    # Defines an HTTP API endpoint that calls the main function in custom-problems/update.js
    # - path: url path is /user-custom-problem/{id}
    # - method: PUT request
    handler: custom-problems/update.main
    events:
      - http:
          path: user-custom-problem/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteCustomProblem:
    # Defines an HTTP API endpoint that calls the main function in custom-problems/delete.js
    # - path: url path is /user-custom-problem/{id}
    # - method: DELETE request
    handler: custom-problems/delete.main
    events:
      - http:
          path: user-custom-problem/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  # Defines an HTTP API endpoint that calls the main function in custom-solutions/create.js
  # - path: url path is /user-custom-solution
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createCustomSolution:
    handler: custom-solutions/create.main
    events:
      - http:
          path: user-custom-solution
          method: post
          cors: true
          authorizer: aws_iam

  getCustomSolution:
    # Defines an HTTP API endpoint that calls the main function in custom-solutions/get.js
    # - path: url path is /user-custom-solution/{id}
    # - method: GET request
    handler: custom-solutions/get.main
    events:
      - http:
          path: user-custom-solution/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listCustomSolutions:
    # Defines an HTTP API endpoint that calls the main function in custom-solutions/list.js
    # - path: url path is /user-custom-solutions
    # - method: GET request
    handler: custom-solutions/list.main
    events:
      - http:
          path: user-custom-solutions
          method: get
          cors: true
          authorizer: aws_iam

  listCustomSolutionsForProblem:
    # Defines an HTTP API endpoint that calls the main function in custom-solutions/list.js
    # - path: url path is /user-custom-solutions/{id}
    # - method: GET request
    handler: custom-solutions/list.main
    events:
      - http:
          path: user-custom-solutions/{id}
          method: get
          cors: true
          authorizer: aws_iam

  updateCustomSolution:
    # Defines an HTTP API endpoint that calls the main function in custom-solutions/update.js
    # - path: url path is /user-custom-solution/{id}
    # - method: PUT request
    handler: custom-solutions/update.main
    events:
      - http:
          path: user-custom-solution/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteCustomSolution:
    # Defines an HTTP API endpoint that calls the main function in custom-solutions/delete.js
    # - path: url path is /user-custom-solution/{id}
    # - method: DELETE request
    handler: custom-solutions/delete.main
    events:
      - http:
          path: user-custom-solution/{id}
          method: delete
          cors: true
          authorizer: aws_iam
