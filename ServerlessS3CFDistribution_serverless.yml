# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: PoolsAdminService
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}


custom:
  websiteBucketName: 
    Fn::Join:
      - ''
      - - "poolsadminservicewebsite"
        - ${self:provider.stage}
  websiteBucketURL: 
    Fn::Join:
      - ''
      - - ${self:custom.websiteBucketName}
        - ".s3-website-"
        - ${self:provider.region}
        - ".amazonaws.com"
  BetfredAdminScreenWebsiteOriginId:
    Fn::Join:
      - ''
      - - "BetfredAdminScreenWebsiteOrigin"
        - ${self:provider.stage}
  RootObject: index.html 
  ErrorObject: index.html 
  UserPool: 
    Fn::Join:
      - ''
      - - ${self:provider.stage}
        - "UserPool"
  UserPoolClient: 
    Fn::Join:
      - ''
      - - ${self:provider.stage}
        - "UserPoolClient"
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# functions:
#   hello:
#     handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2



# This isnt really serverless under here its just cloud formation (slightly different syntax)
# anything can go here
# If its not supported by cloud formation check to see if there is a serverless plugin or create one!
resources:
# You may need mappings for setting up Route 53
  Mappings: ${file(mappings.yml)}
  Resources:
    BetfredAdminScreenWebsite:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.websiteBucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
        WebsiteConfiguration:
          ErrorDocument: ${self:custom.RootObject}
          IndexDocument: ${self:custom.ErrorObject}
    BetfredAdminScreenWebsitePolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.websiteBucketName}
        PolicyDocument:
          Statement:
          - 
            Effect: Allow
            Principal: '*'
            Action: 
              - s3:GetObject
            Resource: 
              - Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: BetfredAdminScreenWebsite
                    - '/*'
    CDN:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          Enabled: true
          HttpVersion: http2
          DefaultRootObject: ${self:custom.RootObject}
          Origins:
            - DomainName: ${self:custom.websiteBucketURL}
              Id: ${self:custom.BetfredAdminScreenWebsiteOriginId}
              CustomOriginConfig:
                HTTPPort: 80
                OriginProtocolPolicy: http-only
          PriceClass: PriceClass_100
          DefaultCacheBehavior:
            ViewerProtocolPolicy: allow-all
            TargetOriginId: ${self:custom.BetfredAdminScreenWebsiteOriginId}
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            DefaultTTL: 30
            MinTTL: 10
            ForwardedValues:
              QueryString: true
    CognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
          UserPoolName: ${self:custom.UserPool}
          UsernameAttributes:
            - email
          AutoVerifiedAttributes:
            - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.UserPoolClient}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false