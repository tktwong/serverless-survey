service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin



provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    DEBUG: '*'
    TODO_TABLE: Todo-${self:provider.stage}
    CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_BUCKET:  attachment-url-${self:provider.stage}-${self:provider.region}
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret

  tracing:
    lambda: true
    apiGateway: true

  iamRoleStatements: 
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        Ref: Auth0Secret
    - Effect: Allow
      Action: 
       - xray:PutTraceSegments
       - xray:PutTelemetryRecords
      Resource: 
       - "*"
 

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          allowCredentials: true
          authorizer: Auth
    iamRoleStatementsName: get-todo-role-function
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.CREATED_AT_INDEX}
      - Effect: Allow
        Action: [ s3:GetObject ]
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_BUCKET}/*
      - Effect: Allow
        Action: 
         - xray:PutTraceSegments
         - xray:PutTelemetryRecords
        Resource: 
         - "*"

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          allowCredentials: true
          authorizer: Auth
          request: 
            schema: 
              application/json: ${file(src/models/createTodo.json)}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
    - Effect: Allow
      Action: [ s3:PutObject ]
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_BUCKET}/*
    - Effect: Allow
      Action: 
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: 
        - "*"

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          allowCredentials: true
          authorizer: Auth
          request: 
            schema: 
              application/json: ${file(src/models/createTodo.json)}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
    - Effect: Allow
      Action: [ s3:PutObject ]
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_BUCKET}/*
    - Effect: Allow
      Action: [ s3:GetObject ]
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_BUCKET}/*
    - Effect: Allow
      Action: 
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: 
        - "*"

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          allowCredentials: true
          authorizer: Auth
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
    - Effect: Allow
      Action: 
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: 
        - "*"

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          allowCredentials: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.CREATED_AT_INDEX}
      - Effect: Allow
        Action: [ s3:PutObject ]
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_BUCKET}/*
      - Effect: Allow
        Action: [ s3:GetObject ]
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_BUCKET}/*
      - Effect: Allow
        Action: 
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - "*"

resources:
  Resources:
    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: PolicyName
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_BUCKET}/*'
        Bucket: 
          Ref: AttachmentBucket

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allows for the administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: 
          Ref: KMSKey
   
    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: 
          Ref: KMSKey