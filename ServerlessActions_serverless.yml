service: client

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  profile: default
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    imageUploadBucket: ${self:custom.imageUploadBucket}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
      Resource: '*'
  apiKeys:
    - free:
        - myFreeApiKey
    - paid:
        - myPaidApiKey
  usagePlan:
    - free:
        quota:
          limit: 1000
          period: MONTH
        throttle:
          rateLimit: 5
          burstLimit: 20
    - paid:
        quota:
          limit: 10000
          period: MONTH
        throttle:
          rateLimit: 50
          burstLimit: 200

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-point
  bucketName: newdemobucket-xyz
  imageUploadBucket: my-image-upload-bucket-3568
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: img

functions:
  imageUpload:
    handler: lambdas/endpoints/imageUpload.handler
    events:
      - http:
          path: image-upload
          method: POST
          cors: true
  imageResize:
    handler: lambdas/endpoints/imageResize.handler
    events:
      - s3:
          bucket: ${self:custom.imageUploadBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
          existing: true
  # getImage:
  #   handler: lambdas/endpoints/getImage.handler
  #   events:
  #     - http:
  #         path: get-image/{fileName}
  #         method: GET
  #         cors: true
  # getUser:
  #   handler: lambdas/endpoints/getUser.handler
  #   events:
  #     - http:
  #         path: get-user/{ID}
  #         method: GET
  #         cors: true
  # getPlayerScore:
  #   handler: lambdas/endpoints/getPlayerScore.handler
  #   events:
  #     - http:
  #         path: get-player-score/{ID}
  #         method: GET
  #         cors: true
  # getGameScore:
  #   handler: lambdas/endpoints/getGameScore.handler
  #   events:
  #     - http:
  #         path: get-game-score/{game}
  #         method: GET
  #         cors: true
  # getGamesForPlayer:
  #   handler: lambdas/endpoints/getGamesForPlayer.handler
  #   events:
  #     - http:
  #         path: get-game-for-player/{playerID}
  #         method: GET
  #         cors: true
  # createPlayerScore:
  #   handler: lambdas/endpoints/createPlayerScore.handler
  #   events:
  #     - http:
  #         path: create-player-score/{ID}
  #         method: POST
  #         cors: true
  # updatePlayerScore:
  #   handler: lambdas/endpoints/updatePlayerScore.handler
  #   events:
  #     - http:
  #         path: update-player-score/{ID}
  #         method: PUT
  #         cors: true
  # getFile:
  #   handler: lambdas/endpoints/getFile.handler
  #   events:
  #     - http:
  #         path: get-file/{fileName}
  #         method: GET
  #         cors: true
  #         private: true
  # createFile:
  #   handler: lambdas/endpoints/createFile.handler
  #   events:
  #     - http:
  #         path: create-file/{fileName}
  #         method: POST
  #         cors: true
  #         private: true
  # proxy:
  #   handler: lambdas/endpoints/proxy.handler
  #   events:
  #     - http:
  #         path: chuck-norris/{proxy+}
  #         method: ANY
  #         integration: http-proxy
  #         request:
  #           uri: http://api.icndb.com/{proxy}
  #           parameters:
  #             paths:
  #               proxy: true

resources:
  Resources:
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}
        AccessControl: PublicRead
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table 
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: game
            AttributeType: S 
        KeySchema:
          - AttributeName: ID
            KeyType: HASH 
        BillingMode: PAY_PER_REQUEST

        GlobalSecondaryIndexes:
          - IndexName: game-index 
            KeySchema:
              - AttributeName: game 
                KeyType: HASH
            Projection:
              ProjectionType: ALL