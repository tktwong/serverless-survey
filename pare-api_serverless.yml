# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: pare
# app and org for use with dashboard.serverless.com
app: pare
org: jobfindingapp778

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  websocketsApiName: job-app-websockets-api
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body

# you can overwrite defaults here
#  stage: dev
region: us-east-1

plugins:
  - serverless-offline

functions:
  addCognitoUserToMongoDb:
    handler: handler.addCognitoUserToMongoDb
    events:
      - http:
          path: addCognitoUserToMongoDb
          method: post
          cors: true
  addEmployer:
    handler: handler.addEmployer
    events:
      - http:
          path: addEmployer
          method: post
          cors: true
  addEmployee:
    handler: handler.addEmployee
    events:
      - http:
          path: addEmployee
          method: post
          cors: true
  addJob:
    handler: handler.addJob
    events:
      - http:
          path: addJob
          method: post
          cors: true
  editJob:
    handler: handler.editJob
    events:
      - http:
          path: editJob
          method: post
          cors: true
  getJobs:
    handler: handler.getJobs
    events:
      - http:
          path: getJobs
          method: post
          cors: true
  getEmployersJobs:
    handler: handler.getEmployersJobs
    events:
      - http:
          path: getEmployersJobs
          method: post
          cors: true
  addConversation:
    handler: handler.addConversation
    events:
      - http:
          path: addConversation
          method: post
          cors: true
  addMessage:
    handler: handler.addMessage
    events:
      - http:
          path: addMessage
          method: post
          cors: true
  getConversationMessages:
    handler: handler.getConversationMessages
    events:
      - http:
          path: getConversationMessages
          method: post
          cors: true
  wsSendMessage:
    handler: handler.wsSendMessage
    events:
      - http:
          path: wsSendMessage
          method: post
          cors: true
  getEmployee:
    handler: handler.getEmployee
    events:
      - http:
          path: getEmployee
          method: post
          cors: true
  getConversation:
    handler: handler.getConversation
    events:
      - http:
          path: getConversation
          method: post
          cors: true
  wsConnectHandler:
    handler: handler.wsConnectHandler
    events:
      - websocket:
          route: $connect
  wsDisconnectHandler:
    handler: handler.wsDisconnectHandler
    events:
      - websocket:
          route: $disconnect
  wsDefaultHandler:
    handler: handler.wsDefaultHandler
    events:
      - websocket: $default #simple event definition without extra route property
  webSocketOnMessageHandler:
    handler: handler.webSocketOnMessageHandler
    events:
      - websocket:
          route: onMessage # will trigger if $request.body.action === "onMessage"
