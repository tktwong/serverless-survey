service: lambda-cloudwatch-alert
provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage,'dev'}
  # 2 - set environment variable for notification email
  environment:
    NOTIFICATION_EMAIL: ${self:custom.${self:provider.stage}.NOTIFICATION_EMAIL}

functions:
  hello:
    handler: handler.hello
    # define function to set an alarm
    alarms:
      - functionErrors

plugins:
  - serverless-python-requirements
  - serverless-plugin-aws-alerts # 1 - add alert plugin (npm i serverless-plugin-aws-alerts)

custom:
  local: ${file(serverless-local.yml)}
  dev: ${file(serverless-dev.yml)}
  pythonRequirements:
    dockerizePip: non-linux
  # 3 - set notification config
  notifications:
    - protocol: email
      endpoint: ${self:provider.environment.NOTIFICATION_EMAIL}
    alerts:
    # 4 - define SNS topics for each kind of CloudWatch alert type (ok, alarm, insufficientData)
    topics:
      alarm:
        # create an SNS topic for the cloudwatch alert
        topic: lambda-${self:service}-${opt:stage}-alerts-alarm
        # this topic use the above configuration for notification
        notifications: ${self:custom.notifications}
#      ok:
#        topic: ...
#        notification: ...
    # 5 - set custom definitions for the function (functionErrors is default from the plugin, you can create your own)
    definitions:
      functionErrors:
        period: 3600
