service:
  name: Pic-N-Thought
  app: Gordon_Seeler_Udacity_Project

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    IMAGES_S3_BUCKET: pic-n-thought-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    DYNODB_TABLE: Pic-N-Thought-DB-${self:provider.stage}
    INDEX_NAME: pntId-userId-IX

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Pic-N-Thought App API
        description: Pic-N-Thought Application
    models:
      - name: PnTRequest
        contentType: application/json
        schema: ${file(models/create-picNthought-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetPic-N-Thoughts:
    handler: src/lambda/http/getPnTs.handler
    events:
      - http:
          method: get
          path: pnts
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}/index/${self:provider.environment.INDEX_NAME}

  Get_A_Pic-N-Thought:
    handler: src/lambda/http/getPnT.handler
    events:
      - http:
          method: get
          path: pnts/{pntId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}/index/${self:provider.environment.INDEX_NAME}

  CreatePic-N-Thought:
    handler: src/lambda/http/createPnT.handler
    events:
      - http:
          method: post
          path: pnts
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Pic-N-Thought
            description: Create a new Pic-N-Thought
            requestModels:
              'application/json': PnTRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}

  UpdatePic-N-Thought:
    handler: src/lambda/http/updatePnT.handler
    events:
      - http:
          method: patch
          path: pnts/{pntId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new Pic-N-Thought
            description: Update a new Pic-N-Thought
            requestModels:
              'application/json': PnTRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}/index/${self:provider.environment.INDEX_NAME}

  DeletePic-N-Thought:
    handler: src/lambda/http/deletePnT.handler
    events:
      - http:
          method: delete
          path: pnts/{pntId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}/index/${self:provider.environment.INDEX_NAME}

  AddPictureUrl:
    handler: src/lambda/http/addPnTImageUrl.handler
    events:
      - http:
          method: post
          path: pnts/{pntId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: 
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNODB_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: "request-body-validator"
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    PicNThoughtTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdDt
            AttributeType: S
          - AttributeName: pntId 
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdDt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNODB_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: pntId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Pic-N-Thought_s3_policy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket

    GatewayResponseDefault4xx:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

