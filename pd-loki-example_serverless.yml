app: pd-apollo-loki
service: pd-apollo-loki

frameworkVersion: ">=1.47.0 <=2.0.0"
excludeDevDependencies: true

plugins:
  - serverless-plugin-warmup
  - serverless-offline

custom:
  defaultUser: ""
  warmup:
    schedule: "cron(0/5 * ? * MON-FRI *)" # We will change this to the day of the week when load test will run
    prewarm: true # Run WarmUp immediately after a deployment
  serverless-offline:
    host: "0.0.0.0"
    port: 4040
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization

provider:
  name: aws
  runtime: go1.x
  region: ${opt:region, 'eu-central-1'}
  accountId: ${opt:accountId, env:ACCOUNT_ID}
  stage: ${opt:stage, 'stg'}
  endpointType: regional
  deploymentBucket:
    name: fp-apollo-serverless-${self:provider.region}-deploys-${self:provider.stage}
    maxPreviousDeploymentArtifacts: 3
  deploymentPrefix: apollo-loki
  memorySize: 128
  logs:
    restApi: true
  tracing:
    apiGateway: true
    lambda: true
  timeout: 30
  apiGateway:
    minimumCompressionSize: 100
  environment:
    STAGE: ${self:provider.stage}

package:
  individually: true
  exclude:
    - ".*/**"
  include:
    - "./bin/**"

functions:
  handleProductCreate:
    handler: bin/post
    events:
      - http:
          path: /api/v1/catalog/products
          method: post
          cors:
            origins:
              - "*"
            headers: ${self:custom.allowedHeaders}
            allowCredentials: false

  handleGet:
    handler: bin/get
    events:
      - http:
          path: /api/v1/vendor-service/vendors/{vendor_code}/info
          method: get
          request:
            parameters:
              external_path: optional
          cors:
            origins:
              - "*"
            headers: ${self:custom.allowedHeaders}
            allowCredentials: false

  handlePut:
    handler: bin/put
    events:
      - http:
          path: /api/v1/{external_path}
          method: put
          cors:
            origins:
              - "*"
            headers: ${self:custom.allowedHeaders}
            allowCredentials: false

  handlePatch:
    handler: bin/patch
    events:
      - http:
          path: /api/v1/{external_path}
          method: patch
          cors:
            origins:
              - "*"
            headers: ${self:custom.allowedHeaders}
            allowCredentials: false

  handleProductUpdate:
    handler: bin/patch
    events:
      - http:
          path: /api/v1/catalog/products/test
          method: patch
          cors:
            origins:
              - "*"
            headers: ${self:custom.allowedHeaders}
            allowCredentials: false
