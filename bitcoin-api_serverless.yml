service: bitcoin-api

frameworkVersion: ">=1.28.0 <2.0.0"

plugins:
  - serverless-openapi-documentation

package:
 exclude:
   - ./**
 include:
   - ./bin/**

provider:
  name: aws
  runtime: go1.x
  stage: dev
  region: us-east-1

  environment:
    SERVICE: ${self:service}-${opt:stage, self:provider.stage}
    REGION: ${self:provider.region}
    USERS_DB: users_${opt:stage, self:provider.stage}
    TRANSACTIONS_DB: transactions_${opt:stage, self:provider.stage}
    PRIVATE_KEY: )@<_U2!Ba`xMYhFL#!r3V.,}/ySn3kPuvCZ[*f[ew+Hd5\7Kw:*G&Rq`9`-]5&;>
    BITCOIN_API_KEY: MY-BITCOIN_API_KEY
    MYSQL_HOST: bitcoin-api-docker_db_1
    MYSQL_DATABASE: db
    MYSQL_USER: gouser
    MYSQL_PASSWORD: gouser@)@<_U2
    MYSQL_PORT: 3306
    CACHE_DB: cache_${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:GetItem
      - dynamodb:Query
      - dynamodb:DeleteItem
      - dynamodb:UpdateItem
      - dynamodb:PutItem
      Resource: ['*']
    - Effect: Allow
      Action:
      - lambda:InvokeFunction
      Resource: ["*"]

custom:
  documentation: ${file(doc/serverless.doc.yml):documentation}

functions:
  applicationAuthorize:
    handler: bin/authorizer
    cors: true
  login:
    handler: bin/login
    events:
      - http:
          path: login
          method: GET
          documentation: ${file(doc/serverless.doc.yml):endpoints.login}
  sign:
    handler: bin/sign
    events:
      - http:
          path: sign
          method: POST
          documentation: ${file(doc/serverless.doc.yml):endpoints.sign}
  xChangeBitcoin:
    handler: bin/xChangeHandler
    events:
      - http:
          path: xChangeBitcoin
          method: POST
          documentation: ${file(doc/serverless.doc.yml):endpoints.xChange}
          authorizer:
            name: applicationAuthorize
            type: token
            cors: true
  report:
    handler: bin/report
    events:
      - http:
          path: report
          method: GET
          documentation: ${file(doc/serverless.doc.yml):endpoints.report}
          authorizer:
            name: applicationAuthorize
            type: token
            cors: true
resources:
  Resources:
    registerUsers:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "key"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "key"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CACHE_DB}
