# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: cadastro-pacientes
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  # npm i serverless-dynamodb-local --save-dev && sls dynamodb install
  - serverless-dynamodb-local
  - serverless-offline
custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
    seed:
      domain:
        sources:
          - table: PACIENTES
            sources: [./offline/migrations/pacientes-seed.json]


# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

# you can overwrite defaults here
  stage: dev
  region: us-east-1
  environment:
    PACIENTES_TABLE: 'PACIETES-${opt:stage, self:provider.stage}'

  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:PutItem
      - dynamodb:DeleteItem
      - dynamodb:GetItem
      - dynamodb:UpdateItem
    Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:874898405626:table/${self:provider.environment.PACIENTES_TABLE}'

functions:
  listarPacientes:
    handler: handler.listarPacientes
    events:
      - http: GET pacientes

  obterPaciente:
    handler: handler.obterPaciente
    events:
      - http:
          path: pacientes/{pacienteId}
          method: get

  cadastrarPaciente:
    handler: handler.cadastrarPaciente
    events:
      - http:
          path: pacientes
          method: post

  atualizarPaciente:
    handler: handler.atualizarPaciente
    events:
      - http:
          path: pacientes/{pacienteId}
          method: put
  excluirPaciente:
    handler: handler.excluirPaciente
    events:
      - http:
          path: pacientes/{pacienteId}
          method: delete

resources:
  Resources:
    PacientesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PACIENTES_TABLE}
        AttributeDefinitions:
          - AttributeName: paciente_id
            AttributeType: S
        KeySchema:
          - AttributeName: paciente_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

