service: ff-apigw

provider:
  name: aws
  stage: dev
  runtime: java11
  region: ap-northeast-1
  memorySize: 256
  logs:
    websocket: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - arn:aws:dynamodb:ap-northeast-1:*:table/${self:custom.roomsTable}
        - arn:aws:dynamodb:ap-northeast-1:*:table/${self:custom.connectionsTable}

custom:
  roomsTable: ${self:service.name}-rooms-${self:provider.stage}
  connectionsTable: ${self:service.name}-connections-${self:provider.stage}

# you can define service wide environment variables here
environment:
  ROOMS_TABLENAME: ${self:custom.roomsTable}
  CONNECTIONS_TABLENAME: ${self:custom.connectionsTable}

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**
package:
  artifact: target/function.zip

functions:
  # API Handlers
  roomApi:
    handler: com.kdnakt.quarkus.fivefingers.RoomsApiHandler
    events:
      - http:
          path: api/rooms/
          method: get
    environment:
      HANDLER_NAME: room
  newRoomApi:
    handler: com.kdnakt.quarkus.fivefingers.NewRoomsApiHandler
    events:
      - http:
          path: api/rooms/new
          method: get
    environment:
      HANDLER_NAME: newRoom
  # WebSocket Handlers
  roomSocketConnect:
    handler: com.kdnakt.quarkus.fivefingers.RoomSocketConnectHandler
    events:
      - websocket:
          route: $connect
  roomSocketDisconnect:
    handler: com.kdnakt.quarkus.fivefingers.RoomSocketDisconnectHandler
    events:
      - websocket:
          route: $disconnect
  roomSocketMessage:
    handler: com.kdnakt.quarkus.fivefingers.RoomSocketDefaultHandler
    events:
      - websocket:
          route: $default
  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    RoomsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.roomsTable}
        AttributeDefinitions:
          - AttributeName: RoomId
            AttributeType: S
        KeySchema:
          - AttributeName: RoomId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: True
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.connectionsTable}
        AttributeDefinitions:
          - AttributeName: RoomId
            AttributeType: S
          - AttributeName: ConnectionId
            AttributeType: S
        KeySchema:
          - AttributeName: RoomId
            KeyType: HASH
          - AttributeName: ConnectionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: True
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
