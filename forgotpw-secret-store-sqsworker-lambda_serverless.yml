service: secret-store-sqsworker

# pin to a specific Serverless version
frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  region: us-east-1
  runtime: nodejs8.10
  deploymentBucket: forgotpw-deploy-${env:AWS_ENV, 'dev'}
  stage: live
  logRetentionInDays: 14 # cloudwatch logs
  timeout: 10 # seconds
  versionFunctions: true
  iamRoleStatements:
    -
      Effect: Allow
      Action:
        - sqs:GetQueueUrl
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource:
        - 'Fn::Join':
          - ':'
          -
            - 'arn:aws:sqs'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'fpw-secret-store-request'
    -
      Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::forgotpw-userdata-*
    -
      Effect: Allow
      Action:
        - s3:GetObject
      Resource: arn:aws:s3:::forgotpw-usertokens-${env:AWS_ENV, 'dev'}/*
      

plugins:
  - serverless-mocha-plugin
  - serverless-prune-plugin

custom:
  # serverless-prune-plugin
  prune:
    automatic: true
    number: 5

package:
  exclude:
    - .git/**

functions:
  fpw-secret-store-sqsworker:
    name: 'fpw-secret-store-sqsworker'
    handler: index.handler
    environment:
      STORE_SQS_QUEUE_NAME: fpw-secret-store-request
      USERDATA_S3_BUCKET: forgotpw-userdata-${env:AWS_ENV, 'dev'}
      USERDATA_S3_SSEC_KEY: ${ssm:/fpw/USERDATA_S3_SSEC_KEY~true}
      TWILIO_ACCOUNT_SID: ${ssm:/fpw/TWILIO_ACCOUNT_SID~true}
      TWILIO_AUTH_TOKEN: ${ssm:/fpw/TWILIO_AUTH_TOKEN~true}
      TWILIO_FROM_NUMBER: ${ssm:/fpw/TWILIO_FROM_NUMBER}
      LOG_LEVEL: 'debug'
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - "StoreSecretSQSQueue"
              - "Arn"
          batchSize: 10

resources:
  Resources:
    StoreSecretSQSQueue:
      Type: AWS::SQS::Queue
      Properties: 
        QueueName: fpw-secret-store-request
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 30
        MessageRetentionPeriod: 345600 # seconds (4 days)
        RedrivePolicy: 
          deadLetterTargetArn: 
            Fn::GetAtt: 
              - "StoreSecretSQSQueueDeadletter"
              - "Arn"
          maxReceiveCount: 5
    StoresecretSQSQueuePolicy:
      Type: 'AWS::SQS::QueuePolicy'
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Id: sqspolicy
          Statement:
            - Sid: SendMessage-To-Queue-From-SNS-Topic
              Effect: Allow
              Principal: "*"
              Action:
                - 'sqs:SendMessage'
              Resource: { "Fn::Join" : [":", ["arn:aws:sqs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "fpw-secret-store-request" ] ] }
              Condition:
                ArnEquals:
                  aws:SourceArn: { "Fn::Join" : ["", ["arn:aws:sns:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":fpw-secret-store-request" ] ] }
        Queues:
          - { "Fn::Join" : ["", ["https://sqs.", { "Ref" : "AWS::Region" }, ".amazonaws.com/", { "Ref" : "AWS::AccountId" }, "/fpw-secret-store-request" ] ] }
      DependsOn:
        - StoreSecretSQSQueue
    StoreSecretSQSQueueDeadletter:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: fpw-secret-store-request-deadletter
    StoreSecretSNSSubscription:
      DependsOn: StoreSecretSQSQueue
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: { "Fn::Join" : [":", ["arn:aws:sqs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "fpw-secret-store-request" ] ] }
        Protocol: SQS
        TopicArn: { "Fn::Join" : ["", ["arn:aws:sns:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":fpw-secret-store-request" ] ] }
