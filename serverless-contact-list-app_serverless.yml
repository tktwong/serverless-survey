service:
  name: serverless-contact-list-app

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    CONTACT_LIST_TABLE_NAME: ${env:CONTACT_LIST_TABLE}-Table-${self:provider.stage}
    CONTACT_ID_INDEX_NAME: ${env:CONTACT_LIST_TABLE}-Table-Id-Index-${self:provider.stage}
    CONTACT_PHOTO_S3_BUCKET_NAME: ${env:CONTACT_PHOTO_S3_BUCKET}-${self:provider.stage}
    AWS_SIGNED_URL_EXPIRATION: ${env:AWS_SIGNED_URL_EXPIRATION}
    AUTH0_JWKS_URL: ${env:AUTH0_JWKS_URL}

custom:
  dotenv:
    path: ./.env
    include:
      - CONTACT_LIST_TABLE
      - CONTACT_PHOTO_S3_BUCKET
      - AWS_SIGNED_URL_EXPIRATION
      - AUTH0_JWKS_URL
  documentation:
    api:
      info:
        version: v1.1.0
        title: Contact list API
        description: Serverless application to manage contacts
    models:
      - name: CreateContactRequest
        contentType: application/json
        schema: ${file(validators/create-contact-request.json)}
      - name: UpdateContactRequest
        contentType: application/json
        schema: ${file(validators/update-contact-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  
  AddContact:
    handler: src/lambda/http/createContact.handler
    events:
      - http:
          method: post
          path: contacts
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new user contact
            description: Create a new user contact
            requestModels:
              'application/json': CreateContactRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACT_LIST_TABLE_NAME}
  GetContacts:
    handler: src/lambda/http/getContacts.handler
    events:
      - http:
          method: get
          path: contacts
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACT_LIST_TABLE_NAME}
  DelContact:
    handler: src/lambda/http/deleteContact.handler
    events:
      - http:
          method: delete
          path: contacts/{contactId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACT_LIST_TABLE_NAME}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACT_LIST_TABLE_NAME}/index/${self:provider.environment.CONTACT_ID_INDEX_NAME}
  PutContact:
    handler: src/lambda/http/updateContact.handler
    events:
      - http:
          method: put
          path: contacts/{contactId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a user contact
            description: Update a user contact
            requestModels:
              'application/json': UpdateContactRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACT_LIST_TABLE_NAME}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACT_LIST_TABLE_NAME}/index/${self:provider.environment.CONTACT_ID_INDEX_NAME}
  GenPhotoUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: contacts/{contactId}/photo
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACT_LIST_TABLE_NAME}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACT_LIST_TABLE_NAME}/index/${self:provider.environment.CONTACT_ID_INDEX_NAME}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.CONTACT_PHOTO_S3_BUCKET_NAME}/*


resources:
  Resources:
    ContactsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: contactId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONTACT_LIST_TABLE_NAME}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CONTACT_ID_INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: contactId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    ContactPhotosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.CONTACT_PHOTO_S3_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: ${self:provider.environment.CONTACT_PHOTO_S3_BUCKET_NAME}_POLICY
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.CONTACT_PHOTO_S3_BUCKET_NAME}/*'
        Bucket: !Ref ContactPhotosBucket
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
