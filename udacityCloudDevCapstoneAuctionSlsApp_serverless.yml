service:
  name: udacityCloudDevCapstoneAuctionSlsApp

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
  tracing:
    lambda: true
    apiGateway: true

resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/AuctionsBucket.yml):AuctionsBucketPolicy}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    iamRoleStatementsName: DynamoDBCreateAuction
    iamRoleStatements:
      - ${file(iam/DynamoDBCreateAuction.yml):DynamoDBCreateAuction}

    events:
      - http:
          method: POST
          path: /auction
          cors: true
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    iamRoleStatementsName: DynamoDBGetAuctions
    iamRoleStatements:
      - ${file(iam/DynamoDBGetAuctions.yml):DynamoDBGetAuctions}

    events:
      - http:
          method: GET
          path: /auctions
          cors: true
          authorizer: ${self:custom.authorizer}

  getAuction:
    handler: src/handlers/getAuction.handler
    iamRoleStatementsName: DynamoDBGetAuction
    iamRoleStatements:
      - ${file(iam/DynamoDBGetAuctions.yml):DynamoDBGetAuctions}

    events:
      - http:
          method: GET
          path: /auction/{id}
          cors: true
          authorizer: ${self:custom.authorizer}

  placeBid:
    handler: src/handlers/placeBid.handler
    iamRoleStatementsName: DynamoDBUpdateAuction
    iamRoleStatements:
      - ${file(iam/DynamoDBUpdateAuction.yml):DynamoDBUpdateAuction}
      - ${file(iam/DynamoDBGetAuctions.yml):DynamoDBGetAuctions}

    events:
      - http:
          method: PATCH
          path: auction/{id}/bid
          cors: true
          authorizer: ${self:custom.authorizer}

  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    iamRoleStatementsName: S3UploadAuctionPicture
    iamRoleStatements:
      - ${file(iam/S3Upload.yml):S3Upload}
      - ${file(iam/DynamoDBUpdateAuction.yml):DynamoDBUpdateAuction}
      - ${file(iam/DynamoDBGetAuctions.yml):DynamoDBGetAuctions}

    events:
      - http:
          method: PATCH
          path: auction/{id}/picture
          cors: true
          authorizer: ${self:custom.authorizer}

  processAuctions:
    handler: src/handlers/processAuctions.handler
    iamRoleStatementsName: SQSProcessAuction
    iamRoleStatements:
      - ${file(iam/SQSSend.yml):SQSSend}
      - ${file(iam/DynamoDBUpdateAuction.yml):DynamoDBUpdateAuction}
      - ${file(iam/DynamoDBGetAuctions.yml):DynamoDBGetAuctions}

    events:
      - schedule: rate(1000 minutes)

custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:authService-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    arn: ${cf:notificationSls-${self:provider.stage}.MailQueueArn}
    url: ${cf:notificationSls-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: auctions-bucket-ucd-capstone-${self:provider.stage}
  bundle:
    linting: false
