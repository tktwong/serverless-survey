# Welcome to Serverless!
#
# This file is the main config file for your service.
# For full config options, check the docs:
#    docs.serverless.com

service: todo
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# get option variables from options.js file
custom:
  configs: ${file(config.js)}

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.configs.stage}
  region: ${self:custom.configs.region}
  environment:
    tableName: ${self:custom.configs.tableName}

# get env variables from env.yml file
  # environment: ${file(env.yml):${self:custom.stage}}

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:DeleteObject"
      Resource:
        - ${self:custom.configs.bucketArn}
        - ${self:custom.configs.bucketArn}/*
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - ${self:custom.configs.tableArn}
        - ${self:custom.configs.tableArn}/*

# OR use existing preconfig role
# role: ${self:custom.options.lambdaRoleArn}

# you can add packaging information here
package:
  exclude:
    - .git
    - .gitignore
    - configs.yml
    - README.md
    - LICENSE
    - web/*
    - test.sh
    - client.js

functions:
  debug:
    handler: handler.debug
    events:
      - http:
          path: debug
          method: any
          cors: true
          authorizer: ${self:custom.configs.userPoolArn}
  tasks_get:
    handler: handler.tasks_get
    events:
      - http:
          path: tasks
          method: get
          cors: true
          authorizer: ${self:custom.configs.userPoolArn}
      - http:
          path: tasks/{id}
          method: get
          cors: true
          authorizer: ${self:custom.configs.userPoolArn}
  tasks_post:
    handler: handler.tasks_post
    events:
      - http:
          path: tasks
          method: post
          cors: true
          authorizer: ${self:custom.configs.userPoolArn}
  tasks_delete:
    handler: handler.tasks_delete
    events:
      - http:
          path: tasks/{id}
          method: delete
          cors: true
          authorizer: ${self:custom.configs.userPoolArn}
  tasks_put:
    handler: handler.tasks_put
    events:
      - http:
          path: tasks/{id}
          method: put
          cors: true
          authorizer: ${self:custom.configs.userPoolArn}

# you can add CloudFormation resource templates here
resources:
  Resources:
    table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.configs.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: uid
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.configs.tableReadUnits}
          WriteCapacityUnits: ${self:custom.configs.tableWriteUnits}
