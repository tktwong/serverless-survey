## Name Service
service: api


# The plugins used in this project
plugins:
  - serverless-offline
  - serverless-plugin-include-dependencies
  - serverless-mocha-plugin

# It make the posible reduce the size MB for deploy
package:
  exclude:
    - node_modules/**
    - test/**

frameworkVersion: '2'

# Section for to customise variables
custom:
  settings:
    POST_TABLE_PEOPLE: people
    POST_TABLE_PLANET: planet


# Configuration essential AWS ()
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  stage: dev
  environment: ${self:custom.settings}
    #<NAME_ENV>: ${any} || words
  iamRoleStatements:
    - Effect: "Allow"
      Action:
      #  - dynamodb:*
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteITem
      Resource:
      - "arn:aws:dynamodb:us-east-2:*:table/people"
      - "arn:aws:dynamodb:us-east-2:*:table/planet"
      #other way
      #Resource:
      #- { "Fn::GetAtt": ["", "Arn"] }


functions:

  ## This is section for function test for example ###
  ### Command popular -- sls invoke test -f people
  
  
  # createPlanet : name function for create models people
  createPost:
    handler: src/handler.createPost
    events:
    - http:
        path: /post/people/{number}
        method: post
        request:
          parameters:
            paths:
              number: true
  
  # getAllPlanet : name function for get all records of models people
  getAllPots:
    handler: src/handler.getAllPots
    events:
    - http:
        path: /posts
        method: get

  # getPlanets : name function for get the records with limits number
  getPots:
    handler: src/handler.getPots
    events:
    - http:
        path: /posts/{number}
        method: get
        request:
          parameters:
            paths:
              number: true

  # getPlanet : name function for get one records of models planet
  getPot:
    handler: src/handler.getPot
    events:
    - http:
        path: /post/{id}
        method: get
        request:
          parameters:
            paths:
              id: true

  # putPlanet : name function for update one records of models planet
  putPost:
    handler: src/handler.putPost
    events:
    - http:
        path: /post/update/{id}
        method: put
        request:
          parameters:
            paths:
              id: true

  # deletePlanet : name function for remove one records of models planet
  deletePost:
    handler: src/handler.deletePost
    events:
    - http:
        path: /post/delete/{id}
        method: delete
        request:
          parameters:
            paths:
              id: true

resources:
  Resources:
    PostsTable: ## or '<DynamoDBTableName>'
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: people

    PlanetTable: ## or '<DynamoDBTableName>'
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: planet