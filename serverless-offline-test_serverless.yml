service: aws-lambda-serverless-nextjs-test1

provider:
  memorySize: 512
  name: aws
  profile: max
  region: us-east-1
  runtime: nodejs8.10
  stage: production
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
        - lambda:*
        - dynamodb:*
        - cognito:*
        - cognito-idp:*
        - execute-api:*
      Resource: '*'
    - Effect: "Allow"
      Action:
        - "s3:GetBucketNotification"
        - "s3:PutBucketNotification"
      Resource:
        # Ref: AttachmentsBucket
        Fn::Join: ['', [Fn::GetAtt: [ AttachmentsBucket, Arn ]]]

  environment:
    region: ${self:provider.region}
    NODE_ENV: ${self:custom.NODE_ENV}
    STAGE: ${self:custom.stage}
    userPoolId: 
      Ref: CognitoUserPool
    identityPoolId: 
      Ref: CognitoIdentityPool
    userPoolWebClientId: 
      Ref: CognitoUserPoolClient
    AttachmentsBucketName: 
      Ref: AttachmentsBucket

functions:
  react:
    handler: lambdas/index.react
    events:
      - http: ANY /
      - http: ANY /{proxy+}

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-apigw-binary
  - serverless-apigwy-binary
  - '@anttiviljami/serverless-stack-output'
  - serverless-plugin-existing-s3

custom:
  region: ${self:provider.region}


  facebookId: fbid
  googleId: googleid
  NODE_ENV: production

  # this is the post deploy
  output:
    handler: lambdas/output.handler
    file: lambdas/seed_data.json

  apigwBinary:
    types:
      - '*/*'
  customDomain:
    domainName: trinity.maxkondel.com
    certificateName: '*.maxkondel.com'
    createRoute53Record: true
    endpointType: 'regional'
    stage: ${self:custom.NODE_ENV}
  stage: ${opt:stage, self:provider.stage}

# Create our resources with separate CloudFormation templates
resources:
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}

