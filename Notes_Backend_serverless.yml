# NOTE: Update this with the Umbric users service name
# TODO: Read serverless.yml docs
# TODO: https://serverless.com/framework/docs/providers/aws/guide/intro/
#

# New service names create new projects in AWS once deployed
service: users

# Use the serverless-webpack plugin to transpile ES6
# Using offline to mock & test locally
# Use warmup to prevent Cold Starts
plugins:
  - serverless-webpack
  - serverless-offline
  # - serverless-plugin-warmup # Out for now

# configure plugins declared above
custom:
  # Stages are based on what is passed into the CLI when running
  # serverless commands. Or fallback to settings in provider section.
  stage: ${opt:stage, self:provider.stage}

  # Set your table name as needed for local testing
  tableName: ${self:custom.stage}-UsersTable

  # Load webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  # ServerlessWarmup Configuration OUT FOR NOW!!!
  # See configuration Options at:
  # https://github.com/FidelLimited/serverless-plugin-warmup
  #warmup:
  #  enabled: true # defaults to false
  #  folderName: '_warmup' # Name of folder generated for warmup
  #  memorySize: 256
  #  events:
  # Run WarmUp every 720 minutes
  #    - schedule: rate(720 minutes)
  #  timeout: 20
  # Load secret environment variables based on the current stage
  # Fallback to default if it is not in PROD
  # environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2

  # Environment variables made available through process.env
  environment:
    #### EXAMPLES
    tableName: ${self:custom.tableName}
    # stripePrivateKey: ${self:custom.environment.stripePrivateKey}

  # These statements define the acceptable permission policy for our lambda functions
  # In this users Lambda functions are give permission to access Dynamo
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        # TODO: Why permissions to getUser?
        # https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminGetUser.html
        - cognito-idp:*
      # Need to restrict IM Role to the specific table and stage
      Resource:
        - "*"
functions:
  # Defines an HTTP API endpoint that calls the microServerless function in handler.js
  # - path: url path is /microServerless
  # - method: GET request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api calls
  # - authorizer: authenticate using an AWS IAM Role
  createUser:
    handler: createUser.main
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam
    # Warmup can be applied to each lambda to override
    # settings in custom.warmup block globally.
    #warmup:
    #  enabled: true

  getUser:
    handler: getUser.main
    events:
      - http:
          path: users/{primaryAccountId}/{userName}
          method: get
          cors: true
          authorizer: aws_iam
    # Warmup can be applied to each lambda to override
    # settings in custom.warmup block globally.
    #warmup:
    #  enabled: true

  deleteUser:
    handler: deleteUser.main
    events:
      - http:
          path: users/{primaryAccountId}/{userName}
          method: delete
          cors: true
          authorizer: aws_iam
    # Warmup can be applied to each lambda to override
    # settings in custom.warmup block globally.
    #warmup:
    #  enabled: true

  updateUser:
    handler: updateUser.main
    events:
      - http:
          path: users/{primaryAccountId}/{userName}
          method: put
          cors: true
          authorizer: aws_iam
    # Warmup can be applied to each lambda to override
    # settings in custom.warmup block globally.
    #warmup:
    #  enabled: true

  listUsers:
    handler: listUsers.main
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: aws_iam
    # Warmup can be applied to each lambda to override
    # settings in custom.warmup block globally.
    #warmup:
    #  enabled: true

  # LAMBDA UTILITIES
  checkAccountId:
    handler: checkAccountId.main
    events:
      - http:
          path: users/validate/{primaryAccountId}
          method: get
          cors: true
          # authorizer: aws_iam
    # Warmup can be applied to each lambda to override
    # settings in custom.warmup block globally.
    #warmup:
    #  enabled: true

  inviteUser:
    handler: inviteUser.main
    events:
      - http:
          path: users/invite/{primaryAccountId}
          method: post
          cors: true
          authorizer: aws_iam
    # Warmup can be applied to each lambda to override
    # settings in custom.warmup block globally.
    #warmup:
    #  enabled: true

# Keep resources modular and create each with separate CloudFormation templates
resources:
  Resources:
    # API Gateway CORS ERRORS
    #- ${file(resources/api-gateway-errors.yml)}
    # DynamoDB Service for users
    # - ${file(resources/UsersTable.yml)}
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    # DynamoDB Service for users
    #- ${file(resources/UserTable.yml)}
    Users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: primaryAccountId
            AttributeType: S
          - AttributeName: userName
            AttributeType: S
        KeySchema:
          - AttributeName: primaryAccountId
            KeyType: HASH
          - AttributeName: userName
            KeyType: RANGE

  # API Gateway Cross Stack Reference Exports!!!!!
  # Outputs that other services will depend on!!!
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.stage}-ApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId
