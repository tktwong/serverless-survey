frameworkVersion: ">=1.0.0 <2.0.0"
service: edf-sql

provider:
  name: aws
  runtime: python2.7
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  cfLogs: true
  versionFunctions: false
custom:
  defaultStage: dev
  profiles:
    dev: default
    prod: production
defaults:
  region: us-east-1
  timeout: 10
  memorySize: 256
  deploymentBucket: use1-serverless

environment: ${file(env-${self:provider.stage}.yml)}

iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "s3:ListBucket"
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - Ref: ServerlessDeploymentBucket
    -  Effect: "Allow"
       Action:
         - "s3:PutObject"
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - Ref : "ServerlessDeploymentBucket"

package:
  include:
    - functions/sql/
  exclude:
    - functions
    - tmp/**
    - .git/**
    - .gitignore
    - LICENSE

functions:
  parsing:
    handler: handler.handler
    name: ${self:service}-parser
    alias: ${self:provider.stage}
    description: Lambda That will parse the sql files
    timeout: 10
    memorySize: 128
    role: SqlLambdaRole
#    vpc:
#      securityGroupIds:
#        - sg-09299c71
#      subnetIds:
#        - subnet-2513b50f
#        - subnet-27cb5b51
#        - subnet-df0aa287
    events:
      - s3: 
          bucket: use1-sql
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .sql
  injection:
    handler: injection.injection
    name: ${self:service}-injection
    alias: ${self:provider.stage}
    description: Lambda That will inject the sql statment
    timeout: 10
    memorySize: 128
    role: SqlLambdaRole
#    vpc:
#      securityGroupIds:
#        - sg-09299c71
#      subnetIds:
#        - subnet-2513b50f
#        - subnet-27cb5b51
#        - subnet-df0aa287

resources:
  Resources:
    SqlLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: sql-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: sql-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:${opt:region, self:provider.region}:*:log-group:/aws/lambda/*:*:*
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DetachNetworkInterface
                    - ec2:DeleteNetworkInterface
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - s3:List*
                    - s3:DeleteObjects
                    - s3:GetObject
                  Resource: "*"
#plugins:
#  - serverless-prune-plugin

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
Outputs:
   ServerlessDeploymentBucketName:
     Description: 'Description for Serverless deployment bucket'
