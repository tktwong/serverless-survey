# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: music-service # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  profile: learner
  region: eu-central-1
  stage: dev
  db-table-name: 'MUSIC'
  db-backup-table-name: 'MUSIC-BACKUP'

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  environment:
    DYNAMODB_TABLE: ${self:provider.db-table-name}-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE2: ${self:provider.db-backup-table-name}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
         - "s3:PutObject"
         - "s3:*"
      Resource: "*"

    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan  
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan  
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE2}"


functions:
    write:
      handler: handler.write
    streamProcessor:
      handler: handler2.streamProcessor
      events:
      - stream: arn:aws:dynamodb:eu-central-1:974343026024:table/MUSIC-dev/stream/2018-11-30T07:53:34.333
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:eu-central-1:974343026024:table/MUSIC-dev/stream/2018-11-30T07:53:34.333
          batchSize: 100
    backup:
      handler: handler3.backup


# LETS DEFINE OUR DYNAMO TABLES HERE      
# you can add CloudFormation resource templates here
resources:
  Resources:

    TempBucket:
      Type: AWS::S3::Bucket
      Properties:
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    TodosDynamoDbTable: 
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: artist
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: artist
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    TodosDynamoDbTable2: 
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: artist
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: artist
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DYNAMODB_TABLE2}

plugins:
  - serverless-dynamodb-local
  - serverless-offline
