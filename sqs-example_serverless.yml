service: sns-sqs-offline-example

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-1
  stage: ${opt:stage, "development"}
  profile: default
  memorySize: 128 # minimum memory size on amazon lambda
  environment:
    NODE_ENV: ${self:provider.stage}
    SERVICE: ${self:service}
    AWS_DEPLOY_REGION: ${self:provider.region}
    AWS_ACCOUNT_ID: "#{AWS::AccountId}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: "*"
    - Effect: Allow
      Action:
        - SQS:SendMessage
        - SQS:DeleteMessage
        - SQS:ReceiveMessage
        - SQS:GetQueueUrl
        - SQS:ListQueues
      Resource: "*"     

custom:

  serverless-offline: 
    port: 3200

  serverless-offline-sqs:
    autoCreate: true
    apiVersion: "2012-11-05"
    endpoint: http://0.0.0.0:9324
    region: ap-southeast-1
    skipCacheInvalidation: false

    
  webpack:
    includeModules: true
    webpackConfig: "webpack.config.js"
    packager: "npm"
    keepOutputDirectory: true
    
plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-offline-direct-lambda
  - serverless-offline-sqs
  - serverless-offline

package:
  individually: true
  exclude:
    - elasticMQ

functions:
  sendMesssage: 
    handler: src/handler.sendMessage
    events:
      - http:
          path: /sendMessage
          method: post
          cors: true

  receiveMessage:
    handler: src/handler.receiveMessage
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - myQueue
              - Arn
resources:
  Resources:
    myQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-sqs-myQueue
    
