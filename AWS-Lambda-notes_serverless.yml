
# Specifying service: 
service: awesome-api

#other deployment specs 
provider:
  name: aws
  runtime: nodejs12.x
  profile: java_lambda_user

# you can overwrite defaults here
  stage: dev
  region: us-east-1
  
  
  
# api gateway 
functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: first-endpoint
          method: get




#Resources
resources:
 Resources:
   uploadBucket:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: ${self:service}-${self:provider.stage}-uploads #we can name simply my-bucket-uploads, instaed if we use ${} we can use servicename-stageName-uploads ( in our case it is going to be awesome-api-dev-uploads )
       
      userTable:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: ${self:service}-${self:provider.stage}-users
       AttributeDefinitions:
        - AttributeName: userId
        - AttributeType: S
       KeySchema:
        - AttributeName: email
          KeyType: HASH
       PrevisionedThroughput:
         ReadCapacityUnits: 1
         WriteCapacityUnits: 1

# this example is here: https://www.serverless.com/framework/docs/providers/aws/guide/resources/
Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1    
       
       
       
 #worked resource code: 
 resources:
  Resources:
    uploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-uploadsone #we can name simply my-bucket-uploads, instaed if we use ${} we can use servicename-stageName-uploads ( in our case it is going to be awesome-api-dev-uploads )
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-usersTableone
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
       
       
       
Serverless: Packaging service...
Serverless: Excluding development dependencies...
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
CloudFormation - CREATE_IN_PROGRESS - AWS::CloudFormation::Stack - awesome-api-dev
CloudFormation - CREATE_IN_PROGRESS - AWS::S3::Bucket - ServerlessDeploymentBucket
CloudFormation - CREATE_IN_PROGRESS - AWS::S3::Bucket - ServerlessDeploymentBucket
CloudFormation - CREATE_COMPLETE - AWS::S3::Bucket - ServerlessDeploymentBucket
CloudFormation - CREATE_IN_PROGRESS - AWS::S3::BucketPolicy - ServerlessDeploymentBucketPolicy
CloudFormation - CREATE_IN_PROGRESS - AWS::S3::BucketPolicy - ServerlessDeploymentBucketPolicy
CloudFormation - CREATE_COMPLETE - AWS::S3::BucketPolicy - ServerlessDeploymentBucketPolicy
CloudFormation - CREATE_COMPLETE - AWS::CloudFormation::Stack - awesome-api-dev
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading artifacts...
Serverless: Uploading service awesome-api.zip file to S3 (390 B)...
Serverless: Validating template...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
CloudFormation - UPDATE_IN_PROGRESS - AWS::CloudFormation::Stack - awesome-api-dev
CloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - HelloLogGroup
CloudFormation - CREATE_IN_PROGRESS - AWS::IAM::Role - IamRoleLambdaExecution
CloudFormation - CREATE_IN_PROGRESS - AWS::IAM::Role - IamRoleLambdaExecution
CloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - HelloLogGroup
CloudFormation - CREATE_COMPLETE - AWS::Logs::LogGroup - HelloLogGroup
CloudFormation - CREATE_COMPLETE - AWS::IAM::Role - IamRoleLambdaExecution
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - HelloLambdaFunction
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - HelloLambdaFunction
CloudFormation - CREATE_COMPLETE - AWS::Lambda::Function - HelloLambdaFunction
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionmV3sZ2P1JyYQx0ihtBmPwquIA9VYlItU6K0CThI
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionmV3sZ2P1JyYQx0ihtBmPwquIA9VYlItU6K0CThI
CloudFormation - CREATE_COMPLETE - AWS::Lambda::Version - HelloLambdaVersionmV3sZ2P1JyYQx0ihtBmPwquIA9VYlItU6K0CThI
CloudFormation - UPDATE_COMPLETE_CLEANUP_IN_PROGRESS - AWS::CloudFormation::Stack - awesome-api-dev
CloudFormation - UPDATE_COMPLETE - AWS::CloudFormation::Stack - awesome-api-dev       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
