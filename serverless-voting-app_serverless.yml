# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: voting-app # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.9.0 <2.0.0"
package:
  individually: true
  exclude:
    - ./**

provider:
  name: aws
  runtime: nodejs4.3
  memorySize: 128
  timeout: 5
  stage: prod

  region: us-west-1

  environment:
      DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
      SNS_TOPIC_NAME: ${self:service}-${opt:stage, self:provider.stage}
      SNS_TOPIC_ARN_TEST: arn:aws:sns:us-west-1:253267020097:voting-app-prod
      SNS_TOPIC_ARN:
        Fn::Join:
          - ":"
          - - arn
            - aws
            - sns
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - "${self:provider.environment.SNS_TOPIC_NAME}"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: [ "${self:provider.environment.SNS_TOPIC_ARN}" ]


functions:
  get-results:
    handler: result/result.get
    package:
      include:
        - result/**
      exclude:
        - result/result-ui
    events:
      - http:
          path: result
          method: get
          integration: lambda
          response:
            headers:
              Content-Type: integration.response.body.headers.ContentType
              Access-Control-Allow-Origin: "'*'"
            template: $input.path("$.body")
  worker:
    handler: worker/worker.saveVote
    package:
      include:
        - worker/**
    events:
      - sns:
          topicName: ${self:provider.environment.SNS_TOPIC_NAME}
          displayName: ${self:provider.environment.SNS_TOPIC_NAME}
  get-vote:
    handler: vote/vote.get
    package:
      include:
        - vote/**
    events:
      - http:
          path: vote
          method: get
          integration: lambda
          request:
            parameters:
              headers:
                Cookie: false
            headers:
              Cookie: method.request.header.Cookie
          response:
            headers:
              Content-Type: integration.response.body.headers.ContentType
              Set-Cookie: integration.response.body.Cookie
            template: $input.path("$.body")
  vote:
    handler: vote/vote.post
    package:
      include:
        - vote/**
    events:
      - http:
          path: vote
          method: post
          integration: lambda
          request:
             parameters:
               querystrings:
                 vote: true
               headers:
                 Cookie: false
             headers:
               Cookie: method.request.header.Cookie
          response:
            headers:
              #TODO
              Content-Type: integration.response.body.headers.ContentType
              Set-Cookie: integration.response.body.Cookie
              #Content-Type: "'text/html'"
            template: $input.path("$.body")

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    #votingTopic:
    #  Type: AWS::SNS::Topic
    #  Properties:
    #    DisplayName: ${self:provider.environment.SNS_TOPIC_NAME}
    #    TopicName: ${self:provider.environment.SNS_TOPIC_NAME}
    #Outputs:
    #  QueueNameURL:
    #    Description: The URL for QueueName
    #    Value:
    #      'Fn::GetAtt': [ votingQueue, URL ]
    #    Export:
    #      Name: '${self:service}:${opt:stage, self:provider.stage}:QueueNameURL'

