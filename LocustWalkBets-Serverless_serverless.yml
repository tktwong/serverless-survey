# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: LocustWalkBets-Serverless

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello

  users_index:
    handler: users.show
    events:
      - http: 
          path: users
          method: get
          authorizer: aws_iam
          cors: true

  bets_index:
    handler: bets.show
    events:
      - http: 
          path: bets
          method: get
          authorizer: aws_iam
          cors: true

  matches_index:
    handler: matches.show
    events:
      - http: GET matches
  standings:
    handler: users.show_standings
    events:
      - http: GET standings



#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


resources:
  Resources:
    UserInformationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:        
          - 
            AttributeName: "user_id"
            AttributeType: "S"
        KeySchema:
          - 
            AttributeName: "user_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: "UserInformationTable"

    BetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:        
          - 
            AttributeName: "match_id"
            AttributeType: "S"
          -
            AttributeName: "bet_id"
            AttributeType: "S"
        KeySchema:
          - 
            AttributeName: "bet_id"
            KeyType: "HASH"
          -
            AttributeName: "match_id"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: "BetsTable"

    MatchInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:        
          - 
            AttributeName: "match_id"
            AttributeType: "N"
        KeySchema:
          - 
            AttributeName: "match_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: "MatchInfoTable"



          

