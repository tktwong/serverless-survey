# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: dblottoil-getpaisresultbyid
# app and org for use with dashboard.serverless.com
app: double-lotto-il
org: tgcaspa

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  # stage: prod
  region: us-west-2
  apiName: "Double Lotto IL"
  apiGateway:
    description: "REST API of user's Double Lotto results"
  # role: arn:aws:iam::790418555412:role/LambdaDynamoDBRole
  # cfnRole: arn:aws:iam::790418555412:role/LambdaDynamoDBRole
# you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - "dynamodb:PutItem"
  #       - "dynamodb:GetItem"
  #       - "dynamodb:Scan"
  #     Resource:
  #       - arn:aws:dynamodb:us-west-2:790418555412:table/dblottoil-results"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  include:
    - ../node_modules/**
    - ../../../config/app.metadata.js
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  index:
    handler: handler.index
    name: dblottoil_getPaisResultById
    # role: arn:aws:iam::790418555412:role/LambdaDynamoDBRole
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: results/pais/{id}
          method: get
          # cors: true
          # cors:
          #   origin: '*' # <-- Specify allowed origin
          #   headers: # <-- Specify allowed headers
          #     - Content-Type
          #     - X-Amz-Date
          #     - Authorization
          #     - X-Api-Key
          #     - X-Amz-Security-Token
          #     - X-Amz-User-Agent
          # private: false
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/index'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /index

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
