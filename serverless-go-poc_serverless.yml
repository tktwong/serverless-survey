service: ${file(config.json):serviceName}
package:
  exclude:
    - ./**
  include:
    - ./bin/**
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

# prune plugin prevents deletes old versions of lambdas and prevents meeting an (at the time) undocumented storage limit in lambda
plugins:
  - serverless-prune-plugin

custom:
  prefix: ${self:service}-${self:provider.stage}
  accountId: ${file(config.json):AwsAccountId}
  prune:
    automatic: true
    number: 3

provider:
  apiGateway:
    shouldStartNameWithService: true
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  region: ${file(config.json):region}
  memorySize: 256
  timeout: 10
  logRetentionInDays: 3
  environment:
      region: ${self:provider.region}
      appBucketName: ${self:custom.prefix}-app
      notesTable: ${self:custom.prefix}-notes
      gateway_url: { "Fn::Join" : ["", [ "https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}" ] ]  }
      arnRegionAccount: ${self:provider.region}:${self:custom.accountId}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"

resources:
  Resources:
    ## Client App distribution Bucket
    AppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.appBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are available to CloudFront
    AppBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AppBucket
        PolicyDocument:
          Statement:
            - Sid: 1
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.appBucketName}/*
    ## Specifying the CloudFront Distribution to serve the client app
    AppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:provider.environment.appBucketName}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
    # A very basic  table with an index on userId and timestamp
    NotesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.notesTable}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    AppCloudFrontDistributionOutput:
        Value:
          'Fn::GetAtt': [ AppCloudFrontDistribution, DomainName ]
functions:
  notes:
    handler: bin/notes
    events:
      - http:
          path: notes/{userId}
          method: get
          cors: true
      - http:
          path: notes/{userId}/
          method: post
          cors: true
      - http:
          path: notes/{userId}/{timestamp}
          method: get
          cors: true
      - http:
          path: notes/{userId}/{timestamp}
          method: put
          cors: true
      - http:
          path: notes/{userId}/{timestamp}
          method: delete
          cors: true