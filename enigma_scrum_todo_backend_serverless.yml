service: ${self:custom.name}

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local

package:
  exclude:
    - .circleci/**
    - .vscode/**
    - .serverless/**
    - .dynamodb/**
    - __pycache__/**
    - docs/**
    - node_modules/**
    - env/**
    - tests/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:BatchWriteItem
      Resource:
        - { 'Fn::GetAtt': ['TodoDynamoTable', 'Arn'] }

environment:
  APP_CONFIG: ${self:provider.stage}
  PROVIDER_REGION: ${self:provider.region}
  AUTH_POOL: ${self:custom.authPool}
  TODO_TABLE: ${self:custom.todoTable}
  TODO_PER_PAGE: ${self:custom.todoPerPage}

custom:
  name: enigma-scrum-todo
  authPool: 'eu-central-1_3jLXINTS3'
  todoTable: '${self:custom.name}-todo-table-${self:provider.stage}'
  todoPerPage: 35
  wsgi:
    app: run.application
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true
    stages:
      - dev

functions:
  getTodoList:
    handler: wsgi_handler.handler
    events:
      - http:
          path: api/todo
          method: get
          cors: true
    
  createTodo:
    handler: wsgi_handler.handler
    events:
      - http:
          path: api/todo
          method: post
          cors: true

  updateTodo:
    handler: wsgi_handler.handler
    events:
      - http:
          path: api/todo/{id}
          method: put
          cors: true
    
  deleteTodo:
    handler: wsgi_handler.handler
    events:
      - http:
          path: api/todo/{id}
          method: delete
          cors: true

resources:
  Resources:
    TodoDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: owner
            AttributeType: S
          -
            AttributeName: created_at
            AttributeType: N
        KeySchema:
          -
            AttributeName: owner
            KeyType: HASH
          -
            AttributeName: created_at
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.todoTable}
