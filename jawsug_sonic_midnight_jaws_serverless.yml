# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: jawsug-sonic-midnight-jaws
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage}
  region: ap-northeast-1
  profile: jaws_ug

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  s3_trigger_and_move:
    handler: handler.s3_trigger_and_move
    role: S3TriggerAndMoveRole
    events:
      - s3:
          bucket: mock-aws-with-moto-${opt:stage}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
          existing: true
  sqs_trigger_and_save:
    handler: handler.sqs_trigger_and_save
    role: SqsTriggerAndSaveRole
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MockSampleQueue
              - Arn
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    #
    # S3 bucketの構築
    #
    MockAwsWithMotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: mock-aws-with-moto-${opt:stage}
    #
    # DynamoDBのテーブル構築
    #
    DynamoDbS3Info:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: s3-info-${opt:stage}
        AttributeDefinitions:
          - AttributeName: bucket_name
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: bucket_name
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        # プロビジョニング用設定値
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        # On-Demand用設定値
        # BillingMode: PAY_PER_REQUES

    #
    # SQS Queueの構築
    #
    MockSampleQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: mock-sample-queue-${opt:stage}

    #
    # Role, Policy
    #
    # S3 Triggerで実行され、画像を移動するLambda実行時のRole
    S3TriggerAndMoveRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: S3TriggerAndMoveRole
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: S3TriggerPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - '*'
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - 'Fn::Join':
                        - ''
                        - - 'arn:aws:s3:::'
                          - Ref: MockAwsWithMotoBucket
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - 'Fn::Join':
                        - ''
                        - - 'arn:aws:s3:::'
                          - Ref: MockAwsWithMotoBucket
                          - '/*'
                - Effect: Allow
                  Action:
                    - ssm:GetParameter
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - sqs:GetQueueAttributes
                    - sqs:SendMessage
                    - sqs:GetQueueUrl
                  Resource: '*'
    # SQS Triggerで実行され、DynamoDBへ保存を行うLambda実行時のRole
    SqsTriggerAndSaveRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: SqsTriggerAndSaveRole
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: S3TriggerPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - '*'
                - Effect: Allow
                  Action:
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                    - sqs:ReceiveMessage
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - '*'

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
