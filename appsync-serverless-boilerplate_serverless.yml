custom: 
  service: ${file(./env.yml):service}
  accountId: ${file(./env.yml):accountId}
  appSync: ${file(./env.yml):${opt:stage, 'staging'}.appSyncConfig}
  provider: ${file(./env.yml):provider}
  webpack: webpack.config.js
  serverless-offline:
    port: 3000
  dynamodbConfig: ${file(./env.yml):${opt:stage, 'dev'}.dynamodbConfig}

service: ${self:custom.service}

frameworkVersion: ">=1.23.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  region: ap-southeast-1
  memorySize: 128
  profile: ${self:custom.provider.awsProfile} # aws named profile
  stage: ${opt:stage, 'dev'} # `sls deploy --stage production` if --stage is provided, else use dev
  stackTags: # Optional CF stack tags
    name: ${self:custom.provider.awsTagName}
  environment:
    stage: ${opt:stage, 'staging'} # for differentiating topic env
    DYNAMODB_REGION: ${self:custom.dynamodbConfig.region}
    DYNAMODB_ENDPOINT: ${self:custom.dynamodbConfig.endpoint}
    DYNAMODB_AWS_ACCESS_KEY_ID: ${self:custom.dynamodbConfig.awsAccessKeyId}
    DYNAMODB_AWS_SECRET_ACCESS_KEY: ${self:custom.dynamodbConfig.awsSecretAccessKey}

resources:
  Resources:
    ${file(./resources.yml):${opt:stage, 'staging'}.resources}
    
plugins:
  - serverless-appsync-plugin
  - serverless-offline