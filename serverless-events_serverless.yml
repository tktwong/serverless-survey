# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: event-service # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "=1.25.0"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  memorySize: 512
  timeout: 6
  versionFunctions: true
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
       Fn::Join:
        - ":"
        - - "arn:aws:sqs"
          - "Ref" : "AWS::Region"
          - "Ref" : "AWS::AccountId"
          - "${self:service}-${self:provider.stage}-dlq"

custom:
  accountId: 654902931839
  defaultStage: devt
  profiles:
    dev: icebreaker
    devt: icebreaker
    prod: icebreaker

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# you can add CloudFormation resource templates here
resources:
  Resources:
    EventDLQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: 
          Fn::Join:
            - "-"
            - - ${self:service}
              - ${self:provider.stage}
              - "dlq"
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
    EventTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName:
          Fn::Join:
            - "-"
            - - ${self:service}
              - ${self:provider.stage}
              - "topic"
    EventTopicPolicy:
      Type: 'AWS::SNS::TopicPolicy'
      DependsOn: EventTopic
      Properties:
        PolicyDocument:
          Version: '2008-10-17'
          Statement:
            - Sid: S3SNSPolicy
              Effect: Allow
              Principal:
                AWS: '*'
              Resource: 
                Ref: EventTopic
              Action: 'sns:publish'
        Topics:
          - Ref: EventTopic
    EventStore:
      Type: AWS::S3::Bucket
      DependsOn: EventTopic
      Properties: 
         BucketName: ${self:service}-${self:provider.stage}-eventstore
         NotificationConfiguration:
          TopicConfigurations:
            - Topic: arn:aws:sns:${self:provider.region}:${self:custom.accountId}:${self:service}-${self:provider.stage}-topic
              Event: s3:ObjectCreated:Put
    GetEventProjection:
      Type: AWS::S3::Bucket
      Properties: 
         BucketName: ${self:service}-${self:provider.stage}-events

  Outputs:
    EventDLQueueOutput:
      Description: "Description for the output"
      Value: 
        Fn::GetAtt: ["EventDLQueue", "Arn"]
      Export:
        Name: "${self:service}-${self:provider.stage}-dlq"
    EventTopicOutput:
      Description: "Description for the output"
      Value: 
        Fn::GetAtt: ["EventTopic", "TopicName"]
      Export:
        Name: "${self:service}-${self:provider.stage}-topic"

functions:
  createEvent:
    handler: createHandler.createEvent
    description: Saved EventCreated to S3
    tags:
      foo: bar
    environment:
      EVENT_STORE_BUCKET: ${self:service}-${self:provider.stage}-eventstore
    events:
      - http:
          path: event
          method: post
          cors: true

  updateEvent:
    handler: updateHandler.updateEvent
    description: Get Event Data from S3 Projections
    environment:
      EVENT_STORE_BUCKET: ${self:service}-${self:provider.stage}-eventstore
    events:
      - http:
          path: event
          method: put
          cors: true

  deleteEvent:
    handler: deleteHandler.deleteEvent
    description: Event Data from S3 based on the event key
    events:
      - http:
          path: event
          method: delete
          cors: true
  
  eventDataProjection:
    handler: projections.manageEventData
    description: Maintains the status of the event data
    environment:
      EVENT_STORE_BUCKET: ${self:service}-${self:provider.stage}-eventstore
      EVENTS_BUCKET: ${self:service}-${self:provider.stage}-events
    events:
      - sns: arn:aws:sns:${self:provider.region}:${self:custom.accountId}:${self:service}-${self:provider.stage}-topic

  listEvents:
    handler: listHandler.getEventList
    description: Event Data from S3 based on the event key
    events:
      - http:
          path: event/list
          method: get
          cors: true

  getEvent:
    handler: getHandler.getEvent
    description: Get Event Data from S3 Projections
    environment:
      EVENTS_BUCKET: ${self:service}-${self:provider.stage}-events
    events:
      - http:
          path: event/{id}
          method: get
          cors: true
          request: 
          parameters: 
             paths: 
               id: true
