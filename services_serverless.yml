service:
  name: scene-store

plugins:
  - serverless-dotenv-plugin
  - '@hewmen/serverless-plugin-typescript'
  - serverless-plugin-optimize
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-domain-manager

custom:
  customDomain:
    domainName: scene-store.bridged.cc
    hostedZoneId: us-west-1
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  serverless-offline:
    httpPort: 4000

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-1
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    DYNAMODB_TABLE: '${self:service}-${opt:stage, self:provider.stage}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'

resources:
  Resources:
    sceneStoreTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${self:provider.environment.DYNAMODB_TABLE}'
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

package:
  individually: true

functions:
  main:
    handler: src/lambda.handler
    events:
      - http:
          method: any
          path: /{proxy+}
