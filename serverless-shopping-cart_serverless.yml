service: serverless-shopping-cart

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: ${opt:stage, "dev"}
#  profile: your-aws-profile
  deploymentBucket:
    name: ${self:service}-${self:provider.stage}.${self:provider.region}.deploys
  logRetentionInDays: 14
  environment:
    TABLE_NAME: ${self:service}-carts-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": [CartTable, Arn] }
plugins:
  - serverless-deployment-bucket
  - serverless-appsync-plugin
  - serverless-stack-output
  - serverless-dynamodb-fixtures
  - serverless-bundle

custom:
  # bundle
  bundle:
    sourcemaps: true
    caching: true
    linting: false
    packager: npm
    forceExclude:
      - aws-sdk
  # stack output
  output:
    file: var/${self:service}-${self:provider.stage}.stack-output.json
  MediaBucket: ${cf:s3-media-${self:provider.stage}.MediaBucketName}
  # dynamodb fixtures
  fixtures:
    - table: ${self:provider.environment.TABLE_NAME}
      sources:
        - fixtures/carts.json
  # AppSync Graphql API
  appSync:
    - name: ${self:service}-GraphQL-${self:provider.stage}
      schema: appsync/schema.graphql
      authenticationType: API_KEY
      defaultMappingTemplates:
        request: request.vtl
        response: response.vtl
      mappingTemplatesLocation: appsync/mapping-templates
      mappingTemplates:
        - dataSource: createCartLambda
          type: Mutation
          field: createCart
        - dataSource: getCartLambda
          type: Query
          field: getCart
        - dataSource: updateCartLambda
          type: Mutation
          field: updateCart
        - dataSource: emptyCartLambda
          type: Mutation
          field: emptyCart
        - dataSource: addItemLambda
          type: Mutation
          field: addItem
        - dataSource: updateItemLambda
          type: Mutation
          field: updateItem
        - dataSource: removeItemLambda
          type: Mutation
          field: removeItem
      dataSources:
          - type: AWS_LAMBDA
            name: updateCartLambda
            config:
              functionName: updateCart
          - type: AWS_LAMBDA
            name: createCartLambda
            config:
              functionName: createCart
          - type: AWS_LAMBDA
            name: getCartLambda
            config:
              functionName: getCart
          - type: AWS_LAMBDA
            name: emptyCartLambda
            config:
              functionName: emptyCart
          - type: AWS_LAMBDA
            name: addItemLambda
            config:
              functionName: addItem
          - type: AWS_LAMBDA
            name: updateItemLambda
            config:
              functionName: updateItem
          - type: AWS_LAMBDA
            name: removeItemLambda
            config:
              functionName: removeItem

functions:
  createCart:
    handler: src/createCart.handler
  updateCart:
    handler: src/updateCart.handler
  getCart:
    handler: src/getCart.handler
  emptyCart:
    handler: src/emptyCart.handler
  addItem:
    handler: src/addItem.handler
  updateItem:
    handler: src/updateItem.handler
  removeItem:
    handler: src/removeItem.handler

resources:
  - ${file(resources/dynamodb.yml)}
