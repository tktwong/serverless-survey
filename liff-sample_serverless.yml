service: liff-sample

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-1
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  vpc: ${self:custom.vpc.${self:provider.stage}}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchGetItem"
        - "dynamodb:GetItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "cognito-idp:*"
      Resource:
        - "*"
  memorySize: 128

custom:
  defaultStage: dev
  profiles:
    prod: prod
    dev: dev
    local: local
  environment:
    prod: ${file(./env/prod.yml)}
    dev: ${file(./env/dev.yml)}
    local: ${file(./env/local.yml)}
  webpack:
    webpackConfig: "webpack.serverless.config.js"
  s3Sync:
    - bucketName: "${self:service}-${self:provider.stage}-contents-bucket"
      localDir: dist
  cloudfrontInvalidate:
    distributionIdKey: ContentsCloudFrontDistributionId
    items:
      - "/*"
  cognito:
    userPoolId:
      prod: !Ref UserPool
      dev: !Ref UserPool
      local: ${self:custom.environment.${self:provider.stage}.CognitoUserPoolId}
  vpc:
    prod:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
    dev:

  resources:
    prod:
      - ${file(templates/network.yml)}
      - ${file(templates/dynamodb.yml)}
      - ${file(templates/apigw-dynamodb.yml)}
      - ${file(templates/cognito.yml)}
      - ${file(templates/s3.yml)}
      - ${file(templates/cloudfront.yml)}
    dev:
      - ${file(templates/dynamodb.yml)}
      - ${file(templates/apigw-dynamodb.yml)}
      - ${file(templates/cognito.yml)}
      - ${file(templates/s3.yml)}
      - ${file(templates/cloudfront.yml)}

package:
  individually: true
  exclude:
    - src/frontend/**

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

functions:
  status:
    handler: src/backend/api/status/index.handler
    timeout: 200
    events:
      - http:
          path: api/status
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
  postConfirmation:
    handler: src/backend/trigger/cognito/postConfirmation.handler
    environment:
      LINE_CHANNELL_ACCESS_TOKEN: ${self:custom.environment.${self:provider.stage}.LineChannelAccessToken}
      STRIPE_SECRET_KEY: ${self:custom.environment.${self:provider.stage}.StripeSecretKey}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  getUserById:
    handler: src/backend/api/users/_id/index.handler
    timeout: 200
    events:
      - http:
          path: api/users/{userId}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognito.userPoolId.${self:provider.stage}}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  putUserById:
    handler: src/backend/api/users/_id/put.handler
    timeout: 200
    events:
      - http:
          path: api/users/{userId}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  putUserGroupsById:
    handler: src/backend/api/users/_id/groups/put.handler
    timeout: 200
    events:
      - http:
          path: api/users/{userId}/groups
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognito.userPoolId.${self:provider.stage}}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  getUserMessagesById:
    handler: src/backend/api/users/_id/messages/index.handler
    timeout: 200
    events:
      - http:
          path: api/users/{userId}/messages
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  getGroups:
    handler: src/backend/api/groups/index.handler
    timeout: 200
    events:
      - http:
          path: api/groups
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognito.userPoolId.${self:provider.stage}}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  postGroup:
    handler: src/backend/api/groups/post.handler
    timeout: 200
    events:
      - http:
          path: api/groups
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognito.userPoolId.${self:provider.stage}}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  deleteGroup:
    handler: src/backend/api/groups/_id/delete.handler
    timeout: 200
    events:
      - http:
          path: api/groups/{groupName}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognito.userPoolId.${self:provider.stage}}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  getUsersByGroupName:
    handler: src/backend/api/groups/_id/users/index.handler
    timeout: 200
    events:
      - http:
          path: api/groups/{groupName}/users
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognito.userPoolId.${self:provider.stage}}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  postMessages:
    handler: src/backend/api/messages/post.handler
    timeout: 200
    events:
      - http:
          path: api/messages
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognito.userPoolId.${self:provider.stage}}
      LINE_CHANNELL_ACCESS_TOKEN: ${self:custom.environment.${self:provider.stage}.LineChannelAccessToken}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  postPaymentByUserId:
    handler: src/backend/api/users/_id/payment/post.handler
    timeout: 200
    events:
      - http:
          path: api/users/{userId}/payment
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      STRIPE_SECRET_KEY: ${self:custom.environment.${self:provider.stage}.StripeSecretKey}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  getPaymentCardByUserId:
    handler: src/backend/api/users/_id/payment/card/index.handler
    timeout: 200
    events:
      - http:
          path: api/users/{userId}/payment/card
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      STRIPE_SECRET_KEY: ${self:custom.environment.${self:provider.stage}.StripeSecretKey}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  postPaymentCardByUserId:
    handler: src/backend/api/users/_id/payment/card/post.handler
    timeout: 200
    events:
      - http:
          path: api/users/{userId}/payment/card
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      STRIPE_SECRET_KEY: ${self:custom.environment.${self:provider.stage}.StripeSecretKey}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  deletePaymentCardByUserId:
    handler: src/backend/api/users/_id/payment/card/delete.handler
    timeout: 200
    events:
      - http:
          path: api/users/{userId}/payment/card
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
    environment:
      STRIPE_SECRET_KEY: ${self:custom.environment.${self:provider.stage}.StripeSecretKey}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  botReply:
    handler: src/backend/bot/reply.handler
    timeout: 200
    events:
      - http:
          path: api/bot/reply
          method: post
    environment:
      LINE_CHANNELL_ACCESS_TOKEN: ${self:custom.environment.${self:provider.stage}.LineChannelAccessToken}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable
  botSend:
    handler: src/backend/batch/send.handler
    timeout: 200
    events:
      - schedule:
          rate: cron(0 0 * * ? *)
          enabled: true
    environment:
      COGNITO_USER_POOL_ID: ${self:custom.cognito.userPoolId.${self:provider.stage}}
      LINE_CHANNELL_ACCESS_TOKEN: ${self:custom.environment.${self:provider.stage}.LineChannelAccessToken}
      DYNAMODB_USERS_TABLE: !Ref UsersTable
      DYNAMODB_MESSAGES_TABLE: !Ref MessagesTable

resources: ${self:custom.resources.${self:provider.stage}}
