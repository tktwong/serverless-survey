service: fssstepfunction
provider:
  name: aws
  runtime: dotnetcore3.1
  timeout: 15
  #vpc: ${self:custom.vpc.${opt:stage}}
  #stage: ${opt:stage}
  vpc: ${self:custom.vpc.development}
  stage: development
  region: eu-west-2

package:
  # individually: true
  artifact: ./bin/release/netcoreapp3.1/fss-step-functions.zip

functions:
  fssFunctions:
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::FssFunctions

stepFunctions:
  stateMachines:
    fssstepfunc1:
      events:
        - http:
            path: gofunction
            method: GET
        - schedule:
            rate: rate(10 minutes)
            enabled: true
            input:
              stageParams:
                stage: ${self:provider.stage}
      name: fssStateMachine-${self:provider.stage}
      definition:
        Comment: "A test step function deployed via serverless"
        StartAt: Send_email_1
        States:
          Send_email_1:
            Type: Task
            Resource:
              Fn::GetAtt: [fssFunctions, Arn]
            Next: Wait_1st_month
          Wait_1st_month:
            Type: Task
            Resource:
              Fn::GetAtt: [fssFunctions, Arn]
            Next: Check_org_1
          Check_org_1:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            Next: Has_org_been_reverified
          Has_org_been_reverified:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            Next: Send_email_2
          Send_email_2:
            Type: Task
            Resource:
              Fn::GetAtt: [fssFunctions, Arn]
            Next: Wait_2nd_month
          Wait_2nd_month:
            Type: Task
            Resource:
              Fn::GetAtt: [fssFunctions, Arn]
            Next: Check_org_2
          Check_org_2:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            Next: Has_org_been_reverified2
          Has_org_been_reverified2:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            Next: Send_email_3
          Send_email_3:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            Next: Wait_3rd_month
          Wait_3rd_month:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            Next: Check_org_3
          Check_org_3:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            Next: Has_org_been_reverified3
          Has_org_been_reverified3:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            Next: Set_org_paused
          Set_org_paused:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            Next: Send_pause_email
          Send_pause_email:
            Type: Task
            Resource:
              Fn::GetAtt: [ fssFunctions, Arn ]
            End: true
      dependsOn: lambdaExecutionRole
      tags:
        Team: HackIt

resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"

custom:
  vpc:
    development:
      securityGroupIds:
        - sg-033babc9f5ce30345
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      securityGroupIds:
        - sg-04c73000bf97eae7e
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      securityGroupIds:
        - sg-060458cddaaa2742a
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34

plugins:
  - serverless-step-functions
