# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: quiz

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

custom:
  webpackIncludeModules: true
  serverless-offline:
    port: 4000
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: ${self:provider.stage}-quiz_applicants
            sources: [./migrations/applicants.json]

provider:
  name: aws
  runtime: nodejs6.10

# you can overwrite defaults here
  stage: dev
  region: ap-southeast-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:ap-southeast-1:*:table/${self:provider.stage}-quiz_applicants
    - Effect: Allow
      Action:
        - s3:getObject
      Resource: arn:aws:s3:::*/*
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: arn:aws:ses:eu-west-1:*:*

# you can define service wide environment variables here
  environment:
    CORRECT_METHOD: PUT
    USER_NAME: test_user
    PASSPHRASE: thisispassphrasefortesting
    SERVER_IP: 192.168.0.1
    S3_BUCKET: exam.kera.asia
    S3_PRIVATE_KEY: exam_key
    SES_FROM_EMAIL: kerarara@gmail.com
    STAGE: ${self:provider.stage}
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  get:
    handler: src/actions/handler.quiz
    events:
      - http:
          path: /
          method: get
          cors: true
          authorizer: false
  post:
    handler: src/actions/handler.quiz
    events:
      - http:
          path: /
          method: post
          cors: true
          authorizer: false
  put:
    handler: src/actions/handler.quiz
    events:
      - http:
          path: /
          method: put
          cors: true
          authorizer: false
  delete:
    handler: src/actions/handler.quiz
    events:
      - http:
          path: /
          method: delete
          cors: true
          authorizer: false

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 172.30.0.0/16
        Tags:
          - Key: Name
            Value: VpcForExamination

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: GatewayForExamination

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId:
          Ref: InternetGateway
        VpcId:
          Ref: VPC

    Subnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ap-southeast-1a
        MapPublicIpOnLaunch: true
        CidrBlock: 172.30.0.0/24
        Tags:
          - Key: Name
            Value: Subnet1ForExamination

    Subnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ap-southeast-1b
        MapPublicIpOnLaunch: true
        CidrBlock: 172.30.1.0/24
        Tags:
          - Key: Name
            Value: Subnet2ForExamination

    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
        Tags:
          - Key: Name
            Value: RouteTableForExamination

    DefaultRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway

    Subnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTable
        SubnetId:
          Ref: Subnet1

    Subnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTable
        SubnetId:
          Ref: Subnet2

    NetworkAcl:
      Type: AWS::EC2::NetworkAcl
      Properties:
        VpcId:
          Ref: VPC
        Tags:
          - Key: Name
            Value: AclForExamination

    AclEntrySsh:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NetworkAcl
        RuleNumber: 100
        Protocol: 6
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: '22'
          To: '22'

    AclEntryEgress:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NetworkAcl
        RuleNumber: 100
        Protocol: -1
        Egress: true
        RuleAction: allow
        CidrBlock: 0.0.0.0/0
        PortRange:
          From: 10000
          To: 65535

    Subnet1NetworkAclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId:
          Ref: Subnet1
        NetworkAclId:
          Ref: NetworkAcl

    Subnet2NetworkAclAssociation:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId:
          Ref: Subnet2
        NetworkAclId:
          Ref: NetworkAcl

    S3Endpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        PolicyDocument:
          Statement:
            Action: '*'
            Effect: Allow
            Resource: '*'
            Principal: '*'
        RouteTableIds:
          - Ref: RouteTable
        ServiceName:
          Fn::Join:
            - ''
            - - com.amazonaws.
              - Ref: AWS::Region
              - .s3
        VpcId:
          Ref: VPC

    NatGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
            - ElasticIP
            - AllocationId
        SubnetId:
          Ref: Subnet1

    ElasticIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroupForExaminationEC2
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        VpcId:
          Ref: VPC

    #EC2Instance:
    #  Type: AWS::EC2::Instance
    #  Properties:
    #    ImageId: ami-08f7956f
    #    SecurityGroupIds:
    #      - Ref: SecurityGroup
    #    Tags:
    #      - Key: Name
    #        Value: ExaminationInstance

    ApplicantsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.stage}-quiz_applicants
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
