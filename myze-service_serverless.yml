# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-serverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
    - serverless-dynamodb-local
    - serverless-plugin-offline-dynamodb-stream
    - serverless-dynamo-stream-plugin
    - serverless-offline-python


provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

# custom:
#     dynamodbStream:
#       host: localhost
#       port: 8000
#       pollForever: True
#       streams:
#         - table: Profiles
#           functions:
#             - {FUNCTION_NAME}

custom:
    dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
        stages:
            - dev
        start:
            port: 8000
            inMemory: false
            heapInitial: 200m
            heapMax: 1g
            migrate: true
            seed: true
            convertEmptyValues: true

        seed:
            domain:
                sources:
                    - table: Profiles
                      sources: [data.json]
      # Uncomment only if you already have a DynamoDB running locally
      # noStart: true

    # dynamodbStream:
    #     host: localhost
    #     port: 8000
    #     pollForever: True
    #     streams:
    #         - table: Profiles
    #           functions: triggerStream

functions:
    triggerStream:
        handler: 
            handler.lambda_handler
        events:
            # - stream:
            #     type: dynamodb
            #     arn:
            #         Fn::GetAtt: [Table, StreamArn]
            #     batchSize: 1
            #     startingPosition: TRIM_HORIZON
            - existingDynamoStream:
                tableName: Profiles
                streamType: NEW_AND_OLD_IMAGES
                startingPosition: TRIM_HORIZON

# resources:
#   Resources:
#     Table:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: Profiles
#         AttributeDefinitions:
#           - AttributeName: PK
#             AttributeType: S
#           - AttributeName: SK
#             AttributeType: S
#           - AttributeName: User-Item-GSI
#             AttributeType: S
#           - AttributeName: Item-Size-GSI
#             AttributeType: S
#         KeySchema:
#           - AttributeName: PK
#             KeyType: HASH
#           - AttributeName: SK
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 5
#           WriteCapacityUnits: 5
#         StreamSpecification:
#           StreamViewType: NEW_AND_OLD_IMAGES
#         GlobalSecondaryIndexes:
#           - IndexName: User-Item-GSI
#             KeySchema:
#                 - AttributeName: User-Item-GSI
#                   KeyType: HASH
#                 - AttributeName: PK
#                   KeyType: RANGE
#             Projection:
#                 ProjectionType: ALL
#             ProvisionedThroughput:
#                 ReadCapacityUnits: 5
#                 WriteCapacityUnits: 5
#           - IndexName: Item-Size-GSI
#             KeySchema:
#                 - AttributeName: Item-Size-GSI
#                   KeyType: HASH
#                 - AttributeName: PK
#                   KeyType: RANGE
#             Projection:
#                 ProjectionType: ALL
#             ProvisionedThroughput:
#                 ReadCapacityUnits: 5
#                 WriteCapacityUnits: 5

                

resources:
    Resources:
        Table:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: Profiles
                AttributeDefinitions:
                    - AttributeName: PK
                      AttributeType: S
                    - AttributeName: SK
                      AttributeType: S
                    - AttributeName: User-Item-GSI
                      AttributeType: S
                    - AttributeName: Item-Size-GSI
                      AttributeType: S
                KeySchema:
                    - AttributeName: PK
                      KeyType: HASH
                    - AttributeName: SK
                      KeyType: RANGE
                ProvisionedThroughput:
                    ReadCapacityUnits: 5
                    WriteCapacityUnits: 5
                StreamSpecification:
                    StreamViewType: NEW_AND_OLD_IMAGES
                GlobalSecondaryIndexes:
                    - IndexName: User-Item-GSI
                      KeySchema:
                            - AttributeName: User-Item-GSI
                              KeyType: HASH
                            - AttributeName: PK
                              KeyType: RANGE
                      Projection:
                            ProjectionType: ALL
                      ProvisionedThroughput:
                            ReadCapacityUnits: 5
                            WriteCapacityUnits: 5
                    - IndexName: Item-Size-GSI
                      KeySchema:
                            - AttributeName: Item-Size-GSI
                              KeyType: HASH
                            - AttributeName: PK
                              KeyType: RANGE
                      Projection:
                            ProjectionType: ALL
                      ProvisionedThroughput:
                            ReadCapacityUnits: 5
                            WriteCapacityUnits: 5


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
