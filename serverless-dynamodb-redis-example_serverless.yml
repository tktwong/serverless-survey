service: serverless-dynamodb-redis-example

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # plugins config
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  # vars
  tableThroughputs:
    prod: 3
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:provider.stage}, self:custom.tableThroughputs.default}
  notesTableNames:
    local: "local-notes"
    default:
      Ref: NotesTable
  notesTableName: ${self:custom.notesTableNames.${self:provider.stage}, self:custom.notesTableNames.default}
  functionsPrefix: "${self:service}-${self:provider.stage}"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage,'dev'}
  region: ${opt:region, 'us-east-1'}  
  environment: ${file(env.yml):${self:provider.stage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource:
        - { "Fn::Join" : ["", ["arn:aws:lambda:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":function:${self:custom.functionsPrefix}-cacheNote" ] ]  }
      # the name is set explicitly to avoid a Could Formation circular dependency error

functions:
  createNote:
    handler: functions/createNote.handler
    events:
      - http:
          path: notes/create
          method: post
          cors: true
    environment:
      notesTableName: ${self:custom.notesTableName}

  getNote:
    handler: functions/getNote.handler
    events:
      - http:
          path: notes/{category}/{noteId}
          method: get
          cors: true
    environment:
      notesTableName: ${self:custom.notesTableName}
      cacheNoteFunctionName: ${self:custom.functionsPrefix}-cacheNote

  cacheNote:
    handler: functions/cacheNote.handler

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-notes
        AttributeDefinitions:
          - AttributeName: category
            AttributeType: S
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: category
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
