# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: Clevo-Manual-Category

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  defaultStage: dev
  #  productionStream: arn:aws:dynamodb:us-west-2:151302725877:table/Users/stream/2016-12-16T22:04:17.359
  #  devStream: arn:aws:dynamodb:us-west-2:594750710208:table/Users/stream/2016-12-27T16:29:37.237
  #  'dynamodb' Below is for local dynamoDB
  dynamodb:
    start:
      port: 8000
      cors: '*'
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: Clevo-Raw-Speech-Table
#          - table: transcription_table
            sources: [./dev/localDynamoDBSeed/transcription_table.json]


provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  # Deploys to dev stage by default.
  # To deploy for production, run 'serverless deploy --stage production'
  profile: ${self:provider.stage}ProfileClevo
  region: us-west-2

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*
# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - "dev/**"
    - "oneTime/**"
    - "**/test.js"
    - "**.test.js"
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  graphql:
    warmup: true
    handler: handler.graphql
    events:
    - http:
        path: graphql
        method: post
        cors: true

#  sendCardPushNotification:
#    handler: scheduled.sendCardPushNotification
#    events:
#      - http:
#          path: notification
#          method: get
#          cors: true
#      - schedule:
##          rate: rate(24 hours)
#          rate: cron(0 23 * * ? *) # schedule it to run everyday at 4:00 pm, UTC 23:00 == PST 16:00
#          enabled: true

#  createStampsByRedeemedCoupons:
#    handler: oneTime.createStampEventsFromRedeemedCoupons
#    events:
#      - http:
#          path: createStampsByRedeemedCoupons
#          method: get
#          cors: true

#  addPictureURLToUsers:
#    handler: oneTime.addPictureURLToUsers
#    timeout: 60
#    memorySize: 1024
#    events:
#      - http:
#          path: addPictureURLToUsers
#          method: get
#          cors: true

#  addPictureURLToFeedbacks:
#    handler: oneTime.addPictureURLToFeedbacks
#    timeout: 60
#    memorySize: 1024
#    events:
#      - http:
#          path: addPictureURLToFeedbacks
#          method: get
#          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# resources:
#   Resources:
#     ManualOperatorTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         TableName: 'Clevo-Manual-Operators'
#         AttributeDefinitions:
#           -
#             AttributeName: cellphone
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: cellphone
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1

#     CategorizedSpeechTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         TableName: 'Clevo-Categorized-Speech-Table'
#         AttributeDefinitions:
#           - AttributeName: fileName
#             AttributeType: S
#           - AttributeName: operatorId
#             AttributeType: S
#         KeySchema:
#           - AttributeName: fileName
#             KeyType: HASH
#           - AttributeName: operatorId
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1

#     CategorizedSentenceTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         TableName: 'Clevo-Categorized-Sentence-Table'
#         AttributeDefinitions:
#           - AttributeName: categoryName
#             AttributeType: S
#           - AttributeName: fileNameBeginTime
#             AttributeType: S
#         KeySchema:
#           - AttributeName: categoryName
#             KeyType: HASH
#           - AttributeName: fileNameBeginTime
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1

#     RawSpeechTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         TableName: 'Clevo-Raw-Speech-Table'
#         AttributeDefinitions:
#           - AttributeName: fileName
#             AttributeType: S
# #          - AttributeName: xfTaskId
# #            AttributeType: S
# #          - AttributeName: transcribedAt
# #            AttributeType: S
#         KeySchema:
#           - AttributeName: fileName
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 5
#           WriteCapacityUnits: 5


#        GlobalSecondaryIndexes:
#          - IndexName: xfTaskId-index
#            KeySchema:
#              - AttributeName: xfTaskId
#                KeyType: HASH
#            Projection:
#              ProjectionType: ALL
#            ProvisionedThroughput:
#              ReadCapacityUnits: 1
#              WriteCapacityUnits: 1
#
#          - IndexName: file-time-index
#            KeySchema:
#              - AttributeName: fileName
#                KeyType: HASH
#              - AttributeName: transcribedAt
#                KeyType: RANGE
#            Projection:
##              NonKeyAttributes:
##                - user_id
##                - user_organization_id
##              ProjectionType: INCLUDE
#              ProjectionType: ALL
#            ProvisionedThroughput:
#              ReadCapacityUnits: 1
#              WriteCapacityUnits: 1

#    transcriptionTable:
#      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
#      Properties:
#        TableName: 'transcription_table'
#        AttributeDefinitions:
#          - AttributeName: fileName
#            AttributeType: S
#          - AttributeName: xfTaskId
#            AttributeType: S
#          - AttributeName: transcribedAt
#            AttributeType: S
#        KeySchema:
#          - AttributeName: transcribedAt
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 5
#          WriteCapacityUnits: 5
#        GlobalSecondaryIndexes:
#          - IndexName: xfTaskId-index
#            KeySchema:
#              - AttributeName: xfTaskId
#                KeyType: HASH
#            Projection:
#              ProjectionType: ALL
#            ProvisionedThroughput:
#              ReadCapacityUnits: 1
#              WriteCapacityUnits: 1
#
#          - IndexName: file-time-index
#            KeySchema:
#              - AttributeName: fileName
#                KeyType: HASH
#              - AttributeName: transcribedAt
#                KeyType: RANGE
#            Projection:
##              NonKeyAttributes:
##                - user_id
##                - user_organization_id
##              ProjectionType: INCLUDE
#              ProjectionType: ALL
#            ProvisionedThroughput:
#              ReadCapacityUnits: 1
#              WriteCapacityUnits: 1



plugins:
  - serverless-plugin-warmup
  - serverless-dynamodb-local
