service:
  name: serverless-photo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs8.10

  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    Photo_TABLE: Photo-martha-${self:provider.stage}
    Photo_S3_BUCKET: udagram-martha-photo-final-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 86400
    UserIdINDEX: UserIdINDEX
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret
    


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    cors: true

  # TODO: Configure this function
  GetPhotos:
    handler: src/lambda/http/GetPhotos.handler
    events:
      - http:
          method: get
          path: photos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.Photo_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.Photo_TABLE}/index/${self:provider.environment.UserIdINDEX}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # TODO: Configure this function
  CreatePhotos:
    handler: src/lambda/http/CreatePhotos.handler
    events:
      - http:
          method: post
          path: photos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a photo description
            description: Create a photo description
            requestModels:
              'application/json': PhotoDescriptionItem
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.Photo_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # TODO: Configure this function
  UpdatePhotos:
    handler: src/lambda/http/UpdatePhotos.handler
    events:
      - http:
          method: patch
          path: photos/{photoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a photo description
            description: Update a photo description
            requestModels:
              'application/json': UpdatePhotoDescription
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.Photo_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # TODO: Configure this function
  DeletePhotos:
    handler: src/lambda/http/DeletePhotos.handler
    events:
      - http:
          method: delete
          path: photos/{photoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Delete a photo description
            description: Delete a photo description
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Delete
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.Photo_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/GenerateUploadUrl.handler
    events:
      - http:
          method: post
          path: photos/{photoId}/attachment
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Generate an Upload Url
            description: Generate an Upload Url
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.Photo_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.Photo_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      


# TODO: Add any necessary AWS resources
# https://serverless.com/blog/cors-api-gateway-survival-guide/
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    PhotoDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: photoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: photoId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.Photo_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.UserIdINDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.Photo_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000


    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - s3:GetObject
                - s3:PutObject        
              Resource: 'arn:aws:s3:::${self:provider.environment.Photo_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket