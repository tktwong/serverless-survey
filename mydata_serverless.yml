service: mydata

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
    stages:
      - dev
      - prod

  authorizer:
    arn: arn:aws:lambda:eu-central-1:830971531223:function:authorizer-${opt:stage, self:provider.stage}-authorize
    cache:
      ttl: 0

  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: false   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore

  serverless-offline:
    port: 4000

provider:
  name: aws
  stage: dev
  runtime: nodejs10.x
  region: eu-central-1
  timeout: 5
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  exclude:
    - .dynamodb/**
    - .requestsExamples/**

functions:
  create:
    handler: src/data/handlers/create.handler
    events:
      - http:
          path: data
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            resultTtlInSeconds: ${self:custom.authorizer.cache.ttl}

  list:
    handler: src/data/handlers/list.handler
    events:
      - http:
          path: data
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            resultTtlInSeconds: ${self:custom.authorizer.cache.ttl}

  count:
    handler: src/data/handlers/count.handler
    events:
      - http:
          path: data/count
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            resultTtlInSeconds: ${self:custom.authorizer.cache.ttl}

  get:
    handler: src/data/handlers/get.handler
    events:
      - http:
          path: data/{name}
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            resultTtlInSeconds: ${self:custom.authorizer.cache.ttl}

  update:
    handler: src/data/handlers/update.handler
    events:
      - http:
          path: data/{name}
          method: put
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            resultTtlInSeconds: ${self:custom.authorizer.cache.ttl}

  delete:
    handler: src/data/handlers/delete.handler
    events:
      - http:
          path: data/{name}
          method: delete
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            resultTtlInSeconds: ${self:custom.authorizer.cache.ttl}

  addUsage:
    handler: src/data/handlers/usage/add.handler
    events:
      - http:
          path: data/{name}/usage
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            resultTtlInSeconds: ${self:custom.authorizer.cache.ttl}

  usageList:
    handler: src/data/handlers/usage/list.handler
    events:
      - http:
          path: data/{name}/usage
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.authorizer.arn}
            resultTtlInSeconds: ${self:custom.authorizer.cache.ttl}

resources:
  Resources:
    MydataTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    GatewayResponseUnauthorized:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'

package:
  individually: true
