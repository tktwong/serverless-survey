# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: static-outbound-ip

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  vpc:
    securityGroupIds:
      - Ref: LambdaSecGp
    subnetIds:
      - Ref: VpcSubnetPrivateA
      - Ref: VpcSubnetPrivateB

# you can overwrite defaults here
#  stage: dev
  region: ap-southeast-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  index:
    handler: handler.index
    events:
      - http:
          method: get
          path: /
          inegration: lambda


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    Vpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: "default"

    VpcSubnetPublicA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: Vpc
        CidrBlock: "10.0.1.0/24"
        AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: ""

    VpcSubnetPublicB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: Vpc
        CidrBlock: "10.0.2.0/24"
        AvailabilityZone:
          Fn::Select:
            - 1
            - Fn::GetAZs: ""

    VpcSubnetPrivateA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: Vpc
        CidrBlock: "10.0.11.0/24"
        AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: ""

    VpcSubnetPrivateB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: Vpc
        CidrBlock: "10.0.12.0/24"
        AvailabilityZone:
          Fn::Select:
            - 1
            - Fn::GetAZs: ""

    VpcPrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: Private-route-table

    VpcPublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
        Tags:
          - Key: Name
            Value: Public-route-table

    IntlGW:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: Internet_Gateway

    IntlGWAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId:
          Ref: IntlGW
        VpcId:
          Ref: Vpc

    VpcPublicRoute:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: IntlGW
        RouteTableId:
          Ref: VpcPublicRouteTable

    EIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc

    NatGW:
      Type: AWS::EC2::NatGateway
      DependsOn: IntlGWAttachment
      Properties:
        AllocationId:
          Fn::GetAtt:
            - EIP
            - AllocationId
        SubnetId:
          Ref: VpcSubnetPublicA

    VpcPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId:
          Ref: NatGW
        RouteTableId:
          Ref: VpcPrivateRouteTable

    VpcSubnetPublicAAssociate:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: VpcPublicRouteTable
        SubnetId:
          Ref: VpcSubnetPublicA

    VpcSubnetPublicBAssociate:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: VpcPublicRouteTable
        SubnetId:
          Ref: VpcSubnetPublicB

    VpcSubnetPrivateAAssociate:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: VpcPrivateRouteTable
        SubnetId:
          Ref: VpcSubnetPrivateA

    VpcSubnetPrivateBAssociate:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: VpcPrivateRouteTable
        SubnetId:
          Ref: VpcSubnetPrivateB

    LambdaSecGp:
      Type:  AWS::EC2::SecurityGroup
      Properties:
        GroupName: "lambda-sec-gp"
        GroupDescription: "..."
        SecurityGroupEgress:
          - CidrIp: "0.0.0.0/0"
            IpProtocol: "tcp"
            FromPort: 0
            ToPort: 65535
        SecurityGroupIngress:
          - CidrIp: "0.0.0.0/0"
            IpProtocol: "tcp"
            FromPort: 0
            ToPort: 65535
        VpcId:
          Ref: Vpc

  Outputs:
    NatGatewayIP:
      Description: "Description for the output"
      Value:
        Ref: EIP
