service:
  name: serverless-librarian2-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-reqvalidator-plugin
  - serverless-plugin-canary-deployments
  - serverless-s3-local
  - serverless-offline

package:
  individually: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Library API
        description: Serverless application for librarian
    models:
      - name: CreateBookRequest
        contentType: application/json
        schema: ${file(models/create-book-request.json)}
      - name: UpdateBookRequest
        contentType: application/json
        schema: ${file(models/update-book-request.json)}
      - name: CreateCategoryRequest
        contentType: application/json
        schema: ${file(models/create-category-request.json)}
      - name: UpdateBookDetailsRequest
        contentType: application/json
        schema: ${file(models/update-book-details-request.json)}
      - name: UpdateBookSelfServiceRequest
        contentType: application/json
        schema: ${file(models/update-book-self-service-request.json)}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  serverless-offline:
    httpPort: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      #noStart: true
    stages:
      - dev

  # s3:
  #   port: 8001
  #   directory: /tmp

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  tracing:
    lambda: true
    apiGateway: true

  environment:
    CATEGORIES_TABLE: Categories-${self:provider.stage}
    BOOKS_TABLE: Books-${self:provider.stage}
    BOOKS_ID_INDEX: IsbnIndex
    BOOKS_S3_BUCKET: serverless-books-attachements-zuzu-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKS_URL: https://dev-zuzu.eu.auth0.com/.well-known/jwks.json
    ELASTICSEARCH_INDEX: books-index
    #AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    #DISABLE_XRAY_TRACING: 1
    #_X_AMZN_TRACE_ID: 0
    
  
  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetCategories:
    handler: src/lambda/http/getCategories.handler
    events:
      - http:
          method: get
          path: categories
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
    iamRoleStatementsInherit: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  CreateCategory:
    handler: src/lambda/http/createCategory.handler
    events:
      - http:
          method: post
          path: categories
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new category
            description: Create a new category
            requestModels:
              'application/json': CreateCategoryRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  GetAllBooks:
    handler: src/lambda/http/getBooks.handler
    events:
      - http:
          method: get
          path: admin/books
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
    iamRoleStatementsInherit: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  GetBooks:
    handler: src/lambda/http/getFreeBooks.handler
    events:
      - http:
          method: get
          path: categories/{categoryId}/booksFree
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
    iamRoleStatementsInherit: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  GetBooksFromCategory:
    handler: src/lambda/http/getBooksFromCategory.handler
    events:
      - http:
          method: get
          path: categories/{categoryId}/books
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
    iamRoleStatementsInherit: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  GetBooksFromLender:
    handler: src/lambda/http/getBooksFromLender.handler
    events:
      - http:
          method: get
          path: categories/{categoryId}/books/borrowed
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}
    iamRoleStatementsInherit: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  CreateBook:
    handler: src/lambda/http/createBook.handler
    events:
      - http:
          method: post
          path: books
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new book
            description: Create a new book
            requestModels:
              'application/json': CreateBookRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  UpdateBook:
    handler: src/lambda/http/updateBook.handler
    events:
      - http:
          method: patch
          path: admin/books/{isbn}/status
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a book
            description: Update a book
            requestModels:
              'application/json': UpdateBookRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  UpdateBookSelfService:
    handler: src/lambda/http/updateBookSelfService.handler
    events:
      - http:
          method: patch
          path: books/{isbn}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a book status
            description: Update a book status
            requestModels:
              'application/json': UpdateBookSelfServiceRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  UpdateBookDetails:
    handler: src/lambda/http/updateBookDetails.handler
    events:
      - http:
          method: patch
          path: admin/books/{isbn}/details
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a book details
            description: Update a book details
            requestModels:
              'application/json': UpdateBookDetailsRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  DeleteBook:
    handler: src/lambda/http/deleteBook.handler
    events:
      - http:
          method: delete
          path: books/{isbn}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: books/{isbn}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.BOOKS_ID_INDEX}
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live
  
  SyncWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt BooksSearch.DomainEndpoint
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt BooksDynamoDBTable.StreamArn
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

  SearchWithinElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt BooksSearch.DomainEndpoint
    handler: src/lambda/http/searchBooks.handler
    events:
      - http:
          method: get
          path: books/search
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    CategoriesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: "PROVISIONED"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.CATEGORIES_TABLE}
        
    BooksDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: isbn
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: categoryId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: "PROVISIONED"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.BOOKS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BOOKS_ID_INDEX}
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            KeySchema:
            - AttributeName: isbn
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BOOKS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.BOOKS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    BooksSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: books-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'