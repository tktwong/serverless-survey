service:
  name: sls-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODO_TABLE: Todo-${self:provider.stage}
    AUTH0_SECRET: u4EpfVutIzcwGCnI3aiWCgeclV_LwomuAIh8w4oi6aENmSRxWGvfzMVnhfXNQwQW
    INDEX_NAME: Todo-name-${self:provider.stage}
    IMAGES_S3_BUCKET: udacity-todo-images-${self:provider.stage}
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    CONNECTIONS_INDEX: ConnectionsIndex
    
    
    SIGNED_URL_EXPIRATION: 3000

custom:
  documentation:
    api:
      info:
        version: 1.0.0
        title: Todo List API
    models:
      - name: TodoCreateRequest
        contentType: application/json
        schema: ${file(src/models/model-todo-create.json)}
      - name: TodoUpdateRequest
        contentType: application/json
        schema: ${file(src/models/model-todo-update.json)}
  topicName: imagesTopic-${self:provider.stage}


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/*

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Todo
            description: Create a new Todo
            requestModels:
              'application/json': TodoCreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/*

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a Todo
            description: Update a Todo
            requestModels:
              'application/json': TodoUpdateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/*

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*  

  SendUploadNotification:
    environment:
      STAGE: ${self:provider.stage}
      API_ID: 
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotificationS3.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref : AWS::Region
                - Ref : AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/*
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}


  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect  
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}


#  SyncWithElasticSearch:
#    environment:
#      ES_ENDPOINT: ImageSearch.DomainEndpoint
#    handler: src/lambda/dynamoDb/elasticSearchSync.handler
#    events:
#      - stream:
#          type: dynamodb
#          arn: !GetAtt TodosDynamoDBTable.StreamArn

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODO_TABLE}      
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH        
          - AttributeName: todoId
            KeyType: RANGE        
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: todoId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    ConnectionDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}


    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
#          LambdaConfigurations:
#            - Event: 's3:ObjectCreated:*'
#              Function: !GetAtt 'SendUploadNotificationLambdaFunction.Arn'
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic

    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image Bucket Topic
        TopicName: ${self:custom.topicName}

    SendUploadNotificationPermission:
      Type: AWS::Lambda::Permission
      Properties:
          FunctionName: !Ref SendUploadNotificationLambdaFunction
          Principal: s3.amazonaws.com
          Action: lambda:InvokeFunction
          SourceAccount: !Ref AWS::AccountId
          SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    GatewayResponseDefault4xx:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Header: "'Content-Type, X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

#    ImageSearch:
#      Type: AWS::Elasticsearch::Domain
#      Properties: 
#        ElasticsearchVersion: '6.3'
#        DomainName: images-search-${self:provider.stage}
#        ElasticsearchClusterConfig:
#          DedicatedMasterEnabled: false
#          InstanceCount: '1'
#          ZoneAwarenessEnabled: false
#          InstanceType: t2.small.elasticsearch
#        EBSOptions:
#          EBSEnabled: true
#          Iops: 0
#          VolumeSize: 10
#          VolumeType: 'gp2'

#        AccessPolicies:
#          Version: '2012-10-17'
#          Statement:
#            -
#              Effect: Allow
#              Principal:
#                AWS: '*'
#              Action: 'es:*'
#              Resource: '*'
