service: demo-kraken

configValidationMode: off

provider:
  name: aws

plugins:
  - '@kraken.js/serverless'
  - serverless-dynamodb-local
  - serverless-offline

custom:
  kraken:
    - '@kraken.js/essentials'
    - '@kraken.js/essentials:aws'
    - '@kraken.js/aws'
    - '@kraken.js/aws:subscriptions'
    - '@kraken.js/aws:events'

  serverless-offline:
    noPrependStageInUrl: true
    httpPort: 4000
    websocketPort: 4001
    lambdaPort: 4002
    useChildProcesses: true

  dynamodb:
    stages:
      - offline
    start:
      port: 5002
      inMemory: false
      migrate: true
      seed: true

  environment:
    default:
      hello: hello world
    dev:
      hello: salut le monde
    offline:
      hello: ol√° mundo

functions:
  hello:
    handler: src/handlers.hello
  onPing:
    handler: src/on-ping.handler
    events:
      - eventBridge:
          eventBus: ${self:custom.eventBusArn}
          pattern:
            source:
              - Ping:Invoked
  wsGraphqlHandler:
    handler: src/demo-ws-handler.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
  httpGraphqlHandler:
    handler: src/demo-http-handler.handler
    events:
      - http:
          path: graphql
          method: any
          cors: ${self:custom.cors}
    environment:
      GRAPHQL_ENDPOINT: http://localhost:4000/graphql
      GRAPHQL_WS_ENDPOINT: ws://localhost:4001
