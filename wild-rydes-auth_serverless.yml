# <DESCRIBE SERVICE>
service: wild-rydes-auth


plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function


custom:
  stage: "${opt:stage, env:SLS_STAGE, 'dev'}"
  profile: "${opt:aws-profile, env:AWS_PROFILE, env:AWS_DEFAULT_PROFILE, 'default'}"
  log_level: "${env:LOG_LEVEL, 'INFO'}"
  website_s3_bucket_export: "wild-rydes-website-${self:custom.stage}-StaticSiteS3BucketName"

  pythonRequirements:
    dockerizePip: false


provider:
  name: aws
  profile: ${self:custom.profile}
  stage: ${self:custom.stage}
  runtime: python3.6
  environment:
    LOG_LEVEL: ${self:custom.log_level}


functions:
  UpdateCognitoConfig:
    handler: handlers/update-cognito-config.handler
    description: "Update the Cognito config for Wild Rydes site."
    memorySize: 128
    timeout: 15
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "cognito-idp:CreateUserPool"
          - "cognito-idp:DeleteUserPool"
          - "cognito-idp:CreateUserPoolClient"
          - "cognito-idp:DeleteUserPoolClient"
        Resource: "*"
      - Effect: Allow
        Action:
          - "s3:PutObject"
          - "s3:PutObjectAcl"
          - "s3:PutObjectVersionAcl"
          - "s3:DeleteObject"
        Resource:
          - Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Fn::ImportValue: "${self:custom.website_s3_bucket_export}"
              - '/*'

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: "WildRydes-${self:provider.stage}"
        AliasAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: "WildRydes-${self:provider.stage}"
        UserPoolId:
          Ref: UserPool
        GenerateSecret: false

    UpdateConfig:
      Type: Custom::ConfigFile
      Properties:
        ServiceToken:
          Fn::GetAtt:
            - UpdateCognitoConfigLambdaFunction
            - Arn
        UserPool:
          Ref: UserPool
        Client:
          Ref: UserPoolClient
        Region:
          Ref: "AWS::Region"
        Bucket:
          Fn::ImportValue: "${self:custom.website_s3_bucket_export}"

  Outputs:
    UserPoolArn:
      Description: Arn of Cognito Pool
      Value:
        Fn::GetAtt:
          - UserPool
          - Arn
      Export:
        Name: "${self:service}-${self:provider.stage}-UserPoolArn"

    UserPoolId:
      Description: ID Cognito Pool
      Value:
        Ref: UserPool
      Export:
        Name: "${self:service}-${self:provider.stage}-UserPoolId"

    UserPoolClientId:
      Description: ID of Cognito Pool Client
      Value:
        Ref: UserPoolClient
      Export:
        Name: "${self:service}-${self:provider.stage}-UserPoolclientId"
