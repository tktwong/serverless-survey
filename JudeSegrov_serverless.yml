service: JudeSegrov

frameworkVersion: "=1.32.0"

plugins:
- serverless-webpack # Must be first, see https://github.com/99xt/serverless-dynamodb-local#using-with-serverless-offline-and-serverless-webpack-plugin
- serverless-dynamodb-local
- serverless-offline

custom:
  env: ${env:ENV, 'development'} # Defaults to "development" if not provided (see package.json scripts)
  envs:
    development: # XXX "development" environment is "localhost", therefore we don't deploy against AWS at all
      profile: JudeSegrov@dev
      memorySize:
      DB_RECIPE: db-${self:custom.env}-recipe
    production:
      profile: JudeSegrov@prod
      memorySize: 128
      DB_RECIPE: db-${self:custom.env}-recipe
  dynamodb:
    start:
      port: 4000
      inMemory: true
      migrate: true
  tableThroughputs:
    production: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.env}, self:custom.tableThroughputs.default}
  serverless-offline:
    port: 3000 # We run our SLS/Express endpoints there 
  webpack:
    packager: 'yarn'
    includeModules:
      # Enable auto-packing of external modules
      # See https://serverless-stack.com/chapters/add-support-for-es6-es7-javascript.html
      forceInclude:

      forceExclude:
      - aws-sdk

provider:
  name: aws
  runtime: nodejs8.10
  versionFunctions: false # See https://serverless.com/framework/docs/providers/aws/guide/functions#versioning-deployed-functions
  stage: ${self:custom.env} # XXX The stage directly depends on the environment, it's the same thing
  region: ${opt:region, 'eu-west-1'} # Ireland by default, must always be Ireland
  environment:
    NODE_ENV: ${self:custom.env} # XXX Necessary to provide this because sometimes some packages rely on the NODE_ENV
    DB_RECIPE: ${self:custom.envs.${self:custom.env}.DB_RECIPE
  profile: ${self:custom.envs.${self:custom.env}.profile}
  stackTags:
    env: ${self:custom.env}
    stage: ${self:provider.stage}
    region: ${self:provider.region}

functions:
  server:
    handler: src/server/functions/server.handler
    events:
    - http:
        method: GET
        path: /
    - http:
        method: ANY
        path: /{any+} # Catch all unknown routes and redirect to main handler
ressources:
  Resources:
  recipes:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.env}-recipe-table
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      # Set the capacity based on the env
      ProvisionedThroughput:
        ReadCapacityUnits: ${self:custom.tableThroughput}
        WriteCapacityUnits: ${self:custom.tableThroughput}

