# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: my-service # NOTE: update this with your service name
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'


# Add your custom variable here, such as DynamoDB table names
#custom:
#  myTableName: ${self:service}-${self:provider.stage}-my-table
#  myTableArn: # ARNs are addresses of deployed services in AWS space
#    Fn::Join:
#      - ":"
#      - - arn
#        - aws
#        - dynamodb
#        - Ref: AWS::Region
#        - Ref: AWS::AccountId
#        - table/${self:custom.myTableArn}



provider:
  name: aws
  runtime: go1.x

# you can overwrite defaults here
#  stage: dev
#  region: eu-central-1

# setup env var that will be available in the go function by calling os.Getenv("MY_VAR")
#environment:
#  MY_TABLE_NAME: ${self:custom.myTableName}

# Defines what other AWS services our lambda functions can access
#  iamRoleStatements:
#    - Effect: Allow # Allow access to DynamoDB tables
#      Action:
#        - dynamodb:PutItem
#        - dynamodb:Query
#        - dynamodb:Scan
#      Resource:
#        - ${self:custom.bookedGiftTableArn}

package:
  individually: true
  exclude:
    - ./**

functions:
  myLambdaFunc:
    handler: bin/handlers/my_lambda_func
    package:
      include:
        - ./bin/handlers/my_lambda_func
    events:
      - http:
          path: api/func
          method: get
          #cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    MyTable:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: ${self:custom.myTableName}
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        AttributeDefinitions:
#          - AttributeName: id
#            AttributeType: S
#        KeySchema:
#          - AttributeName: id
#            KeyType: HASH
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket