# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    v1.docs.serverless.com
#
# Happy Coding!

service: robosource # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs4.3
  stage: ${file(./config/config.json):env.name}
  apiKeys:
    - ${file(./config/config.json):env.name}-apikey-name
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - sns:Publish
      Resource:
        - "Fn::Join": ["", ["arn:aws:sns:*:", {"Ref": "AWS::AccountId"}, ":*"]]
    - Effect: "Allow"
      Action:
        - s3:GetBucketNotification
      Resource:
        - "Fn::Join": ["", ["arn:aws:s3:::*", ""]]
    - Effect: "Allow"
      Action:
        - s3:PutBucketNotification
      Resource:
        - "Fn::Join": ["", ["arn:aws:s3:::*", ""]]
    - Effect: "Allow"
      Action:
        - s3:Get*
      Resource:
        - "Fn::Join": ["", ["arn:aws:s3:::*", ""]]
    - Effect: "Allow"
      Action:
        - s3:List*
      Resource:
        - "Fn::Join": ["", ["arn:aws:s3:::*", ""]]

#plugins:
#  - serverless-offline
# you can overwrite defaults here
#defaults:
#  stage: dev
#  region: us-east-1

# you can add packaging information here
package:
  include:
    - functions
    - node_modules
    - config
  exclude:
    - test
    - README.md
    - coverage
    - test.tap
    - checkstyle-result.xml
    - test-results.xml
    - serverless-development.yml
    - serverless-local.yml
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
# Campaign functions
  getSalesDetails:
    handler: functions/auctionhouse/controller.getSalesDetails
    events:
      - http:
          path: auctionhouse/getSalesDetails
          method: post
          authorizer:
            name: authorizerFunc
            type: "TOKEN"
            resultTtlInSeconds: ${file(./config/config.json):http.authorizer.resultTtlInSeconds}
            identitySource: method.request.header.Authorization
            identityValidationExpression: "Bearer [^\\.]+\\.[^\\.]+\\.[^\\.]+"
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          private: ${file(./config/config.json):http.privateAccess}
  addSales:
    handler: functions/auctionhouse/controller.addSales
    events:
      - http:
          path: auctionhouse/addSales/{categoryID}
          method: post
          authorizer:
            name: authorizerFunc
            type: "TOKEN"
            resultTtlInSeconds: ${file(./config/config.json):http.authorizer.resultTtlInSeconds}
            identitySource: method.request.header.Authorization
            identityValidationExpression: "Bearer [^\\.]+\\.[^\\.]+\\.[^\\.]+"
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          private: ${file(./config/config.json):http.privateAccess}
  getProdcuts:
    handler: functions/auctionhouse/controller.getProdcuts
    events:
      - http:
          path: auctionhouse/getProdcuts/{saleId}
          method: get
          authorizer:
            name: authorizerFunc
            type: "TOKEN"
            resultTtlInSeconds: ${file(./config/config.json):http.authorizer.resultTtlInSeconds}
            identitySource: method.request.header.Authorization
            identityValidationExpression: "Bearer [^\\.]+\\.[^\\.]+\\.[^\\.]+"
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          private: ${file(./config/config.json):http.privateAccess}
  addProducts:
    handler: functions/auctionhouse/controller.addProducts
    events:
      - http:
          path: auctionhouse/addProducts/{saleId}
          method: post
          authorizer:
            name: authorizerFunc
            type: "TOKEN"
            resultTtlInSeconds: ${file(./config/config.json):http.authorizer.resultTtlInSeconds}
            identitySource: method.request.header.Authorization
            identityValidationExpression: "Bearer [^\\.]+\\.[^\\.]+\\.[^\\.]+"
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          private: ${file(./config/config.json):http.privateAccess}
  bidProduct:
    handler: functions/auctionhouse/controller.bidProduct
    events:
      - http:
          path: auctionhouse/bidProduct/{productId}
          method: post
          authorizer:
            name: authorizerFunc
            type: "TOKEN"
            resultTtlInSeconds: ${file(./config/config.json):http.authorizer.resultTtlInSeconds}
            identitySource: method.request.header.Authorization
            identityValidationExpression: "Bearer [^\\.]+\\.[^\\.]+\\.[^\\.]+"
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          private: ${file(./config/config.json):http.privateAccess}
  getAllBids:
    handler: functions/auctionhouse/controller.getAllBids
    events:
      - http:
          path: auctionhouse/getAllBids/{productId}
          method: get
          authorizer:
            name: authorizerFunc
            type: "TOKEN"
            resultTtlInSeconds: ${file(./config/config.json):http.authorizer.resultTtlInSeconds}
            identitySource: method.request.header.Authorization
            identityValidationExpression: "Bearer [^\\.]+\\.[^\\.]+\\.[^\\.]+"
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          private: ${file(./config/config.json):http.privateAccess}

  authorizerFunc:
    handler: functions/authorizer/handler.authorize
#
#   you can add any of the following events
#   events:
#     - http:
#         path: users/create
#         method: get
#     - s3: ${bucket}
#     - schedule: rate(10 minutes)
#     - sns: greeter-topic

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
