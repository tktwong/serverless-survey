service: simple-book-catalog

plugins:
  - serverless-python-requirements
  - serverless-plugin-cloudwatch-dashboard

custom:
  stage: ${opt:stage, self:provider.stage}
  pythonRequirements:
      dockerizePip: non-linux
  region:
    default: us-west-2 # London
  deletionPolicy:
    dev: Delete
    prod: Retain
  logRetention:
    prod: 180
    default: 14
  DBClusterARN:
    Fn::Join:
      - ':'
      - - 'arn:aws:rds'
        - Ref: 'AWS::Region'
        - Ref: 'AWS::AccountId'
        - 'cluster'
        - !Ref AuroraDBCluster

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: ${self:custom.region.${self:custom.stage}, self:custom.region.default}
  stackName: ${self:custom.stage}-${self:service.name}
  stackTags:
    APP: Aurora Serverless Demo
    STAGE: ${self:custom.stage}
  logs:
    restApi: true
  logRetentionInDays: ${self:custom.logRetention.${self:custom.stage}, self:custom.logRetention.default}

package:
    exclude:
        - node_modules/**
        - package.json
        - package-lock.json
        - README.md

functions:
  DBMigration:
    name: ${self:provider.stackName}-DBMigration
    description: Executes DB Schema Migrations => creates database and tables
    handler: db/code/db.handler
    memorySize: 512
    timeout: 100
    role: DBMigrationRole
    dependsOn:
      - DBMigrationLogGroup
    environment:
      DB_CLUSTER_ARN:
        ${self:custom.DBClusterARN}
      DB_SECRET_ARN:
        !Ref ClusterSecret
      DB_NAME: 'rds_simple_book_catalog'

resources:
  - ${file(db/resources/stackinfo.yml)}
  # VPC
  - ${file(db/resources/vpc/vpc.yml)}
  # RDS Aurora Serverless
  - ${file(db/resources/rds/AuroraRDSServerless.yml)}
  # Log Groups
  - ${file(db/resources/loggroups/LogGroups.yml)}
  # cfn Custom Resource
  - ${file(db/resources/custom/DBMigrationTrigger.yml)}
  - ${file(db/resources/custom/DBMigrationRole.yml)}

