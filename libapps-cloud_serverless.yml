service: libapps

custom:
  stage: ${opt:stage, self:provider.stage}
  profile:
    prod: ucr
    dev: default
    test: ucr

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-1
  profile: ${self:custom.profile.${self:custom.stage}}

  environment:
    PROJECTS_TABLE: projects-${opt:stage, self:provider.stage}
    PROJECT_UPDATES_TABLE: project-updates-${opt:stage, self:provider.stage}
    REQUESTS_TABLE: requests-${opt:stage, self:provider.stage}
    ACTIVITY_CODES_TABLE: activity-codes-${opt:stage, self:provider.stage}
    TASKS_TABLE: recurring-tasks-${opt:stage, self:provider.stage}
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_SIGNING_SECRET: ${file(./secrets.json):AUTH0_SIGNING_SECRET}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ProjectsDynamoDbTable", "Arn"] }
        - { "Fn::GetAtt": ["ProjectUpdatesDynamoDbTable", "Arn"] }
        - { "Fn::GetAtt": ["RequestsDynamoDbTable", "Arn"] }
        - { "Fn::GetAtt": ["ActivityCodesDynamoDbTable", "Arn"] }
        - { "Fn::GetAtt": ["RecurringTasksDynamoDbTable", "Arn"] }

functions:
  auth:
    handler: auth.handler
    cors: true
  heartbeat:
    handler: auth.heartbeat
    events:
      - http:
          path: /heartbeat
          method: get
          cors: true
          authorizer: auth
  activity-codes:
    handler: activity-codes.handler
    events:
      - http:
          path: /activity-codes
          method: get
          cors: true
          authorizer: auth
      - http:
          path: /activity-codes
          method: post
          cors: true
          authorizer: auth
      - http:
          path: /activity-codes/{activityCode}
          method: any
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                activityCode: true
  projects:
    handler: projects.handler
    events:
      - http:
          path: /projects
          method: get
          cors: true
          authorizer: auth
      - http:
          path: /projects
          method: post
          cors: true
          authorizer: auth
      - http:
          path: /project/{project}
          method: any
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                project: true
  project-updates:
    handler: project-updates.handler
    events:
      - http:
          path: /project/{project}/project-updates
          method: any
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                project: true
  purchase-priority:
    handler: purchase-priority.handler
    events:
      - http:
          path: /purchase-priority
          method: any
          cors: true
          authorizer: auth
  request-status:
    handler: request-status.handler
    events:
      - http:
          path: /request-status
          method: put
          cors: true
          authorizer: auth
  purchase-approval:
    handler: purchase-approval.handler
    events:
      - http:
          path: /purchase-approval
          method: put
          cors: true
          authorizer: auth
  recurring-task-instances:
    handler: recurring-task-instances.handler
    events:
      - http:
          path: /recurring-tasks/instances/{year}
          method: get
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                year: true
  recurring-tasks:
    handler: recurring-tasks.handler
    events:
      - http:
          path: /recurring-tasks
          method: get
          cors: true
          authorizer: auth
      - http:
          path: /recurring-tasks
          method: post
          cors: true
          authorizer: auth
      - http:
          path: /recurring-task/{task}
          method: any
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                task: true
  requests:
    handler: requests.handler
    events:
      - http:
          path: /requests
          method: get
          cors: true
          authorizer: auth
      - http:
          path: /requests
          method: post
          cors: true
          authorizer: auth
      - http:
          path: /request/{request}
          method: any
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                request: true

resources:
  Resources:
    ActivityCodesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.ACTIVITY_CODES_TABLE}
    ProjectsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.PROJECTS_TABLE}
    ProjectUpdatesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.PROJECT_UPDATES_TABLE}
    RequestsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.REQUESTS_TABLE}
    RecurringTasksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TASKS_TABLE}
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    ServerErrorGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'