# TODO: Can service be makefile variable.

service: the-daly-nugget

frameworkVersion: '>=1.1.0 <2.0.0'

custom:

  serverless-offline:
    printOutput: true
  client:
    bucketName: '${self:provider.environment.DN_S3_STATIC_WEBSITE_BUCKET_NAME}'
  dynamodb:
    stages:
      - dev
      - prod
      - test
      - staging
    start:
      host: '${env:DN_LOCAL_HOST_NAME}'
      port: '${env:DN_LOCAL_DYNAMO_PORT}'
      migrate: true
  dynamodbStream:
    host: '${env:DN_LOCAL_HOST_NAME}'
    port: '${env:DN_LOCAL_DYNAMO_PORT}'
    streams:
      - table: '${self:provider.environment.NUGGET_SUBSCRIBER_TABLE}'
        functions:
          - syncSubscriberTblAndSES
      - table: '${self:provider.environment.NUGGET_OF_THE_DAY_TABLE}'
        functions:
          - emailNuggetOfTheDay

package:
  individually: true
  excludeDevDependencies: false
  exclude:
    - node_modules/**

#- node_modules/**/aws-sdk/**

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-offline-dynamodb-stream
  - serverless-finch
  - serverless-sam
  - serverless-pseudo-parameters
  - serverless-cloudformation-sub-variables
  - serverless-plugin-include-dependencies
  - serverless-plugin-common-excludes

functions:
 getNuggetOfTheDay:
  handler: api/getNuggetOfTheDay.handler
  memorySize: 128
  description: Get the daily nugget.
  events:
   - http:
      path: nugget-of-day
      method: get
      cors: true
      integration: lambda

 getRandomNugget:
  handler: api/getRandomNugget.handler
  memorySize: 128
  description: Get a nugget from the nugget-base table.
  events:
   - http:
      path: random-nugget
      method: post
      cors: true
      integration: lambda

 createSubscriber:
  handler: api/createSubscriber.handler
  memorySize: 128
  description: Add a user's email to the User table.
  events:
   - http:
      path: add-subscriber
      method: post
      cors: true
      integration: lambda

 createNuggeteer:
  handler: api/createNuggeteer.handler
  memorySize: 128
  description: Add a user's info to the nuggeteer table.
  events:
   - http:
      path: register-nuggeteer
      method: post
      cors: true
      integration: lambda

 deleteSubscriber:
  handler: api/deleteSubscriber.handler
  memorySize: 128
  description: Delete a subscriber.
  events:
   - http:
      path: delete-subscriber
      method: post
      cors: true
      integration: lambda

 deleteNuggeteer:
  handler: api/deleteNuggeteer.handler
  memorySize: 128
  description: Delete an entry in the nuggeteer table.
  events:
   - http:
      path: delete-nuggeteer
      method: post
      cors: true
      integration: lambda

 updateNuggeteerDelivPrefs:
  handler: api/updateNuggeteerDelivPrefs.handler
  memorySize: 128
  description: Set the nugget delivery method and frequency.
  events:
   - http:
      path: set-nuggeteer-delivery-preferences
      method: post
      cors: true
      integration: lambda

 getNuggeteerDelivPrefs:
  handler: api/getNuggeteerDelivPrefs.handler
  memorySize: 128
  description: Get the nugget delivery method and frequency.
  events:
   - http:
      path: get-nuggeteer-delivery-preferences
      method: post
      cors: true
      integration: lambda

 updateNuggeteerPhone:
  handler: api/updateNuggeteerPhone.handler
  memorySize: 128
  description: Update user's cell phone.
  events:
   - http:
      path: change-nuggeteer-phone
      method: post
      cors: true
      integration: lambda

 getNuggeteer:
  handler: api/getNuggeteer.handler
  memorySize: 128
  description: Retrieve a Nuggeteer record by email.
  events:
   - http:
      path: get-nuggeteer
      method: post
      cors: true
      integration: lambda

 getServerlessOutputs:
  handler: api/getServerlessOutputs.handler
  memorySize: 128
  events:
   - http:
      path: get-serverless-outputs
      method: get
      cors: true
      integration: lambda

 deleteCognitoUser:
  handler: api/deleteCognitoUser.handler
  memorySize: 128
  events:
   - http:
      path: delete-cognito-user
      method: post
      cors: true
      integration: lambda

 syncSubscriberTblAndSES:
  handler: api/syncSubscriberTblAndSES.handler
  memorySize: 128
  description: Event driven by changes in subscriberTbl.  On INSERT adds user to SES and sends verification email.  On Delete, removes user form SES.
  events:
    - stream:
        type: dynamodb
        batchSize: 20
        startingPosition: TRIM_HORIZON
        arn:
          Fn::GetAtt:
            - NuggetSubscriberDynamoDbTable
            - StreamArn

 emailNuggetOfTheDay:
  handler: api/emailNuggetOfTheDay.handler
  memorySize: 128
  description: Event driven by MODIFY on the Nugget Of The Day Table.
  events:
    - stream:
        type: dynamodb
        batchSize: 20
        startingPosition: TRIM_HORIZON
        arn:
          Fn::GetAtt:
            - NuggetOfTheDayDynamoDbTable
            - StreamArn

 recordNuggetOfTheDay:
  handler: api/recordNuggetOfTheDay.handler
  memorySize: 128
  events:
    - s3:
        bucket: ${self:provider.environment.DN_S3_NOD_BUCKET}
        event: s3:ObjectCreated:*

 syncSubscriberVerifications:
  handler: api/syncSubscriberVerifications.handler
  memorySize: 128
  events:
    - schedule: cron(0 8,12,17,23 * * ? *)

 sendNuggetsWeekly:
  handler: api/sendNuggetsWeekly.handler
  memorySize: 128
  events:
    - schedule: cron(0 8 ? * MON *)

 sendNuggetsTwiceWeekly:
  handler: api/sendNuggetsTwiceWeekly.handler
  memorySize: 128
  events:
    - schedule: cron(0 8 ? * MON,FRI *)

 sendNuggetsDaily:
  handler: api/sendNuggetsDaily.handler
  memorySize: 128
  events:
    - schedule: cron(0 8 * * ? *)

 sendNuggetsTwiceDaily:
  handler: api/sendNuggetsTwiceDaily.handler
  memorySize: 128
  events:
    - schedule: cron(0 8,17 * * ? *)

provider:
 name: aws
 runtime: nodejs10.x
 stage: '${env:DN_PROJECT_STAGE}'
 environment:

    DN_DOMAIN:                ${env:DN_DOMAIN}
    DN_SUBDOMAIN:             ${env:DN_SUBDOMAIN}
    DN_HOSTED_ZONE_NAME:      '${self:provider.environment.DN_DOMAIN}.'
    DN_URL:                   'http://${self:provider.environment.DN_DOMAIN}'
    IS_LOCAL:                 ${env:IS_LOCAL}

    NUGGET_OF_THE_DAY_TABLE:  '${env:NUGGET_OF_THE_DAY_TABLE}-${opt:stage, self:provider.stage}'
    NUGGET_BASE_TABLE:        '${env:NUGGET_BASE_TABLE}-${opt:stage, self:provider.stage}'
    NUGGET_SUBSCRIBER_TABLE:  '${env:NUGGET_SUBSCRIBER_TABLE}-${opt:stage, self:provider.stage}'
    NUGGETEER_TABLE:          '${env:NUGGETEER_TABLE}-${opt:stage, self:provider.stage}'
    NUGGET_HISTORY_TABLE:     '${env:NUGGET_HISTORY_TABLE}-${opt:stage, self:provider.stage}'

    DN_REVS_EMAIL_ADDRESS:    '${env:DN_REVS_EMAIL_ADDRESS}'
    DN_NOD_EMAIL_ADDRESS:     '${env:DN_NOD_EMAIL_ADDRESS}'
    DN_NUGGET_EMAIL_SUBJECT:  'Your Daily Nugget From The Rev'

    DN_S3_BUCKET_PREFIX:        '${env:DN_S3_BUCKET_PREFIX}'
    DN_S3_NOD_BUCKET:           '${self:provider.environment.DN_S3_BUCKET_PREFIX}-emails'
    DN_S3_NOD_BUCKET_REF:       'S3Bucket${env:DN_SERVICE_PREFIX_NO_DASHES_UPPER_T}emails'
    DN_S3_STACK_OUTPUT_BUCKET:  '${env:DN_S3_STACK_OUTPUT_BUCKET}'
    DN_S3_STACK_OUTPUT_FILE:    '${env:DN_S3_STACK_OUTPUT_FILE}'

    DN_SES_EMAIL_RECEIPT_RULE_SET_NAME:               '${env:DN_SES_EMAIL_RECEIPT_RULE_SET_NAME}'
    DN_SES_EMAIL_RECEIPT_RULE_NAME:                   '${env:DN_SERVICE_PREFIX}-receipt-rule'
    DN_SES_EMAIL_RECEIPT_RULE_EMAIL_ADDRESS:          'faserrao@${env:DN_DOMAIN}' 
    DN_SES_CUSTOM_VERIFICATION_EMAIL_TEMPLATE_NAME:   '${env:DN_SES_CUSTOM_VERIFICATION_EMAIL_TEMPLATE_NAME}'

    DN_CUSTOM_CFN_RESOURCES:            'dn-custom-cfn-resources'

    DN_BINXIO_SES_CFN_FUNCTION:         'binxio-cfn-ses-provider'
    DN_BINXIO_SES_CFN_PROVIDER:         '${self:provider.environment.DN_BINXIO_SES_CFN_FUNCTION}.zip'
    DN_BINXIO_SES_CFN_STACK:            '${self:provider.environment.DN_BINXIO_SES_CFN_FUNCTION}.yaml'
    DN_Rt53_CP_NS_CFN_FUNCTION:         'cfn-rt53-cp-ns-provider'
    DN_Rt53_CP_NS_CFN_PROVIDER:         '${self:provider.environment.DN_Rt53_CP_NS_CFN_FUNCTION}.js.zip'
    DN_Rt53_CP_NS_CFN_STACK:            '${self:provider.environment.DN_Rt53_CP_NS_CFN_FUNCTION}.yml'
    DN_SES_VER_TMPLT_CFN_FUNCTION:      'cfn-ses-ver-tmplt-provider'
    DN_SES_VER_TMPLT_CFN_PROVIDER:      '${self:provider.environment.DN_SES_VER_TMPLT_CFN_FUNCTION}.js.zip'
    DN_SES_VER_TMPLT_CFN_STACK:         '${self:provider.environment.DN_SES_VER_TMPLT_CFN_FUNCTION}.yml'
    DN_COGNITO_SV_ID_CFN_FUNCTION:      'cfn-cognito-sv-id-provider'
    DN_COGNITO_SV_ID_CFN_PROVIDER:      '${self:provider.environment.DN_COGNITO_SV_ID_CFN_FUNCTION}.js.zip'           
    DN_COGNITO_SV_ID_CFN_STACK:         '${self:provider.environment.DN_COGNITO_SV_ID_CFN_FUNCTION}.yml'
    DN_BINXIO_CERTIFICATE_CFN_FUNCTION: 'binxio-cfn-certificate-provider'
    DN_BINXIO_CERTIFICATE_CFN_PROVIDER: '${self:provider.environment.DN_BINXIO_CERTIFICATE_CFN_FUNCTION}.zip'     
    DN_BINXIO_CERTIFICATE_CFN_STACK:    '${self:provider.environment.DN_BINXIO_CERTIFICATE_CFN_FUNCTION}.yaml'

    DN_S3_STATIC_WEBSITE_BUCKET_NAME:   '${self:provider.environment.DN_SUBDOMAIN}'
    DN_LOCAL_REGION:                    '${env:DN_LOCAL_REGION}'
    DN_LOCAL_DDB_ENDPOINT:              '${env:DN_LOCAL_DDB_ENDPOINT}'

 iamRoleStatements:
  - Effect: Allow
    Action:
      - 'ses:*'
    Resource: '*'

  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
      - dynamodb:GetRecords
      - dynamodb:GetShardIterator
      - dynamodb:DescribeStream
      - dynamodb:ListStreams
      - dynamodb:DeleteItem
    Resource: '*'

  - Effect: Allow
    Action:
      - logs:CreateLogGroup
      - logs:CreateLogStream
      - logs:PutLogEvents
    Resource: '*'

  - Effect: Allow
    Action:
      - s3:CreateBucket
      - s3:DeleteBucket
      - s3:DeleteObject
      - s3:GetObject
      - s3:PutObject
      - s3:ListBucket
      - s3:PutBucketPolicy
    Resource: '*'

  - Effect: Allow
    Action:
      - cognito-identity:*
      - cognito-idp:*
      - cognito-sync:*
      - iam:ListRoles
      - iam:ListOpenIdConnectProviders
      - sns:ListPlatformApplications
    Resource: '*'

  - Effect: Allow
    Action:
      - 'sns:*'
    Resource: '*'

resources:

  Mappings: 
    RegionMap: 
      us-east-1:
        HZID:     Z3AQBSTGFYJSTF
        DN:       s3-website-us-east-1.amazonaws.com
        SMTPIN:  inbound-smtp.us-east-1.amazonaws.com
      us-west-1:
        HZID:     Z3AQBSTGFYJSTF
        DN:       s3-website-us-east-1.amazonaws.com
        SMTPIN:  inbound-smtp.us-east-1.amazonaws.com
      eu-west-1:
        HZID:     Z3AQBSTGFYJSTF
        DN:       s3-website-us-east-1.amazonaws.com
        SMTPIN:  inbound-smtp.us-east-1.amazonaws.com
      ap-northeast-1:
        HZID:     Z3AQBSTGFYJSTF
        DN:       s3-website-us-east-1.amazonaws.com
        SMTPIN:  inbound-smtp.us-east-1.amazonaws.com
      ap-southeast-1:
        HZID:     Z3AQBSTGFYJSTF
        DN:       s3-website-us-east-1.amazonaws.com
        SMTPIN:  inbound-smtp.us-east-1.amazonaws.com

  Resources:
    NuggetOfTheDayDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
        - AttributeName: 'nodKey'
          AttributeType: 'S'
        KeySchema:
        - AttributeName: 'nodKey'
          KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
        TableName: '${self:provider.environment.NUGGET_OF_THE_DAY_TABLE}'

    NuggetHistoryDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
        - AttributeName: 'nhKey'
          AttributeType: 'S'
        KeySchema:
        - AttributeName: 'nhKey'
          KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
        TableName: '${self:provider.environment.NUGGET_HISTORY_TABLE}'

    NuggetBaseDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
        - AttributeName: 'topic'
          AttributeType: 'S'
        KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
        - AttributeName: 'topic'
          KeyType: 'RANGE'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
        TableName: '${self:provider.environment.NUGGET_BASE_TABLE}'

    NuggetSubscriberDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
        - AttributeName: 'email'
          AttributeType: 'S'
        - AttributeName: 'verificationStatus'
          AttributeType: 'S'
        KeySchema:
        - AttributeName: 'email'
          KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
        TableName: '${self:provider.environment.NUGGET_SUBSCRIBER_TABLE}'
        GlobalSecondaryIndexes:
        - IndexName: nuggetSubscriberGSI
          KeySchema:
            -
              AttributeName: verificationStatus
              KeyType: HASH
          Projection:
            NonKeyAttributes:
            -
              email
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'

    NuggeteerDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: 'email'
            AttributeType: 'S'
          -
            AttributeName: 'nuggetDeliveryFrequency'
            AttributeType: 'S'
        KeySchema:
          -
            AttributeName: 'email'
            KeyType: 'HASH'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
        TableName: '${self:provider.environment.NUGGETEER_TABLE}'
        GlobalSecondaryIndexes:
        - IndexName: nuggetDeliveryGSI
          KeySchema:
            -
              AttributeName: nuggetDeliveryFrequency
              KeyType: HASH
            -
              AttributeName: email
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
            -
              nuggetDeliveryMethod
            -
              phone
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'

    TheDlyNuggetStackOutputsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:provider.environment.DN_S3_STACK_OUTPUT_BUCKET}'
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    S3EMailBucketPermissions:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: 
          Ref: '${self:provider.environment.DN_S3_NOD_BUCKET_REF}'
        PolicyDocument:
          Statement:
            - Principal: 
                Service: 'ses.amazonaws.com'
              Action:
                - s3:PutObject
              Effect: Allow
              Sid: 'AllowSESPuts'
              Resource: 
                Fn::Join: ['', ['arn:aws:s3:::', Ref: '${self:provider.environment.DN_S3_NOD_BUCKET_REF}', '/*'] ]
              Condition:
                StringEquals:
                  'aws:Referer': { Ref: AWS::AccountId }

    TheDlyNuggetHostedZone:
      Type: AWS::Route53::HostedZone
      Properties:
        Name: '${self:provider.environment.DN_HOSTED_ZONE_NAME}'

    TheDlyNuggetMxRecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref 'TheDlyNuggetHostedZone'
        RecordSets:
          - Name: '${self:provider.environment.DN_HOSTED_ZONE_NAME}'
            Type: MX
            TTL: '300'
            ResourceRecords:
              - !Join [ '', [10, ' ', !FindInMap [RegionMap,!Ref 'AWS::Region', SMTPIN]]]

    TheDlyNuggetDevSubDomain:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref 'TheDlyNuggetHostedZone'
        RecordSets:
          - Name: '${self:provider.environment.DN_SUBDOMAIN}.'
            Type: A
            AliasTarget:
              HostedZoneId: !FindInMap [RegionMap, !Ref 'AWS::Region', HZID]
              DNSName: !FindInMap [RegionMap, !Ref 'AWS::Region', DN]

    BinxioSesCustomResourceStack:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL: 'https://s3.amazonaws.com/${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}/${self:provider.environment.DN_BINXIO_SES_CFN_STACK}'
        Parameters:
          LambdaCodeS3Bucket: '${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}'
          LambdaCodeS3Key: '${self:provider.environment.DN_BINXIO_SES_CFN_PROVIDER}'

    BinxioDomainIdentity:
      Type: Custom::DomainIdentity
      DependsOn:
      - BinxioSesCustomResourceStack
      Properties:
        Domain: '${self:provider.environment.DN_HOSTED_ZONE_NAME}'
        Region: !Ref 'AWS::Region'
        ServiceToken: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.DN_BINXIO_SES_CFN_FUNCTION}'

    TheDlyNuggetSesIdentityRecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref 'TheDlyNuggetHostedZone'
        RecordSets: !GetAtt 'BinxioDomainIdentity.RecordSets'

  # To wait until the domain identity is verified, add a Custom::VerifiedIdentity:

    BinxioVerifiedIdentity:
      Type: Custom::VerifiedIdentity
      DependsOn:
        - BinxioDomainIdentity
        - TheDlyNuggetSesIdentityRecordSet
      Properties:
        Identity: !GetAtt 'BinxioDomainIdentity.Domain'
        Region: !GetAtt 'BinxioDomainIdentity.Region'
        ServiceToken: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.DN_BINXIO_SES_CFN_FUNCTION}'

    EmailReceivedRuleSet:
      Type: AWS::SES::ReceiptRuleSet
      DependsOn:
      - S3EMailBucketPermissions
      Properties:
        RuleSetName: '${self:provider.environment.DN_SES_EMAIL_RECEIPT_RULE_SET_NAME}'

    EmailReceivedRule:
      Type: AWS::SES::ReceiptRule
      DependsOn:
      - EmailReceivedRuleSet
      Properties:
        RuleSetName: '${self:provider.environment.DN_SES_EMAIL_RECEIPT_RULE_SET_NAME}'
        Rule:
          Name: '${self:provider.environment.DN_SES_EMAIL_RECEIPT_RULE_NAME}'
          Enabled: true
          Recipients:
            - '${self:provider.environment.DN_SES_EMAIL_RECEIPT_RULE_EMAIL_ADDRESS}'
          Actions:
            -
              S3Action:
                BucketName:
                  Ref: '${self:provider.environment.DN_S3_NOD_BUCKET_REF}'

    BinxioActiveReceiptRuleSet:
      Type : Custom::ActiveReceiptRuleSet
      DependsOn:
      - BinxioSesCustomResourceStack
      Properties:
        RuleSetName: !Ref EmailReceivedRuleSet
        Region: !Ref 'AWS::Region'
        ServiceToken : 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.DN_BINXIO_SES_CFN_FUNCTION}'

    BinxioDkimTokens:
      Type: Custom::DkimTokens
      Properties:
        Domain: !GetAtt 'BinxioDomainIdentity.Domain'
        Region: !GetAtt 'BinxioDomainIdentity.Region'
        ServiceToken: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.DN_BINXIO_SES_CFN_FUNCTION}'

    DkimRecords:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref 'TheDlyNuggetHostedZone'
        RecordSets:  !GetAtt 'BinxioDkimTokens.RecordSets'

    StepStoneCpNsCustomResourceStack:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL: 'https://s3.amazonaws.com/${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}/${self:provider.environment.DN_Rt53_CP_NS_CFN_STACK}'
        Parameters:
          LambdaCodeS3Bucket: '${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}'
          LambdaCodeS3Key: '${self:provider.environment.DN_Rt53_CP_NS_CFN_PROVIDER}'

    StepStoneCfnRt53CpNs:
      Type: Custom::CfnRt53CpNameServers
      Properties:
        ServiceToken: !GetAtt 'StepStoneCpNsCustomResourceStack.Outputs.CfnRt53CpNsProviderArn'
        Domain: '${self:provider.environment.DN_DOMAIN}'
        NameServerSet: !GetAtt 'TheDlyNuggetHostedZone.NameServers'

    StepStoneCfnSesVerTmpltResourceStack:
      Type: AWS::CloudFormation::Stack
      DependsOn:
        - BinxioVerifiedIdentity
      Properties:
        TemplateURL: 'https://s3.amazonaws.com/${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}/${self:provider.environment.DN_SES_VER_TMPLT_CFN_STACK}'
        Parameters:
          LambdaCodeS3Bucket: '${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}'
          LambdaCodeS3Key: '${self:provider.environment.DN_SES_VER_TMPLT_CFN_PROVIDER}'

    StepStoneCfnSesVerTmplt:
      Type: Custom::CfnSesVerificationTemplate
      DependsOn:
        - BinxioVerifiedIdentity
        - StepStoneCfnRt53CpNs
        - StepStoneCfnSesVerTmpltResourceStack
      Properties:
        ServiceToken: !GetAtt 'StepStoneCfnSesVerTmpltResourceStack.Outputs.CfnSesVerTmpltProviderArn'
        TemplateName: '${self:provider.environment.DN_SES_CUSTOM_VERIFICATION_EMAIL_TEMPLATE_NAME}'
        FromEmailAddress: '${self:provider.environment.DN_REVS_EMAIL_ADDRESS}'
        TemplateSubject: 'Please confirm your email address'
        TemplateContent: >
                    <html> <head></head> <body style=''font-family:sans-serif;''> 
                    <h1 style=text-align:center>A friend of yours has invited you
                    to join The Daily Nugget!</h1> <p>The Daily Nugget is an
                    inspirational website that provides wisdom (Nuggets) via email
                    and text messages.  Just click the following link and you will
                    be take to The Daily Nugget website where you will have the
                    option of registering.</p> </body> </html>
        SuccessRedirectionURL: '${self:provider.environment.DN_URL}/index.html'
        FailureRedirectionURL: '${self:provider.environment.DN_URL}/verify_failure.html'

    BinxioCertCustomResourceStack:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL: 'https://s3.amazonaws.com/${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}/${self:provider.environment.DN_BINXIO_CERTIFICATE_CFN_STACK}'
        Parameters:
          S3BucketName: '${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}'
          CFNCustomProviderZipFileName: '${self:provider.environment.DN_BINXIO_CERTIFICATE_CFN_PROVIDER}'

    BinxioCertificate:
      Type: Custom::Certificate
      DependsOn:
        - BinxioCertCustomResourceStack 
      Properties:
        DomainName: ${self:provider.environment.DN_DOMAIN}
        ValidationMethod: DNS
        ServiceToken: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.DN_BINXIO_CERTIFICATE_CFN_FUNCTION}'

    BinxioCertificateDNSRecord:
      Type: Custom::CertificateDNSRecord
      Properties:
        CertificateArn: !Ref BinxioCertificate
        DomainName: '${self:provider.environment.DN_DOMAIN}'
        ServiceToken: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.DN_BINXIO_CERTIFICATE_CFN_FUNCTION}'

    DomainValidationRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref 'TheDlyNuggetHostedZone'
        RecordSets:
          - Name: !GetAtt BinxioCertificateDNSRecord.Name
            Type: !GetAtt BinxioCertificateDNSRecord.Type
            TTL: 60
            Weight: 1
            SetIdentifier: !Ref BinxioCertificate
            ResourceRecords:
              - !GetAtt BinxioCertificateDNSRecord.Value

    BinxioIssuedCertificate:
      Type: Custom::IssuedCertificate
      DependsOn:
        - DomainValidationRecord
      Properties:
        CertificateArn: !Ref BinxioCertificate
        ServiceToken: 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.environment.DN_BINXIO_CERTIFICATE_CFN_FUNCTION}'

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - BinxioIssuedCertificate
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:provider.environment.DN_DOMAIN}
          DefaultCacheBehavior:
            Compress: true
            ForwardedValues:
              QueryString: false
            TargetOriginId: !Ref CloudFrontBucket
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCachingMinTTL: 300
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          Enabled: true
          HttpVersion: http2
          Origins:
            - DomainName: !Join ['', [!Ref CloudFrontBucket, '.s3.amazonaws.com']]
              Id: !Ref CloudFrontBucket
              S3OriginConfig:
                OriginAccessIdentity:
                  !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
          PriceClass: 'PriceClass_All'
          ViewerCertificate:
            AcmCertificateArn: !Ref BinxioCertificate
            MinimumProtocolVersion: TLSv1
            SslSupportMethod: sni-only
        Tags:
          - Key: Domain
            Value: 'PriceClass_All'

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'CloudFront OAI for thedalynugget.com'

    CloudFrontBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        Tags:
          - Key: Domain
            Value: '${self:provider.environment.DN_DOMAIN}'

    CloudFrontBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref CloudFrontBucket
        PolicyDocument:
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource: !Join ['', ['arn:aws:s3:::', !Ref CloudFrontBucket, '/*']]
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

    TheDlyNuggetDomainAliasRecordSet:
      Type: 'AWS::Route53::RecordSetGroup'
      Properties:
        HostedZoneId: !Ref 'TheDlyNuggetHostedZone'
        RecordSets:
          - Name: ${self:provider.environment.DN_DOMAIN}.
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: !GetAtt 'CloudFrontDistribution.DomainName'

    CognitoUserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        UserPoolName: '${self:provider.stage}-nuggeteer-user-pool'
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: phone_number
            AttributeDataType: String
            Mutable: true
            Required: false
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers:	false
            RequireSymbols: false
            RequireUppercase: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: '${self:provider.stage}-nuggeteer-user-pool-client'
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: '${self:provider.stage}_nuggeteer_identity_pool'
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [ 'CognitoUserPool', 'ProviderName' ]

    StepStoneSvCognitoIdCustomResourceStack:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL: 'https://s3.amazonaws.com/${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}/${self:provider.environment.DN_COGNITO_SV_ID_CFN_STACK}'
        Parameters:
          LambdaCodeS3Bucket: '${self:provider.environment.DN_CUSTOM_CFN_RESOURCES}'
          LambdaCodeS3Key: '${self:provider.environment.DN_COGNITO_SV_ID_CFN_PROVIDER}'

    StepStoneCfnCognitoSvId:
      Type: Custom::CfnCognitoSvId
      DependsOn:
        - StepStoneSvCognitoIdCustomResourceStack
      Properties:
        ServiceToken: !GetAtt 'StepStoneSvCognitoIdCustomResourceStack.Outputs.CfnCognitoSvIdProviderArn'
        identityPoolId: !Ref 'CognitoIdentityPool'
        userPoolClientId: !Ref 'CognitoUserPoolClient'
        userPoolId: !Ref 'CognitoUserPool'
        stackOutputBucket: 'the-daly-nugget-dev-stack-outputs'
        stackOutputFileName: 'stack-output'

    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnAuthRole, Arn]

    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated

        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'
                - Effect: 'Allow'
                  Action:
                    - 'execute-api:Invoke'
                  Resource:
                    Fn::Join:
                      - ''
                      -
                        - 'arn:aws:execute-api:'
                        - Ref: AWS::Region
                        - ':'
                        - Ref: AWS::AccountId
                        - ':'
                        - Ref: ApiGatewayRestApi
                        - '/*'

    CognitoUnAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': unauthenticated

        Policies:
          - PolicyName: 'CognitoUnAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                  Resource: '*'

#  Outputs:
#  UserPoolId:
#    Value:
#      Ref: CognitoUserPool
#    Export:
#      Name: UserPoolId
#  UserPoolClientId:
#    Value:
#      Ref: CognitoUserPoolClient
#    Export:
#      Name: UserPoolClientId
#  IdentityPoolId:
#    Value:
#      Ref: CognitoIdentityPool
#    Export:
#      Name: IdentityPoolId
#  MyZone:
#    Value: !Ref TheDlyNuggetHostedZone
#    Export:
#      Name:   MyZone
#  MyZoneServers:
#    Value: !Join [',', !GetAtt TheDlyNuggetHostedZone.NameServers]
#    Export:
#      Name:   MyZoneServers
#  RestApiId:
#    Value: !Ref TheDalyNuggetService
#  CertificateDNSRecord:
#    Value: !Sub '${BinxioCertificateDNSRecord.Name} ${BinxioCertificateDNSRecord.Type} ${BinxioCertificateDNSRecord.Value}'
