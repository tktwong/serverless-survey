service: lambda-layers-manager

# with help from: https://medium.com/@kilgarenone/write-es6-es7-in-serverless-framework-using-babel-7-and-webpack-4-5bd742168e1a

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
package:
  individually: true

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  environment:
    PACKAGES_TABLE: !Ref PackagesTable
    LAYERS_TABLE: !Ref LayersTable
    S3_BUCKET: !Ref LLMGRBucket
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        Fn::GetAtt: ["PackagesTable", "Arn" ]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        Fn::GetAtt: ["LayersTable", "Arn" ]
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: LLMGRBucket
            - "/*"

functions:
  p_list:
    handler: lambdas/packages.list_handler
    events:
      - http:
          path: packages/list
          method: get
          cors: true
  p_get_pkg:
    handler: lambdas/packages.get_handler
    events:
      - http:
          path: packages/get
          method: post
          cors: true
  
  p_update:
    handler: lambdas/packages.update_handler
    events:
      - http:
          path: packages/update
          method: post
          cors: true

resources:
  Resources:
    LLMGRBucket:
      Type: "AWS::S3::Bucket"
      DeletionPolicy: Delete
    PackagesTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: package
            AttributeType: S
        KeySchema:
          - AttributeName: package
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        # TableName: llmgr-packages-${self:provider.stage}

    LayersTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        # TableName: llmgr-layers-${self:provider.stage}

