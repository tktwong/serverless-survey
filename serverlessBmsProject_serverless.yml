service: serverlessbmsproject

provider:
  name: aws
  runtime: nodejs12.x
  profile: bmsAccount
  region: eu-central-1
  environment:
    tableNameConnection: ${self:custom.tableNameConnection}
    indexNameConnection: ${self:custom.indexNameConnection}
    tableNameCanMapping: ${self:custom.tableNameCanMapping}
    tableNameMetaData: ${self:custom.tableNameMetaData}
    tableNamePrimaryData: ${self:custom.tableNamePrimaryData}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'
  apiKeys:
    - BmsApiKey

custom:
  tableNameConnection: Connections
  indexNameConnection: Connections_GSI1
  tableNameCanMapping: CanMapping
  tableNameMetaData: MetaData
  tableNamePrimaryData: PrimaryData
  bucketName: leclanche-bms-dashboard-032020
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: bms-dashboard/build/

functions:
  websocket-connect:
    handler: lambdas/websockets/connect.handler
    events:
      - websocket:
          route: $connect
  websocket-disconnect:
    handler: lambdas/websockets/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  websocket-default:
    handler: lambdas/websockets/default.handler
    events:
      - websocket:
          route: $default
  websocket-can-mapping:
    handler: lambdas/websockets/can-mapping.handler
    events:
      - websocket:
          route: can-mapping
  websocket-meta-data:
    handler: lambdas/websockets/meta-data.handler
    events:
      - websocket:
          route: meta-data
  websocket-primary-data:
    handler: lambdas/websockets/primary-data.handler
    events:
      - websocket:
          route: primary-data
  http-get-meta-data:
    handler: lambdas/endpoints/getMetaData.handler
    events:
      - http:
          path: get-meta-data/{BMSHWRSN}
          method: GET
          cors: true
          private: true
  http-get-last-primary-data:
    handler: lambdas/endpoints/getLastPrimaryData.handler
    events:
      - http:
          path: get-last-primary-data/{BMSHWRSN}
          method: GET
          cors: true
          private: true
  http-get-first-primary-data:
    handler: lambdas/endpoints/getFirstPrimaryData.handler
    events:
      - http:
          path: get-first-primary-data/{BMSHWRSN}
          method: GET
          cors: true
          private: true
  http-get-systems:
    handler: lambdas/endpoints/getSystems.handler
    events:
      - http:
          path: get-systems
          method: GET
          cors: true
          private: true
  http-get-can-mapping:
    handler: lambdas/endpoints/getCanMapping.handler
    events:
      - http:
          path: get-can-mapping/{BMSHWRSN}
          method: GET
          cors: true
          private: true

resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNameConnection}
        AttributeDefinitions:
          - AttributeName: ConnectionId
            AttributeType: S
          - AttributeName: System
            AttributeType: S
        KeySchema:
          - AttributeName: ConnectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.indexNameConnection}
            KeySchema:
              - AttributeName: System
                KeyType: HASH
            Projection:
              NonKeyAttributes: [ConnectionId, DomainName, Stage]
              ProjectionType: INCLUDE
        BillingMode: PAY_PER_REQUEST
    CanMappingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNameCanMapping}
        AttributeDefinitions:
          - AttributeName: BMSHWRSN
            AttributeType: S
        KeySchema:
          - AttributeName: BMSHWRSN
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    MataDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNameMetaData}
        AttributeDefinitions:
          - AttributeName: BMSHWRSN
            AttributeType: S
        KeySchema:
          - AttributeName: BMSHWRSN
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    PrimaryDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNamePrimaryData}
        AttributeDefinitions:
          - AttributeName: BMSHWRSN
            AttributeType: S
          - AttributeName: ReceivedDateTime
            AttributeType: S
        KeySchema:
          - AttributeName: BMSHWRSN
            KeyType: HASH
          - AttributeName: ReceivedDateTime
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    BmsDashboardBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    S3AccessPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: BmsDashboardBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.bucketName}/*
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.bucketName}.s3.amazonaws.com
              Id: BmsDashboard
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - PUT
              - POST
            TargetOriginId: BmsDashboard
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true

plugins:
  - serverless-s3-sync
