# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: profile # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-2


# you can overwrite defaults here
  stage: dev

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:*"
        Resource:
            - "arn:aws:dynamodb:${self:provider.region}:366525262505:table/profile"
plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline:

functions:
  getAllUsers:
    environment:
        TABLE_NAME: profile
    handler: handler.getAllUsers
    events:
      - http:
          path: user
          method: get
          cors: true
          integration: lambda-proxy
          useIAMAuth: false

  getUser:
    environment:
        TABLE_NAME: profile
    handler: handler.getUser
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
          integration: lambda-proxy
          useIAMAuth: false
          request:
              parameters:
                   paths:
                       id: true
  createUser:
    environment:
        TABLE_NAME: profile
    handler: handler.createUser
    events:
      - http:
          path: user
          method: post
          cors: true
          integration: lambda-proxy
          useIAMAuth: false

  deleteUser:
    environment:
        TABLE_NAME: profile
    handler: handler.deleteUser
    events:
      - http:
          path: user/{id}
          method: delete
          cors: true
          integration: lambda-proxy
          useIAMAuth: false
          request:
              parameters:
                   paths:
                       id: true

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: profile
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: KEYS_ONLY