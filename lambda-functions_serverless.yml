service:
  name: SABS-lambda

package:
  exclude: 
    - tests/**
    - coverage/**
  include:
    - src/**

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-step-functions
  - serverless-pseudo-parameters

custom:
    DynamoDBTableName: SABS-ami-store

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod


  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:*"
      #  - "s3:ListBucket"
      #  - "s3:GetObject"
     Resource:
       - "Fn::Join":
         - ""
         -
           - "arn:aws:s3:::"
           - "codepipeline-"
           - "Ref" : "AWS::Region"
           - "-*"
   - Effect: "Allow"
     Action:
       - "ec2:CreateImage"
       - "ec2:DescribeInstances"
       - "ec2:DescribeImages"
     Resource: "*"
   - Effect: "Allow"
     Action:
       - "codepipeline:PutJobSuccessResult"
       - "codepipeline:PutJobFailureResult"
     Resource: "*"

   - Effect: "Allow"
     Action:
       - "dynamodb:*"
     Resource:
       - "Fn::Join":
         - ""
         -
           - "arn:aws:dynamodb:"
           - "Ref" : "AWS::Region"
           - ":"
           - "Ref" : "AWS::AccountId"
           - ":table/${self:custom.DynamoDBTableName}"
       - "Fn::Join":
         - ""
         -
           - "arn:aws:dynamodb:"
           - "Ref" : "AWS::Region"
           - ":"
           - "Ref" : "AWS::AccountId"
           - ":table/${self:custom.DynamoDBTableName}/*"
   - Effect: "Allow"
     Action:
       - "cloudformation:DeleteStack"
     Resource:
       - "Fn::Join":
         - ""
         -
           - "arn:aws:cloudformation:"
           - "Ref" : "AWS::Region"
           - ":"
           - "Ref" : "AWS::AccountId"
           - ":stack/*"
   - Effect: "Allow"
     Action:
        - "states:StartExecution"
     Resource:
        - "*"

functions:
  create-ami:
    handler: src/create-ami.run
    environment:
      snapShotDescription: SABS engine snapshot
      stateMachineArn: ${self:resources.Outputs.MyStateMachine.Value}

  ami-build-complete:
    handler: src/ami-build-complete.run
    environment:
      dynamodbTableName: ${self:custom.DynamoDBTableName}

  custom-resource-handler:
    handler: src/ami-engine-custom-resource-responder.run
    environment:
      dynamodbTableName: ${self:custom.DynamoDBTableName}

stepFunctions:
  stateMachines:
    hellostepfunc1:
      name: SABScheckamibuild
      definition:
        Comment: "Check if the ami build has completed or not"
        StartAt: WaitState
        States:
          WaitState:
            Type: Wait
            Seconds: 30
            Next: CheckAMIComplete
          CheckAMIComplete:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-ami-build-complete"
            Next: ChoiceState
          ChoiceState:
            Type: Choice
            Choices:
              - Variable: "$.AMIBuildComplete"
                BooleanEquals: false
                Next: WaitState
              - Variable: "$.AMIBuildComplete"
                BooleanEquals: true
                Next: FinalState
            Default: WaitState
          FinalState:
            Type: Pass
            End: true

# you can add CloudFormation resource templates here
resources:
  Outputs:
    CreateImageExportValue: # create CFN export value 
      Value: ${self:service}-${self:provider.stage}-create-ami
      Export:
        Name: 'SABS-create-ami' # <- cloudformation export value used by code pipeline to know how to trigger an AMI creation

    CustomResourceResponderServiceTokenExportValue: # create CFN export value 
      Value:
        "Fn::Join":
          - ""
          -
            - "arn:aws:lambda:"
            - "Ref" : "AWS::Region"
            - ":"
            - "Ref" : "AWS::AccountId"
            - ":function:"
            - ${self:service}-${self:provider.stage}-custom-resource-handler
      Export:
        Name: 'SABS-custom-resource-get-what-ami-to-use' # <- cloudformation export value used by stacks to query what AMI they should use

    MyStateMachine:
      Description: The ARN of the state machine
      Value:
        Ref: SABScheckamibuild



  Resources:
    DynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.DynamoDBTableName}
        AttributeDefinitions:
          - AttributeName: amiid
            AttributeType: S
          - AttributeName: imagename
            AttributeType: S

        KeySchema:
          - AttributeName: amiid
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

        GlobalSecondaryIndexes:
          -
            IndexName: ami-lookup-index
            KeySchema:
              -
                AttributeName: imagename
                KeyType: HASH

            Projection:
              ProjectionType: ALL

            ProvisionedThroughput:
              ReadCapacityUnits: "1"
              WriteCapacityUnits: "1"