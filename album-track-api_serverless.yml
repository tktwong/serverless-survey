service: album-track-api

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  memorySize: 128
  timeout: 10
  environment:
    ARTISTS_TABLE: ${self:custom.artists_table_name}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:BatchGetItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:BatchWriteItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [ ArtistsTable, Arn ]

package:
  include:
    - src/**
  exclude:
    - exclude-me.js
    - notes/**
    - .dynamodb/**
    - dynamodb-seeds/**
    - node_modules/**
    - .env
    - .env.*
    - README.md
    - serverless.yml

layers:
  commonLibs:
    path: common-libs-layer
    compatibleRuntimes:
      - nodejs8.10

functions:
  getArtists:
    handler: src/artists.getAll
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists
          method: get
          cors: true
  createArtist:
    handler: src/artists.create
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists
          method: post
          cors: true
  getArtist:
    handler: src/artists.getOne
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists/{artistId}
          method: get
          cors: true
  updateArtist:
    handler: src/artists.update
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists/{artistId}
          method: put
          cors: true
  deleteArtist:
    handler: src/artists.delete
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists/{artistId}
          method: delete
          cors: true
  replaceArtist:
    handler: src/artists.replace
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists/{artistId}
          method: post
          cors: true
  getArtistAlbums:
    handler: src/artists.getAlbums
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists/{artistId}/albums
          method: get
          cors: true
  addArtistAlbums:
    handler: src/artists.addAlbum
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists/{artistId}/albums
          method: post
          cors: true
  getArtistAlbum:
    handler: src/artists.getAlbum
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists/{artistId}/albums/{albumId}
          method: get
          cors: true
  deleteArtistAlbum:
    handler: src/artists.deleteAlbum
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists/{artistId}/albums/{albumId}
          method: delete
          cors: true
  updateArtistAlbum:
    handler: src/artists.updateAlbum
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: artists/{artistId}/albums/{albumId}
          method: put
          cors: true
  queryMusicbrainzArtists:
    handler: src/musicbrainz.artists
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: musicbrainz/artists
          method: post
          cors: true
  queryMusicbrainzAlbums:
    handler: src/musicbrainz.albums
    layers:
      - {Ref: CommonLibsLambdaLayer}
    events:
      - http:
          path: musicbrainz/albums
          method: post
          cors: true
resources:
  Resources:
    ArtistsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.artists_table_name}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
custom:
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  artists_table_name: ${self:service}-${self:custom.stage}-artists
  serverless-offline:
    port: 4000
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      migrate: true
      seed: true
    seed:
      dev:
        sources:
          - table: ${self:custom.artists_table_name}
            sources: [./dynamodb-seeds/artists.json]
plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list
