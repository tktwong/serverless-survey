# NOTE: update this with your service name
service: notes-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    TableName: notes
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
#Defines permission policy for the Lambda function, which now are granted
#permission to access DynamoDB
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-2:*:*"

functions:
  #Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          authorizer: aws_iam
          cors: true
  #Defines an HTTP API endpoint that calls the main function in get.js
  # - path: url path is /notes/{id} (id is the event.pathParameters id)
  # - method: GET request
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}  
          method: get
          authorizer: aws_iam
          cors: true
  #Defines an HTTP API endpoint that calls the main function in list.js
  # - path: url path is /notes
  # - method: GET request
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          authorizer: aws_iam
          cors: true
  # Defines an HTTP API endpoint that calls the main function in update.js
  # - path: url path is /notes/{id}
  # - method: PUT request        
  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          authorizer: aws_iam
          cors: true
  # Defines an HTTP API endpoint that calls the main function in delete.js 
  # - path: url path is /notes/{id}
  # - method: DELETE request
  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          authorizer: aws_iam
          cors: true
  billing:
  # Defines an HTTP API endpoint that calls the main function in billing.js # - path: url path is /billing
  # - method: POST request
    handler: billing.main
    events:
      - http:
          path: billing
          method: post 
          authorizer: aws_iam  
          cors: true
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  

