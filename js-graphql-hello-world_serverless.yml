service: js-graphql-hello-world

plugins:
  - serverless-plugin-git-variables
  - serverless-offline

custom:  
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  resourcePrefix: ${self:service}-${self:custom.stage}
  env: ${opt:env, self:custom.stage}
  account: ${opt:account, self:provider.account}
  functionName: ${self:custom.env}-js-graphql-hello-world # This is the function name appears in the AWS lambda console.
  # serverless-offline:
  #   noPrependStageInUrl: true

provider:
  name: aws
  runtime: nodejs12.x
  region: ${file(config/account.yml):REGION} # from custom config
  stage: test
  account: ${file(config/account.yml):ACCOUNT_ID} # from custom config
  memorySize: 1024
  timeout: 30
  iamRoleStatements: ${file(config/permissions.yml)}
  deploymentBucket:
    deploymentBucket:
    name: ${self:custom.env}.${file(config/account.yml):DEPLOYMENT_BUCKET_BASE} # from custom config
    serverSideEncryption: AES256
  environment: ${file(config/env.yml)}

functions:
  nodejsLambdaBoilerPlate:
    handler: src/handler.graphqlHandler # name of the handler function in src/handler.js
    name: ${self:custom.functionName}
    events:
      - http:
          path: graphql/hello
          method: any
          cors:
            origin: '*'
      - http:
          path: graphql
          method: get
          cors:
            origin: '*'
 
# If you need to create AWS resources such as dynamodb or cloudwatch, specify in resource.yml
# resources: 
#   Resources: ${file(config/resources.yml)}
