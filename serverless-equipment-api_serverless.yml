service: serverless-equipment-api

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  deploymentBucket:
    Ref: ServerlessEquipmentAPIBucket
  iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "dynamodb:*"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
  environment:
    REGION: "eu-west-1"
    TABLE: ${self:custom.tableName}

package:
  excludeDevDependencies: false
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

plugins:
  - serverless-plugin-stage-variables
  - serverless-sam
  - serverless-finch
exclude:
  - .gitignore
  - .log
  - .md

custom:
  stage: ${self:provider.stage}
  tableName: Equipment-${self:custom.stage}
  APIBucketName: arttu-serverless-equipment-api-${self:custom.stage}
  AppBucketName: arttu-serverless-equipment-app-${self:custom.stage}
  client:
    distributionFolder: client/build
    bucketName: arttu-serverless-equipment-app-test

functions:
  getEquipment:
    handler: com.serverless.handler.GetEquipmentHandler
    timeout: 30
    events:
      - http:
          path: /equipment/{id}
          method: get
          cors: true
  getEquipmentList:
    handler: com.serverless.handler.GetEquipmentListHandler
    timeout: 30
    events:
      - http:
          path: /equipment
          method: get
  postEquipment:
    handler: com.serverless.handler.PostEquipmentHandler
    timeout: 30
    events:
      - http:
          path: /equipment
          method: post
          cors: true

resources:
  Resources:
    EquipmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: EquipmentNumber
            AttributeType: S
        KeySchema:
          - AttributeName: EquipmentNumber
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: "*"
            LoggingLevel: INFO
            ResourcePath: "/*"
            MetricsEnabled: true
    ServerlessEquipmentAPIBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.APIBucketName}
        AccessControl: Private
        VersioningConfiguration:
          Status: "Enabled"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: True
          BlockPublicPolicy: True
          IgnorePublicAcls: True
          RestrictPublicBuckets: True
    ServerlessEquipmentAppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.AppBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
        VersioningConfiguration:
          Status: "Enabled"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: False
          BlockPublicPolicy: False
          IgnorePublicAcls: False
          RestrictPublicBuckets: False