service:
  name: "infra"

custom:
  region: ${opt:region, 'us-east-1'}
  stackName: "${opt:prefix}-${self:custom.region}"
  uploadBucketName: "${self:custom.stackName}-upload"
  tanscodeBucketName: "${self:custom.stackName}-tanscode"
  firebaseURL: ${opt:firebaseURL}
  authDomain: ${opt:authDomain}
  transcoderPipelineId: ${opt:transcoderId}

provider:
  name: aws
  runtime: nodejs10.x
  region: ${self:custom.region}
  stackName: ${self:custom.stackName}

functions:
  getUserProfile:
    handler: "lambda/user-profile/index.handler"
    name: ${self:provider.stackName}-getuserprofile-lambda
    timeout: 30
    environment:
      AUTH0_DOMAIN: ${self:custom.authDomain}
    events:
      - http:
          path: user-profile
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                acccessToken: false
              headers:
                authorization: false
          authorizer: 
            name: customAuthorizer
            identitySource: method.request.header.Authorization
            type: token

  createS3UploadLink:
    handler: "lambda/create-s3-upload-link/index.handler"
    name: ${self:provider.stackName}-createuploadlink-lambda
    timeout: 30
    environment:
      UPLOAD_BUCKET_NAME: ${self:custom.uploadBucketName}
    role: generateSignedURLRole
    events:
      - http:
          path: s3-upload-link
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                filename: false
                filetype: false
              headers:
                authorization: false
          authorizer: 
            name: customAuthorizer
            identitySource: method.request.header.Authorization
            type: token

  customAuthorizer:
    handler: "lambda/custom-authorizer/index.handler"
    name: ${self:provider.stackName}-customauthorizer-lambda
    timeout: 30
    environment:
      AUTH0_DOMAIN: ${self:custom.authDomain}

  transcodedVideo:
    handler: "lambda/transcode-video-firebase-enabled/index.handler"
    name: ${self:provider.stackName}-transcodedvideo-lambda
    timeout: 30
    environment:
      ELASTIC_TRANSCODER_REGION: ${self:custom.region}
      ELASTIC_TRANSCODER_PIPELINE_ID: ${self:custom.transcoderPipelineId}
      DATABASE_URL: ${self:custom.firebaseURL}
    role: lambdaJobSubmiter
    events:
      - s3:
          bucket: ${self:custom.uploadBucketName}
          event: s3:ObjectCreated:*
          existing: true
    
  transcodedURL:
    handler: "lambda/push-transcoded-url-to-firebase/index.handler"
    name: ${self:provider.stackName}-transcodeurl-lambda
    timeout: 30
    environment:
      S3_TRANSCODED_BUCKET_URL: "https://s3.amazonaws.com/${self:custom.uploadBucketName}"
      DATABASE_URL: ${self:custom.firebaseURL}
    role: lambdaJobSubmiter
    events:
      - s3:
          bucket: ${self:custom.uploadBucketName}
          event: s3:ObjectCreated:*
          existing: true

resources:
  Resources:
    uploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.uploadBucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: 
                - "*"
              AllowedMethods: 
                - GET
                - POST
              AllowedOrigins: 
                - "*"
              MaxAge: 3000

    tanscodeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.tanscodeBucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          IgnorePublicAcls: true

    transcodeBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.tanscodeBucketName}
        PolicyDocument: ${file(bucket-policy.json)}

    generateSignedURLRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${self:custom.stackName}-generatesignedurl-role"
        Path: "/"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: "${self:custom.stackName}-executelambda-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:*
                  Resource: arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                  Resource: arn:aws:s3:::*
          - PolicyName: "${self:custom.stackName}-putobject-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: arn:aws:s3:::*

    lambdaJobSubmiter:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${self:custom.stackName}-lambdajobsubmiter-role"
        Path: "/"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: "${self:custom.stackName}-executelambda-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:*
                  Resource: arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                  Resource: arn:aws:s3:::*
          - PolicyName: "${self:custom.stackName}-transcoderjobsubmiter-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Action:
                - elastictranscoder:Read*
                - elastictranscoder:List*
                - elastictranscoder:*Job
                - elastictranscoder:*Preset
                - s3:ListAllMyBuckets
                - s3:ListBucket
                - iam:ListRoles
                - sns:ListTopics
                Effect: Allow
                Resource: "*"
