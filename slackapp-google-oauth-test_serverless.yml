service: slackapp-google-oauth-test

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:ReceiveMessage"
      Resource: "*"

functions:
  auth:
    handler: auth.invoke
    events:
      - http:
          path: auth
          method: post
    environment:
      GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
      SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
      LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}}
      CRED_STORE: { "Ref": "CredStore" }
  callback:
    handler: callback.invoke
    events:
      - http:
          path: callback
          method: get
    environment:
      GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${env:GOOGLE_CLIENT_SECRET}
      TASK_QUEUE_ENDPOINT: { "Ref": "TaskQueue" }
      LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}}
  task:
    handler: task.invoke
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - TaskQueue
              - Arn
    environment:
      TASK_QUEUE_ENDPOINT: { "Ref": "TaskQueue" }
      LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}}

package:
  exclude:
    - .venv/**

resources:
  Resources:
    TaskQueue:
      Type: AWS::SQS::Queue
      Properties:
        RedrivePolicy:
          deadLetterTargetArn: 
            Fn::GetAtt:
              - TaskDLQ
              - Arn
          maxReceiveCount: 1
    TaskDLQ:
      Type: AWS::SQS::Queue
    CredStore:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: user_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


plugins:
  - serverless-python-requirements

custom:
  defaultStage: dev
  logLevel:
    dev: DEBUG
    prod: INFO
