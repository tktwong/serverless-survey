org: veysel
app: mysensecase

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-express
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:service}-SensorDataTable-${self:custom.stage}
  snsTopic: ${self:service}-topic-${self:custom.stage}
  queueName: ${self:service}-queue-${self:custom.stage}
service:
  name: MySense-Serverless-Case

provider:
  name: aws
  # in order to support old versioned platforms(in case of)
  runtime: nodejs10.x
  profile: default
  region: eu-west-2
  stage: dev
  # role: ${self:custom.stage}LambdaRole
  # cfnRole: arn:aws:iam::631318080448:role/serverless-cfn-role
  # ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials
  # tracing:
  #   apiGateway: true
  #   lambda: true
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMODB_SERSORDATATABLE_TABLE: ${self:custom.tableName}
    AWS_SNS_TOPIC: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.snsTopic}
    SERVERLESS_EXPRESS_PLATFORM:
    # Change the Slack path to the one Slack issued you when
    # you created an incoming webhook
    SLACK_PATH: /services/xxxxxxxxxx/xxxxxxxxxxx/xxxxxxxxxxxxxxxxxxx
    # Change this to the name of the Slack channel that
    # you want to post these notifications to
    SLACK_CHANNEL: slack-serverless
  apiKeys:
    - free:
        - name: ${self:custom.stage}-secretRestApiKey
          value: ${ssm:secret-rest-api-key~true}
  usagePlan:
    - free:
        quota:
          limit: 5000
          offset: 2
          period: MONTH
        throttle:
          burstLimit: 200
          rateLimit: 100
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan*
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - SensorDataTable
          - Arn
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.snsTopic}
    # - Effect: Allow
    #   Action:
    #     - xray:PutTraceSegments
    #     - xray:PutTelemetryRecords
    #   Resource: "*"

#you can add statements to the Lambda function's IAM Role here
iamRoleStatements:
  - Effect: "Allow"
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.tableName}"
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
    Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.tableName}/index/*"
  - Effect: Allow
    Action:
      - ssm:GetParameter
    Resource:
      Fn::Join:
        - ""
        - - "arn:aws:ssm:"
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":parameter/authSecretKey/*"

# Api definition
# MyApi:
#   Type: AWS::Serverless:APi
#   Properties:
#     StageName: dev

# function definiton
# functionname:
#   Type: AWS::Serverless::Function
#   Properties:
#     Handler: handler.functionanme
#     Runtime: nodejs12.x
#     CodeUri: ./CodeUri
#     Policies:
#       - DynamoDBCrudPolicy:
#           TableName: TableName
#     Environment:
#       Variables:
#         TABLE_NAME: TableName
#     Events:
#       HelloAPI:
#         Type: Api
#         Properties:
#           RestApiId: !Ref MyApi
#           Path: /functionendpointpath
#           Method: GET

##

functions:
  app:
    handler: handler.api
    events:
      - http:
          path: /api/api-docs
          method: get
          cors: true
          private: false
  create:
    handler: functions/sensorCreate.handler
    events:
      - http:
          path: /sensor
          method: post
          cors: true
          private: true
  list:
    handler: functions/sensorList.handler
    events:
      - http:
          path: /sensor
          method: get
          cors: true
          private: true
  get:
    handler: functions/sensorGet.handler
    events:
      - http:
          path: /sensor/{id}
          method: get
          cors: true
          private: true
  update:
    handler: functions/sensorUpdate.handler
    events:
      - http:
          path: /sensor/{id}
          method: put
          cors: true
          private: true
  delete:
    handler: functions/sensorDelete.handler
    # timeout: 90
    events:
      - http:
          path: /sensor/{id}
          method: delete
          cors: true
          private: true
    # - schedule: cron(0 1 * * ? *)
  sensorTopicConsumer:
    handler: functions/sensorTopicConsumer.handler
    events:
      - sns:
          arn: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.snsTopic}

#add resources - You can add CloudFormation resource templates here
resources:
  # DynamoDB
  - ${file(./resources/dynamodb-table.yml)}
  - ${file(./resources/sns-topic.yml)}
