service: PersonalAPI

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-offline

# lets make a bucket!
resources:
  Resources:
    # pull roles from the external file
    GithubPokeRole: ${file(roles.yml):GithubPoke}

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  memorySize: 128
  timeout: 10

custom:
  # conditionally enable features based on stage
  isProd:
    dev: false
    prod: true
  # exclude the aws-sdk to reduce bundle size
  webpack:
    packager: yarn
    includeModules:
      forceExclude:
        - aws-sdk

  # custom domain endpoint!
  customDomain:
    # only use the custom domain if we are deploying to production
    enabled: ${self:custom.isProd.${opt:stage, self:provider.stage}}
    domainName: api.prototypical.pro
    certificateName: '*.prototypical.pro'
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2

functions:
  # the exposed API part
  GetGithubCount:
    handler: githubcount.githubcount
    environment:
      # will be filled by the function below!
      cache: ""
    reservedConcurrency: 10
    events:
      - http:
          method: get
          path: githubcount
          cors: true
  # the un-exposed IoT updating part
  PokeGithubCount:
    role: GithubPokeRole
    handler: githubpoke.githubpoke  
    # function specific secrets
    environment:
      github_token: ${env:GITHUB_TOKEN, file(secrets.yml):github_token}
      other_arn: 
        Fn::GetAtt: 
          - GetGithubCountLambdaFunction
          - Arn
    events:
      - schedule: 
          rate: rate(12 hours)
          enabled: ${self:custom.isProd.${opt:stage, self:provider.stage}}
      # for testing only
      # - http:
      #    method: get
      #    path: githubpoke
      #    # conditionally validate API key based on stage (see custom)
      #    private: ${self:custom.isProd.${opt:stage, self:provider.stage}}
