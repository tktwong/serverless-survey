# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tipping
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  timeout: 900
  stage: prod
  region: ap-southeast-2
  environment:
    PYTHON_ENV: production
    TIPRESIAS_APP: ${env:TIPRESIAS_APP}
    TIPRESIAS_APP_TOKEN: ${env:TIPRESIAS_APP_TOKEN}
    DATA_SCIENCE_SERVICE: ${env:DATA_SCIENCE_SERVICE}
    DATA_SCIENCE_SERVICE_TOKEN: ${env:DATA_SCIENCE_SERVICE_TOKEN}
    TIPPING_SERVICE_TOKEN: ${env:TIPPING_SERVICE_TOKEN}
    MONASH_USERNAME: ${env:MONASH_USERNAME}
    MONASH_PASSWORD: ${env:MONASH_PASSWORD}
    FOOTY_TIPS_USERNAME: ${env:FOOTY_TIPS_USERNAME}
    FOOTY_TIPS_PASSWORD: ${env:FOOTY_TIPS_PASSWORD}
    SPLASH_SERVICE: ${env:SPLASH_SERVICE}
    ROLLBAR_TOKEN: ${env:ROLLBAR_TOKEN}

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin

custom:
  pythonRequirements:
    dockerizePip: false # We run sls inside Docker already
    slim: true
    fileName: requirements.prod.txt
  prune:
    automatic: true
    includeLayers: true
    number: 3

package:
  include:
    - handler.py
    - src/tipping/**
  exclude:
    - "**"

functions:
  update_fixture_data:
    handler: handler.update_fixture_data
    events:
      - schedule:
          # Monday-Tuesday, 12am UTC
          rate: cron(0 0 ? * 2-3 *)
          enabled: false
  update_match_predictions:
    handler: handler.update_match_predictions
    events:
      - schedule:
          # Everyday, 12am UTC
          rate: cron(0 0 ? * 1-7 *)
          enabled: false
  update_matches:
    handler: handler.update_matches
    events:
      - schedule:
          # Wednesday, 12am UTC
          rate: cron(0 0 ? * 4 *)
          enabled: false
  update_match_results:
    handler: handler.update_match_results
    events:
      - schedule:
          # TODO: This is running every day during Footy Mania, but should run
          # Thurs-Sun during normal AFL rounds
          # Everyday, 2am-2pm UTC (next day, 12pm/1pm-12am/1am Melbourne time, depending on DST)
          rate: cron(0 2-14/3 ? * * *)
          enabled: false
  fetch_match_predictions:
    handler: handler.fetch_match_predictions
    timeout: 30
    events:
      - http:
          path: predictions
          method: get
  fetch_match_results:
    handler: handler.fetch_match_results
    timeout: 30
    events:
      - http:
          path: matches
          method: get
  fetch_ml_models:
    handler: handler.fetch_ml_models
    timeout: 30
    events:
      - http:
          path: ml_models
          method: get
