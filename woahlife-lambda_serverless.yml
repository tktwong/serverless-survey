service: woahlife
org: seancsnyder
plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts
  - serverless-python-requirements
  - serverless-domain-manager
custom:
  pythonRequirements:
    dockerizePip: true
  alerts:
    topics:
      alarm:
        topic: ${self:service}-${self:provider.stage}-alarm
        notifications:
          - protocol: email
            endpoint: noreply@snyderitis.com
    dashboards: true
    definitions:
      functionErrors:
        period: 3600
    alarms:
      - functionErrors
      - functionInvocations
  rootDomain: woahlife.com
  customDomain:
    domainName: api-${self:provider.stage}.${self:custom.rootDomain}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  versionFunctions: true
  deploymentBucket: snyderitis-serverless-deployments
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - !Sub arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*
        - !Sub arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/api-gateway/${self:service}-${self:provider.stage}*
        - !Sub arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/apigateway/welcome*
        - !Sub arn:aws:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:API-Gateway-Execution-Logs*
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        - !GetAtt DynamoTable.Arn

  environment:
    ALGOLIA_APP_ID: ${ssm:/${self:provider.stage}/woahlife/algoliaAppId~true}
    ALGOLIA_APP_KEY: ${ssm:/${self:provider.stage}/woahlife/algoliaAppKey~true}
    ALGOLIA_INDEX_NAME: entries
    DYANMODB_TABLE: !Ref DynamoTable
  logRetentionInDays: 30
  tracing:
    apiGateway: true
    lambda: true
  stackTags:
    app: ${self:service}
  apiKeys:
    - iosApp:
      - ${self:service}-iosApp-${self:provider.stage}
  usagePlan:
    - iosApp:
        quota:
          limit: 250
          offset: 0
          period: DAY
        throttle:
          burstLimit: 20
          rateLimit: 10

package:
  exclude:
    - node_modules/**
    - .env/**

functions:
  CreateEntry:
    handler: handler.create_entry
    name: ${self:service}-${self:provider.stage}-create-journal-entry
    description: Create and process an incoming journal entry
    memorySize: 128
    timeout: 30
    alarms:
      - functionErrors
      - functionInvocations
    events:
      - http:
          path: create
          method: post
          private: true
  GetEntry:
    handler: handler.get_entry
    name: ${self:service}-${self:provider.stage}-get-journal-entry
    description: Get an existing entry by date
    memorySize: 128
    timeout: 30
    alarms:
      - functionErrors
      - functionInvocations
    events:
      - http:
          path: entry/{date}
          method: get
          private: true
          request:
            parameters:
              querystrings:
                date: true
  SyncEntriesToSearchIndex:
    handler: handler.sync_entries_to_search_index
    name: ${self:service}-${self:provider.stage}-sync-search-index-journal-entry
    description: Sync the dynamodb item update to the search index
    memorySize: 128
    timeout: 60
    alarms:
      - functionErrors
      - functionInvocations
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt DynamoTable.StreamArn
  SearchEntries:
    handler: handler.search_entries
    name: ${self:service}-${self:provider.stage}-search-journal-entries
    description: Search through journal entries
    memorySize: 128
    timeout: 30
    alarms:
      - functionErrors
      - functionInvocations
    events:
      - http:
          path: search
          method: get
          private: true
          request:
            parameters:
              querystrings:
                query: true

resources:
  Resources:
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-entries
        AttributeDefinitions:
          - AttributeName: date
            AttributeType: N
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: date
            KeyType: HASH
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
          SSEType: KMS
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        Tags:
          - Key: APP
            Value: ${self:provider.stackTags.app}