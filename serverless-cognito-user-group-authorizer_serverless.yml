service: serverless-group-auth

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

functions:
  adminHello:
    handler: handler.hello
    events:
      - http:
          path: admin/hello
          method: get
          cors: true
          authorizer: aws_iam

  userHello:
    handler: handler.hello
    events:
      - http:
          path: user/hello
          method: get
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: user_poool
        MfaConfiguration: OFF
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true

    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: user_poool_client
        GenerateSecret: False
        UserPoolId:
          Ref: UserPool

    UserIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: user_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: UserPoolClient
            ProviderName:
              Fn::GetAtt: [ "UserPool", "ProviderName" ]

    AdminRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: UserIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated

    UserPoolGroupAdmin:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: user_group_admin
        UserPoolId:
          Ref: UserPool
        RoleArn:
          Fn::GetAtt: [ AdminRole, Arn ]

    UserRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: UserIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated

    UserPoolGroupUser:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: user_group_user
        UserPoolId:
          Ref: UserPool
        RoleArn:
          Fn::GetAtt: [ UserRole, Arn ]

    # IAM roles
    UserIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: UserIdentityPool
        Roles: {}
        # If you want a default role for users without groups, define a role for it and uncomment the following
        #   authenticated:  
        #     Fn::GetAtt: [SomeDefaultRole, Arn]
        RoleMappings:
          UserPool:
            IdentityProvider:
              Fn::Join:
                - ""
                - 
                  - Fn::GetAtt: [ "UserPool", "ProviderName" ]
                  - ":"
                  - Ref: UserPoolClient
            Type: Token
            AmbiguousRoleResolution: Deny # "AuthenticatedRole" if you want the default role for users without groups

    AdminGroupApiPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: AdminGroupApiPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*' # allow all lambda functions
        Roles:
          - Ref: AdminRole

    UserGroupApiPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: UserGroupApiPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*'  # any lambda id
                    - '/*'  # any method
                    - '/user' # lambda functions defined under /user route
                    - '/*'
        Roles:
          - Ref: UserRole