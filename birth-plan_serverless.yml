service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  bucket: serverless-bpg-image-handler

provider:
  name: aws
  runtime: nodejs4.3
  region: us-west-2
  environment:
    DYNAMODB_PLANS: ${self:service}-${opt:stage, self:provider.stage}-plans
    DYNAMODB_OPTIONS: ${self:service}-${opt:stage, self:provider.stage}-options
    DYNAMODB_IMAGEDATA: ${self:service}-${opt:stage, self:provider.stage}-imageData
    BUCKET: ${self:custom.bucket}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_PLANS}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_OPTIONS}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_IMAGEDATA}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"

functions:
  plan-create:
    handler: plans.create
    events:
      - http:
          path: plans
          method: post
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:us-west-2:503430654389:userpool/us-west-2_JD2YXGORS
            claims:
              - email

  plan-get:
    handler: plans.get
    events:
      - http:
          path: plans/{id}
          method: get
          cors: true

  plan-update:
    handler: plans.update
    events:
      - http:
          path: plans/{id}
          method: put
          cors: true

  option-create:
    handler: options.create
    events:
      - http:
          path: options
          method: post
          cors: true

  option-get:
    handler: options.get
    events:
      - http:
          path: options
          method: get
          cors: true

  option-update:
    handler: options.update
    events:
      - http:
          path: options
          method: put
          cors: true

  imageData-create:
    handler: imageData.create
    events:
      - http:
          path: imageData
          method: post
          cors: true

  imageData-get:
    handler: imageData.get
    events:
      - http:
          path: imageData
          method: get
          cors: true

  imageData-update:
    handler: imageData.update
    events:
      - http:
          path: imageData
          method: put
          cors: true

  image-put:
    handler: images.put
    environment:
      BUCKET: ${self:custom.bucket}
    events:
      - http:
          path: images
          method: put
          cors: true

  image-get:
    handler: images.get
    environment:
      BUCKET: ${self:custom.bucket}
    events:
      - http:
          path: images/{id}
          method: get
          cors: true

resources:
  Resources:
    PlansDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_PLANS}
    OptionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_OPTIONS}
    ImageDataDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_IMAGEDATA}
    ImageBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.bucket}
