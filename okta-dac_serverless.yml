# OKTA DAC API TENANTS

service: okta-dac-api

# # app and org for use with dashboard.serverless.com
# app: dac-api-tenants
# org: rschallerokta

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-offline

custom:
  env: ${file(./.env.json)}
  ssmPrefix: ${self:custom.env.AWS_SSM_PREFIX}

provider:
  name: aws
  runtime: nodejs12.x
  profile: ${self:custom.env.AWS_PROFILE} # This should match what's in /terraform/terraform.tfvars
  region: ${self:custom.env.AWS_REGION} # This should match what's in /terraform/terraform.tfvars
  stage: ${self:custom.env.ENVIRONMENT} # This should match what's in /terraform/terraform.tfvars
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  environment:
    ISSUER: ${ssm:/${self:custom.ssmPrefix}/okta/${self:provider.stage}/issuer-uri}
    AUDIENCE: ${ssm:/${self:custom.ssmPrefix}/okta/${self:provider.stage}/audience}
    CLIENT_ID: ${ssm:/${self:custom.ssmPrefix}/okta/${self:provider.stage}/client-id}
    OKTA_API_KEY: ${ssm:/${self:custom.ssmPrefix}/okta/${self:provider.stage}/api-token~true}
    TEMPLATE_CERT: ${ssm:/${self:custom.ssmPrefix}/okta/${self:provider.stage}/dummy-cert}
    IDP_DISCO_POLICY_ID: ${ssm:/${self:custom.ssmPrefix}/okta/${self:provider.stage}/okta-idp-disco-policyId}
    DNS_VERIFY_PREFIX: ${ssm:/${self:custom.ssmPrefix}/okta/${self:provider.stage}/dns-verify-prefix}
    RESERVED_PREFIX: ${ssm:/${self:custom.ssmPrefix}/okta/${self:provider.stage}/dac-prefix}

functions:
  # Authorizer
  oktaAuth:
    handler: authorizer/auth.handler
  # Tenant
  addTenant:
    handler: tenants/add.handler
    events:
      - http:
          path: tenants
          method: post
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  getTenant:
    handler: tenants/get.handler
    events:
      - http:
          path: tenants/{tenant}
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  deleteTenant:
    handler: tenants/delete.handler
    events:
      - http:
          path: tenants/{tenant}
          method: delete
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  updateTenant:
    handler: tenants/update.handler
    events:
      - http:
          path: tenants/{tenant}
          method: put
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  listTenants:
    handler: tenants/list.handler
    events:
      - http:
          path: tenants
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  # Tenant Apps
  listTenantApps:
    handler: tenants/apps/list.handler
    events:
      - http:
          path: tenants/{tenant}/apps
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  postTenantApp:
    handler: tenants/apps/post.handler
    events:
      - http:
          path: tenants/{tenant}/apps/{appId}
          method: put
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  deactivateTenantApp:
    handler: tenants/apps/deactivate.handler
    events:
      - http:
          path: tenants/{tenant}/apps/{appId}
          method: delete
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  # Tenant Adamins
  listTenantAdmins:
    handler: tenants/admins/list.handler
    events:
      - http:
          path: tenants/{tenant}/admins
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  assignTenantAdmin:
    handler: tenants/admins/assign.handler
    events:
      - http:
          path: tenants/{tenant}/admins/{userId}
          method: put
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  # Tenant Domains
  addTenantDomain:
    handler: tenants/domains/add.handler
    events:
      - http:
          path: tenants/{tenant}/domains
          method: post
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  deleteTenantDomain:
    handler: tenants/domains/delete.handler
    events:
      - http:
          path: tenants/{tenant}/domains/{domain}
          method: delete
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  verifyTenantDomain:
    handler: tenants/domains/verify.handler
    events:
      - http:
          path: tenants/{tenant}/domains/{domain}
          method: put
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  listTenantDomains:
    handler: tenants/domains/list.handler
    events:
      - http:
          path: tenants/{tenant}/domains
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  # Apps
  listApps:
    handler: apps/list.handler
    events:
      - http:
          path: apps
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  assignAppToAllTenantUsers:
    handler: apps/tenant/assign.handler
    events:
      - http:
          path: apps/{appId}/tenants/{tenant}
          method: put
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  # Idps
  getIdp:
    handler: idps/get.handler
    events:
      - http:
          path: idps/{idpId}
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  listIdps:
    handler: idps/list.handler
    events:
      - http:
          path: idps
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  getIdpMetadata:
    handler: idps/metadata.handler
    events:
      - http:
          path: idps/{idpId}/metadata.xml
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  updateIdp:
    handler: idps/update.handler
    events:
      - http:
          path: idps/{idpId}
          method: put
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
  # o4o Proxy
  proxy:
    handler: o4o/proxy.handler
    events:
      - http:
          path: /api/v1/{proxy+}
          method: ANY
          cors: true
