service:
  name: serverless-quiz-app
  
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  
provider:

  name: aws 
  runtime: nodejs12.x

  tracing:
    lambda: true
    ApiGateway: true
  
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    QUIZ_TABLE: Quiz-${self:provider.stage}
    INDEX_NAME: userId
    QUIZ_S3_BUCKET: serverless-quiz-api-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom: 
  documentation:
    api:
      info:
        version: v1.0.0
        title: Quiz api
        description: serverless application for QUIZ items
    models:
      - name: CreateQuizRequest
        contentType: application/json
        schema: ${file(schemas/create-quiz-request.json)}
      - name: UpdateQuizRequest
        contentType: application/json
        schema: ${file(schemas/update-quiz-request.json)}    

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetQuizzes:
    handler: src/lambda/http/getQuizzes.handler
    events:
      - http:
         method: get
         path: quizzes
         cors: true
         authorizer: Auth
         documentation:
           summary: Get user's quizzes
           description: Get user's quizzes
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:  arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUIZ_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - "*"

  CreateQuiz:
    handler: src/lambda/http/createQuiz.handler
    events:
      - http:
          method: post
          path: quizzes
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Quiz
            description: Create a new Quiz
            requestModels:
              'application/json': CreateQuizRequest
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUIZ_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - "*"

  DeleteQuiz:
    handler: src/lambda/http/deleteQuiz.handler
    events:
      - http:
          method: delete
          path: quizzes/{quizId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete a quiz
            description: Delete a quiz
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:  arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUIZ_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUIZ_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - "*"

  UpdateQuiz:
    handler: src/lambda/http/updateQuiz.handler
    events:
      - http:
          method: patch
          path: quizzes/{quizId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a quiz
            description: Update a quiz
            requestModels:
              'application/json': UpdateQuizRequest    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:  arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUIZ_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUIZ_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: quizzes/{quizId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.QUIZ_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: 
          - "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    QuizDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: quizId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: quizId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.QUIZ_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL      

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.QUIZ_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.QUIZ_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket