service: dockerfhict 

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  timeout: 10
  memorySize: 128
  region: eu-central-1
  profile: school
  stage: ${opt:stage, self:custom.defaultStage}

custom:
  defaultStage: dev

functions:

# SIMULATION endpoint

  newSimulation:
    handler: API/simulation/newSimulation/index.handler
    role: arn:aws:iam::277346611766:role/admin
    events:
     - http:
         path: simulation/new-simulation
         method: put
         cors: true
         
  getSimulation:
    handler: API/simulation/getSimulation/index.handler
    events:
      - http:
          path: simulation/{simulation_id}
          method: get
          cors: true      

  getSimulationConfig:
    handler: API/simulation/handler.getSimulationConfig
    events:
      - http:
          path: simulation/{simulation_id}/configuration
          method: get
          cors: true     

  getSimulationTimelines:
    handler: API/simulation/getTimelines/index.handler
    events:
      - http:
          path: simulation/{simulation_id}/timelines
          method: get
          cors: true           
  
  getSimulationHarborData:
    handler: API/simulation/getEntities/index.handler
    events:
      - http:
          path: simulation/{simulation_id}/timelines/{timeline_id}/{option}/all
          method: get
          cors: true

# SYNC

  syncStateTo:
    handler: API/sync/index.handler
    events:
      - http:
          path: sync
          method: patch
          cors: true

# TASKS

  getTasks:
    handler: API/task/index.handler
    events:
      - http:
          path: tasks/{simulation_id}/{timeline_id}
          method: get
          cors: true
  
# STORAGE

  getStorage:
    handler: API/storage/root/index.handler
    events:
      - http:
          path: storage/{simulation_id}/{timeline_id}/{storage_id}
          method: get
          cors: true
  
  getStorageContainers:
    handler: API/storage/containers/index.handler
    events: 
      - http: 
          path: storage/{simulation_id}/{timeline_id}/{storage_id}/containers
          method: get
          cors: true

# CONTAINER

  getContainer:
    handler: API/container/root/index.handler
    events: 
      - http: 
          path: container/{simulation_id}/{timeline_id}/{container_id}
          method: get
          cors: true

# DOCK

  getDock:
    handler: API/dock/root/index.handler
    events: 
      - http: 
          path: dock/{simulation_id}/{timeline_id}/{dock_id}
          method: get
          cors: true

  getDockContainers:
    handler: API/dock/containers/index.handler
    events: 
      - http: 
          path: dock/{simulation_id}/{timeline_id}/{dock_id}/containers
          method: get
          cors: true    

# SHIP

  getShip:
    handler: API/ship/getShip/index.handler
    events: 
      - http: 
          path: ship/{simulation_id}/{timeline_id}/{ship_id}
          method: get
          cors: true          

  getShipContainersAll:
    handler: API/ship/handler.getShipContainersAll
    events: 
      - http: 
          path: ship/{simulation_id}/{timeline_id}/{ship_id}/containers/all
          method: get
          cors: true  

  getShipContainersOnLocation:
    handler: API/ship/getShipContainersAtLocation/index.handler
    events: 
      - http: 
          path: ship/{simulation_id}/{timeline_id}/{ship_id}/containers/{location}
          method: get
          cors: true  

# IMPACTS

  getImpactOptions:
    handler: API/impact/handler.getOptions
    events:
      - http:
          path: impact/options/all
          method: get
          cors: true

  submitImpact:
    handler: API/impact/handler.submitImpact
    events:
      - http:
          path: impact/{simulation_id}/{timeline_id}/{time_stamp}/commit/
          method: post
          cors: true