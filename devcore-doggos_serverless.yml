# org: devcoreadmin
# app: rest-app-poc
service: http-api-node
package:
  exclude:
    - '**/**'
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128 # Lambda Memory Allocation
  environment:
    UNIQUE_IDENTIFIER: devcore-doggos
    RESCUE_GROUP_API_KEY: wuZik2ce

  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ''
            - - 'https://cognito-idp.'
              - '${opt:region, self:provider.region}'
              - '.amazonaws.com/'
              - Ref: ServiceUserPool
        audience:
          - Ref: ServiceUserPoolClient

functions:
  get-health:
    name: rest-app-poc-get-health-${opt:stage, 'dev'}
    handler: health-service/get-health.handler
    package:
      include:
        - health-service/get-health.js
    events:
      - httpApi:
          method: GET
          path: /health
          authorizer: serviceAuthorizer
  find-doggos:
    name: rest-app-poc-find-doggos-${opt:stage, 'dev'}
    handler: doggo-service/find-doggos.handler
    package:
      include:
        - doggo-service/find-doggos.js
    events:
      - httpApi:
          method: POST
          path: /findDoggos
          authorizer: serviceAuthorizer

resources:
  Resources:
    HttpApi:
      DependsOn: ServiceUserPool
    ServiceUserPool:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: service-user-pool-${opt:stage, 'dev'}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    ###
    # Start: GOOGLE FEDERATED SIGN IN CONFIGURATION
    ###
    UserPoolIdentityProvider:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId:
          Ref: ServiceUserPool
        ProviderName: 'Google'
        ProviderDetails:
          client_id: '674032301486-g9amn6a4pl2jc7ohjqpo4mr5khh59rcf.apps.googleusercontent.com'
          client_secret: 'YmfMYxAfI3gH6nSpIStjLH3L'
          # EXAMPLE REFERENCES ONLY
          # client_id: '674032301486-ld4s7gc0edr9dhsu4b6ug70t2tp4enae.apps.googleusercontent.com'
          # client_secret: '1BdpY4Gx-kyNepkOMIp5xI6A'
          authorize_scopes: 'profile email openid'
        ProviderType: 'Google'
        AttributeMapping:
          email: 'email'
    ###
    # End: GOOGLE FEDERATED SIGN IN CONFIGURATION
    ###
    ServiceUserPoolClient:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: service-user-pool-client-${opt:stage, 'dev'}
        AllowedOAuthFlows:
          - implicit
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: ServiceUserPool
        CallbackURLs:
          # This value is only used for local development. When deploying to production, this
          # should be configured via stage variables per environment in Serverless.
          - exp://127.0.0.1:19000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
          - Google # Only needed for Federated Sign-in, remove if not needed
    ServiceUserPoolDomain:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: ServiceUserPool
        Domain: service-user-pool-domain-${opt:stage, 'dev'}-${self:provider.environment.UNIQUE_IDENTIFIER}

    ###
    # FEDERATED SIGN IN CONFIGURATION
    # Everything below this is only required for Federated Sign-in (Social Sign-in)
    ###
    IdentityPool:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: 'AWS::Cognito::IdentityPool'
      Properties:
        IdentityPoolName: service-identity-pool-${opt:stage, 'dev'}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: ServiceUserPoolClient
            ProviderName:
              'Fn::GetAtt': [ServiceUserPool, ProviderName]
    CognitoUserBasePolicy:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - mobileanalytics:PutEvents
                - cognito-sync:*
              Resource:
                - '*'
    UnauthenticatedRole:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRoleWithWebIdentity
              Principal:
                Federated: cognito-identity.amazonaws.com
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: IdentityPool
                ForAnyValue:StringLike:
                  'cognito-identity.amazonaws.com:amr': unauthenticated
        ManagedPolicyArns:
          - Ref: CognitoUserBasePolicy
    CognitoUserAuthenticatedPolicy:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-identity:*
              Resource:
                - '*'
    AuthenticatedRole:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRoleWithWebIdentity
              Principal:
                Federated: cognito-identity.amazonaws.com
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: IdentityPool
                ForAnyValue:StringLike:
                  'cognito-identity.amazonaws.com:amr': authenticated
        ManagedPolicyArns:
          - Ref: CognitoUserBasePolicy
          - Ref: CognitoUserAuthenticatedPolicy
    RoleAttachment:
      DeletionPolicy: ${param:DELETION_POLICY, 'Delete'}
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          unauthenticated:
            Fn::GetAtt:
              - UnauthenticatedRole
              - Arn
          authenticated:
            Fn::GetAtt:
              - AuthenticatedRole
              - Arn
