app: admix-service-challenge
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: admix-service-challenge-v1
# app and org for use with dashboard.serverless.com

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${opt:stage, self:provider.stage}
    MONGO_URI: mongodb://0.0.0.0:27019/challenge

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"

# Plugins
plugins:
  - serverless-offline

# Optimization / Individual packaging per function
package:
    individually: true
    include:
      - .dist/**

# functions
functions:
  get-user:
    handler: dist/handlers/handler.getUserById
    events:
      - http:
          path: /users/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
    warmup: true
  get-campaign:
    handler: dist/handlers/handler.getCampaignById
    events:
      - http:
          path: /campaign/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
  get-campaigns-on-user:
    handler: dist/handlers/handler.getUserCampaigns
    events:
      - http:
          path: /user/{userId}/campaign
          method: get
          request:
            parameters:
              paths:
                userId: true
  create-user:
    handler: dist/handlers/handler.createUser
    events:
      - http:
          path: /users
          method: post
  create-campaign:
    handler: dist/handlers/handler.createCampaign
    events:
      - http:
          path: /campaign
          method: post
  update-user:
    handler: dist/handlers/handler.updateUser
    events:
      - http:
          path: /users/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
  update-campaign:
    handler: dist/handlers/handler.updateCampaign
    events:
      - http:
          path: /campaign/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
  assign-campaign:
    handler: dist/handlers/handler.assignCampaign
    events:
      - http:
          path: /users/{id}/campaigns
          method: put
          request:
            parameters:
              paths:
                id: true
  assign-creatives:
    handler: dist/handlers/handler.assignCreatives
    events:
      - http:
          path: /campaign/{id}/creatives
          method: put
          request:
            parameters:
              paths:
                id: true
  query-app-and-order:
    handler: dist/handlers/handler.queryAppAndRankByAudienceMatch
    events:
      - http:
          path: /app/query
          method: post
# CloudFormation Resources go below
