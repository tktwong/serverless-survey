service: mission-control-discord-bot

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    TABLE_NAME_POLL: mission-control-poll
    PUBLIC_KEY: ${env:PUBLIC_KEY}
    BOT_TOKEN: ${env:BOT_TOKEN}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  control:
    handler: src/index.main
    events:
      - http:
          path: missioncontrol
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/json: ${file(mappingTemplate)}
          response:
            statusCodes:
              401:
                pattern: '.*[UNAUTHORIZED].*'