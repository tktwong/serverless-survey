service:
  name: ${env:STAGE}-${env:REGION}-${env:APP_NAME}
custom:
  dotenv:
    basePath: environments/
    exclude: # By default dotenv will add the env to your functions
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceInclude:
        - typeorm-aurora-data-api-driver
        - data-api-client

  customDomain:
    domainName: ${env:API_DOMAIN}
    certificateName: ${env:API_DOMAIN}
    createRoute53Record: true
    endpointType: "edge"
    securityPolicy: tls_1_2
    hostedZoneId: ${env:HOSTED_ZONE_ID}
    apiType: rest
    autoDomain: true

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

provider:
  name: aws
  region: ${env:REGION, 'eu-west-2'}
  stage: ${env:STAGE, 'dev'}
  stackName: ${self:service.name}-stack
  runtime: nodejs12.x
  role: IdentityRole
  tracing:
    apiGateway: true
    lambda: true

resources:
  - Conditions:
      Az1:
        Fn::Equals:
          - ${env:AZ1}
          - true
      Az2:
        Fn::Equals:
          - ${env:AZ2}
          - true
      Az3:
        Fn::Equals:
          - ${env:AZ3}
          - true
      MySql:
        Fn::Equals:
          - ${env:MYSQL}
          - true
      NotProd: !Not [!Equals ["${env:NODE_ENV}", prod]]
  - Resources:
  - ${file(iac/resources/vpc.serverless.yml)}
  - ${file(iac/resources/subnet.serverless.yml)}
  - ${file(iac/resources/gateways.serverless.yml)}
  - ${file(iac/resources/routes.serverless.yml)}
  - ${file(iac/resources/sg.serverless.yml)}
  - ${file(iac/resources/aurora.serverless.yml)}
  - ${file(iac/resources/iam.serverless.yml)}

functions:
  base:
    handler: src/app.app_bundle
    events:
      - http: ANY /
      - http: "ANY {proxy+}"
