service: x-road-simple-stats-collector
custom:
  s3bucket: <S3_BUCKET>
  dynamoTableCurrent: statsCurrentTable
  dynamoTableHistory: statsHistoryTable
plugins:
  - serverless-plugin-existing-s3
provider:
  name: aws
  region: eu-central-1
  stage: prod
  runtime: nodejs10.x
  versionFunctions: false
functions:
  collectAndStoreStats:
    name: collectAndStoreStats
    handler: handler.collectAndStoreStats
    role: CollectAndStoreStatsRole
    environment:
      S3_BUCKET: ${self:custom.s3bucket}
      RANDOM_RESULTS_FILE: true
    events:
    - schedule:
        name: <INSTANCE_IDENTIFIER>
        #rate: cron(*/2 * * * ? *)
        rate: cron(0 23 * * ? *)
        input:
          url: <URL>
        enabled: true
  processStats:
    name: processStats
    handler: handler.processStats
    role: ProcessStatsRole
    environment:
      S3_BUCKET: ${self:custom.s3bucket}
      DYNAMO_TABLE_CURRENT: ${self:custom.dynamoTableCurrent}
      DYNAMO_TABLE_HISTORY: ${self:custom.dynamoTableHistory}
    events:
      - existingS3:
          bucket: ${self:custom.s3bucket}
          events:
            - s3:ObjectCreated:*
          rules:
            - suffix: .json
  listInstanceIdentifiers:
    name: listInstanceIdentifiers
    handler: handler.listInstanceIdentifiers
    role: StatsAPIRole
    environment:
      DYNAMO_TABLE_CURRENT: ${self:custom.dynamoTableCurrent}
      DYNAMO_TABLE_HISTORY: ${self:custom.dynamoTableHistory}
    events:
      - http:
          path: instances
          method: get
          private: false
          cors: true
  getStatsByInstanceIdentifier:
    name: getStatsByInstanceIdentifier
    handler: handler.getStatsByInstanceIdentifier
    role: StatsAPIRole
    environment:
      DYNAMO_TABLE_CURRENT: ${self:custom.dynamoTableCurrent}
      DYNAMO_TABLE_HISTORY: ${self:custom.dynamoTableHistory}
    events:
      - http:
          path: instances/{instanceIdentifier}
          method: get
          private: false
          cors: true
          request:
            parameters:
              paths:
                instanceIdentifier: true
  getStatsHistoryByInstanceIdentifier:
    name: getStatsHistoryByInstanceIdentifier
    handler: handler.getStatsHistoryByInstanceIdentifier
    role: StatsAPIRole
    environment:
      DYNAMO_TABLE_CURRENT: ${self:custom.dynamoTableCurrent}
      DYNAMO_TABLE_HISTORY: ${self:custom.dynamoTableHistory}
    events:
      - http:
          path: instances/{instanceIdentifier}/history
          method: get
          private: false
          cors: true
          request:
            parameters:
              paths:
                instanceIdentifier: true
package:
  individually: false
  include:
    - node_modules/**
    - config.js
    - functions.js
  exclude:
    - index.js
resources:
  Resources:
    S3Assets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3bucket}
    StatsCurrentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableCurrent}
        AttributeDefinitions:
          - AttributeName: instanceIdentifier
            AttributeType: S
        KeySchema:
          - AttributeName: instanceIdentifier
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    StatsHistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableHistory}
        AttributeDefinitions:
          - AttributeName: instanceIdentifier
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: instanceIdentifier
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CollectAndStoreStatsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CollectAndStoreStatsRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CollectAndStoreStatsRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                  Resource:
                    - 'arn:aws:s3:::${self:custom.s3bucket}/*'
    ProcessStatsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ProcessStatsRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ProcessStatsRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:DeleteObject
                  Resource:
                    - 'arn:aws:s3:::${self:custom.s3bucket}/*'
                - Effect: Allow
                  Action:
                    - s3:PutBucketNotification
                  Resource:
                    - 'arn:aws:s3:::${self:custom.s3bucket}'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/${self:custom.dynamoTableCurrent}'
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/${self:custom.dynamoTableHistory}'
    StatsAPIRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: StatsAPIRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: StatsAPIRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:Query
                    - dynamodb:Scan
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/${self:custom.dynamoTableCurrent}'
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'table/${self:custom.dynamoTableHistory}'
