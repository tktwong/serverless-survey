service: serverless-starwars-api
plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      migrate: true
  serverless-offline:
    babelOptions:
      presets: ["env"]

provider:
  name: aws
  stage: dev
  runtime: nodejs12.x
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

package:
  exclude:
    - node_modules/**
    - '!node_modules/swapi-node/**'
    - '!node_modules/node-fetch/**'
    - '!node_modules/request-promise-core/**'
    - '!node_modules/request/**'
    - '!node_modules/request-promise/**'
    - '!node_modules/bluebird/**'
    - '!node_modules/psl/**'
    - '!node_modules/punycode/**'
    - '!node_modules/lodash/**'
    - '!node_modules/stealthy-require/**'
    - '!node_modules/tough-cookie/**'
    - '!node_modules/uuid/**'
    
functions:
  createPersona:
    handler: handler.createPersona
    events:
      - http: 'POST /persona'
  getPersona:
    handler: handler.getPersona
    events:
      - http: 'GET /persona'
  getPeople:
    handler: handler.getPeople
    events:
      - http: 'GET /people/{id}'

resources:
  Resources:
    StarWarsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1