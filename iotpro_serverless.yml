service:
  name: iotpro
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  topicName: pcapUploadTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v0.0.1
        title: IoT Device Managing and Profiling 
        description: Serverless Application for IoT Device Managing and Profiling
    models:
      - name: UpdateRequest
        contentType: application/json
        schema: ${file(models/IotUpdate.json)}

  ### OFFLINE ###
  serverless-offline:
    #port: 8001 #3001?
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 3001 #overridden by obj init  
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: iot-${self:provider.stage}
            sources: [./dynamodb-seedtest.json]
  s3:
    port: 3010 #overridden by obj init 
    directory: /tmp 
  ### //OFFLINE

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-offline
  - serverless-s3-local
  - serverless-dynamodb-local
  - serverless-plugin-tracing
provider:
  name: aws
  runtime: nodejs12.x
  runlocal: false
  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  #TODO: https://seed.run/blog/how-to-enable-access-logs-for-api-gateway.html#:~:text=To%20view%20API%20Gateway%20logs,by%20the%20last%20event%20time.
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

    JWT_SECRET: ${file(config.${self:provider.stage}.json):JWT_SECRET}
    SHARED_KEY: ${file(config.${self:provider.stage}.json):SHARED_KEY}
    #KMS_SECRET: ${file(config.${self:provider.stage}.json):KMS_SECRET}
    #AUTH0_JWKS_URL: 'https://XXXX.auth0.com/.well-known/jwks.json'
    DEV_TABLE: dev-${self:provider.stage} #table for device login information
    DEV_INDEX: devIdIndex-${self:provider.stage}
    IOT_TABLE: iot-${self:provider.stage} #table for device status update
    IOT_INDEX: iotIdIndex-${self:provider.stage}
    S3_BUCKET_PCAP: serverless-iotpcap-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    BCRYPT_SALT: 10
    ENABLE_LOCAL: ${self:provider.runlocal}
    ENABLE_AWSXR: ${self:provider.tracing.lambda}
    # this works for getting signed URL but not for uploading actually 
    #_X_AMZN_TRACE_ID: Root=1-5759e988-bd862e3fe1be46a994272793;Sampled=1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IOT_TABLE}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_PCAP}/*
    #https://stackoverflow.com/questions/57618014/enabling-aws-xray-serverless-yml
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

functions:

  #Auth:
  #  handler: src/lambda/auth/auth0Authorizer.handler
  
  AuthIoT:
    handler: src/lambda/auth/authIoT.handler

  CreateDevice:
    handler: src/lambda/http/createDevice.handler
    events:
      - http:
          method: post
          path: dev
          cors: true
          authorizer: 
            name: AuthIoT #switched to simpler validation
            identitySource: method.request.header.Key
          request:
            schema:
              application/json: ${file(src/schema/create_device_request.json)}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEV_TABLE}

  LoginDevice:
    handler: src/lambda/http/loginDevice.handler
    events:
      - http:
          method: post
          path: dev/login
          cors: true
          authorizer: 
            name: AuthIoT #switched to simpler validation
            identitySource: method.request.header.Key
          request:
            schema:
              application/json: ${file(src/schema/create_device_request.json)}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEV_TABLE}

  IoTPut:
    handler: src/lambda/http/updateStatus.handler
    events:
      - http:
          method: put
          path: iot/status/{id}
          cors: true
          authorizer: 
            name: AuthIoT #switched to simpler validation
            identitySource: method.request.header.Key
          documentation:
            summary: Update IoT Status
            description: Update IoT Status
            reqValidatorName: RequestBodyValidator
            requestModels:
              'application/typescript': UpdateRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IOT_TABLE}

  IoTGet:
    handler: src/lambda/http/updateStatus.handler
    events:
      - http:
          method: get
          path: iot/status/{id}
          cors: true
          authorizer: 
            name: AuthIoT #switched to simpler validation
            identitySource: method.request.header.Key
          documentation:
            summary: Get IoT Status
            description: Get IoT Status
            reqValidatorName: RequestBodyValidator
            requestModels:
              'application/typescript': UpdateRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IOT_TABLE}

  IoTPost:
    handler: src/lambda/http/updateStatus.handler
    events:
      - http:
          method: post
          path: iot/status
          cors: true
          authorizer: 
            name: AuthIoT #switched to simpler validation
            identitySource: method.request.header.Key
          documentation:
            summary: Update IoT Status
            description: Update IoT Status
            reqValidatorName: RequestBodyValidator
            requestModels:
              'application/typescript': UpdateRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IOT_TABLE}

  IoTDelete:
    handler: src/lambda/http/updateStatus.handler
    events:
      - http:
          method: delete
          path: iot/status/{id}
          cors: true
          authorizer: 
            name: AuthIoT #switched to simpler validation
            identitySource: method.request.header.Key
          documentation:
            summary: Update IoT Status
            description: Update IoT Status
            reqValidatorName: RequestBodyValidator
            requestModels:
              'application/typescript': UpdateRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IOT_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: get
          path: iot/upload/{id}/attachment
          cors: true
          authorizer: 
            name: AuthIoT #switched to simpler validation
            identitySource: method.request.header.Key
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem #debug
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IOT_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem #debug
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IOT_TABLE}/index/*
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_PCAP}/*

resources:
  Resources:

    PcapsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Pcap bucket topic
        TopicName: ${self:custom.topicName}

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref PcapsTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.S3_BUCKET_PCAP}
        Topics:
          - !Ref PcapsTopic

    #### API Gateway & Request Body Validation #############
    #GatewayResponseDefault4XX: #Edge Optimized
    #  Type: AWS::ApiGateway::GatewayResponse
    #  Properties:
    #    ResponseParameters:
    #      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
    #      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
    #      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,PATCH,OPTIONS'"
    #    ResponseType: DEFAULT_4XX
    #    RestApiId:
    #      Ref: ApiGatewayRestApi
    #RequestBodyValidator:
    #  Type: AWS::ApiGateway::RequestValidator
    #  Properties:
    #    Name: 'request-body-validator'
    #    RestApiId:
    #      Ref: ApiGatewayRestApi
    #    ValidateRequestBody: true
    #    ValidateRequestParameters: false
    #### .pcap File Bucket ############

    BucketPcap:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_PCAP}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref PcapsTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    DEVTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DEV_TABLE}
        AttributeDefinitions:
          - AttributeName: devname
            AttributeType: S
        KeySchema:
          - AttributeName: devname
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    IOTTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid #partitionKey
            AttributeType: S
          # https://stackoverflow.com/questions/30866030/number-of-attributes-in-key-schema-must-match-the-number-of-attributes-defined-i
          - AttributeName: createdAt #indexKey
            AttributeType: S
          - AttributeName: lastSeen  #indexKey
            AttributeType: S
        KeySchema:
          - AttributeName: uuid #partitionKey
            KeyType: HASH
          - AttributeName: createdAt #sortKey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IOT_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IOT_INDEX}
            KeySchema:
              - AttributeName: uuid  #partitionKey
                KeyType: HASH
              - AttributeName: lastSeen  #indexKey
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
              
    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          PolicyDocument:
            Id: BucketPcapPolicy
            Version: "2012-10-17"
            Statement:
              - Sid: PublicReadForGetBucketObjects
                Effect: Allow
                Principal: '*'
                Action: 's3:GetObject'
                Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_PCAP}/*'
          Bucket: !Ref BucketPcap


 
