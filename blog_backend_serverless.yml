# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: blog-backend # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

#custom:
#  serverless-mocha-plugin:
#    preTestCommands:
#      - bash .tools/startOffline.sh
#    postTestCommands:
#      - bash .tools/stopOffline.sh

provider:
  name: aws
  runtime: nodejs8.10
  apiKeys:
  -  ${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}-key
  environment:
    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${opt:region, self:provider.region}
    TABLE_NAME: ${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"


plugins:
  - serverless-mocha-plugin
  - serverless-offline
  - serverless-plugin-scripts

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  posts:
    handler: app.handler
    events:
      - http:
           path: /
           method: get
           private: true
          # authorizer: aws_iam
      - http:
          path: posts
          method: get
          # authorizer: aws_iam
      - http:
          path: posts
          method: post
          private: true
          # authorizer: aws_iam
      - http:
          path: posts/{id}
          method: put
          private: true
          # authorizer: aws_iam
      - http:
          path: posts/{id}
          method: delete
          private: true
          # authorizer: aws_iam

#  hello:
#    handler: app.handler
#    events:
#      - http:
#          path: posts
#          method: get
#          cors: true
#          integration: lambda
#      - http:
#          path: posts
#          method: post
#          cors: true
#          integration: lambda
#      - http:
#          path: posts/{id}
#          method: put
#          cors: true
#          integration: lambda
#      - http:
#          path: posts/{id}
#          method: delete
#          cors: true
#          integration: lambda
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     # Cognito - User pool
#     CognitoUserPool:
#       Type: AWS::Cognito::UserPool
#       Properties:
#         UserPoolName: app_user_pool
#     # Cognito - Client
#     CognitoUserPoolClient:
#       Type: AWS::Cognito::UserPoolClient
#       Properties:
#         ClientName: app_pool_client
#         UserPoolId:
#           Ref: CognitoUserPool
#     # Cognito - Identity
#     CognitoIdentityPool:
#       Type: AWS::Cognito::IdentityPool
#       Properties:
#         IdentityPoolName: app_identity_pool
#         AllowUnauthenticatedIdentities: false
#         CognitoIdentityProviders:
#           - ClientId:
#               Ref: CognitoUserPoolClient
#             ProviderName:
#               Fn::GetAtt: [CognitoUserPool, ProviderName]
#     # Cognito roles
#     CognitoIdentityPoolRoles:
#       Type: AWS::Cognito::IdentityPoolRoleAttachment
#       Properties:
#         IdentityPoolId:
#           Ref: CognitoIdentityPool
#         Roles:
#           authenticated:
#             Fn::GetAtt: [CognitoAuthRole, Arn]
#           unauthenticated:
#             Fn::GetAtt: [CognitoUnauthRole, Arn]
#     CognitoAuthRole:
#       Type: AWS::IAM::Role
#       Properties:
#         RoleName: appAuthRole
#         Path: /
#         AssumeRolePolicyDocument:
#           Version: "2012-10-17"
#           Statement:
#             - Effect: "Allow"
#               Principal:
#                 Federated: "cognito-identity.amazonaws.com"
#               Action:
#                 - "sts:AssumeRoleWithWebIdentity"
#               Condition:
#                 StringEquals:
#                   "cognito-identity.amazonaws.com:aud":
#                     Ref: CognitoIdentityPool
#                 "ForAnyValue:StringLike":
#                   "cognito-identity.amazonaws.com:amr": authenticated
#         Policies:
#           - PolicyName: "CognitoAuthorizedPolicy"
#             PolicyDocument:
#               Version: "2012-10-17"
#               Statement:
#                 - Effect: "Allow"
#                   Action:
#                     - "mobileanalytics:PutEvents"
#                     - "cognito-sync:*"
#                     - "cognito-identity:*"
#                   Resource: "*"
#                 - Effect: "Allow"
#                   Action:
#                     - "lambda:InvokeFunction"
#                   Resource: "*"
#     CognitoUnauthRole:
#       Type: AWS::IAM::Role
#       Properties:
#         RoleName: appUnauthRole
#         Path: /
#         AssumeRolePolicyDocument:
#           Version: "2012-10-17"
#           Statement:
#             - Effect: "Allow"
#               Principal:
#                 Federated: "cognito-identity.amazonaws.com"
#               Action:
#                 - "sts:AssumeRoleWithWebIdentity"
#               Condition:
#                 StringEquals:
#                   "cognito-identity.amazonaws.com:aud":
#                     Ref: CognitoIdentityPool
#                 "ForAnyValue:StringLike":
#                   "cognito-identity.amazonaws.com:amr": unauthenticated
#         Policies:
#           - PolicyName: "CognitoUnauthorizedPolicy"
#             PolicyDocument:
#               Version: "2012-10-17"
#               Statement:
#                 - Effect: "Allow"
#                   Action:
#                     - "mobileanalytics:PutEvents"
#                     - "cognito-sync:*"
#                     - "cognito-identity:*"
#                   Resource: "*"
#                 - Effect: "Allow"
#                   Action:
#                     - "lambda:InvokeFunction"
#                   Resource: "*"
#     BlogTable:
#       Type: AWS::DynamoDB::Table
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.TABLE_NAME}

custom:
  scripts:
    commands:
      createdb: SERVERLESS_STAGE=${opt:stage, self:provider.stage} SERVERLESS_PROJECT=${self:service} SERVERLESS_REGION=${opt:region, self:provider.region} TABLE_NAME=${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE} .tools/createdb.sh
      seedData: SERVERLESS_STAGE=${opt:stage, self:provider.stage} SERVERLESS_PROJECT=${self:service} SERVERLESS_REGION=${opt:region, self:provider.region} TABLE_NAME=${self:provider.environment.SERVERLESS_PROJECT}-${self:provider.environment.SERVERLESS_STAGE} .tools/seedData.sh