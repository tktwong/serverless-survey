service: rimac-serverless

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverlessUser
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: "*"

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-openapi-documentation

package:
  individually: true

custom:
  tableName: character-table
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  documentation: ${file(serverless.doc.yml):documentation}

functions:
  getCharacter:
    handler: lambdas/endpoints/getCharacter.handler
    events:
      - http:
          path: get-character/{ID}
          method: GET
          cors: true
          documentation: ${file(serverless.doc.yml):endpoints.getCharacter}
          
  createCharacter:
    handler: lambdas/endpoints/createCharacter.handler
    events:
      - http:
          path: create-character/{ID}
          method: POST
          cors: true
          documentation: ${file(serverless.doc.yml):endpoints.postCharacter}

  getFilm:
    handler: lambdas/endpoints/getFilm.handler
    events:
      - http:
          path: get-film/{ID}
          method: GET
          cors: true
          documentation: ${file(serverless.doc.yml):endpoints.getFilm}

resources:
  Resources:
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
