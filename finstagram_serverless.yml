# NOTE: update this with your service name
service: finstagram-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-2
  environment: ${file(env.yml):${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:us-east-2:454067702093:table/photos"
        - "arn:aws:dynamodb:us-east-2:454067702093:table/photo_comments"

functions:
  create:
    handler: functions/photos/create.main
    events:
      - http:
          path: photos
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: functions/photos/get.main
    events:
      - http:
          path: photos/{id}
          method: get
          cors: true
          authorizer: aws_iam
  get-others-photo:
    handler: functions/photos/getOthersPhoto.main
    events:
      - http:
          path: photo/{id}/{id_user}
          method: get
          cors: true
          authorizer: aws_iam
  user-specific-list:
    handler: functions/photos/user-specific-list.main
    events:
      - http:
          path: userPhotos
          method: get
          cors: true
          authorizer: aws_iam
  get-others-list-of-photos:
    handler: functions/photos/getOthersListOfPhotos.main
    events:
      - http:
          path: photos/{id}/list
          method: get
          cors: true
          authorizer: aws_iam
  update-photo:
    handler: functions/photos/update-photo.main
    events:
      - http:
          path: photos/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete-photo:
    handler: functions/photos/delete-photo.main
    events:
      - http:
          path: photos/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  create-comment:
    handler: functions/comments/createComment.main
    events:
      - http:
          path: comments/{id_photo}
          method: post
          cors: true
          authorizer: aws_iam
  get-comments-list:
    handler: functions/comments/getCommentsList.main
    events:
      - http:
          path: comments/{id_photo}
          method: get
          cors: true
          authorizer: aws_iam
  update-comment:
    handler: functions/comments/updateComment.main
    events:
      - http:
          path: comments/{id_photo}
          method: put
          cors: true
          authorizer: aws_iam
  delete-comment:
    handler: functions/comments/deleteComment.main
    events:
      - http:
          path: comments/{id_photo}
          method: delete
          cors: true
          authroizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}





