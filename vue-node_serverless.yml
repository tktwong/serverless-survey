service: auth-token

custom:
  secrets: ${file(secrets.json)}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    DB: ${self:custom.secrets.DB}


functions:

# add register login jwt authentikasi admin
  verify-token1:
    handler: authadmin/VerifyToken1.authadmin

  logins:
    handler: authadmin/AuthHandler1.logins
    events:
      - http:
          path: logins
          method: post
          cors: true

  registers:
    handler: authadmin/AuthHandler1.registers
    events:
      - http:
          path: registers
          method: post
          cors: true

  me1:
    handler: authadmin/AuthHandlers.me1
    events:
      - http:
          path: me1
          method: get
          cors: true
          authorizer: verify-token

  get1:
    handler: admin/AdminHandler.gets
    events:
      - http:
          path: admin
          method: get
          cors: true

# add register login jwt authentikasi user
  verify-token:
    handler: auth/VerifyToken.auth

  login:
    handler: auth/AuthHandler.login
    events:
      - http:
          path: login
          method: post
          cors: true

  register:
    handler: auth/AuthHandler.register
    events:
      - http:
          path: register
          method: post
          cors: true

  me:
    handler: auth/AuthHandler.me
    events:
      - http:
          path: me
          method: get
          cors: true
          authorizer: verify-token

  getUsers:
    handler: user/UserHandler.getUsers
    events:
      - http:
          path: users
          method: get
          cors: true

# add functions CRUD
  create:
    handler: ticket/TicketHandler.create # point to exported create function in handler.js
    events:
      - http:
          path: tickets # path will be domain.name.com/dev/tickets
          method: post
          cors: true

  getOne:
    handler: ticket/TicketHandler.getOne
    events:
      - http:
          path: tickets/{id} # path will be domain.name.com/dev/tickets/1
          method: get
          cors: true

  getAll:
    handler: ticket/TicketHandler.getAll # path will be domain.name.com/dev/tickets
    events:
     - http:
         path: tickets
         method: get
         cors: true

  update:
    handler: ticket/TicketHandler.update # path will be domain.name.com/dev/tickets/1
    events:
     - http:
         path: tickets/{id}
         method: put
         cors: true

  delete:
    handler: ticket/TicketHandler.delete
    events:
     - http:
         path: tickets/{id} # path will be domain.name.com/dev/tickets/1
         method: delete
         cors: true

plugins:
- serverless-offline # adding the plugin to be able to run the offline emulation