service: aws-mock-api

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
    slim: true

provider:
  name: aws
  runtime: python3.7
  region: eu-central-1
  logs:
    restApi: true
  apiKeys:
    - "restApi"

functions:
  getAppointments:
    handler: mock.mock_appointments_handler
    role: DefaultLambdaRole
    environment:
      BUCKET_NAME: !Ref DataBucket
    events:
      - http:
          path: /appointments
          method: get
          private: false
  getAppointmentFromId:
    handler: mock.get_appointments_by_id
    role: DefaultLambdaRole
    environment:
      BUCKET_NAME: !Ref DataBucket
    events:
      - http:
          path: /appointments/{id}
          method: get
          private: false
          request:
            parameters:
              paths:
                id: true

resources:
  Resources:
    DefaultLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: "DefaultLambdaPolicy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
                - Effect: "Allow"
                  Action:
                    - "s3:ListBucket"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - Ref: DataBucket
                - Effect: "Allow"
                  Action:
                    - "s3:GetObject"
                    - "s3:PutObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - Ref: DataBucket
                        - "/*"
    DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 365
              Status: Enabled