org: josmelnyh89
app: challenge-rimac-lambda-rest-api-app
service: PEOPLE-service

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - test
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  logs:
    restApi: true
  environment:
    NODE_ENV: dev
    PEOPLE_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    PEOPLE_EMAIL_TABLE: "PEOPLE-email-${opt:stage, self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

functions:
  peopleDetails:
    handler: src/handler.findOne
    description: Detail People
    events:
      - http:
          path: /api/people/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
  peopleDelete:
    handler: src/handler.deleteOne
    description: Delete People
    events:
      - http:
          path: /api/people/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
  peopleUpdate:
    handler: src/handler.update
    description: Update People
    events:
      - http:
          path: /api/people/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
            schema:
              application/json: ${file(src/schemas/update_people.json)}
  peopleList:
    handler: src/handler.find
    memorySize: 128
    description: List all peoples
    events:
      - http:
          path: /api/people
          method: get
  peopleCreate:
    handler: src/handler.create
    memorySize: 128
    description: Function Create People.
    events:
      - http:
          path: /api/people
          method: post
          integration: lambda
          request:
            schema:
              application/json: ${file(src/schemas/create_people.json)}
          response:
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              201:
                pattern: ""
              200:
                pattern: .*is already taken.*
                template:
                  application/json: ${file(src/errors/error-response-template.yml)} # JSON return object

resources:
  Resources:
    PEOPLEsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.PEOPLE_TABLE}
