service: dala-logging-api
package:
    include:
        - src/**

provider:
    name: aws
    region: eu-west-1
    runtime: nodejs6.10
    stage: ${opt:stage, self:custom.defaultStage}
    profile: ${opt:profile}
    iamRoleStatements:
        - Effect: Allow
          Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
          Resource:
             - 'arn:aws:logs:*:*:*'  
    environment:
        SLACK: ${self:custom.profiles.${self:provider.stage}.SLACK}
        SLACK_WEBHOOK: ${self:custom.profiles.${self:provider.stage}.SLACK_WEBHOOK}

functions:
    notifySlack:
        handler: src/slack/notify.notify

plugins:
    - serverless-prune-plugin
              
custom:
    defaultStage: dev
    profiles:
        dev: 
            AWS_PROFILE: sandbox
            SLACK: https://hooks.slack.com
            SLACK_WEBHOOK: ${env:SLACK_WEBHOOK}
        ropsten: 
            AWS_PROFILE: sandbox
            SLACK: https://hooks.slack.com
            SLACK_WEBHOOK: ${env:SLACK_WEBHOOK}
        mainnet: 
            AWS_PROFILE: mainnet
            SLACK: https://hooks.slack.com
            SLACK_WEBHOOK: ${env:SLACK_WEBHOOK}
    prune:
        automatic: true
        number: 5

resources:
    Outputs:
        SendAlertsToSlack:
            Value:
                Fn::GetAtt:
                    - NotifySlackLambdaFunction
                    - Arn
    Resources:
        CloudWatchInvokePolicy:
            Type: AWS::Lambda::Permission
            DependsOn: NotifySlackLambdaFunction
            Properties:
                Action: lambda:InvokeFunction
                SourceArn: arn:aws:logs:${self:provider.region}:${env:AWS_ACCOUNT_ID}:*
                Principal: logs.${self:provider.region}.amazonaws.com
                FunctionName:  arn:aws:lambda:${self:provider.region}:${env:AWS_ACCOUNT_ID}:function:dala-logging-api-${self:provider.stage}-notifySlack

               

