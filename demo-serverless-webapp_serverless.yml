service:                   sirris-cloud-sec-demo

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage:                   ${opt:stage, self:provider.stage}
  appName: sirrissecuritydemo
    # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-secdemo
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  amplify:
    - filename: ../frontend/src/aws-exports.js
      type: javascript
      appClient: CognitoUserPoolClient
      s3bucket: disabled
  fullstack:
    domain: demo.security.denbot.co
    certificate: arn:aws:acm:us-east-1:564006752217:certificate/788aca6a-2730-475e-a01b-f24aaac5ae97     # The ARN for the SSL cert to use form AWS CertificateManager
    bucketName: roomba-demo-${self:custom.stage}                  # Unique name for the S3 bucket to host the client assets
    distributionFolder: ../frontend/build            # Path to the client assets to be uploaded to S3
    indexDocument: index.html                  # The index document to use
    errorDocument: error.html                  # The error document to use
    singlePageApp: true                       # If true 403 errors will be rerouted (missing assets) to your root index document to support single page apps like React and Angular where the js framework handles routing
    apiPath: api                               # The path prefix for your API Gateway lambdas. The path for the lambda http event trigger needs to start with this too eg. api/myMethod
    clientCommand: npm run build                   # Command to generate the client assets. Defaults to doing nothing
    clientSrcPath: ../frontend                      # The path to where you want to run the clientCommand
    # waf: 00000000-0000-0000-0000-000000000000  # ID of the Web Application Firewall. Defaults to not used
    logging:
      bucket: accesslogs-sirris-cloud.s3.amazonaws.com
      prefix: ${self:custom.appName}-${self:custom.stage}

provider:
  name:                    aws
  runtime:                 nodejs8.10
  stage:                   dev
  region:                  eu-west-1
  environment:
    tableName: ${self:custom.tableName}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]

functions:
  listNotes:
    handler:               list.main
    timeout:               3
    memorySize:            128
    events:
      - http:
          path:            api/notes
          method:          get
          authorizer:      aws_iam
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  createNote:
    handler:               create.main
    timeout:               3
    memorySize:            128
    events:
      - http:
          path:            api/notes
          method:          post
          authorizer:      aws_iam
          cors:
              origin: '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
              allowCredentials: false

# Create our resources with separate CloudFormation templates
resources:
  # dynamodb table
  - ${file(resources/dynamodb-notes-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}

plugins:
  - serverless-webpack
  - aws-amplify-serverless-plugin
  - fullstack-serverless
