# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: uktena # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom: ${file(./env.yml)}
provider:
  name: aws
  runtime: nodejs4.3
  iamRoleStatements: # permissions for all of your functions can be set here
      - Effect: Allow
        Action: # Gives permission to DynamoDB tables in a specific region
          - dynamodb:*
        Resource: "arn:aws:dynamodb:us-east-1:*:*"
      - Effect: Allow
        Action: # Gives permission to SQS in a specific region
          - sqs:ListQueues
          - sqs:SendMessage
        Resource: "arn:aws:sqs:us-east-1:*:*"
      - Effect: Allow
        Action: # Gives permission to Lambda in a specific region
          - lambda:*
        Resource: "arn:aws:lambda:us-east-1:*:*"
  environment:
        AUTH0_SECRET: ${self:custom.AUTH0_SECRET}
        DOMAIN: ${self:custom.DOMAIN}
        region: ${self:custom.region}
  defaultStage: dev

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  index:
    handler: /routes/index/index.main
    events:
            - http:
                path: /
                method: get
                integration: lambda
                response:
                  headers:
                    Content-Type: "'text/html'"
                  template: $input.path('$')
  tomato:
    handler: /routes/tomato/index.main
    events:
            - http:
                path: tomato
                method: get
                integration: lambda
                cors: true
                request:
                  parameters:
                    querystrings:
                      o: false
                authorizer:
                  arn: arn:aws:lambda:us-east-1:014951972737:function:uktena-dev-verifyToken
                  identitySource: method.request.header.Authorization
            - http:
                path: tomato
                method: post
                integration: lambda
                cors: true
                request:
                  parameters:
                    querystrings:
                      o: false
                authorizer:
                  arn: arn:aws:lambda:us-east-1:014951972737:function:uktena-dev-verifyToken
                  identitySource: method.request.header.Authorization
            - http:
                path: tomato/{id}
                method: delete
                integration: lambda
                cors: true
                authorizer:
                  arn: arn:aws:lambda:us-east-1:014951972737:function:uktena-dev-verifyToken
                  identitySource: method.request.header.Authorization
                request:
                  parameters:
                     paths:
                       id: true
                     querystrings:
                       o: false
  verifyToken:
    handler: /auth/main.verifyToken
    integration: lambda

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
