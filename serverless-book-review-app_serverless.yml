service:
  name: sls-review-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments

# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    BOOK_TABLE: Books-${self:provider.stage}
    BOOK_AUTHOR_INDEX: authorIndex
    BOOK_PUBLISH_DATE_INDEX: publishDateIndex
    BOOK_POINT_INDEX: pointIndex
    REVIEW_TABLE: Review-Books-${self:provider.stage}
    REVIEW_BOOK_ID_INDEX: bookIdIndex
    REVIEW_CREATED_DATE_INDEX: createdDateIndex
    REVIEW_REVIEW_ID_INDEX: reviewIdIndex
    CONNECTIONS_TABLE: Review-Connections-${self:provider.stage}
    IMAGES_S3_BUCKET: sls-review-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET_ID: ReviewAuth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret  

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'  
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref ReviewAuth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn
    - Effect: Allow
      Action:
        - 'dynamodb:ListTables'
        - 'dynamodb:DescribeTable'
        - 'dynamodb:DescribeStream'
        - 'dynamodb:ListStreams'
        - 'dynamodb:GetShardIterator'
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:DescribeReservedCapacity'
        - 'dynamodb:DescribeReservedCapacityOfferings'
        - 'dynamodb:GetRecords'
      Resource:
        - { "Fn::GetAtt": ["ReviewTable", "Arn"] }
    - Effect: Allow
      Action:
        - es:ESHttpPost
        - es:ESHttpPut
        - es:ESHttpDelete
        - es:ESHttpGet
      Resource:
        - { "Fn::GetAtt": ["ReviewsSearch", "DomainArn"] }
        - { "Fn::Join": ["", ["Fn::GetAtt": ["ReviewsSearch", "DomainArn"], "/*"]] }

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Book Review API
        description: Serverless application for managing Book Reviewing
    models:
      - name: ReviewCreateRequest
        contentType: application/json
        schema: ${file(models/create-review-request.json)}
      - name: ReviewUpdateRequest
        contentType: application/json
        schema: ${file(models/update-review-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetBooks:
    handler: src/lambda/http/getBooks.handler
    events:
      - http:
          method: get
          path: books
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}/index/${self:provider.environment.BOOK_AUTHOR_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}/index/${self:provider.environment.BOOK_PUBLISH_DATE_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}/index/${self:provider.environment.BOOK_POINT_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}/index/${self:provider.environment.REVIEW_BOOK_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*      
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"      

  GetBookReview:
    handler: src/lambda/http/getBookReview.handler
    events:
      - http:
          method: get
          path: books/{bookId}/review
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}/index/${self:provider.environment.REVIEW_BOOK_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*      
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"     

  # TODO: Configure this function
  GetReview:
    handler: src/lambda/http/review/getReview.handler
    events:
      - http:
          method: get
          path: books/review
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}/index/${self:provider.environment.REVIEW_BOOK_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}/index/${self:provider.environment.REVIEW_CREATED_DATE_INDEX} 
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"      
          
  # TODO: Configure this function
  CreateReview:
    handler: src/lambda/http/review/createReview.handler
    events:
      - http:
          method: post
          path: books/review
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Book Reservation
            description: Create a new Book Reservation
            requestModels:
              'application/json': ReviewCreateRequest
    deploymentSettings:
      type: Linear10PercentEvery1Minute
      alias: Live              
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:PutItem
        - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"      

  # TODO: Configure this function
  UpdateReview:
    handler: src/lambda/http/review/updateReview.handler
    events:
      - http:
          method: patch
          path: books/review/{reviewId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update existing Book Reservation
            description: Update existing Book Reservation
            requestModels:
              'application/json': ReviewUpdateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Query
        - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"      

  # TODO: Configure this function
  LikeReview:
    handler: src/lambda/http/review/likeReview.handler
    events:
      - http:
          method: patch
          path: books/review/{reviewId}/like
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Query
        - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}/index/${self:provider.environment.REVIEW_REVIEW_ID_INDEX}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"      

  # TODO: Configure this function
  DisLikeReview:
    handler: src/lambda/http/review/disLikeReview.handler
    events:
      - http:
          method: patch
          path: books/review/{reviewId}/dislike
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Query
        - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}/index/${self:provider.environment.REVIEW_REVIEW_ID_INDEX}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"                

  # TODO: Configure this function
  DeleteReview:
    handler: src/lambda/http/review/deleteReview.handler
    events:
      - http:
          method: delete
          authorizer: Auth
          path: books/review/{reviewId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOK_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/* 
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"      

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/review/generateUploadUrl.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: books/review/{reviewId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEW_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"  

  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:          
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}    
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"   

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:          
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*" 

  SyncWithES:
    environment:
      ES_ENDPOINT: !GetAtt ReviewsSearch.DomainEndpoint
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          enabled: true
          arn: !GetAtt ReviewTable.StreamArn
    iamRoleStatements:          
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
    - Effect: Allow
      Action:
        - execute-api:ManageConnections
      Resource: 
        - "*"
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*" 

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: author
            AttributeType: S
          - AttributeName: publishedDate
            AttributeType: S
          - AttributeName: point
            AttributeType: N
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
          - AttributeName: title
            KeyType: RANGE            
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOOK_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BOOK_AUTHOR_INDEX}
            KeySchema:
              - AttributeName: bookId
                KeyType: HASH
              - AttributeName: author
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
          - IndexName: ${self:provider.environment.BOOK_PUBLISH_DATE_INDEX}
            KeySchema:
              - AttributeName: bookId
                KeyType: HASH
              - AttributeName: publishedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
          - IndexName: ${self:provider.environment.BOOK_POINT_INDEX}
            KeySchema:
              - AttributeName: bookId
                KeyType: HASH
              - AttributeName: point
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    ReviewTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: reviewId
            AttributeType: S
          - AttributeName: createDate
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S          
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: reviewId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.REVIEW_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.REVIEW_BOOK_ID_INDEX}
            KeySchema:
            - AttributeName: bookId
              KeyType: HASH
            - AttributeName: createDate
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.REVIEW_REVIEW_ID_INDEX}
            KeySchema:
            - AttributeName: reviewId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.REVIEW_CREATED_DATE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    WebSocConTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    ReviewsSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: reviews-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: "1"
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:ESHttp*'
              Resource: '*'

        AdvancedOptions:
          rest.action.multi.allow_explicit_index: "true"

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/reviewAuth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    ReviewAuth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey