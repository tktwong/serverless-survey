service:
  name: serverless-ocr-app

plugins:
 - serverless-webpack
 - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'} # default dev or passed by user
  region: ${opt:region, 'us-east-1'} # default us-east-1 or passed by user

  environment:
    DOCUMENT_TABLE: ocrapp-text-${self:provider.stage}
    DOCUMENT_TABLE_IDX_NAME : dueDateIndex
    DOCUMENT_S3_BUCKET: ocrapp-s3-document-${self:provider.stage}
    DOCUMENT_URL: https://${self:provider.environment.DOCUMENT_S3_BUCKET}.s3.amazonaws.com/
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_JWKS: https://dev-ev23cxso.eu.auth0.com/.well-known/jwks.json
    SIGNED_URL_EXPIRATION: 300
    TMP_FILE_PATH_PDF: /tmp/ocr_sample.pdf
    TMP_FILE_PATH_PREVIEW: /tmp/img_preview.png
    IMG_PREVIEW_SUFFIX : '-preview'
    # TMP_FILE_PATH_FULL: /tmp/img_full.png # optional
    # IMG_FULL_SUFFIX: '-full' # optional
    OCR_SNS_TOPIC: ocrsnstopic-${self:provider.stage}
    OCR_SNS_TOPIC_ARN:
      Fn::Join:
      - ":"
      - - "arn:aws:sns"
        - Ref: "AWS::Region"
        - Ref: "AWS::AccountId"
        - ${self:provider.environment.OCR_SNS_TOPIC}
    TEXTRACT_ROLE: !GetAtt TextractRole.Arn
    
  # permissions set here would be active for all functions
  # iamRoleStatements:

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreatePreviewImage:
    handler: src/lambda/http/createPreviewImage.handler
    layers:
      - arn:aws:lambda:us-east-1:744752568456:layer:image-magick:1
      - arn:aws:lambda:us-east-1:764866452798:layer:ghostscript:8
    role: TextractRole


  storeOcrResult:
    handler: src/lambda/http/storeOcrResult.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ":"
              - - "arn:aws:sns"
                - Ref: "AWS::Region"
                - Ref: "AWS::AccountId"
                - ${self:provider.environment.OCR_SNS_TOPIC}
          topicName: ${self:provider.environment.OCR_SNS_TOPIC}
    role: TextractRole



  GetDocuments:
    handler: src/lambda/http/getDocuments.handler
    events:
      - http:
          method: get
          path: documents
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCUMENT_TABLE}/index/${self:provider.environment.DOCUMENT_TABLE_IDX_NAME}

  CreateDocument:
    handler: src/lambda/http/createDocument.handler
    events:
      - http:
          method: post
          path: documents
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/lambda/validator/createDocument.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCUMENT_TABLE}

  UpdateDocument:
    handler: src/lambda/http/updateDocument.handler
    events:
      - http:
          method: patch
          # placeholders {} are sent to the event.pathParameters
          path: documents/{documentId}
          cors: true
          authorizer: Auth
          schema:
            application/json: ${file(src/lambda/validator/updateDocument.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCUMENT_TABLE}

  DeleteDocument:
    handler: src/lambda/http/deleteDocument.handler
    events:
      - http:
          method: delete
          path: documents/{documentId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCUMENT_TABLE}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: documents/{documentId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.DOCUMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCUMENT_TABLE}

resources:
  Resources:
    # Dynamo DB Table for persisting ToDo's
    TodoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          # only specify keys
          # non-key attributes are not required (due to schmealess nature)
          - AttributeName: documentId
            AttributeType: S # string type
          - AttributeName: userId
            AttributeType: S # string type
        KeySchema:
          # composite key ( both together uniquely identify an item)
          - AttributeName: documentId 
            KeyType: HASH # partitionKey : what partition to write item to
       #   - AttributeName: createdAt 
       #     KeyType: RANGE # sortKey : to sort elements with the same partition key
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DOCUMENT_TABLE}
        # LocalSecondaryIndexes (LSI): Like an additional sort key
        # GlobalSecondaryIndexes (GSI) : Creates a copy with another partition / sort key
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DOCUMENT_TABLE_IDX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    S3BucketDocbucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.DOCUMENT_S3_BUCKET}
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt CreatePreviewImageLambdaFunction.Arn
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.DOCUMENT_S3_BUCKET}/*'
        Bucket: 
          Ref: S3BucketDocbucket

    CreatePreviewImagePermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref CreatePreviewImageLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.DOCUMENT_S3_BUCKET}

    # SNS Topic for fetching status of aws textract job
    OcrStatusSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:provider.environment.OCR_SNS_TOPIC} # human readble string e.g. ORC SNS Topic
        TopicName: ${self:provider.environment.OCR_SNS_TOPIC}


    TextractRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "TextractRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "textract.amazonaws.com"
                  - "lambda.amazonaws.com" # hier noetig???
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AWSLambdaExecute"
        Policies:
          - PolicyName: "TextractS3RoleAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "sns:*"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "textract:*"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource: rn:aws:s3:::${self:provider.environment.DOCUMENT_S3_BUCKET}/*
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCUMENT_TABLE}
