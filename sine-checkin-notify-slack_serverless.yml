service: sine-checkin-notify-slack

package:
  include:
    - .serverless-secrets.json
    - handler.js

  artifact: sine-checkin-notify-slack.zip

plugins:
  - serverless-secrets
  - serverless-plugin-zip-symlinks-compress-harder

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 128
  timeout: 10
  cfLogs: true

  stage: ${opt:stage,'prod'}

  # Place into us-west-2
  region: us-west-2

  deploymentBucket:
    name: ${ssm:/serverless/deploymentbucket/prefix}-${self:provider.region}
    blockPublicAccess: true

  # Authorize creation of log groups and putting log events
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:DescribeLogStreams"
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource:
        - 'Fn::Join':
          - ':'
          -
            - 'arn:aws:logs'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'log-group:PremisesVisitorLogs:*:*'

  # Secrets
  environmentSecrets:
    SLACK_TOKEN: '/sine-checkin-notify-slack/${self:provider.stage}/SLACK_TOKEN'
    SLACK_CHANNEL: '/sine-checkin-notify-slack/${self:provider.stage}/SLACK_CHANNEL'
    SINE_API_KEY: '/sine-checkin-notify-slack/${self:provider.stage}/SINE_API_KEY'


custom:
  serverlessSecrets:
    throwOnMissingSecret: true
    providerOptions:
      region: us-west-2

functions:

  injestSineEvents:
    handler: handler.injestSineEvents
    description: Injest and process the Sine notification events by posting them to Slack
    events:
      - http:
          path: sine/notify
          method: post
          integration: lambda
          request:
            template:
              application/json: '{ "payload": $input.json(''$''), "headers": { #foreach($param in $input.params().header.keySet()) "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end #end } }'
          response:
              statusCodes:
                200:
                  pattern: ''
                500:
                  pattern: '.*("(code|details|message)":.*){3}'
                  template:
                    application/json: $input.path("$.errorMessage")

resources:
  Resources:
    premisesVisitorLogGroup:
      Type: AWS::Logs::LogGroup
      DeletionPolicy: Retain
      Properties:
        LogGroupName: PremisesVisitorLogs

    pathmapping:
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        DomainName: "sine.webhooks.cognoa-staging.com"
        RestApiId:
          Ref: ApiGatewayRestApi
