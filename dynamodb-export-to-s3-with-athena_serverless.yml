service:
  name: sls-dynamo-export

frameworkVersion: ">=1.63.0"

provider:
  name: aws
  stage: ${opt:stage, self:custom.defaultStage}
  runtime: go1.x
  region: ap-northeast-1
  timeout: 60
  logRetentionInDays: 14
  deploymentBucket:
    blockPublicAccess: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:ExportTableToPointInTime"
      Resource:
        - ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.dynamo.arn}
    - Effect: "Allow"
      Action:
        - "kms:Encrypt"
        - "kms:Decrypt"
        - "kms:ReEncrypt*"
        - "kms:GenerateDataKey*"
        - "kms:DescribeKey"
        - "kms:CreateGrant"
      Resource:
        - ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.kms.arn}
    - Effect: "Allow"
      Action:
        - "s3:Put*"
        - "s3:Get*"
      Resource:
        - arn:aws:s3:::${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.s3.name}
        - arn:aws:s3:::${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.s3.name}/*
        - arn:aws:s3:::${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.athena.query_result_output_bucket_name}
        - arn:aws:s3:::${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.athena.query_result_output_bucket_name}/*
    - Effect: "Allow"
      Action:
        - "athena:GetNamespace"
        - "athena:GetQueryResults"
        - "athena:GetCatalogs"
        - "athena:GetNamespaces"
        - "athena:CancelQueryExecution"
        - "athena:StartQueryExecution"
        - "athena:StopQueryExecution"
        - "athena:GetQueryExecution"
        - "athena:GetQueryExecutions"
        - "athena:ListQueryExecutions"
        - "athena:GetExecutionEngines"
        - "athena:GetExecutionEngine"
        - "athena:GetTable"
        - "athena:GetTables"
        - "athena:RunQuery"
        - "athena:BatchGetQueryExecution"
      Resource: ["*"]
    - Effect: "Allow"
      Action:
        - "glue:GetTable"
        - "glue:GetDatabase"
        - "glue:GetPartitions"
        - "glue:CreateTable"
        - "glue:UpdateTable"
        - "glue:DeleteTable"
      Resource: ["*"]



custom:
  defaultStage: sample
  otherFile:
    environment:
      sample: ${file(./conf/sample.yml)}

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  to-s3:
    handler: bin/serverless
    memorySize: 128
    environment:
      TZ: "Asia/Tokyo"
    events:
      # sample_dynamodb_table table export
      - schedule:
          rate: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.cron.rate}
          enabled: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.cron.enabled}
          input:
            dynamo_table_arn: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.dynamo.arn}
            s3_bucket_name: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.s3.name}
            kms_arn: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.kms.arn}
            athena_enabled: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.athena.enabled}
            athena_database_name: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.athena.database_name}
            athena_query_result_output_bucket_name: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.athena.query_result_output_bucket_name}
            athena_table_name: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.athena.table_name}
            athena_table_schema: ${self:custom.otherFile.environment.${self:provider.stage}.sample_dynamodb_table.athena.table_schema}
    tags:
      owner: sample
      team: sample
      description: "dynamodb tableのデータを解析用にs3にexportするやーつです"

plugins:
  - serverless-deployment-bucket