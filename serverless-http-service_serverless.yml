service: serverless-aws-nodejs-dynamodb
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
custom:
  tableName: 'users-table-${self:provider.stage}'
provider:
  name: aws 
  runtime: nodejs8.10
  stage: dev
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.tableName}

stepFunctions:
  stateMachines:

    MessageStateMachine:
      events:
        - http:
            path: /case
            method: GET
      definition:
          StartAt: PublishSNSmessage1
          States:
            PublishSNSmessage1:
              Type: Task
              Resource: arn:aws:states:::sns:publish
              Parameters:
                Message: "{ \"answer\": 42 }"
                TopicArn:
                  Ref: AlarmTopic
              Next: PublishSNSmessage2
            PublishSNSmessage2:
              Type: Task
              Resource: arn:aws:states:::sns:publish
              Parameters:
                Message: "{ \"answer\": 0 }"
                TopicArn:
                  Ref: AlarmTopic
              End: true
              
    CallCenterStateMachine:
      events:
        - http:
            path: /case
            method: GET
      definition:
        Comment: "A simple AWS Step Functions state machine that automates a call center support session"
        StartAt: OpenCase
        States:
          OpenCase:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-openCase"
            Next: AssignCase
          AssignCase:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-assignCase"
            Next: CloseCase
          CloseCase:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-closeCase"
            End: true

functions:
  app:
    handler: app.server
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}