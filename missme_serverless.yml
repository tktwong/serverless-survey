service: missme


plugins:
  - aws-amplify-serverless-plugin
  - serverless-pseudo-parameters
  - serverless-plugin-optimize


custom:
  ses_region: ${file(./ses_config.yml):ses_region}
  ses_from_email: ${file(./ses_config.yml):ses_from_email}
  ses_arn: ${file(./ses_config.yml):ses_arn}
  amplify:
    - filename: ../frontend/src/aws-exports.js
      type: javascript
      appClient: WebUserPoolClient
      s3bucket: disabled


package:
  individually: true


provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  environment:
    SERVICES_TABLE: 'services'
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:provider.environment.SERVICES_TABLE}"
  - Effect: 'Allow'
    Action:
      - "ses:SendEmail"
      - "ses:SendRawEmail"
    Resource: ${self:custom.ses_arn}


functions:
  create-service:
    handler: services/create.handler
    environment:
      SERVICES_TABLE: ${self:provider.environment.SERVICES_TABLE}
    events:
     - http:
        path: /services
        method: post
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  update-service:
    handler: services/update.handler
    environment:
      SERVICES_TABLE: ${self:provider.environment.SERVICES_TABLE}
    events:
     - http:
        path: /services/{serviceId}
        method: put
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
        request:
          parameters:
            paths:
              serviceId: true
     - http:
        path: /services/{serviceId}
        method: patch
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
        request:
          parameters:
            paths:
              serviceId: true

  delete-service:
    handler: services/delete.handler
    environment:
      SERVICES_TABLE: ${self:provider.environment.SERVICES_TABLE}
    events:
     - http:
        path: /services/{serviceId}
        method: delete
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
        request:
          parameters:
            paths:
              serviceId: true

  get-service:
    handler: services/list.handler
    environment:
      SERVICES_TABLE: ${self:provider.environment.SERVICES_TABLE}
    events:
     - http:
        path: /services/{serviceId}
        method: get
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
        request:
          parameters:
            paths:
              serviceId: true
     - http:
        path: /services
        method: get
        cors: true
        authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  get-notify:
    handler: notify/get.handler
    environment:
      SERVICES_TABLE: ${self:provider.environment.SERVICES_TABLE}
      SES_REGION: ${self:custom.ses_region}
      SES_FROM_EMAIL: ${self:custom.ses_from_email}
    events:
     - http:
        path: /notify/{serviceId}
        method: get
        cors: true
        request:
          parameters:
            paths:
              serviceId: true

  monitor:
    handler: monitor/monitor.handler
    environment:
      SERVICES_TABLE: ${self:provider.environment.SERVICES_TABLE}
      SES_REGION: ${self:custom.ses_region}
      SES_FROM_EMAIL: ${self:custom.ses_from_email}
    events:
      - schedule: rate(1 hour)


resources:
  Resources:
    # ---
    # User management
    # ---
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Description: "An Amazon Cognito user pool for authenticating users"
      Properties:
        UserPoolName: missme-${self:provider.stage}-user-pool

    # Create a client that is allowed to use the userpool
    WebUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Description: "App Client for Web Usage"
      Properties:
        ClientName: missme-${self:provider.stage}-web-cognitoclient
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }

    # ---
    # Authorizers
    # ---
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [UserPool, Arn]

    # ---
    # DB
    # ---
    ServicesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SERVICES_TABLE}
        AttributeDefinitions:
          - AttributeName: ServiceId
            AttributeType: S
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: ServiceId
            KeyType: HASH
        GlobalSecondaryIndexes:
        - IndexName: user_gsi
          KeySchema:
          - AttributeName: UserId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

