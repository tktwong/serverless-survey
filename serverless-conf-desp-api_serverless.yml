# Welcome to Serverless!

service: serverless-mwf-conf-desp-api
# app and org for use with dashboard.serverless.com
app: serverless-mwf-conf-desp-api-app
org: ralphbaines

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-2
  environment:
    REACT_APP_AUTH_USERNAME: admin
    REACT_APP_AUTH_PASSWORD: n3s4g3gj
    # REACT_APP_AUTH_USERNAME: ${env:REACT_APP_AUTH_USERNAME}
    # REACT_APP_AUTH_PASSWORD: ${env:REACT_APP_AUTH_PASSWORD}

plugins:
  - serverless-offline

functions:
  getconfirmed_despatches:
    handler: Controller/confirmed_despatchController.getconfirmed_despatches
    events:
      - http:
          path: /confirmed_despatches
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  insertconfirmed_despatches:
    handler: Controller/confirmed_despatchController.insertconfirmed_despatches
    events:
      - http:
          path: /confirmed_despatches
          method: POST
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  deleteconfirmed_despatches:
    handler: Controller/confirmed_despatchController.deleteconfirmed_despatches
    events:
      - http:
          path: /confirmed_despatches/byyearweek/{parYearWeek}
          method: DELETE
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request

  getdespatch_parcels:
    handler: Controller/despatch_parcelController.getdespatch_parcels
    events:
      - http:
          path: /despatch_parcels
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  insertdespatch_parcels:
    handler: Controller/despatch_parcelController.insertdespatch_parcels
    events:
      - http:
          path: /despatch_parcels
          method: POST
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  deletedespatch_parcels:
    handler: Controller/despatch_parcelController.deletedespatch_parcels
    events:
      - http:
          path: /despatch_parcels/byyearweek/{parYearWeek}
          method: DELETE
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request

  getdpd_invoices:
    handler: Controller/dpd_invoiceController.getdpd_invoices
    events:
      - http:
          path: /dpd_invoices
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  insertdpd_invoicees:
    handler: Controller/dpd_invoiceController.insertdpd_invoices
    events:
      - http:
          path: /dpd_invoices
          method: POST
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  deletedpd_invoicesbyinvno:
    handler: Controller/dpd_invoiceController.deletedpd_invoicesbyinvno
    events:
      - http:
          path: /dpd_invoices/byinvno/{parInvoiceNumber}
          method: DELETE
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request

  GetAllConfirmedDespatches:
    handler: Controller/spController.GetAllConfirmedDespatches
    events:
      - http:
          path: /sp/GetAllConfirmedDespatches
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  GetAllInvoices:
    handler: Controller/spController.GetAllInvoices
    events:
      - http:
          path: /sp/GetAllInvoices
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  GetCustomerSummary:
    handler: Controller/spController.GetCustomerSummary
    events:
      - http:
          path: /sp/GetCustomerSummary
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  GetServiceSummary:
    handler: Controller/spController.GetServiceSummary
    events:
      - http:
          path: /sp/GetServiceSummary
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  GetCustomers:
    handler: Controller/spController.GetCustomers
    events:
      - http:
          path: /sp/GetCustomers
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  GetYearWeeks:
    handler: Controller/spController.GetYearWeeks
    events:
      - http:
          path: /sp/GetYearWeeks
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  GetInvBySRefPc:
    handler: Controller/spController.GetInvBySRefPc
    events:
      - http:
          path: /sp/GetInvBySRefPc
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  GetParcBySRefPc:
    handler: Controller/spController.GetParcBySRefPc
    events:
      - http:
          path: /sp/GetParcBySRefPc
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  GetInvExceptions:
    handler: Controller/spController.GetInvExceptions
    events:
      - http:
          path: /sp/GetInvExceptions
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  GetCustWeeklyDespatchSummary:
    handler: Controller/spController.GetCustWeeklyDespatchSummary
    events:
      - http:
          path: /sp/GetCustWeeklyDespatchSummary
          method: GET
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
          
  postlogin:
    handler: Controller/loginController.postlogin
    events:
      - http:
          path: /login
          method: POST
          cors: true
          authorizer:
            name: basicAuth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request

  basicAuth:
    handler: auth.handler

resources:
  Resources:
    GatewayResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: ApiGatewayRestApi
        StatusCode: '401'  