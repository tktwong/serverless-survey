service:
  name: movies-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    MOVIES_TABLE: Movies-${self:provider.stage}
    S3_BUCKET: s3-ry-movies-poster-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    USER_ID_INDEX: UserIdIndex

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Movies API
        description: Movies API (Udacity CDND Capstone Project)
    models:
      - name: CreateMovieRequestModel
        contentType: application/json
        schema: ${file(src/validators/create-movie-request.json)}
      - name: UpdateMovieRequestModel
        contentType: application/json
        schema: ${file(src/validators/update-movie-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetMovies:
    handler: src/lambda/http/getMovies.handler
    events:
      - http:
          method: get
          path: movies
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:service.name}-get-movies-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIES_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  CreateMovie:
    handler: src/lambda/http/createMovie.handler
    events:
      - http:
          method: post
          path: movies
          cors: true
          authorizer: Auth
          reqValidatorName: RequestValidator
          documentation:
            summary: Create Movie
            description: Creates a new Movie entry
            requestModels:
              'application/json': CreateMovieRequestModel
    iamRoleStatementsName: ${self:service.name}-create-movie-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIES_TABLE}

  UpdateMovie:
    handler: src/lambda/http/updateMovie.handler
    events:
      - http:
          method: patch
          path: movies/{movieId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestValidator
          documentation:
            summary: Update Movie
            description: Updates an existing movie entry
            requestModels:
              'application/json': UpdateMovieRequestModel
    iamRoleStatementsName: ${self:service.name}-update-movie-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIES_TABLE}

  DeleteMovie:
    handler: src/lambda/http/deleteMovie.handler
    events:
      - http:
          method: delete
          path: movies/{movieId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:service.name}-delete-movie-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIES_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: movies/{movieId}/image
          cors: true
    iamRoleStatementsName: ${self:service.name}-generate-url-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MOVIES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*

resources:
  Resources:
    Gateway:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    MoviesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: movieId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: movieId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.MOVIES_TABLE}

    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentBucket
