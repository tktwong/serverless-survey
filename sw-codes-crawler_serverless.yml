service: sw-code-crawler
package:
  exclude:
    - config.json

provider:
  name: aws
  runtime: python3.7
  stage: prod
  region: eu-west-1
  memorySize: 128
  timeout: 60

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "CodesTendancieuBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "CodesTendancieuBucket"
            - "/*"

functions:
  crawl:
    memorySize: 128
    handler: crawler.crawl
    events:
       - schedule: cron(*/15 * * * ? *)

#    Define function environment variables here
    environment:
      reddit_client_id: ${file(./config.json):reddit_client_id}
      reddit_client_secret: ${file(./config.json):reddit_client_secret}
      distribution_id: ${file(./config.json):distribution_id}
      bucket: "sw-codes-tendancieu-eu-west-1"
      discord_aldanet_webhook: ${file(./config.json):discord_aldanet_webhook}
      discord_unicorn_webhook: ${file(./config.json):discord_unicorn_webhook}

# you can add CloudFormation resource templates here
resources:
 Resources:
  CrawlLogGroup:
      Type: AWS::Logs::LogGroup
      Properties: 
        RetentionInDays: 14
  CodesTendancieuBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: sw-codes-tendancieu-eu-west-1
        AccessControl: PublicReadWrite
        WebsiteConfiguration:
          IndexDocument: index.html
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            ExposedHeaders: [Date]
            Id: myCORSRuleId1
            MaxAge: '3600'
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref CodesTendancieuBucket
                - /*
          - Sid: AllowLambdaRole1
            Effect: Allow
            Principal:
              AWS: !GetAtt [ IamRoleLambdaExecution, Arn ]
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref CodesTendancieuBucket
                - /*
          - Sid: AllowLambdaRole2
            Effect: Allow
            Principal:
              AWS: !GetAtt [ IamRoleLambdaExecution, Arn ]
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref CodesTendancieuBucket
      Bucket: !Ref CodesTendancieuBucket

plugins:
  - serverless-python-requirements
