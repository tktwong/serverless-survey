service:
  name: conecto-api-company

package:
  individually: true
  excludeDevDependencies: false

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: ../../webpack.config.js
    includeModules: false
    packager: 'npm'
  splitStacks:
    perFunction: false
    perType: true
  dotenv:
    basePath: ../../

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  memorySize: 1024
  environment:
    COMPANY_STATS_TABLE: ${file(../database/serverless.yml):custom.companyStatsTableName}
    NOTIFICATIONS_TABLE: ${file(../database/serverless.yml):custom.notificationsTableName}
    COMPANYSCORE_TABLE: ${file(../database/serverless.yml):custom.companyScoreTableName}
    CONTACTSCORE_TABLE: ${file(../database/serverless.yml):custom.contactScoreTableName}
    DEALINFOS_TABLE: ${file(../database/serverless.yml):custom.dealInfosTableName}
    COMPANYADDRESSES_TABLE: ${file(../database/serverless.yml):custom.companyAddressesTableName}
    CONTACTADDRESSASSIGNMENTS_TABLE: ${file(../database/serverless.yml):custom.contactAddressAssignments}
    TZ: ${env:TZ}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiRootResourceId
  ContactsCognitoUserPool:
    'Fn::ImportValue': ${self:custom.stage}-ContactsCognitoUserPool
  iamRoleStatements: ${file(../contacts/serverless.yml):provider.iamRoleStatements}

functions:

  fetch-company-addresses:
    handler: handler.fetchAddresses
    events:
      - http:
          authorizer: aws_iam
          path: company/addresses
          method: get
          cors:
            origins: ${file(../contacts/serverless.yml):custom.cors.${self:custom.stage}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - withCredentials
            allowCredentials: true
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'

  create-company-address:
    handler: handler.createAddress
    events:
      - http:
          authorizer: aws_iam
          path: company/address
          method: post
          cors:
            origins: ${file(../contacts/serverless.yml):custom.cors.${self:custom.stage}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - withCredentials
            allowCredentials: true
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'

  delete-company-address:
    handler: handler.deleteAddress
    events:
      - http:
          authorizer: aws_iam
          path: company/address/{addressId}
          method: delete
          cors:
            origins: ${file(../contacts/serverless.yml):custom.cors.${self:custom.stage}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - withCredentials
            allowCredentials: true
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'

  assign-company-address:
    handler: handler.assignAddress
    events:
      - http:
          authorizer: aws_iam
          path: company/address/assign/{addressId}
          method: post
          cors:
            origins: ${file(../contacts/serverless.yml):custom.cors.${self:custom.stage}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - withCredentials
            allowCredentials: true
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'

  fetch-company-employees:
    handler: handler.fetchEmployees
    events:
      - http:
          authorizer: aws_iam
          method: get
          path: company/employees
          cors:
            origins: ${file(../contacts/serverless.yml):custom.cors.${self:custom.stage}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - withCredentials
            allowCredentials: true
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'

  delete-company-employee:
    handler: handler.deleteEmployee
    environment:
      USER_POOL: ${self:provider.ContactsCognitoUserPool}
    events:
      - http:
          authorizer: aws_iam
          method: delete
          path: company/employee/{encryptedEmployeeId}
          cors:
            origins: ${file(../contacts/serverless.yml):custom.cors.${self:custom.stage}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - withCredentials
            allowCredentials: true
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'

  update-company-infos:
    handler: handler.updateCompanyInfos
    events:
      - http:
          authorizer: aws_iam
          method: put
          path: company/update-infos
          cors:
            origins: ${file(../contacts/serverless.yml):custom.cors.${self:custom.stage}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - withCredentials
            allowCredentials: true
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'

  update-company-owner:
    handler: handler.updateCompanyOwner
    events:
      - http:
          authorizer: aws_iam
          method: post
          path: company/update-owner/{encryptedEmployeeId}
          cors:
            origins: ${file(../contacts/serverless.yml):custom.cors.${self:custom.stage}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - withCredentials
            allowCredentials: true
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'

  list-company-charges:
    handler: handler.listCompanyCharges
    events:
      - http:
          authorizer: aws_iam
          method: get
          path: company/charges
          cors:
            origins: ${file(../contacts/serverless.yml):custom.cors.${self:custom.stage}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Access-Control-Allow-Methods
              - Access-Control-Allow-Headers
              - withCredentials
            allowCredentials: true
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'
