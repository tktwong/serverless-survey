# NOTE: update this with your service name
service: true-fan-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  leaguesTableName: ${self:custom.stage}-leagues
  leaguesUserGSI: ${self:custom.leaguesTableName}-USER-GSI
  leaguesTournamentGSI: ${self:custom.leaguesTableName}-TOURNAMENT-GSI
  leagueUserMappingTableName: ${self:custom.stage}-league-user-mapping
  leagueUserMappingGSI: ${self:custom.leagueUserMappingTableName}-USER-GSI
  survivorPredictionTableName: ${self:custom.stage}-survivor-prediction
  playersTableName: ${self:custom.stage}-players
  scheduleTableName: ${self:custom.stage}-schedule
  scheduleBucket: ${self:custom.stage}-tru-fan-config
  userTableName: ${self:custom.stage}-users
  # wsConnectionsTableName: ${self:custom.stage}-ws-connections

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  memorySize: 512
  # websocketApiRouteSelectionExpression: $request.body.action
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    leaguesTableName: ${self:custom.leaguesTableName}
    leaguesUserGSI: ${self:custom.leaguesUserGSI}
    leaguesTournamentGSI: ${self:custom.leaguesTournamentGSI}
    leagueUserMappingTableName: ${self:custom.leagueUserMappingTableName}
    leagueUserMappingGSI: ${self:custom.leagueUserMappingGSI}
    scheduleBucket: ${self:custom.scheduleBucket}
    survivorPredictionTableName: ${self:custom.survivorPredictionTableName}
    playersTableName: ${self:custom.playersTableName}
    scheduleTableName: ${self:custom.scheduleTableName}
    userTableName: ${self:custom.userTableName}
    # wsConnectionsTableName: ${self:custom.wsConnectionsTableName}

  iamRoleStatements:
    # - Effect: Allow
    #   Action:
    #     - "execute-api:ManageConnections"
    #   Resource:
    #     - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
        - s3:ListBucket
        - s3:GetObject
        - ses:SendTemplatedEmail
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [LeaguesTable, Arn]
        - "Fn::Join":
            - "/"
            - - "Fn::GetAtt": [LeaguesTable, Arn]
              - "index/*"
        - "Fn::GetAtt": [LeagueUserMappingTable, Arn]
        - "Fn::Join":
            - "/"
            - - "Fn::GetAtt": [LeagueUserMappingTable, Arn]
              - "index/*"
        - "Fn::GetAtt": [SurvivorPredictionTable, Arn]
        - "Fn::Join":
            - "/"
            - - "Fn::GetAtt": [SurvivorPredictionTable, Arn]
              - "index/*"
        - "Fn::GetAtt": [ScheduleBucket, Arn]
        - "Fn::Join":
            - "/"
            - - "Fn::GetAtt": [ScheduleBucket, Arn]
              - "*"
        - "Fn::GetAtt": [ScheduleTable, Arn]
        - "Fn::Join":
            - "/"
            - - "Fn::GetAtt": [ScheduleTable, Arn]
              - "*"
        - "Fn::GetAtt": [PlayersTable, Arn]
        - "Fn::Join":
            - "/"
            - - "Fn::GetAtt": [PlayersTable, Arn]
              - "*"
        - "Fn::GetAtt": [UserTable, Arn]
        - "Fn::Join":
            - "/"
            - - "Fn::GetAtt": [UserTable, Arn]
              - "*"
        - "arn:aws:ses:${self:provider.region}:*:*"
        # - "Fn::GetAtt": [WSConnectionsTable, Arn]

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  # DynamoDB
  - ${file(resources/dynamo-db.yml)}
  # S3
  - ${file(resources/s3.yml)}

functions:
  post-sign-up:
    handler: handler.postSignUp
    events:
      - cognitoUserPool:
          pool: ${self:custom.stage}-user-pool
          trigger: PostConfirmation
          existing: true

  create-league:
    handler: handler.createLeague
    events:
      - http:
          path: create-league
          method: post
          cors: true
          authorizer: aws_iam

  get-leagues-by-user:
    handler: handler.getLeaguesByUser
    events:
      - http:
          path: get-leagues/{user}
          method: get
          cors: true
          authorizer: aws_iam

  get-league:
    handler: handler.getLeague
    events:
      - http:
          path: get-league/{leagueName}
          method: get
          cors: true
          authorizer: aws_iam

  get-league-members:
    handler: handler.getLeagueMembers
    events:
      - http:
          path: get-league-members/{tournament}/{leagueName}
          method: get
          cors: true
          authorizer: aws_iam

  set-league-members:
    handler: handler.setLeagueMembers
    events:
      - http:
          path: set-league-members/{tournament}/{leagueName}
          method: post
          cors: true
          authorizer: aws_iam

  get-schedule:
    handler: handler.getSchedule
    events:
      - http:
          path: get-schedule/{tournament}
          method: get
          cors: true
          authorizer: aws_iam

  set-survivor-prediction:
    handler: handler.setSurvivorPrediction
    events:
      - http:
          path: set-survivor-prediction/{tournament}/{leagueName}/{user}
          method: post
          cors: true
          authorizer: aws_iam

  get-survivor-prediction:
    handler: handler.getSurvivorPrediction
    events:
      - http:
          path: get-survivor-prediction/{tournament}/{leagueName}/{user}
          method: get
          cors: true
          authorizer: aws_iam

  get-players:
    handler: handler.getPlayers
    events:
      - http:
          path: get-players/{tournament}/{team}
          method: get
          cors: true
          authorizer: aws_iam

  upload-players:
    handler: handler.playerUploader
    events:
      - http:
          path: upload-players/{tournament}
          method: post
          cors: true
          authorizer: aws_iam

  upload-schedule:
    handler: handler.scheduleUploader
    events:
      - http:
          path: upload-schedule/{tournament}
          method: post
          cors: true
          authorizer: aws_iam

  update-schedule:
    handler: handler.scheduleUpdater
    events:
      - http:
          path: update-schedule/{tournament}
          method: post
          cors: true
          authorizer: aws_iam

  get-scores:
    handler: handler.getScores
    events:
      - http:
          path: get-scores/{tournament}/{user}
          method: get
          cors: true
          authorizer: aws_iam

  get-score:
    handler: handler.getScore
    events:
      - http:
          path: get-score/{tournament}/{leagueName}/{user}
          method: get
          cors: true
          authorizer: aws_iam
  
  get-total-scores:
    handler: handler.getTotalTournamentScores
    events:
      - http:
          path: get-total-scores/{tournament}
          method: get
          cors: true
          authorizer: aws_iam
    
  update-score:
    handler: handler.updateScore
    events:
      - http:
          path: update-score/{tournament}/{leagueName}/{user}
          method: put
          cors: true
          authorizer: aws_iam

  # ws-connection:
  #   handler: handler.wsConnectionHandler
  #   events:
  #     - websocket:
  #         route: $connect
  #     - websocket:
  #         route: $disconnect
  
  # ws-default:
  #   handler: handler.wsDefaultMessages
  #   events:
  #     - websocket:
  #         route: $default
