service: java-serverless

provider:
  name: aws
  region: us-east-1
  runtime: java11
  stage: ${opt:stage, 'dev'}
  # If you want to use API key access token to your endpoints, uncomment those lines and
  # make sure to add the 'private' property of your http event as true
  #
  # apiKeys:
  #  - ${self:provider.stage}_${self:service}_xApiKey

package:
  # This is the result artifact after the build process with Gradle
  # Be sure that the name of the artifact is the same here and in the build.gradle file
  artifact: build/distributions/javaServerless.zip

functions:
  ping:
    handler: com.github.eduardoay.handlers.Ping
    events:
      - http:
          path: ping
          method: get
          # private: true

plugins:
  # this is a plugin that helps you to run your http API locally
  - serverless-offline
  # This plugin will load the needed environment variables for your API depending of the invoked stage.
  # When you execute locally the envs will be taken from the '.env.development' file
  # When you deploy your app to staging using `sls deploy --stage staging` the loaded file will be '.env.staging'
  # When you deploy your app to production using `sls deploy --stage prod` the loaded file will be '.env.prod'
  # When the test are executed Gradle will load the env vars from '.env.test'
  # If you want use a diferent stage names to deploy your app, you need to change the env files extension to
  # match with the new stage names.
  - serverless-dotenv-plugin
