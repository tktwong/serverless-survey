service:
  name: serverless-videographer-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  usagePlan:
    quota:
      limit: 1000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    VIDEOGRAPHERS_TABLE: Videographers-${self:provider.stage}
    VIDEOS_TABLE: Videos-${self:provider.stage}
    VIDEOS_S3_BUCKET: serverless-videogapher-videos-bucket-${self:provider.stage}
    PROFILE_PIC_S3_BUCKET: serverless-videographer-profile-pic-bucket-${self:provider.stage}
    COVER_PHOTO_S3_BUCKET: serverless-videographer-cover-photo-bucket-${self:provider.stage}
    VIDEO_THUMBNAIL_S3_BUCKET: serverless-video-thumbnail-bucket-${self:provider.stage}

    APP_DB_TABLE: reel-people-table-${self:provider.stage}
    TIMESTAMP_INDEX: TimestampIndex
    MEDIA_TYPE_INDEX: MediaTypeIndex
    FIRST_LAST_NAME_INDEX: FirstLastNameIndex

    CONNECTIONS_TABLE: Connections-videographer-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    VIDEO_ID_INDEX: VideoIdIndex
    VIDEO_TIMESTAMP_INDEX: VideoTimeIndex
    UPDATE_VIDEOGRAPHER_QUEUE: Update-videographer-queue-${self:provider.stage}

custom:
  topicName: emailsTopic-${self:provider.stage}

  serverless-offline:
    port: 3003

  dynamodb:
    stages: 
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Videographer Portfolio Api
        description: Serverless application for sharing videographer videos

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  VideographersResource:
    handler: src/lambda/http/videographers/videographersResource.handler
    iamRoleStatementsName: videographersResourceRole
    events: 
      - http: 
          method: get
          path: videographers/{videographerId}
          cors: true
      - http: 
          method: get
          path: videographers
          cors: true
      - http: 
          method: patch
          path: videographers
          cors: true
      - http:
          method: post
          path: videographers/{videographerId}/addSubscriber/{phoneNumber}
          cors: true
          documentation:
            summary: Subscribes phone number to a videographer
      - http: 
          method: post
          path: videographers
          cors: true
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}/index/${self:provider.environment.FIRST_LAST_NAME_INDEX}
      - Effect: Allow
        Action:
          - SSM:GetParameter
        Resource: '*'

  SMSInbound: 
      handler: src/lambda/http/sms/inboundSMS.handler
      events:
      - http:
          method: post
          path: sms
          cors: true
          documentation:
            summary: Inbound SMS messages
      iamRoleStatements:
        - Effect: "Allow" 
          Action:
          - "xray:PutTraceSegments"
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}/index/${self:provider.environment.FIRST_LAST_NAME_INDEX}

  AddProfilePicture:
    handler: src/lambda/http/videographers/addProfilePicture.handler
    events:
      - http:
          method: post
          cors: true
          path: videographers/{videographerId}/profilePicture
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.PROFILE_PIC_S3_BUCKET}/*
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"    

  AddCoverPhoto:
    handler: src/lambda/http/videographers/addCoverPhoto.handler
    events:
      - http:
          method: post
          cors: true
          path: videographers/{videographerId}/coverPhoto
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.COVER_PHOTO_S3_BUCKET}/*
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"    

  GetVideo:
    handler: src/lambda/http/videos/getVideo.handler
    events:
      - http:
          method: get
          path: videos/{videoId}
          corst: true
          documentation:
            summary: Get a single video
            description: Gets a single video from a videographer's portfolio
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}/index/${self:provider.environment.MEDIA_TYPE_INDEX}

  GetVideos:
    handler: src/lambda/http/videos/getVideos.handler
    events:
      - http:
          method: get
          path: videos
          cors: true
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.VIDEO_TIMESTAMP_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}/index/${self:provider.environment.MEDIA_TYPE_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}

  UpdateVideographerQueue:
    handler: src/lambda/http/updateVideographerQueue.handler
    iamRoleStatementsName: updateVideographQueueRole
    events:
      - http:
          method: get
          path: videographer/queue
          cors: true
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:getQueueUrl
        Resource:
          Fn::GetAtt: [ UpdateVideographerQueue, Arn]

  UpdateVideogreapherFromQueue:
    handler: src/lambda/sqs/updateVideographerFromQueue.handler
    iamRoleStatementsName: updateVideoGraphQueRole
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - UpdateVideographerQueue
              - Arn
          batchSize: 5
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"

  AddVideo: 
    handler: src/lambda/http/videos/addVideo.handler
    events:
      - http:
          method: post
          path: videographers/{videographerId}/videos
          cors: true
          authorizer: Auth
          documentation:
            summary: Add a new video
            description: Add a new video to a videographer's portfolio
    iamRoleStatements:
      - Effect: "Allow"
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}
  
  EditVideo: 
    handler: src/lambda/http/videos/editVideo.handler
    events:
      - http:
          method: patch
          path: videos/{videoId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Edit a video
            description: Add a video in a videographer's portfolio
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*
      - Effect: Allow
        Action: 
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}

  AddThumbnailPhoto:
    handler: src/lambda/http/videos/addThumbnailPhoto.handler
    events:
      - http:
          method: post
          cors: true
          path: videos/{videoId}/thumbnailPhoto
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEO_THUMBNAIL_S3_BUCKET}/*
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"   

  DeleteVideo: 
    handler: src/lambda/http/videos/deleteVideo.handler
    events:
      - http:
          method: delete
          path: videographers/{videographerId}/videos/{videoUrl}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete a video
            description: Delete a video from a videographer's portfolio
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*
      - Effect: Allow
        Action: 
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}

  SendNewVideoNotification:
    handler: src/lambda/dynamodb/newVideoNotification.handler
    iamRoleStatementsName: sendNotificationRole
    events:
      - stream: 
          type: dynamodb
          arn: !GetAtt AppDynamoDBTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APP_DB_TABLE}
      - Effect: Allow
        Action:
          - SSM:GetParameter
        Resource: '*'
        
  SendNotifications:
    environment: 
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow 
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
        Resource: 'arn:aws:execute-api:*:*:*/dev/POST/@connections/*'

  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow 
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: "Allow" 
        Action:
        - "xray:PutTraceSegments"
        Resource: "*"
      - Effect: Allow 
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

resources:
  Resources:
    UpdateVideographerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.UPDATE_VIDEOGRAPHER_QUEUE}

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    VideographersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VIDEOGRAPHERS_TABLE}

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    VideosBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.VIDEOS_S3_BUCKET}
        NotificationConfiguration: 
          TopicConfigurations: 
          - Event: s3:ObjectCreated:*
            Topic: !Ref VideosTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ProfilePicBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PROFILE_PIC_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ThumbnailPhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.VIDEO_THUMBNAIL_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ThumbnailBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.VIDEO_THUMBNAIL_S3_BUCKET}/*'
        Bucket: !Ref ThumbnailPhotoBucket

    CoverPhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.COVER_PHOTO_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    CoverPhotoBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.COVER_PHOTO_S3_BUCKET}/*'
        Bucket: !Ref CoverPhotoBucket
        
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*'
            - Sid: OnlyVideoUploads
              Effect: Allow
              Principal: '*'
              Action: 's3:PutObject'
              Resource: ["arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*.mp4"]
            # - Sid: OnlyVideoUploads
            #   Effect: Deny
            #   Action: 's3:PutObject'
            #   Principal: '*'
            #   NotResource: ["arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*.mp4"]
        Bucket: !Ref VideosBucket
        
    ProfilePicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.PROFILE_PIC_S3_BUCKET}/*'
        Bucket: !Ref ProfilePicBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref VideosTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}
        Topics:
          - !Ref VideosTopic    

    SendNotificationsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref SendNotificationsLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}

    VideosTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Videos topic
        TopicName: ${self:custom.topicName}

    AppDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: mediaType
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: firstName
            AttributeType: S
          - AttributeName: lastName
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.MEDIA_TYPE_INDEX}
            KeySchema:
            - AttributeName: mediaType
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
            Projection: 
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.TIMESTAMP_INDEX}
            KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
            Projection: 
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.FIRST_LAST_NAME_INDEX}
            KeySchema: 
            - AttributeName: lastName
              KeyType: HASH
            - AttributeName: firstName
              KeyType: RANGE
            Projection: 
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.APP_DB_TABLE}
