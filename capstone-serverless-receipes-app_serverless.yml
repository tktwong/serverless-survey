service:
  name: serverless-rcp-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
 

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment: 
    RECEIPES_TABLE: Receipes-${self:provider.stage}
    AUTH_0_SECRET: BfDhe6Tsgg3ipfuHTUVV-GuxcQAVu_-mYhWyNCEAKEtwik5V14qix-qR2hpY1FYP
    CREATED_AT_INDEX: CreatedAtIndex
    IMAGES_S3_BUCKET: serverless-recepe-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetReceipes:
    handler: src/lambda/http/getReceipes.handler
    events:
      - http:
          method: get
          path: receipes
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
     
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPES_TABLE}/index/${self:provider.environment.CREATED_AT_INDEX}
      
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
  # TODO: Configure this function
  
  CreateReceipe:
    handler: src/lambda/http/createReceipe.handler
    events:
      - http:
          method: post
          path: receipes
          cors: true
          authorizer: Auth
  
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
     
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPES_TABLE}/index/${self:provider.environment.CREATED_AT_INDEX}        
  # TODO: Configure this function
  UpdateReceipe:
    handler: src/lambda/http/updateReceipe.handler
    events:
      - http:
          method: patch
          path: receipes/{receipeId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query     
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPES_TABLE}
   
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
  # TODO: Configure this function
  DeleteReceipe:
    handler: src/lambda/http/deleteReceipe.handler
    events:
      - http:
          method: delete
          path: receipes/{receipeId}
          cors: true
          authorizer: Auth
    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query     
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPES_TABLE}

      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: receipes/{receipeId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query     
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECEIPES_TABLE}

      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    ReceipesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: receipeId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
       
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: receipeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECEIPES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    AttachmentsBucket:
      Type: AWS::S3::Bucket
    
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}     
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    
