service: mech-service

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 128
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  timeout: 30
  environment:
    CUSTOMERSDB: ${self:service}-${self:provider.stage}-customers
    JOBSDB: ${self:service}-${self:provider.stage}-jobs
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    ARTIFICIAL_DELAY: ${opt:ARTIFICIAL_DELAY, 'false'}
  iamRoleStatements:
    - Effect: Allow
      Action: "*"
      Resource: "arn:aws:dynamodb:${self:provider.environment.REGION}:*:table/${self:service}-${self:provider.stage}-*"

functions:
  graphql:
    handler: src/handler.graphql
    events:
    - http:
        path: graphql
        method: post
        cors: true
    - http:
        path: graphql
        method: get
        cors: true

resources:
  Resources:
    customersDB:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CUSTOMERSDB}
    JobsDB:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.JOBSDB}

custom:
  webpack:
    packager: 'yarn'
    includeModules: true
  dynamodb:
    start:
      seed: true
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev
    seed:
      domain:
        sources:
          - table: ${self:service}-${self:provider.stage}-customers
            sources: [./mockData/customers.json]
          - table: ${self:service}-${self:provider.stage}-jobs
            sources: [./mockData/jobs.json]

plugins:
  - serverless-offline
  - serverless-dynamodb-local
