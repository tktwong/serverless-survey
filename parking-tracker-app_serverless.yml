service: parking-tracker-app-api

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-west-2

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /checkin
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: checkin
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /checkin/{checkinDate}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: checkin/{checkinDate}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /checkin
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: checkin
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /checkin/{checkinDate}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: checkin/{checkinDate}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /checkin/{checkinDate}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: checkin/{checkinDate}
          method: delete
          cors: true
          authorizer: aws_iam

  getTotalSlots:
      # Defines an HTTP API endpoint that calls the main function in list.js
      # - path: url path is /checkin
      # - method: GET request
      handler: getSlotTotal.main
      events:
        - http:
            path: checkin/slots
            method: get
            cors: true
            authorizer: aws_iam

  getListForDate:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /checkin
    # - method: GET request
    handler: getListForDate.main
    events:
      - http:
          path: checkin/{checkinDate}/date
          method: get
          cors: true
          authorizer: aws_iam

  getUserDataForDate:
      # Defines an HTTP API endpoint that calls the main function in list.js
      # - path: url path is /checkin
      # - method: GET request
      handler: getUserDataForDate.main
      events:
        - http:
            path: checkin/{checkinDate}/user
            method: post
            cors: true
            authorizer: aws_iam
