service: lexofood
provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  memorySize: 256 # Overwrite the default memory size. Default is 1024
  timeout: ${self:custom.${self:provider.stage}.lambdaTimeout, "5"} # default is 6
  versionFunctions: false # Optional function versioning
  stackTags: # Optional CF stack tags
    name: lexofood-${self:provider.stage}
  environment:
    DYNAMO_TABLE_PREFIX: ${self:provider.stage}-
    REDIS_URL: { Fn::Join : ["", ["redis://", { Fn::GetAtt : [cacheCluster, "RedisEndpoint.Address"]}, ":", { Fn::GetAtt : [cacheCluster, "RedisEndpoint.Port"]}]]}
    LEX_BOT_NAME: ${self:custom.config.lexBotName, env:LEX_BOT_NAME}
    LEX_BOT_ALIAS: ${self:custom.config.lexBotAlias, env:LEX_BOT_ALIAS}
    GCP_PROJECT_ID: ${self:custom.config.gcpProjectId, env:GCP_PROJECT_ID}
    GCP_API_KEY: ${self:custom.config.gcpApiKey, env:GCP_API_KEY}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to invoke Lex Runtime
        - lex:PostContent
        - lex:PostText
      Resource: "arn:aws:lex:*:*:bot:${self:custom.config.lexBotName, env:LEX_BOT_NAME}:${self:custom.config.lexBotAlias, env:LEX_BOT_ALIAS}"
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
  vpc:
    securityGroupIds:
      - { Ref : lambdaExecSecurityGroup }
    subnetIds:
      - { Ref : subnetAPrivate }
      - { Ref : subnetBPrivate }
      - { Ref : subnetCPrivate }
custom:
  defaultStage: dev
  config: ${file(./config.yml)}
  serverless-offline:
    babelOptions:
      presets: ["es2015", "stage-2"]
    resourceRoutes: true
  webpack:
    config: ./webpack.config.js
  profiles:
    dev: lexofood-dev
    prod: lexofood-prod
  dev:
    vpcCidrPrefix: 10.101
    lambdaTimeout: 2
  prod:
    vpcCidrPrefix: 10.100
functions:
  messengerMessage:
    handler: messenger/bot.message
    events:
      - http: post messenger
      - http: get messenger
    environment:
      FB_VERIFY_TOKEN: ${self:custom.config.fbVerifyToken, env:FB_VERIFY_TOKEN}
      FB_PAGE_ACCESS_TOKEN: ${self:custom.config.fbPageAccessToken, env:FB_PAGE_ACCESS_TOKEN}
      FB_API_VERSION: ${self:custom.config.fbApiVersion, "2.9"}
  lex:
    handler: lib/lex.handle
    events:
      - http: post lex
  runCrawler:
    handler: takeaway/crawler.run
    events:
      - schedule: cron(30 0,6,12 * * ? *)
resources:
  Resources:
    botVpc:
      Type: "AWS::EC2::VPC"
      Properties: 
        CidrBlock: "${self:custom.${self:provider.stage}.vpcCidrPrefix}.0.0/16"
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags:
          - Key: "Name"
            Value: "lexofood-vpc-${self:provider.stage}"
    subnetAPublic: 
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: { Fn::Select : ["0", { Fn::GetAZs : "" }]}
        CidrBlock: "${self:custom.${self:provider.stage}.vpcCidrPrefix}.0.0/20"
        VpcId: { Ref: botVpc }
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: "Name"
            Value: "A Public"
          - Key: "Reach"
            Value: "public"
    subnetBPublic: 
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: { Fn::Select : ["1", { Fn::GetAZs : "" }]}
        CidrBlock: "${self:custom.${self:provider.stage}.vpcCidrPrefix}.16.0/20"
        VpcId: { Ref : botVpc }
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: "Name"
            Value: "B Public"
          - Key: "Reach"
            Value: "public"
    subnetCPublic:
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: { Fn::Select : ["2", { Fn::GetAZs : "" }] }
        CidrBlock: "${self:custom.${self:provider.stage}.vpcCidrPrefix}.32.0/20"
        VpcId: { Ref : botVpc }
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: "Name"
            Value: "C Public"
          - Key: "Reach"
            Value: "public"
    subnetAPrivate: 
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: { Fn::Select : ["0", { Fn::GetAZs : "" }]}
        CidrBlock: "${self:custom.${self:provider.stage}.vpcCidrPrefix}.48.0/20"
        VpcId: { Ref: botVpc }
        Tags: 
          - Key: "Name"
            Value: "A Private"
          - Key: "Reach"
            Value: "private"
    subnetBPrivate: 
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: { Fn::Select : ["1", { Fn::GetAZs : "" }]}
        CidrBlock: "${self:custom.${self:provider.stage}.vpcCidrPrefix}.64.0/20"
        VpcId: { Ref: botVpc }
        Tags: 
          - Key: "Name"
            Value: "B Private"
          - Key: "Reach"
            Value: "private"
    subnetCPrivate: 
      Type: "AWS::EC2::Subnet"
      Properties:
        AvailabilityZone: { Fn::Select : ["2", { Fn::GetAZs : "" }]}
        CidrBlock: "${self:custom.${self:provider.stage}.vpcCidrPrefix}.80.0/20"
        VpcId: { Ref: botVpc }
        Tags: 
          - Key: "Name"
            Value: "C Private"
          - Key: "Reach"
            Value: "private"
    routeTablePublic:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: { Ref : botVpc }
        Tags:
          - Key: "Name"
            Value: "Public Route"
    routePublicAssociationA:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: { Ref : routeTablePublic }
        SubnetId: { Ref : subnetAPublic }
    routePublicAssociationB:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: { Ref : routeTablePublic }
        SubnetId: { Ref : subnetBPublic }
    routePublicAssociationC:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: { Ref : routeTablePublic }
        SubnetId: { Ref : subnetCPublic }
    routeTablePrivate:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId: { Ref : botVpc }
        Tags:
          - Key: "Name"
            Value: "Private Route"
    routePrivateAssociationA:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: { Ref : routeTablePrivate }
        SubnetId: { Ref : subnetAPrivate }
    routePrivateAssociationB:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: { Ref : routeTablePrivate }
        SubnetId: { Ref : subnetBPrivate }
    routePrivateAssociationC:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties: 
        RouteTableId: { Ref : routeTablePrivate }
        SubnetId: { Ref : subnetCPrivate }
    internetGateway: 
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          - Key: "Name"
            Value: "botInternetGateway"
    vpcGatewayAttachment:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties: 
        VpcId: { Ref : botVpc }
        InternetGatewayId: { Ref : internetGateway }
    eip1:
      Type: "AWS::EC2::EIP"
      Properties:
        Domain: vpc
    natGatewayA:
      Type: "AWS::EC2::NatGateway"
      Properties: 
        AllocationId: { Fn::GetAtt : [eip1, "AllocationId"] }
        SubnetId: { Ref : subnetAPublic }
    routeTablePublicInternetRoute:
      Type: "AWS::EC2::Route"
      DependsOn: vpcGatewayAttachment
      Properties: 
        RouteTableId: { Ref : routeTablePublic }
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: { Ref : internetGateway }
    routeTablePrivateInternetRoute:
      Type: "AWS::EC2::Route"
      Properties: 
        RouteTableId: { Ref : routeTablePrivate }
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId: { Ref : natGatewayA }
    lambdaExecSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Lambda Execution"
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        SecurityGroupIngress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        VpcId: { Ref : botVpc }
    cacheSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "Elasticache Security Group"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            SourceSecurityGroupId: { Ref : lambdaExecSecurityGroup }
            # CidrIp: { "Fn::GetAtt" : ["botVpc", "CidrBlock"] }
        VpcId: { Ref : botVpc }
    cacheSubnetGroup:
      Type: "AWS::ElastiCache::SubnetGroup"
      Properties:
        CacheSubnetGroupName: "cacheSubnetGroup-${self:provider.stage}"
        Description: "subnet group for lexofood"
        SubnetIds: # todo: consider moving it to a different network layer
          - { Ref : subnetAPrivate }
          - { Ref : subnetBPrivate }
          - { Ref : subnetCPrivate }
    cacheCluster:
      Type: "AWS::ElastiCache::CacheCluster"
      Properties:
        AutoMinorVersionUpgrade: true
        Engine: redis
        CacheNodeType: "cache.t2.micro"
        NumCacheNodes: 1
        CacheSubnetGroupName: { Ref : cacheSubnetGroup }
        VpcSecurityGroupIds:
          - { Fn::GetAtt : [cacheSecurityGroup, GroupId] }
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-users
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    restaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-restaurants
        AttributeDefinitions:
          - AttributeName: rid
            AttributeType: S
        KeySchema:
          - AttributeName: rid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    foodsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-foods
        AttributeDefinitions:
          - AttributeName: fid
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: fid
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    foodTLsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-foodTLs
        AttributeDefinitions:
          - AttributeName: typeLocality
            AttributeType: S
          - AttributeName: fidName
            AttributeType: S
        KeySchema:
          - AttributeName: typeLocality
            KeyType: HASH
          - AttributeName: fidName
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
plugins:
  - serverless-plugin-webpack
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list