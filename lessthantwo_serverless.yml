service: lessthantwo

app: lessthantwo
org: sbadams

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  cfnRole: arn:aws:iam::331757531648:role/cfnRole
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [Rooms, Arn]
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"

  environment:
    isLocal: ${self:custom.isLocal.${self:custom.currentStage}}


functions:
  connectHandler:
    handler: server/handler.connectHandler
    events:
      - websocket:
          route: $connect

  disconnectHandler:
    handler: server/handler.disconnectHandler
    events:
      - websocket:
          route: $disconnect
          
  defaultHandler:
    handler: server/handler.defaultHandler
    events:
      - websocket:
          route: $default
          
  messageHandler:
    handler: server/handler.messageHandler
    events:
      - websocket:
          route: message


resources:
  Resources:
    Rooms:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rooms
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST


custom:
  dynamodb:
    stages:
      - local
    start:
      migrate: true

  currentStage: ${opt:stage, self:provider.stage}
  isLocal:
    local: true
    dev: false