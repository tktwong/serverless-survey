service: koebutter-fetcher
provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: ap-northeast-1
  deploymentBucket: serverless-upload-ap-northeast-1
  versionFunctions: false
  iamRoleStatements:
    - Effect: "Allow"
      Action: ["s3:PutObject", "s3:GetObject"]
      Resource: { Fn::Join : ["", ["arn:aws:s3:::", { Ref : Bucket }, "/*" ] ]  }
    - Effect: "Allow"
      Action: ["s3:ListBucket"]
      Resource: { Fn::Join : ["", ["arn:aws:s3:::", { Ref : Bucket }] ]  }
    - Effect: "Allow"
      Action: ["s3:GetObject"]
      Resource: "arn:aws:s3:::koebutter-log/*"
    - Effect: Allow
      Action: ["cloudfront:CreateInvalidation"]
      Resource: '*'
    - Effect: Allow
      Action: ["ssm:GetParameter"]
      Resource:
        - Fn::Join: [ ":", ["arn:aws:ssm", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "parameter/cloudfront/*"]]

functions:
  fetch:
    handler: handler.fetch
    description: koebutter media fetcher
    memorySize: 3008
    timeout: 300
    events:
      - schedule: cron(0 8 * * ? *)

  feedprogram:
    handler: handler.feedprogram
    description: koebutter feed generator
    timeout: 30
    events:
      - schedule: cron(5 8 * * ? *)
    environment:
      CLOUDFRONT_DIST_ID: { Ref: CloudfrontOfCamelon }

  log:
    handler: handler.log
    description: koebutter accesslog
    events:
      - s3:
          bucket: koebutter-log
          event: s3:ObjectCreated:*
          rules:
            - suffix: .gz

resources:
  Resources:
    ## cloudfront setting
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: koebutter-fetcher

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: Bucket }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Principal:
                AWS: "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${ssm:/koebutter/oai_id~true}"
              Resource:
                Fn::Join: [ "/", [ { Fn::GetAtt: [ Bucket, Arn ] }, "*" ] ]

    CloudfrontOfCamelon:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: koebutter archive
          Aliases: ["kb.camelon.info"]
          HttpVersion: http2
          ViewerCertificate:
            AcmCertificateArn: "${ssm:/koebutter/acm_cert_arn~true}"
            SslSupportMethod: sni-only
          Logging:
            Bucket: { Fn::Join : ["", [{ Ref: S3BucketKoebutterlog }, ".s3.amazonaws.com"]]  }
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: Koebutter
            ViewerProtocolPolicy: allow-all
            ForwardedValues:
              QueryString: true
              Headers:
                - Origin
            MinTTL: 8640000
            MaxTTL: 8640000
            DefaultTTL: 8640000
            TrustedSigners: [{ Ref: AWS::AccountId }]
          Enabled: true
          Origins:
            - Id: Koebutter
              DomainName: "${self:service}.s3.amazonaws.com"
              S3OriginConfig:
                OriginAccessIdentity: "origin-access-identity/cloudfront/${ssm:/koebutter/oai_id~true}"

    ## domain setting
    RecordSetOfAPI:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: "kb.camelon.info"
        Type: A
        HostedZoneName: "camelon.info."
        AliasTarget:
          DNSName: { Fn::GetAtt: [CloudfrontOfCamelon, DomainName] }
          HostedZoneId: Z2FDTNDATAQYW2
