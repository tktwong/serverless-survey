service: post-appsync-example

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  postTableName: PostTable-${self:provider.stage}
  role:
    { Fn::GetAtt: [PostLambdaServiceRole, Arn] }

plugins:
   - serverless-appsync-plugin
   - serverless-plugin-typescript

custom:
  accountId: {Ref: 'AWS::AccountId'}
  appSync:
    name: ${self:provider.stage}-post
    authenticationType: API_KEY
    mappingTemplates: # templates to map request and response to dataSource
      - dataSource: LAMBDA_SOURCE
        type: Mutation
        field: createPost
        request: "create-post-request.vm"
        response: "response-mapping.vm"
      - dataSource: LAMBDA_SOURCE
        type: Query
        field: getPost
        request: "get-post-request.vm"
        response: "response-mapping.vm"
      - dataSource: LAMBDA_SOURCE
        type: Query
        field: listPosts
        request: "list-posts-request.vm"
        response: "response-mapping.vm"
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingPostServiceRole, Arn] }
      level: ERROR
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AMAZON_DYNAMODB # connect post dynamoDb table
        name: Posts
        config:
          tableName: { Ref: PostTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBPostServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: LAMBDA_SOURCE # data source name
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

functions:
  graphql:
    handler: src/graphql/endpoint/graphQLEndpoint.graphQL
    environment:
      STAGE: ${self:provider.stage}
      POST_TABLE_NAME: ${self:provider.postTableName}

package:
  individually: true
  include:
    - src/**
  exclude:
    - node_modules/**

resources:
  Resources:
    PostTable: # Post dynamoDb Table
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.postTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AppSyncDynamoDBPostServiceRole:
        Type: AWS::IAM::Role
        Properties:
          Path: /my/default/path/
          RoleName: appSyncDbRole-${self:provider.stage}
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - appsync.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: dbaccess-appsync
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:GetItem
                      - dynamodb:Query
                      - dynamodb:Scan
                    Resource:
                      - Fn::GetAtt:
                        - PostTable
                        - Arn
    AppSyncLambdaServiceRole:
        Type: AWS::IAM::Role
        Properties:
          Path: /my/default/path/
          RoleName: appSyncLambdaRole-${self:provider.stage}
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - appsync.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: lambda-access
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource:
                      - Fn::GetAtt:
                        - GraphqlLambdaFunction
                        - Arn
            - PolicyName: dbaccess-appsync
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:GetItem
                      - dynamodb:Query
                      - dynamodb:Scan
                    Resource:
                      - Fn::GetAtt:
                        - PostTable
                        - Arn
            - PolicyName: log-access-policy-appsync
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/*'
    PostLambdaServiceRole:
        Type: AWS::IAM::Role
        Properties:
          Path: /my/default/path/
          RoleName: PostLambdaRole-${self:provider.stage}
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
          Policies:
            - PolicyName: dbaccess-appsync
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:GetItem
                      - dynamodb:Query
                      - dynamodb:Scan
                    Resource:
                      - Fn::GetAtt:
                        - PostTable
                        - Arn
            - PolicyName: log-access-policy-appsync
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/*'
    AppSyncLoggingPostServiceRole:
        Type: AWS::IAM::Role
        Properties:
          Path: /my/default/path/
          RoleName: appSyncPostLogRole-${self:provider.stage}
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - appsync.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: log-access-policy-appsync
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/*'