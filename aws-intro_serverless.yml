service:
  name: aws-intro
  app: aws-intro-app
  org: awsforamazon

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  topicArn:
    Fn::Join:
      - ''
      - - 'arn:aws:sns:'
        - Ref: AWS::Region
        - ":"
        - Ref: AWS::AccountId
        - ":"
        - Fn::GetAtt:
            - SNSTopic
            - TopicName

plugins:
  - serverless-pseudo-parameters
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-2'}
  stage: ${opt:stage, 'dev'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:BatchWriteItem
      Resource:
        - "Fn::GetAtt": [ serviceTableBY, Arn ]
        - "Fn::GetAtt": [ serviceTableUA, Arn ]
    - Effect: Allow
      Action:
        - SNS:Publish
        - SNS:CreateTopic
      Resource: ${self:custom.topicArn}

functions:
  createConsent:
    name: global-test-createConsent
    handler: handler.createConsentHandler
    events:
      - http:
          method: post
          path: create-consent
  propagateConsent:
    name: global-test-propagateConsent
    handler: handler.propagateConsentHandler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [serviceTableBY, StreamArn]
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [serviceTableUA, StreamArn]

resources:
  Resources:
    serviceTableBY:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: 'country-by-test'
    serviceTableUA:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: 'country-ua-test'
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: 'global-test-publishConsent'
    SNSSubscriptionBY:
      Type: AWS::SNS::Subscription
      Properties:
        FilterPolicy:
          countryCode:
            - 'BY'
        Endpoint: koks4oks@gmail.com
        Protocol: email
        TopicArn: {"Ref": "SNSTopic"}
    SNSSubscriptionUA:
      Type: AWS::SNS::Subscription
      Properties:
        FilterPolicy:
          countryCode:
            - 'UA'
        Endpoint: oks4koks@gmail.com
        Protocol: email
        TopicArn: {"Ref": "SNSTopic"}
