service: serverless-orders
app: commercejs
org: shopdevco

frameworkVersion: "2"
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region,'us-east-1'}
  logRetentionInDays: 3
  memorySize: ${self:custom.memorySize.${self:provider.stage}, '1024'}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
      Resource:
        - ${env:snsCreateOrderTopic}
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource: "arn:aws:sqs:us-east-1:*:emailQueue"

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-offline-sns
package:
  include:
    - app/**
    - .env
  exclude:
    - aws-mock/**

custom:
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: false
    accountId: ${env:awsAccountId}
  cors:
    default:
      origin: "*"
      headers:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
        - x-site-context
      allowCredentials: false
  webpack:
    webpackConfig: /webpack.config.js
    includeModules: true
    packager: npm
  environment:
    mongodb: ${env:mongodb}
    awsAccessKeyId: ${env:awsAccessKeyId}
    awsSecretKey: ${env:awsSecretKey}
    awsAccountId: ${env:awsAccountId}
  serverless-offline-sqs:
    autoCreate: true # create queue if not exists
    apiVersion: "2012-11-05"
    endpoint: http://0.0.0.0:9324
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

# resources:
#   Resources:
#     emailQueue:
#       Type: "AWS::SQS::Queue"
#       Properties:
#         QueueName: "emailQueue"

functions:
  getAll:
    handler: handler.all
    events:
      - http:
          path: orders/all
          method: get
  getCount:
    handler: handler.count
    events:
      - http:
          path: orders/count
          method: get
  save:
    handler: handler.save
    events:
      - http:
          path: orders/save
          method: post
  getItem:
    handler: handler.getItem
    events:
      - http:
          path: orders/item/{id}
          method: get
  getOrder:
    handler: handler.getOrder
    events:
      - http:
          path: order/{id}
          method: get
