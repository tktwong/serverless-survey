org: motts1
app: equity
service: equity-serverless

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-notes

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  # create:
  #   handler: create.main
  #   events:
  #     - http:
  #         path: notes
  #         method: post
  #         cors: true
  #         authorizer: aws_iam
  createProfile:
    handler: profiles.create
    environment:
      DB: ${ssm:equity-serverless}
    events:
      - http:
          path: profiles
          method: post
          cors: true
  getOneProfile:
    handler: profiles.getOne
    environment:
      DB: ${ssm:equity-serverless}
    events:
      - http:
          path: profiles/{id}
          method: get
          cors: true
  getAllProfiles:
    handler: profiles.getAll
    environment:
      DB: ${ssm:equity-serverless}
    events:
      - http:
          path: profiles
          method: get
          cors: true
  updateProfile:
    handler: profiles.update
    environment:
      DB: ${ssm:equity-serverless}
    events:
      - http:
          path: profiles/{id}
          method: put
          cors: true
  deleteProfile:
    handler: profiles.delete
    environment:
      DB: ${ssm:equity-serverless}
    events:
      - http:
          path: profiles/{id}
          method: delete
          cors: true
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
