service: &service
  name: boilerplate-serverless-api
  frameworkVersion: "=1.26.1"

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline # must be last in the list

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  # profile: ${opt:profile, 'default'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512 # 1024MB by default
  timeout: 10 # 6seconds by default
  logRetentionInDays: 14
  apiKeys:
    - ${opt:stage, self:provider.stage}-privateApiKey
  environment:
    NODE_ENV: ${opt:env, 'development'}
    SERVICE_NAME: ${self:custom.service.name} # OR ${self:service}
    STAGE: ${self:provider.stage}
    DYNAMODB_TABLE: ${self:custom.service.name}_todos_${opt:stage, self:provider.stage}
    DYNAMO_AWS_ACCESS_KEY_ID: ${file(./config/config.yml):${self:provider.stage}.DYNAMO_AWS_ACCESS_KEY_ID}
    DYNAMO_AWS_SECRET_ACCESS_KEY: ${file(./config/config.yml):${self:provider.stage}.DYNAMO_AWS_SECRET_ACCESS_KEY}
    DYNAMO_AWS_REGION: ${file(./config/config.yml):${self:provider.stage}.DYNAMO_AWS_REGION}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

package:
  include:
    - api/**
    - models/**
    - services/**

functions:
  getTodos:
    handler: handler.getTodos
    events:
      - http:
          method: get
          path: todos
          private: true
          cors: false
  getTodo:
    handler: handler.getTodo
    events:
      - http:
          path: todos/{id}
          method: get
          private: true
          cors: false
  addTodo:
    handler: handler.addTodo
    events:
      - http:
          path: todos
          method: post
          private: true
          cors: false
  removeTodo:
    handler: handler.removeTodo
    events:
      - http:
          path: todos/{id}
          method: delete
          private: true
          cors: false
  updateTodo:
    handler: handler.updateTodo
    events:
      - http:
          path: todos/{id}
          method: patch
          private: true
          cors: false

# Dynamodb settings
resources:
  Resources:
    todosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  # Alternative service properties
  service: *service
  # Local dynamodb settings
  dynamodb:
    start:
      port: 8000
      inMemory: true
      # dbPath: ${env:PWD}/.dynamodb
      # sharedDb: true # need to be true if dbPath option is enabled
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: ${self:provider.environment.DYNAMODB_TABLE}
            sources: [./seeds/fake-todos.json]
