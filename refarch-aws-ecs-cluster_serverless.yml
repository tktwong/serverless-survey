service: refarch-ecs

plugins:
  - serverless-parameters
  - serverless-aws-nested-stacks

custom:
  stage: "${opt:stage, env:SLS_STAGE, 'dev'}"

  # SSM Param Store name spaces
  infra_ssm_param_prefix: "/infra/vpc/prime"
  stack_ssm_param_prefix: "/${self:service}/${self:provider.stage}"

  parameters:
    EcsAmi:
      Description: "ECS-Optimized AMI ID"
      Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
      Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id

    EcsInstanceType:
      Description: "Instance type for ECS hosts"
      Type: String
      Default: "${env:PARAM_ECS_INSTANCE_TYPE, 't2.micro'}"

    # This should refeclect the number of subnets you intend to use which
    # should reflect the number of AZs you will use in a region.
    EcsClusterSizeDesired:
      Description: "Desired number of ECS hosts"
      Type: Number
      Default: "${env:PARAM_ECS_CLUSTER_SIZE_DESIRED, '3'}"

    EcsClusterSizeMin:
      Description: "Minimum number of ECS hosts"
      Type: Number
      Default: "${env:PARAM_ECS_CLUSTER_SIZE_MIN, '3'}"

    EcsClusterSizeMax:
      Description: "Maximum number of ECS hosts"
      Type: Number
      Default: "${env:PARAM_ECS_CLUSTER_SIZE_MAX, '3'}"

    VpcIdSsmParam:
      Type: String
      Description: "VPC ID SSM Param"
      Default: "${self:custom.infra_ssm_param_prefix}/VpcId"

    # NOTE: default value depends on existence of NAT Gateway in private subnet
    EcsVpcSubnetsSsmParam:
      Type: String
      Description: "VPC Subnets for ECS cluster SSM Param"
      #Default: "${self:custom.infra_ssm_param_prefix}/VpcPrivateSubnetList"
      Default: "${self:custom.infra_ssm_param_prefix}/VpcPublicSubnetList"

    AlbVpcSubnetsSsmParam:
      Type: String
      Description: "VPC Subnets for ALB SSM Param"
      Default: "${self:custom.infra_ssm_param_prefix}/VpcPublicSubnetList"

    StackSsmParamPrefix:
      Type: String
      Description: "Prefix for SSM Params created by this stack."
      Default: "${self:custom.stack_ssm_param_prefix}"

  nested-stacks:
    location: "stacks"
    stacks:
      - id: ApplicationLoadBalancer
        template: load-balancer.yml
        timeout: 15
        parameters:
          StackSsmParamPrefix:
            Ref: StackSsmParamPrefix
          StackParentName: "${self:service}-${self:provider.stage}"
          VpcId:
            Ref: VpcIdSsmParam
          VpcSubnets:
            Ref: AlbVpcSubnetsSsmParam
          AlbProtocol: HTTP
      - id: EcsCluster
        template: ecs-cluster.yml
        dependson: ApplicationLoadBalancer
        timeout: 15
        parameters:
          StackSsmParamPrefix:
            Ref: StackSsmParamPrefix
          StackParentName: "${self:service}-${self:provider.stage}"
          EcsInstanceType:
            Ref: EcsInstanceType
          EcsClusterSizeDesired:
            Ref: EcsClusterSizeDesired
          EcsClusterSizeMin:
            Ref: EcsClusterSizeMin
          EcsClusterSizeMax:
            Ref: EcsClusterSizeMax
          EcsAmi:
            Ref: EcsAmi
          VpcId:
            Ref: VpcIdSsmParam
          AlbSecurityGroupId: "${self:custom.stack_ssm_param_prefix}/AlbSecurityGroupId"
          VpcSubnets:
            Ref: EcsVpcSubnetsSsmParam
      - id: LifecycleHooks
        template: lifecycle-hooks.yml
        dependson: EcsCluster
        timeout: 15
        parameters:
          StackSsmParamPrefix:
            Ref: StackSsmParamPrefix
          EcsAsgName: "${self:custom.stack_ssm_param_prefix}/EcsAsgName"
      - id: LifecycleHookDraining
        template: lifecycle-hook-draining.yml
        dependson: LifecycleHooks
        timeout: 15
        parameters:
          AsgTerminationSnsTopicArn: "${self:custom.stack_ssm_param_prefix}/AsgTerminationSnsTopicArn"
          EcsClusterName: "${self:custom.stack_ssm_param_prefix}/EcsClusterName"
          LifecycleHookLambdaPolicyArn: "${self:custom.stack_ssm_param_prefix}/LifecycleHookLambdaPolicyArn"


provider:
  name: aws
  stage: "${self:custom.stage}"
  stackTags:
    x-service: "${self:service}"
    x-stack: "${self:service}-${self:provider.stage}"

