service: service

frameworkVersion: ">=2.0.0 <3.0.0"

provider:
  name: aws
  runtime: nodejs12.x

  apiGateway:
    minimumCompressionSize: 1024

  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'us-east-1'}
  baseDomainName: ${file(env.yml):${self:provider.stage}.baseDomainName}
  domainName: ${file(env.yml):${self:provider.stage}.domainName}
  memorySize: 256
  timeout: 30

  tracing:
    apiGateway: true
    lambda: true

  apiKeys:
  - ${self:provider.stage}-${self:service}-user

  iamRoleStatements:
  - Effect: Allow
    Action:
    - KMS:Decrypt
    Resource: ${file(env.yml):${self:provider.stage}.kmsKeyArn}
  - Effect: Allow
    Action:
    - S3:ListBucket
    Resource: arn:aws:s3:::${self:provider.environment.SERVICE_POSTS_S3_BUCKET_NAME}
  - Effect: Allow
    Action:
    - S3:GetObject
    Resource: arn:aws:s3:::${self:provider.environment.SERVICE_POSTS_S3_BUCKET_NAME}/*
  - Effect: Allow
    Action:
    - SNS:Publish
    Resource:
      Ref: LambdaDeadLetterQueue
  - Effect: Allow
    Action:
    - dynamodb:*
    Resource: arn:aws:dynamodb:${self:provider.region}:471964952458:table/${self:provider.environment.SERVICE_POSTS_DYNAMODB_TABLE}
  - Effect: Allow
    Action:
    - dynamodb:*
    Resource: arn:aws:dynamodb:${self:provider.region}:471964952458:table/${self:provider.environment.SERVICE_POSTS_DYNAMODB_TABLE}/*
  - Effect: Allow
    Action:
      - dynamodb:*
    Resource: arn:aws:dynamodb:${self:provider.region}:471964952458:table/${self:provider.environment.SERVICE_AUTH_INFO_DYNAMODB_TABLE}
  - Effect: Allow
    Action:
      - dynamodb:*
    Resource: arn:aws:dynamodb:${self:provider.region}:471964952458:table/${self:provider.environment.SERVICE_AUTH_INFO_DYNAMODB_TABLE}/*
  - Effect: Allow
    Action:
      - lambda:InvokeFunction
    Resource: arn:aws:lambda:${self:provider.region}:471964952458:function:${self:service}-${self:provider.stage}-*
  - Effect: Allow
    Action:
      - xray:PutTraceSegments
      - xray:PutTelemetryRecords
    Resource:
      - "*"

  environment: ${file(env.yml):${self:provider.stage}.environment}
  environmentSecrets: # NOTE-RT: Can't just go `${file(env.yml):${self:provider.stage}.environmentSecrets}` because `serverless-secrets` makes assumptions about what's actually in your configuration file
    FLICKR_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.FLICKR_API_KEY}
    FLICKR_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.FLICKR_API_SECRET}
    UNSPLASH_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.UNSPLASH_API_KEY}
    UNSPLASH_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.UNSPLASH_API_SECRET}
    FACEBOOK_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.FACEBOOK_API_KEY}
    FACEBOOK_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.FACEBOOK_API_SECRET}
    FACEBOOK_ACCESS_TOKEN: ${file(env.yml):${self:provider.stage}.environmentSecrets.FACEBOOK_ACCESS_TOKEN}
    INSTAGRAM_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.INSTAGRAM_API_KEY}
    INSTAGRAM_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.INSTAGRAM_API_SECRET}
    INSTAGRAM_ACCESS_TOKEN: ${file(env.yml):${self:provider.stage}.environmentSecrets.INSTAGRAM_ACCESS_TOKEN}
    TUMBLR_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.TUMBLR_API_KEY}
    TUMBLR_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.TUMBLR_API_SECRET}
    TWITTER_API_KEY: ${file(env.yml):${self:provider.stage}.environmentSecrets.TWITTER_API_KEY}
    TWITTER_API_SECRET: ${file(env.yml):${self:provider.stage}.environmentSecrets.TWITTER_API_SECRET}
    SENTRY_DSN: ${file(env.yml):${self:provider.stage}.environmentSecrets.SENTRY_DSN}

plugins:
- serverless-secrets
- serverless-webpack
- serverless-dynamodb-local
- serverless-plugin-warmup
- serverless-offline
- serverless-domain-manager
- serverless-plugin-tracing

custom:
  dynamodb:
    stages:
      - test
      - local
    start:
      port: ${file(src/serverless/util/loadConfig.js):default.posts.dbPort}
      inMemory: false
      dbPath: ./
      migrate: true
  webpack:
    individually: false
    webpackConfig: ./webpack.serverless.config.js
    includeModules:
      forceExclude:
      - aws-sdk
  serverlessSecrets:
    throwOnMissingSecret: true
    providerOptions:
      region: ${self:provider.region}
    keys:
      dev: "alias/serverless-dev"
      prd: "alias/serverless-prd"
  alarmTopic: ${file(env.yml):${self:provider.stage}.alarmTopic}
  serverless-offline:
    httpPort: ${file(src/serverless/util/loadConfig.js):default.posts.serverPort}
    noPrependStageInUrl: true
  customDomain:
    domainName: ${file(env.yml):${self:provider.stage}.domainName}
    certificateName: ${file(env.yml):${self:provider.stage}.acmName}
    createRoute53Record: true
    basePath: ""
  warmup:
    prewarm: true

functions: # NOTE-RT: Can't just go `${file(env.yml):${self:provider.stage}.functions}` because `serverless-secrets` makes assumptions about what's actually in your configuration file
  cachePosts:
    handler: src/serverless/handlers/cachePosts/initialized.default
    timeout: 90
    events: ${file(env.yml):${self:provider.stage}.functions.cachePosts.events}
    onError:
      Ref: LambdaDeadLetterQueue
  getPosts:
    handler: src/serverless/handlers/getPosts/initialized.default
    events: ${file(env.yml):${self:provider.stage}.functions.getPosts.events}
    onError:
      Ref: LambdaDeadLetterQueue
    warmup:
      enabled: true
  getPostsRss:
    handler: src/serverless/handlers/getPostsRss/initialized.default
    events: ${file(env.yml):${self:provider.stage}.functions.getPostsRss.events}
    onError:
      Ref: LambdaDeadLetterQueue
    environment:
      CAMPAIGN_MEDIUM: rss
    warmup:
      enabled: true
  facebookAuthRedirect:
    handler: src/serverless/handlers/facebookAuthRedirect/initialized.default
    events: ${file(env.yml):${self:provider.stage}.functions.facebookAuthRedirect.events}
    onError:
      Ref: LambdaDeadLetterQueue
  facebookAuthCallback:
    handler: src/serverless/handlers/facebookAuthCallback/initialized.default
    events: ${file(env.yml):${self:provider.stage}.functions.facebookAuthCallback.events}
    onError:
      Ref: LambdaDeadLetterQueue
  instagramAuthRedirect:
    handler: src/serverless/handlers/instagramAuthRedirect/initialized.default
    events: ${file(env.yml):${self:provider.stage}.functions.instagramAuthRedirect.events}
    onError:
      Ref: LambdaDeadLetterQueue
  instagramAuthCallback:
    handler: src/serverless/handlers/instagramAuthCallback/initialized.default
    events: ${file(env.yml):${self:provider.stage}.functions.instagramAuthCallback.events}
    onError:
      Ref: LambdaDeadLetterQueue
  twitterAuthRedirect:
    handler: src/serverless/handlers/twitterAuthRedirect/initialized.default
    events: ${file(env.yml):${self:provider.stage}.functions.twitterAuthRedirect.events}
    onError:
      Ref: LambdaDeadLetterQueue
  twitterAuthCallback:
    handler: src/serverless/handlers/twitterAuthCallback/initialized.default
    events: ${file(env.yml):${self:provider.stage}.functions.twitterAuthCallback.events}
    onError:
      Ref: LambdaDeadLetterQueue

resources:
  Resources:
    LambdaDeadLetterQueue:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:provider.stage}-${self:service}-lambda-dlq
        TopicName: ${self:provider.stage}-${self:service}-lambda-dlq
    LambdaErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
        - ${self:custom.alarmTopic}
        AlarmDescription: Lambda errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Namespace: AWS/Lambda
        MetricName: Errors
        Period: 60
        Statistic: Sum
        Threshold: 1
        Unit: Count
    LambdaDurationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
        - ${self:custom.alarmTopic}
        AlarmDescription: Long running lambdas
        ComparisonOperator: GreaterThanOrEqualToThreshold
        EvaluationPeriods: 1
        Namespace: AWS/Lambda
        MetricName: Duration
        Threshold: 45000
        Period: 60
        Statistic: Maximum
        Unit: Milliseconds
    ApiGateway4xxAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
        - ${self:custom.alarmTopic}
        AlarmDescription: 4xx Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
        - Value: ${self:provider.stage}-${self:service}
          Name: ApiName
        - Value: ${self:provider.stage}
          Name: Stage
        EvaluationPeriods: 1
        Namespace: AWS/ApiGateway
        MetricName: 4XXError
        Period: 60
        Statistic: Sum
        Threshold: 1
        Unit: Count
    ApiGateway5xxAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
        - ${self:custom.alarmTopic}
        AlarmDescription: 5xx Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
        - Value: ${self:provider.stage}-${self:service}
          Name: ApiName
        - Value: ${self:provider.stage}
          Name: Stage
        EvaluationPeriods: 1
        Namespace: AWS/ApiGateway
        MetricName: 5XXError
        Period: 60
        Statistic: Sum
        Threshold: 1
        Unit: Count
    PostsDynamoDbConsumedReadCapacityUnitsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
        - ${self:custom.alarmTopic}
        AlarmDescription: DynamoDB RCU Consumption
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Value: ${self:provider.environment.SERVICE_POSTS_DYNAMODB_TABLE}
            Name: TableName
        EvaluationPeriods: 1
        Namespace: AWS/DynamoDB
        MetricName: ConsumedReadCapacityUnits
        Period: 60
        Statistic: Sum
        Threshold: 6000
    PostsDynamoDbConsumedWriteCapacityUnitsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
        - ${self:custom.alarmTopic}
        AlarmDescription: DynamoDB WCU Consumption
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Value: ${self:provider.environment.SERVICE_POSTS_DYNAMODB_TABLE}
            Name: TableName
        EvaluationPeriods: 1
        Namespace: AWS/DynamoDB
        MetricName: ConsumedWriteCapacityUnits
        Period: 60
        Statistic: Sum
        Threshold: 6000
    PostsDynamoDbSystemErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
        - ${self:custom.alarmTopic}
        AlarmDescription: DynamoDB System Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Value: ${self:provider.environment.SERVICE_POSTS_DYNAMODB_TABLE}
            Name: TableName
        EvaluationPeriods: 1
        Namespace: AWS/DynamoDB
        MetricName: SystemErrors
        Period: 60
        Statistic: Sum
        Threshold: 1
        Unit: Count
    AuthInfoDynamoDbConsumedReadCapacityUnitsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - ${self:custom.alarmTopic}
        AlarmDescription: DynamoDB RCU Consumption
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Value: ${self:provider.environment.SERVICE_AUTH_INFO_DYNAMODB_TABLE}
            Name: TableName
        EvaluationPeriods: 1
        Namespace: AWS/DynamoDB
        MetricName: ConsumedReadCapacityUnits
        Period: 60
        Statistic: Sum
        Threshold: 5
    AuthInfoDynamoDbConsumedWriteCapacityUnitsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - ${self:custom.alarmTopic}
        AlarmDescription: DynamoDB WCU Consumption
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Value: ${self:provider.environment.SERVICE_AUTH_INFO_DYNAMODB_TABLE}
            Name: TableName
        EvaluationPeriods: 1
        Namespace: AWS/DynamoDB
        MetricName: ConsumedWriteCapacityUnits
        Period: 60
        Statistic: Sum
        Threshold: 5
    AuthInfoDynamoDbSystemErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmActions:
          - ${self:custom.alarmTopic}
        AlarmDescription: DynamoDB System Errors
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Value: ${self:provider.environment.SERVICE_AUTH_INFO_DYNAMODB_TABLE}
            Name: TableName
        EvaluationPeriods: 1
        Namespace: AWS/DynamoDB
        MetricName: SystemErrors
        Period: 60
        Statistic: Sum
        Threshold: 1
        Unit: Count
    S3BucketPosts:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.SERVICE_POSTS_S3_BUCKET_NAME}
    PostsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties: ${file(src/serverless/dynamodb/post.js):default}
    AuthInfoDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties: ${file(src/serverless/dynamodb/authInfo.js):default}
