service: beanData # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DYNAMODB_TABLE: ${file(../env.yml):COFFEE_DB}
# AWS Defaults
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:us-east-1:${file(../env.yml):AWS_ID}:*table/${file(../env.yml):COFFEE_DB}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:us-east-1:${file(../env.yml):AWS_ID}:*table/${file(../env.yml):COFFEE_DB}/index/*

functions:
  coffeeInfo:
    handler: handler.coffeeInfo
    events:
        - http:
            path: /
            method: POST
            cors: true
              # - enabled: true
              # - origin: http://http://127.0.0.1:5500/
              # - headers: "Content-Type,X-PINGOTHER"
              # - methods: "PUT,POST,GET,DELETE"  
            # integration: lambda-proxy
            # authorizer: auth
            # cors:
            #   origins:
            #     - http://http://127.0.0.1:5500/
            #     - https://s3.amazonaws.com/beandata/beandata.html
            #   headers:
            #     - Content-Type
            #     - X-Amz-Date
            #     - Authorization
            #     - X-Api-Key
            #     - X-Amz-Security-Token
            #     - X-Amz-User-Agent
            #   allowCredentials: false
        - http:
            path: /{id}
            method: GET
            request: 
              parameters:
                paths:
                  id: true
            # request:
            # parameters:
            #   querystrings:
            #     url: true
            # integration: lambda-proxy
            # authorizer: auth
            cors: true
        - http:
            path: /
            method: GET
            # integration: lambda-proxy
            # authorizer: auth
            cors: true
        - http:
            path: /
            method: GET
            request:
            parameters:
              querystrings:
                url: true
            # integration: lambda-proxy
            # authorizer: auth
            cors: true
        - http:
            path: /{id}
            method: DELETE
            request: 
              parameters:
                paths:
                  id: true
            # integration: lambda-proxy
            # authorizer: auth
            cors: true
        - http:
            path: /{id}
            method: PUT
            cors: true
            request: 
              parameters:
                paths:
                  id: true
            # integration: lambda-proxy
            # authorizer: auth

resources:
  Resources:
    # roastedCoffeeDynamoDbTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: roastedCoffee
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'