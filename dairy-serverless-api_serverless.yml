service:
  name: serverless-diary-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    MEMORIES_TABLE: Memories-${self:provider.stage}
    MEMORIES_ID_INDEX: MemoryIdIndex
    AUTH_0_SECRET: iPTMkv2faqZ3ZlktQI-a0yID6ZX_DQi1vCTrtmRSUd_REm7crLKlP3ny9teyZcPT
    MEMORIES_S3_BUCKET: serverless-memories-attachment-selmy-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 600


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  
  GetMemories:
    handler: src/lambda/http/getMemories.handler
    events:
      - http:
          method: get
          path: memory
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}
  
  CreateMemory:
    handler: src/lambda/http/createMemory.handler
    events:
      - http:
          method: post
          path: memory
          cors: true
          authorizer: Auth
    reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}

  UpdateMemory:
    handler: src/lambda/http/updateMemory.handler
    events:
      - http:
          method: patch
          path: memory/{memoryId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}

  DeleteMemory:
    handler: src/lambda/http/deleteMemory.handler
    events:
      - http:
          method: delete
          path: memory/{memoryId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: memory/{memoryId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}/index/${self:provider.environment.MEMORIES_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.MEMORIES_S3_BUCKET}/*

resources:
  Resources:
    MemoryDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId   #partition
            AttributeType: S
          - AttributeName: createdAt  #sort
            AttributeType: S
          - AttributeName: memoryId   #index
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: memoryId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.MEMORIES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.MEMORIES_ID_INDEX}
            KeySchema:
              - AttributeName: memoryId # partition
                KeyType: HASH
              - AttributeName: createdAt # index
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.MEMORIES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.MEMORIES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false