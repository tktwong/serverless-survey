service: 'benkhard-authorizer'
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: ">2.0.0"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  accountId: '111972343318'
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - !GetAtt [UsersTable, Arn]
        - !GetAtt [TokensTable, Arn]
    - Effect: 'Allow'
      Action:
        - ssm:GetParameter
      Resource:
        '*'

custom:
  usersTableName: ${self:service}-users-${self:provider.stage}
  tokensTableName: ${self:service}-jwt-${self:provider.stage}
  lambdaRoleArn: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole

functions:
  register:
    handler: src/registration-handler.handler
    events:
      - http:
          path: register
          method: post
    environment:
      USERS_TABLE: ${self:custom.usersTableName}
  login:
    handler: src/login-handler.handler
    events:
      - http:
          path: login
          method: post
    environment:
      USERS_TABLE: ${self:custom.usersTableName}
      TOKENS_TABLE: ${self:custom.tokensTableName}
  authorizer:
    handler: src/lambda-authorizer.handler
    environment:
      USERS_TABLE: ${self:custom.usersTableName}
      TOKENS_TABLE: ${self:custom.tokensTableName}
  protected:
    handler: src/protected.handler
    events:
      - http:
          path: protected
          method: get
          authorizer: authorizer

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "email"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"
    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tokensTableName}
        AttributeDefinitions:
          - AttributeName: "tid"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "tid"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

plugins:
  - serverless-offline