service: atim-api

frameworkVersion: "=1.49.0"

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-stack-output
  - serverless-plugin-diff

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  actorsTableName: ${self:custom.stage}-actors
  companiesTableName: ${self:custom.stage}-companies
  backgroundJobsTableName: ${self:custom.stage}-background-jobs
  taxisEndpoint: ${ssm:/atim/${self:custom.stage}/taxisProxyEndpoint}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  output:
    # handler: scripts/output.handler # Same syntax as you already know
    file: stack.yml # toml, yaml, yml, and json format is available

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  deploymentBucket:
    name: me.atim.deploys

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    actorsTableName: ${self:custom.actorsTableName}
    companiesTableName: ${self:custom.companiesTableName}
    backgroundJobsTableName: ${self:custom.backgroundJobsTableName}
    taxisServiceEndpoint: ${self:custom.taxisEndpoint}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        # for dynamodb streams
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - "Fn::GetAtt": [ ActorsTable, Arn ]
        - "Fn::GetAtt": [ CompaniesTable, Arn ]
        - "Fn::GetAtt": [ BackgroundJobsTable, Arn ]

functions:
  list-actors:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /actors
    # - method: GET request
    handler: actors/list.main
    events:
      - http:
          path: actors
          method: get
          cors: true

  list-companies:
    handler: companies/list.main
    events:
      - http:
          path: companies
          method: get
          cors: true

  refresh-company:
    handler: companies/refresh.main
    events:
      - http:
          path: companies/{id}/refresh
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  get-background-job:
    handler: background-jobs/get.main
    events:
      - http:
          path: background-jobs/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  process-background-job:
    handler: background-jobs/process.main
    timeout: 60
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [BackgroundJobsTable, StreamArn]
          batchSize: 1


  refresh-all-companies:
    handler: companies/refresh-all-companies.main
    events:
      - schedule: rate(30 days)

# Create our resources with separate CloudFormation templates
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
