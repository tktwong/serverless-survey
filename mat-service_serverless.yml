service: mat-service

provider:
  name: aws
  runtime: nodejs12.x
  vpc: ${self:custom.vpc.${opt:stage}}
  region: eu-west-2
  api-name: hn-mat-service-api
  stage: dev
  timeout: 29
  environment:
    NODE_ENV: ${self:custom.stage}
    DB_NAME: matServiceDb
    DB_USER: MatServiceDbAdmin
    DB_HOST: ${ssm:/${self:custom.stage}-mat-service-db-DB_HOST, env:DB_HOST}
    DB_PASSWORD: ${ssm:/${self:custom.stage}-mat-service-db-DB_PASSWORD~true, env:DB_PASSWORD}
    UI_PATH: ${ssm:/${self:custom.stage}-mat-service-ui-path, env:UI_PATH}
    ALLOWED_GROUPS:
      'Fn::Join':
        - ','
        - ${self:custom.allowedGroups.${self:custom.stage}}
    NEXT_PUBLIC_API_PATH: https://${self:custom.aliases.${self:custom.stage}}/api
    V1_MAT_API_URL: ${ssm:/${self:custom.stage}-mat-service-V1_MAT_API_URL, env:V1_MAT_API_URL}
    V1_MAT_API_TOKEN: ${ssm:/${self:custom.stage}-mat-service-V1_MAT_API_TOKEN~true, env:V1_MAT_API_TOKEN}
    CRM_API_URL: ${ssm:/${self:custom.stage}-${self:service}-CRM_API_URL, env:CRM_API_URL}
    CRM_TOKEN_API_URL: ${ssm:/${self:custom.stage}-${self:service}-CRM_TOKEN_API_URL, env:CRM_TOKEN_API_URL}
    CRM_TOKEN_API_KEY: ${ssm:/${self:custom.stage}-${self:service}-CRM_TOKEN_API_KEY~true, env:CRM_TOKEN_API_KEY}
    PROCESS_TOKEN_ENCRYPTION_KEY: ${ssm:/${self:custom.stage}-${self:service}-PROCESS_TOKEN_ENCRYPTION_KEY~true, env:PROCESS_TOKEN_ENCRYPTION_KEY}

plugins:
  - serverless-dotenv-plugin
  - serverless-offline-ssm
  - serverless-offline
  - serverless-offline-scheduler

package:
  exclude:
    - ./project

functions:
  web:
    name: ${self:service}-web-${self:custom.stage}
    handler: src/lambda.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
      - http: ANY /

  api:
    name: ${self:service}-api-${self:custom.stage}
    handler: src/lambda.handler
    events:
      - http:
          path: /api/{proxy+}
          method: ANY
          authorizer: ${self:custom.authorizer.authorizer}

  authorizer:
    handler: authorizer.handler
    environment:
      JWT_SECRET: ${ssm:/${self:custom.stage}-${self:service}-jwt-secret~true, env:JWT_SECRET}

  createITVTasks:
    handler: src/lambda.createITVTasks
    environment:
      JWT_SECRET: ${ssm:/${self:custom.stage}-${self:service}-jwt-secret~true, env:JWT_SECRET}
    events:
      - schedule: rate(1 minute)

resources:
  Resources:
    matServiceDBSubnetGroup:
      Type: 'AWS::RDS::DBSubnetGroup'
      Properties:
        DBSubnetGroupName: ${self:service}-postgres-subnet-group-${self:custom.stage}
        DBSubnetGroupDescription: Private db subnet group for postgress
        SubnetIds: ${self:custom.private-subnet-ids.${self:custom.stage}}
    matServiceDbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to Postgres
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '5432'
            ToPort: '5432'
            CidrIp: 0.0.0.0/0

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.aliases.${self:custom.stage}}
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificate-arn.${self:custom.stage}}
            MinimumProtocolVersion: TLSv1.2_2018
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            TargetOriginId: ${self:service}-${self:custom.stage}-custom-origin
            ViewerProtocolPolicy: 'redirect-to-https'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
          Enabled: true
          Origins:
            - Id: ${self:service}-${self:custom.stage}-custom-origin
              DomainName: ${self:custom.domain-name}
              OriginPath: /${self:custom.stage}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only

custom:
  stage: ${opt:stage, self:provider.stage}
  serverless-offline:
    noPrependStageInUrl: true
  serverless-offline-ssm:
    stages:
      - dev
  authorizer:
    authorizer:
      name: authorizer
      type: request
      identitySource: ''
      resultTtlInSeconds: 0
  domain-name:
    Fn::Join:
      - '.'
      - - Ref: ApiGatewayRestApi
        - execute-api
        - eu-west-2
        - amazonaws.com
  aliases:
    staging: staging.manageatenancy.hackney.gov.uk
    production: manageatenancy.hackney.gov.uk
  certificate-arn:
    staging: arn:aws:acm:us-east-1:492942404536:certificate/bcfcfca4-138d-4995-8a67-1aec6011bde4
    production: arn:aws:acm:us-east-1:492942404536:certificate/bcfcfca4-138d-4995-8a67-1aec6011bde4
  allowedGroups:
    staging:
      - housing-officer-staging
      - area-housing-manager-staging
      - development-team-staging
      - housing-officer-dev
      - area-housing-manager-dev
    production:
      - housing-officer-production
      - area-housing-manager-production
      - development-team-production
  vpc:
    staging:
      securityGroupIds:
        - sg-0eb68e84c4721bc47
      subnetIds:
        - subnet-0eabaf5f168063d11
        - subnet-0a33fc9beff39b20c
    production:
      securityGroupIds:
        - sg-057508b2a3573c9e3
      subnetIds:
        - subnet-027184f3d715dfda7
        - subnet-0cdca69ab8e1f9176
  private-subnet-ids:
    staging:
      - subnet-0eabaf5f168063d11
      - subnet-0a33fc9beff39b20c
    production:
      - subnet-027184f3d715dfda7
      - subnet-0cdca69ab8e1f9176
