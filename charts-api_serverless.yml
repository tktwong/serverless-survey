service: charts-api

provider:
  name: aws
  runtime: nodejs4.3
  region: ap-southeast-2
  environment:
    DYNAMODB_TABLE: ${self:service}--${opt:stage, self:provider.stage}

  iamRoleStatements:
   - Effect: "Allow"
     Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
     Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  list:
    handler: lib/list.list
    events:
      - http:
          path: charts
          method: get
          cors: true

  create:
    handler: lib/create.create
    events:
      - http:
          path: charts
          method: post
          cors: true

  get:
    handler: lib/get.get
    events:
      - http:
          path: charts/{id}
          method: get
          cors: true

  delete:
    handler: lib/delete.delete
    events:
      - http:
          path: charts/{id}
          method: delete
          cors: true

  update:
    handler: lib/update.update
    events:
      - http:
          path: charts/{id}
          method: put
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     chartsTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#
#         AttributeDefinitions:
#           -
#             AttributeName: id
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.DYNAMODB_TABLE}
