service: ir-matcher

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1
  role: ${self:custom.role}
  profile: ${self:custom.profile.${opt:stage}}

#plugins:
#  - serverless-localstack

custom:
  defaultStage: local
  role: arn:aws:iam::335326279392:role/meeter-api-function-lambdaRole
  profile:
    local: localstack
    dev: hagiwara
    stg: hagiwara
    production: hagiwara
  environment:
    local:
      STAGE: local
      error_webhook: https://example.com
    dev:
      STAGE: dev
      error_webhook: https://example.com
    stg:
      STAGE: stg
      error_webhook: https://example.com
    production:
      STAGE: production
      error_webhook: https://example.com
  provisionedMemory:
    local: 512
    dev: 512
    stg: 512
    production: 1024
  localstack:
    debug: true
    host: http://localhost
    endpoints:
      Route53: http://localhost:4580
      CloudWatch: http://localhost:4582
      DynamoDB: http://localhost:4570
      CloudFormation: http://localhost:4581
      Elasticsearch: http://localhost:4571
      ES: http://localhost:4578
      SNS: http://localhost:4575
      SQS: http://localhost:4576
      Lambda: http://localhost:4574
      Kinesis: http://localhost:4568
      S3: http://localhost:4572

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  get-investors:
    handler: src/api/investor-handler.getInvestors
    name: get-investors-${self:provider.stage}
    memorySize: ${self:custom.provisionedMemory.${self:provider.stage}}
    environment: ${self:custom.environment.${self:provider.stage}}
    package:
      exclude:
      include:
        - src/api/investor-handler.js
    events:
      - http:
          path: investors/get
          method: get
          cors: true
#          authorizer:
#            arn: ${self:custom.cognito.userpool.arn}

  create-investor:
    handler: src/api/investor-handler.createInvestor
    name: create-investors-${self:provider.stage}
    memorySize: ${self:custom.provisionedMemory.${self:provider.stage}}
    environment: ${self:custom.environment.${self:provider.stage}}
    package:
      exclude:
      include:
        - src/api/investor-handler.js
    events:
      - http:
          path: investors/create
          method: get
          cors: true
#          authorizer:
#            arn: ${self:custom.cognito.userpool.arn}

  update-investor:
    handler: src/api/investor-handler.updateInvestor
    name: update-investors-${self:provider.stage}
    memorySize: ${self:custom.provisionedMemory.${self:provider.stage}}
    environment: ${self:custom.environment.${self:provider.stage}}
    package:
      exclude:
      include:
        - src/api/investor-handler.js
    events:
      - http:
          path: investors/update
          method: get
          cors: true
#          authorizer:
#            arn: ${self:custom.cognito.userpool.arn}

  delete-investor:
    handler: src/api/investor-handler.deleteInvestor
    name: delete-investors-${self:provider.stage}
    memorySize: ${self:custom.provisionedMemory.${self:provider.stage}}
    environment: ${self:custom.environment.${self:provider.stage}}
    package:
      exclude:
      include:
        - src/api/investor-handler.js
    events:
      - http:
          path: investors/delete
          method: get
          cors: true
#          authorizer:
#            arn: ${self:custom.cognito.userpool.arn}


  get-companies:
    handler: src/api/company-handler.getCompanies
    name: get-companies-${self:provider.stage}
    memorySize: ${self:custom.provisionedMemory.${self:provider.stage}}
    environment: ${self:custom.environment.${self:provider.stage}}
    package:
      exclude:
      include:
        - src/api/company-handler.js
    events:
      - http:
          path: company/get
          method: get
          cors: true
#          authorizer:
#            arn: ${self:custom.cognito.userpool.arn}



#    Define function environment variables here
#    environment:
#      variable2: value2
