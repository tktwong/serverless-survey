service: vf-connect-holidays
package:
  exclude:
    - test/**/*
provider:
  name: aws
  profile: ${opt:profile}
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "us-east-1"}
  runtime: nodejs8.10
  environment:
    OUTAGES_TABLE: ${self:service}-outages-${opt:stage, self:provider.stage}
    HOLIDAY_TABLE: ${self:service}-holidays-${opt:stage, self:provider.stage}
    region: ${self:provider.region}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:PutItem
        - dynamodb:GetItem
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - Fn::Join:
            - ":"
            - - "arn:aws:logs"
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - "*"
        - Fn::Join:
          - ":"
          - - "arn:aws:logs"
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - "*"
        - { "Fn::GetAtt": ["OutagesDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["HolidayDynamoDBTable", "Arn"] }
        - {
            "Fn::Join":
              [
                "/",
                [
                  { "Fn::GetAtt": ["OutagesDynamoDBTable", "Arn"] },
                  "index",
                  "EnabledIndex",
                ],
              ],
          }
        - {
            "Fn::Join":
              [
                "/",
                [
                  { "Fn::GetAtt": ["HolidayDynamoDBTable", "Arn"] },
                  "index",
                  "GroupIndex",
                ],
              ],
          }
    - Effect: "Allow"
      Action:
        - polly:SynthesizeSpeech
      Resource:
        - "*"


functions:
  holidays:
    handler: src/lambdas/ui-backend/holidaysHandler.handler
    events:
      - http:
          path: holidays
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer
      - http:
          path: holidays/{id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer
      - http:
          path: holidays/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer
      - http:
          path: holidays/groups
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer
  closures:
    handler: src/lambdas/ui-backend/closuresHandler.handler
    events:
      - http:
          path: closures
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer
      - http:
          path: closures/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer
      - http:
          path: closures
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer
  synthesizeSsml:
    handler: src/lambdas/ui-backend/synthesizeSsml.handler
    events:
      - http:
          path: polly/synth
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer
  toggleOutage:
    handler: src/lambdas/connect/toggleOutageHandler.handler
    tags:
      "pl:function": "outage toggle lambda"
  getOutageInfo:
    handler: src/lambdas/connect/getOutageInfoHandler.handler
    tags:
      "pl:function": "outage info lambda"
  holidayCheck:
    handler: src/lambdas/connect/ivr-holidays-lambda.handler
    memorySize: 512
    tags:
      "pl:function": "holiday lambda"

custom:
  connectInstanceString: ${opt:connectInstanceString, "instance/4d031e0a-033b-41d5-8e26-4943269e3f96"}
  fullStage:
    sb: Sandbox
    nonprod: Staging
    prod: Production
  warmup:
    enabled: true
    memorySize: 256
    role: WarmerRole
    events:
      - schedule: 'cron(0/5 * * * ? *)' 
    timeout: 20
    concurrency: 5

plugins:
  - serverless-plugin-warmup

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        MfaConfiguration: "OFF"
        UserPoolName: "vf-connect-holidays-admin-ui"
    CognitoAngularClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: "angular"
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool
    CognitoAuthorizer:
      Type: "AWS::ApiGateway::Authorizer"
      Properties:
        Name: vf-connect-holidays-admin-ui-authorizer-${self:provider.stage}
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - { "Fn::GetAtt": [CognitoUserPool, Arn] }
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
    ClientHostBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: vf-connect-holidays-admin-ui-${self:provider.stage}
        WebsiteConfiguration:
          IndexDocument: index.html
        Tags:
          - Key: "pl:function"
            Value: "vf-connect-holidays Admin UI host bucket"
    ClientBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ClientHostBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
              Effect: "Allow"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: ClientHostBucket
                    - "/*"
              Principal:
                AWS:
                  Fn::Join:
                    - ""
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                      - Ref: ClientOID
    ClientCloudFrontDistro:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: "true"
            TargetOriginId: S3-vf-connect-holidays-admin-ui-${self:provider.stage}
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: "true"
          Origins:
            - DomainName:
                Fn::Join:
                  - ""
                  - - Ref: ClientHostBucket
                    - ".s3"
                    - ".amazonaws.com"
              Id: S3-vf-connect-holidays-admin-ui-${self:provider.stage}
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Ref: ClientOID
          ViewerCertificate:
            CloudFrontDefaultCertificate: "true"
    ClientOID:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Origin Access ID for admin UI"
    WarmerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: LambdaWarmerRole2-${opt:stage, self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaWarmerPolicy2-${opt:stage, self:provider.stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow # WarmUp lamda to send logs to CloudWatch
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: 'Allow' # WarmUp lamda to invoke the functions to be warmed
                  Action:
                    - 'lambda:InvokeFunction'
                  Resource:
                  - { "Fn::GetAtt": [ToggleOutageLambdaFunction, Arn] }
                  - { "Fn::GetAtt": [GetOutageInfoLambdaFunction, Arn] }
                  - { "Fn::GetAtt": [HolidayCheckLambdaFunction, Arn] }
    HolidayDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.HOLIDAY_TABLE}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: "Key"
            AttributeType: "S"
          - AttributeName: "Group"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "Key"
            KeyType: "HASH"
          - AttributeName: "Group"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: GroupIndex
            KeySchema:
              - AttributeName: Group
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        Tags:
          - 
            Key: "pl:function"
            Value: "Holiday info table"
    OutagesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: enabled
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EnabledIndex
            KeySchema:
              - AttributeName: enabled
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        TableName: ${self:provider.environment.OUTAGES_TABLE}
        Tags:
          - 
            Key: "pl:function"
            Value: "vf-connect-holidays outages table"
    HolidaysLambdaConnectPermission:    
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: { "Fn::GetAtt": [HolidayCheckLambdaFunction, Arn]}
        Action: 'lambda:InvokeFunction'
        Principal: connect.amazonaws.com
        SourceAccount: 
          Ref: 'AWS::AccountId'
        SourceArn:
          Fn::Join:
          - ':'
          - - 'arn:aws:connect'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - ${self:custom.connectInstanceString}
    GetOutageInfoLambdaConnectPermission:    
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: { "Fn::GetAtt": [GetOutageInfoLambdaFunction, Arn]}
        Action: 'lambda:InvokeFunction'
        Principal: connect.amazonaws.com
        SourceAccount: 
          Ref: 'AWS::AccountId'
        SourceArn:
          Fn::Join:
          - ':'
          - - 'arn:aws:connect'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - ${self:custom.connectInstanceString}
    ToggleOutageLambdaConnectPermission:    
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: { "Fn::GetAtt": [ToggleOutageLambdaFunction, Arn]}
        Action: 'lambda:InvokeFunction'
        Principal: connect.amazonaws.com
        SourceAccount: 
          Ref: 'AWS::AccountId'
        SourceArn:
          Fn::Join:
          - ':'
          - - 'arn:aws:connect'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - ${self:custom.connectInstanceString}

  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
    UserPoolClientId:
      Value:
        Ref: CognitoAngularClient
    ApiUrl:
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    CloudfrontUrl:
      Value:
        { "Fn::GetAtt": [ClientCloudFrontDistro, DomainName]}