service: wisaw

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack
  - serverless-offline
custom:
  enabled:
    prod: true
    test: false

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  bucket_name: wisaw-img-${opt:stage} #this is the only place where the bucket name is defined -- change it here if ever have to
  web_bucket_name: wisaw-client

  stageVariables:
    bucketName: ${self:custom.bucket_name}
    # endpoint: {"Fn::Join": ["", ["https://", { "Fn::GetAtt": "CloudFrontEndpoint.DomainName" }, "/"]]}

provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1
  memorySize: 3008
  timeout: 30
  versionFunctions: false # optional, default is true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${self:custom.bucket_name}"
        - "arn:aws:s3:::${self:custom.bucket_name}/*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::${self:custom.web_bucket_name}"
        - "arn:aws:s3:::${self:custom.web_bucket_name}/*"
    - Effect: "Allow"
      Action:
        - "rekognition:*"
      Resource: "*"

  environment:
    DATABASE_URL: ${file(.env.${opt:stage}.js):config.DATABASE_URL}
    HOST: ${file(.env.${opt:stage}.js):config.HOST}
    IMAGE_BUCKET: ${self:custom.bucket_name}
    WEB_BUCKET: ${self:custom.web_bucket_name}
    STAGE: ${opt:stage}


functions:
  helloWorldGet: # just for testing purposes
    handler: api/src/controllers/hello_world.main
    description: greetings message for world
    events:
      - http:
          path: hello
          method: get
          private: false

  abuseReportPost: # http endpoint
    handler: api/src/controllers/abuseReports/create.main
    description: create an abuse report record
    events:
      - http:
          path: abusereport
          method: post
          private: false
          request:
            parameters:
              application/json: '{"uuid":{"type":"string"}}'

  contactFormPost: # http endpoint
    handler: api/src/controllers/contactForms/create.main
    description: create contact form record
    events:
      - http:
          path: contactform
          method: post
          private: false

  photosCleanupGet: # http endpoint
    handler: api/src/controllers/photos/cleanup.main
    description: cleaning up old photos
    events:
      - http:
          path: photos/cleanup
          method: get
          private: false

  photosCleanupSchedule: # the same as above (reusing the same function), but is invoked by a scheduler
    handler: api/src/controllers/photos/cleanup.main
    description: cleaning up abuse report periodically once an hour
    events:
      - schedule: rate(1 hour)
        enabled: ${self:custom.enabled.${opt:stage, self:provider.stage}}

  photosFeedPost: # http endpoint
    handler: api/src/controllers/photos/feed.main
    description: photos feed
    events:
      - http:
          path: photos/feed
          method: post
          private: false
  photosFeedByDatePost: # http endpoint
    handler: api/src/controllers/photos/feed.byDate
    description: retreive photos by date
    events:
      - http:
          path: photos/feedByDate
          method: post
          private: false
  photosFeedForWatcherPost: # http endpoint
    handler: api/src/controllers/photos/feed.forWatcher
    description: retreive photos for watcher
    events:
      - http:
          path: photos/feedForWatcher
          method: post
          private: false
  photosFeedForTextSearchPost: # http endpoint
    handler: api/src/controllers/photos/feed.forTextSearch
    description: retreive photos for full text search
    timeout: 59
    memorySize: 3008
    events:
      - http:
          path: photos/feedForTextSearch
          method: post
          private: false

  photosPost: # http endpoint, which creates a record in DB, generaes unique photo id and then genertes upload URL to eb used for direct s3 upload
    handler: api/src/controllers/photos/create.main
    description: ('C'RUD) - photo
    events:
      - http:
          path: photos
          method: post
          private: false
          cors: true

  photosActivate: # http endpoint
    handler: api/src/controllers/photos/activate.main
    description: make existing photo active
    events:
      - http:
          path: photos/{id}/activate
          method: put
          private: false

  photosDeActivate: # http endpoint
    handler: api/src/controllers/photos/deactivate.main
    description: make existing photo inactive
    events:
      - http:
          path: photos/{id}/deactivate
          method: put
          private: false

  photosLike: # http endpoint
    handler: api/src/controllers/photos/like.main
    description: like existing photo
    events:
      - http:
          path: photos/{id}/like
          method: put
          private: false

  photosProcessUploaded:
    handler: api/src/controllers/photos/processUploadedImage.main
    description: 'when ever a new image is uploaded to a bucket, generates *.thumb image and parse image through image recognition'
    timeout: 59
    # the image magic is not included with node 10 on aws. https://forums.aws.amazon.com/thread.jspa?messageID=906619&tstart=0
    # runtime: nodejs8.10
    layers:
      - arn:aws:lambda:us-east-1:963958500685:layer:image-magick:1
    # memorySize: 300 # fails with the default options -- must give more memory
    events:
      - s3: # this will create the bucket
          bucket: ${self:custom.bucket_name}
          event: s3:ObjectCreated:*

  photosRekognizeImages:
    handler: api/src/controllers/recognitions/rekognizeImages.main
    description: 'run image recognition on schedule'
    timeout: 58
    memorySize: 3008
    events:
      - schedule: rate(10000 days)
        enabled: ${self:custom.enabled.${opt:stage, self:provider.stage}}


  photosSitemapGenerate:
    handler: api/src/controllers/photos/createSiteMap.main
    description: 'generates sitemax.xml and uploads to a bucket'
    timeout: 59
    memorySize: 3008
    events:
      - schedule: rate(3 hours)
        enabled: ${self:custom.enabled.${opt:stage, self:provider.stage}}

      # - http:
      #     path: photos/sitemap
      #     method: get
      #     private: false

  adjustCommentsCount:
    handler: api/src/controllers/comments/adjustCommentsCount.main
    description: 'updates comments count'
    timeout: 59
    memorySize: 3008
    events:
      - schedule: rate(1 day)
        enabled: ${self:custom.enabled.${opt:stage, self:provider.stage}}



  photosRemoveS3Trigger:
    handler: api/src/controllers/photos/removeTrigger.main
    description: 'removes photo record from DB when it is removed from S3 bucket'
    events:
      - s3:
          bucket: ${self:custom.bucket_name}
          event: s3:ObjectRemoved:*

  photosGet: # http endpoint
    handler: api/src/controllers/photos/read.main
    description: (C'R'UD) - photo
    events:
      - http:
          path: photos/{id}
          method: get
          cors: true

  photosGetPrev: # http endpoint
    handler: api/src/controllers/photos/readPrev.main
    description: get prev valid photo
    events:
      - http:
          path: photos/prev/{id}
          method: get
          cors: true

  photosGetNext: # http endpoint
    handler: api/src/controllers/photos/readNext.main
    description: get next valid photo
    events:
      - http:
          path: photos/next/{id}
          method: get
          cors: true

  photosDelete: # http endpoint
    handler: api/src/controllers/photos/delete.main
    description: (CRU'D') - photo
    events:
      - http:
          path: photos/{id}
          method: delete
          private: false

  commentsPost: # http endpoint
    handler: api/src/controllers/comments/create.main
    description: ('C'RUD) - comment
    events:
      - http:
          path: photos/{id}/comments
          method: post
          private: false

  commentsDelete: # http endpoint
    handler: api/src/controllers/comments/delete.main
    description: (CRU'D') - comments
    events:
      - http:
          path: comments/{id}
          method: delete
          private: false

  commentsList: # http endpoint
    handler: api/src/controllers/comments/list.main
    description: get all comments for particular photo
    events:
      - http:
          path: photos/{id}/comments
          method: get
          private: false
          cors: true

  recognitionsGet: # http endpoint
    handler: api/src/controllers/recognitions/read.main
    description: get recognitions for particular photo
    events:
      - http:
          path: photos/{id}/recognitions
          method: get
          private: false
          cors: true

  watchPhoto: # http endpoint
    handler: api/src/controllers/watchers/create.main
    description: ('C'RUD) - watchers
    events:
      - http:
          path: photos/{id}/watchers
          method: post
          private: false

  unwatchPhoto: # http endpoint
    handler: api/src/controllers/watchers/delete.main
    description: (CRU'D') - watchers
    events:
      - http:
          path: photos/{id}/watchers
          method: delete
          private: false

  watchesGet: # http endpoint
    handler: api/src/controllers/watchers/read.main
    description: (C'R'UD) - watcher
    events:
      - http:
          path: photos/{id}/watchers/{uuid}
          method: get
          # cors: true


resources:
  Resources:
    # https://serverless.com/blog/building-a-serverless-screenshot-service-with-lambda/
    # https://www.netlify.com/blog/2016/11/17/serverless-file-uploads/
    S3BucketWisawimgtest:
      Type: AWS::S3::Bucket
      Properties:
        # BucketName: wisaw-img-test-custom
        # AccessControl: PublicRead
        # CorsConfiguration:
        #   CorsRules:
        #   - AllowedMethods:
        #     - GET
        #     - PUT
        #     - POST
        #     - HEAD
        #     AllowedOrigins:
        #     - "*"
        #     AllowedHeaders:
        #     - "*"
        LifecycleConfiguration:
          Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: '1'

    S3BucketWisawimgprod:
      Type: AWS::S3::Bucket
      Properties:
        LifecycleConfiguration:
          Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: '10000'
