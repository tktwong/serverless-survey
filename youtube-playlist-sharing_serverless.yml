service:
  name: youtube-playlist-sharing

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x
 
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    PLAYLISTS_TABLE: Playlists-${self:provider.stage}
    PLAYLIST_ID_INDEX: PlaylistIdIndex
    IMAGES_S3_BUCKET: youtube-playlist-sharing-mskrzypietz-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Youtube Playlist Sharing API
        description: Serverless application for sharing youtube playlists
    models:
      - name: CreatePlaylistRequest
        contentType: application/json
        schema: ${file(models/create-playlist-request.json)}
      - name: UpdatePlaylistRequest
        contentType: application/json
        schema: ${file(models/update-playlist-request.json)}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetPlaylist:
    handler: src/lambda/http/getPlaylist.handler
    events:
      - http:
          method: get
          path: playlists/{playlistId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PLAYLISTS_TABLE}/index/${self:provider.environment.PLAYLIST_ID_INDEX}

  GetAllPlaylists:
    handler: src/lambda/http/getAllPlaylists.handler
    events:
      - http:
          method: get
          path: playlists
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PLAYLISTS_TABLE}

  CreatePlaylists:
    handler: src/lambda/http/createPlaylist.handler
    events:
      - http:
          method: post
          path: playlists/new
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new playlist
            description: Create a new playlist
            requestModels:
              'application/json': CreatePlaylistRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PLAYLISTS_TABLE}

  UpdatePlaylist:
    handler: src/lambda/http/updatePlaylist.handler
    events:
      - http:
          method: patch
          path: playlists/{playlistId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a playlist item
            description: Update a playlist item
            requestModels:
              'application/json': UpdatePlaylistRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PLAYLISTS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: playlists/{playlistId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PLAYLISTS_TABLE}  

  DeletePlaylist:
    handler: src/lambda/http/deletePlaylist.handler
    events:
      - http:
          method: delete
          path: playlists/{playlistId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PLAYLISTS_TABLE} 

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    PlaylistsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: playlistId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: playlistId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PLAYLISTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.PLAYLIST_ID_INDEX}
            KeySchema:
            - AttributeName: playlistId
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
