# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: openapi
app: openapi
org: paulheadington

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-offline
  - serverless-dynamodb-local

environment:
  SLS_DEBUG: "*"

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

  
provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 10 # optional, in seconds, default is 6  
  environment:
    IS_OFFLINE: true 
    SLS_A_REGION: ap-southeast-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        # - dynamodb:CreateTable
        # - dynamodb:DeleteTable
        # - dynamodb:ListTables
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"


functions:
  - '${file(src/handlers/seed/seed.serverless.yml)}'  
  - '${file(src/handlers/users/users.serverless.yml)}'  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2



resources:
  Resources:
    Users:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: users

# resources:
#   Resources:
#     DynamoDbTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: my-table
#         AttributeDefinitions:
#           - AttributeName: my_key
#             AttributeType: S
#         KeySchema:
#           - AttributeName: my_key
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 5
#           WriteCapacityUnits: 5
#     DynamoDBIamPolicy:
#       Type: AWS::IAM::Policy
#       DependsOn: DynamoDbTable
#       Properties:
#         PolicyName: lambda-dynamodb
#         PolicyDocument:
#           Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Action:
#                 - dynamodb:GetItem
#                 - dynamodb:PutItem
#               Resource: arn:aws:dynamodb:*:*:table/my-table
#         Roles:
#           - Ref: IamRoleLambdaExecution

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
