service: serverless-local-dev-example

provider:
  name: aws
  region: us-east-1
  runtime: nodejs10.x
  # Use the default aws profile
  profile: default
  # Use --stage to change the stage when deploying, dev is the default
  stage: ${opt:stage, 'dev'}

  environment:
    MESSAGE_TABLE_NAME: ${self:service}-${self:provider.stage}-messages
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MESSAGE_TABLE_NAME}"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

functions:
  message-get:
    handler: src/message.get
    events:
      - http:
          path: message/{id}
          method: get
          cors: true

resources:
  Resources:
    MessagesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MESSAGE_TABLE_NAME}

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
      seed: true
    seed:
      default:
        sources:
          - table: ${self:provider.environment.MESSAGE_TABLE_NAME}
            sources: [./messages-seed.json]
