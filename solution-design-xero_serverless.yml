service:
  name: flights
# app and org for use with dashboard.serverless.com
app: flight-api

package:
  exclude:
  - coverage/**
  - .circleci/**

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-2
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DYNAMODB_TABLE: ${self:service.name}-${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  list:
    handler: flights/list.list
    events:
      - http:
          path: flights
          method: get
          cors: true
  create:
    handler: flights/create.create
    events:
      - http:
          path: flights
          method: post
          cors: true
  get:
    handler: flights/get.get
    events:
      - http:
          path: flights/{id}
          method: get
          cors: true
  update:
    handler: flights/subscribe.subscribe
    events:
      - http:
          path: flights/{id}/subscribe
          method: put
          cors: true
resources:
  Resources:
    flightsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}