service: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  environment:
    SQS_URL: "${env:SQS_URL}"

  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource: 
        - "arn:aws:s3:::${env:BUCKET}"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: 
        - "arn:aws:s3:::${env:BUCKET}/*"
    - Effect: "Allow"
      Action: "sqs:*"
      Resource: "${env:SQS_ARN}"

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

  
functions:
  importProductsFile:
    handler: handler.importProductsFile 
    events:
      - http:
          method: get
          path: import
          cors: true
          request: 
            parameters: 
              querystrings: 
                name: true
          response:
            headers:
              Access-Control-Allow-Origin: '*'
              Access-Control-Allow-Credentials: true
          authorizer:
            name: tokenAuthorizer
            arn: ${cf:authorization-service-dev.basicAuthorizerArn}
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: handler.importFileParser 
    events:
      - s3:
          bucket: "${env:BUCKET}"
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

