service:
  name: serverless-announcements-dashboard

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-jest-plugin

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    ANNOUNCEMENTS_TABLE: Announcements-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    PUBLISHED_INDEX: PublishedIndex
    IMAGES_S3_BUCKET: severless-announcements-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Announcements dashboard API
        description: Serverless application for announcements dashboard
    models:
      - name: AnnouncementRequest
        contentType: application/json
        schema: ${file(models/create-announcement-request.json)}
      - name: AnnouncementUpdateRequest
        contentType: application/json
        schema: ${file(models/update-announcement-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetAllAnnouncements:
    handler: src/lambda/http/getAllAnnouncements.handler
    iamRoleStatementsName: GetAllAnnouncement-${self:provider.region}-${self:provider.stage}-iam-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANNOUNCEMENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANNOUNCEMENTS_TABLE}/index/${self:provider.environment.PUBLISHED_INDEX}
    events:
      - http:
          method: get
          authorizer: Auth
          path: announcement
          cors: true

  GetUserAnnouncement:
    handler: src/lambda/http/getUserAnnouncements.handler
    iamRoleStatementsName: GetUserAnnouncement-${self:provider.region}-${self:provider.stage}-iam-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANNOUNCEMENTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANNOUNCEMENTS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
    events:
      - http:
          method: get
          path: announcement/for/user
          authorizer: Auth
          cors: true
  CreateAnnouncement:
    handler: src/lambda/http/createAnnouncement.handler
    iamRoleStatementsName: CreateAnnouncement-${self:provider.region}-${self:provider.stage}-iam-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANNOUNCEMENTS_TABLE}
    events:
      - http:
          method: post
          path: announcement
          cors: true
          reqValidatorName: RequestBodyValidator
          authorizer: Auth
          documentation:
            summary: Create a new announcement
            description: Create a new announcement
            requestModels:
              application/json: AnnouncementRequest

  UpdateAnnouncement:
    handler: src/lambda/http/updateAnnouncement.handler
    iamRoleStatementsName: UpdateAnnouncement-${self:provider.region}-${self:provider.stage}-iam-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANNOUNCEMENTS_TABLE}
    events:
      - http:
          method: patch
          path: announcement/{announcementId}
          authorizer: Auth
          cors: true
          documentation:
            summary: Update announcement
            description: Update announcement
            requestModels:
              application/json: AnnouncementUpdateRequest

  DeleteAnnouncement:
    handler: src/lambda/http/deleteAnnouncement.handler
    iamRoleStatementsName: DeleteAnnouncement-${self:provider.region}-${self:provider.stage}-iam-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANNOUNCEMENTS_TABLE}
    events:
      - http:
          method: delete
          path: announcement/{announcementId}
          authorizer: Auth
          cors: true

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatementsName: GenerateUploadUrl-${self:provider.region}-${self:provider.stage}-iam-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ANNOUNCEMENTS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: announcement/{announcementId}/attachment
          authorizer: Auth
          cors: true

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AnnouncementTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: announcementId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: published
            AttributeType: N
        KeySchema:
          - AttributeName: announcementId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ANNOUNCEMENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.PUBLISHED_INDEX}
            KeySchema:
            - AttributeName: published
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket