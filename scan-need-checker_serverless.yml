# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: scan-need-checker # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  timeout: 30 
  vpc:
    securityGroupIds:
      - sg-efd4558a 
    subnetIds:
      - subnet-d7d7dde8

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    natickEmailList: ${self:custom.myEnvironment.natickEmailList.${self:custom.myStage}}
    westboroEmailList: ${self:custom.myEnvironment.westboroEmailList.${self:custom.myStage}}
    newtonEmailList: ${self:custom.myEnvironment.newtonEmailList.${self:custom.myStage}}
    worcesterEmailList: ${self:custom.myEnvironment.worcesterEmailList.${self:custom.myStage}}
    bostonEmailList: ${self:custom.myEnvironment.bostonEmailList.${self:custom.myStage}}
    braintreeEmailList: ${self:custom.myEnvironment.braintreeEmailList.${self:custom.myStage}}
    norwoodEmailList: ${self:custom.myEnvironment.norwoodEmailList.${self:custom.myStage}}
    centralEmailList: ${self:custom.myEnvironment.centralEmailList.${self:custom.myStage}}
    reportEmailList: ${self:custom.myEnvironment.reportEmailList.${self:custom.myStage}}
    host:  "172.31.46.112" # 11nator private IP

# you can add packaging information here
package:
#  include:
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - node_modules/**
    - venv/**

functions:
  scan-checker:
    handler: handler.main

    events:
     - schedule: 
         rate: cron(20 10 * * ? *)
         enabled: true
         input:
           report: false 
     - schedule: 
         rate: cron(15 11 * * ? *)
         enabled: true
         input:
           report: true 
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
#
#       plugin is from the node stuff to get dependencies automagically
#       Docker is used on deploy to get everything
plugins:
 - serverless-python-requirements

custom:
  myStage: ${opt:stage, self:provider.stage}
  myEnvironment:
    natickEmailList:
      prod: "fpiergen@landrys.com"
      dev:  "fpiergen@landrys.com"     
    bostonEmailList:
      prod: "fpiergen@landrys.com"
      dev:  "fpiergen@landrys.com"     
    newtonEmailList:
      prod: "fpiergen@landrys.com"
      dev:  "fpiergen@landrys.com"     
    norwoodEmailList:
      prod: "fpiergen@landrys.com"
      dev:  "fpiergen@landrys.com"     
    worcesterEmailList:
      prod: "fpiergen@landrys.com"
      dev:  "fpiergen@landrys.com"     
    braintreeEmailList:
      prod: "fpiergen@landrys.com"
      dev:  "fpiergen@landrys.com"     
    westboroEmailList:
      prod: "fpiergen@landrys.com"
      dev:  "fpiergen@landrys.com"     
    centralEmailList:
      prod: "fpiergen@landrys.com"
      dev:  "fpiergen@landrys.com"     
    reportEmailList:
      prod: "fpiergen@landrys.com"
      dev:  "fpiergen@landrys.com"     
  pythonRequirements:
    dockerizePip: non-linux
