service: coffee-gateway
# app and org for use with dashboard.serverless.com
app: hackathon-ws-test-app
org: qbiqing

frameworkVersion: '2'

custom:
  tableName: 'coffee-${self:provider.stage}'

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: ap-southeast-1
  environment:
    COFFEE_TABLE: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - {"Fn::GetAtt": ["CoffeesDynamoDBTable", "Arn"]}
  apiKeys:
    - myFirstKey
  usagePlan:
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100

functions:
  hello:
    handler: handler.hello
    events:
    - http:
        path: hello
        method: get
  goodbye:
    handler: handler.goodbye
    events:
      - http:
          path: goodbye
          method: get

  create:
    handler: coffee.create
    layers:
      - {Ref: PythonReqsLayerLambdaLayer}
    events:
      - http:
          path: coffee
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
            cacheControl: 'max-age=600,x-maxage=600,proxy-revalidate'
          private: true

  retrieve:
    handler: coffee.retrieve
    layers:
      - {Ref: PythonReqsLayerLambdaLayer}
    events:
      - http:
          path: coffee
          method: get
          cors: true
          private: true

  calculate_dot:
    handler: handler.calculate_dot_product
    layers:
      - {Ref: PythonReqsLayerLambdaLayer}
    events:
      - http:
          path: calculate_dot
          method: post
          private: true

resources:
  Resources:
    CoffeesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

layers:
  PythonReqsLayer:
    path: python_layer
    name: ${self:provider.stage}-layerName
    compatibleRuntimes:
    - python3.8
