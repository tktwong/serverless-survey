service: media-api

provider:
  name: aws
  runtime: nodejs8.10
  timeout: 30
  memorySize: 128
  versionFunctions: false
  environment:
    MONGODB_URI: ${env:MONGODB_URI}
    RABBITMQ_URI: ${env:RABBITMQ_URI}
    RABBITMQ_QUEUE: ${env:RABBITMQ_QUEUE}
    RABBITMQ_PREFIX: ${env:RABBITMQ_PREFIX}
    RABBITMQ_TTL: ${env:RABBITMQ_TTL}
    ELASTICSEARCH_HOST: ${env:ELASTICSEARCH_HOST}
    ELASTICSEARCH_FILE_VERSION: ${env:ELASTICSEARCH_FILE_VERSION}
    ELASTICSEARCH_DATAPOINT_VERSION: ${env:ELASTICSEARCH_DATAPOINT_VERSION}
    WEBAPP_URL: ${env:WEBAPP_URL}
    PORT: ${env:PORT}

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-nested-stack

custom:
  serverless-offline:
    port: ${env:PORT}
    host: "0.0.0.0"

  webpack:
    webpackConfig: internals/webpack.js

# ========================= #
#  ALL REST ENDPOINTS HERE  #
# ========================= #

functions:
  # SESSION
  SESSION___create:
    handler: src/handler.SESSION___create
    events:
      - http:
          path: /sessions
          method: post
  # SESSION --- END

  # ACCOUNT
  ACCOUNT___list:
    handler: src/handler.ACCOUNT___list
    events:
      - http:
          path: /accounts
          method: get

  ACCOUNT___get:
    handler: src/handler.ACCOUNT___get
    events:
      - http:
          path: /accounts/{accountIdentifier}
          method: get

  ACCOUNT___create:
    handler: src/handler.ACCOUNT___create
    events:
      - http:
          path: /accounts
          method: post

  ACCOUNT___update:
    handler: src/handler.ACCOUNT___update
    events:
      - http:
          path: /accounts/{accountIdentifier}
          method: patch

  # ACCOUNT --- END

  # ACCOUNT > PASSWORD
  ACCOUNT__PASSWORD___replace:
    handler: src/handler.ACCOUNT__PASSWORD___replace
    events:
      - http:
          path: /accounts/{accountIdentifier}/password
          method: put

  # ACCOUNT > PASSWORD --- END

  # ACCOUNT > PINNED_PROJECT
  ACCOUNT__PINNED_PROJECT___list:
    handler: src/handler.ACCOUNT__PINNED_PROJECT___list
    events:
      - http:
          path: /accounts/{accountIdentifier}/pinned-projects
          method: get

  ACCOUNT__PINNED_PROJECT___replace:
    handler: src/handler.ACCOUNT__PINNED_PROJECT___replace
    events:
      - http:
          path: /accounts/{accountIdentifier}/pinned-projects
          method: put

  # ACCOUNT > PINNED_PROJECT --- END

  # RESET_TOKEN
  RESET_TOKEN___create:
    handler: src/handler.RESET_TOKEN___create
    events:
      - http:
          path: /reset-tokens
          method: post

  RESET_TOKEN___get:
    handler: src/handler.RESET_TOKEN___get
    events:
      - http:
          path: /reset-tokens/{token}
          method: get

  # RESET_TOKEN --- END

  # PROJECT
  PROJECT___list:
    handler: src/handler.PROJECT___list
    events:
      - http:
          path: /projects
          method: get

  PROJECT___get:
    handler: src/handler.PROJECT___get
    events:
      - http:
          path: /projects/{projectIdentifier}
          method: get

  PROJECT___create:
    handler: src/handler.PROJECT___create
    events:
      - http:
          path: /projects
          method: post

  PROJECT___update:
    handler: src/handler.PROJECT___update
    events:
      - http:
          path: /projects/{projectIdentifier}
          method: patch

  PROJECT___delete:
    handler: src/handler.PROJECT___delete
    events:
      - http:
          path: /projects/{projectIdentifier}
          method: delete

  # PROJECT --- END

  # PROJECT > INFRASTRUCTURE
  PROJECT__INFRASTRUCTURE___get:
    handler: src/handler.PROJECT__INFRASTRUCTURE___get
    events:
      - http:
          path: /projects/{projectIdentifier}/infrastructure
          method: get

  PROJECT__INFRASTRUCTURE___update:
    handler: src/handler.PROJECT__INFRASTRUCTURE___update
    events:
      - http:
          path: /projects/{projectIdentifier}/infrastructure
          method: patch

  # PROJECT > INFRASTRUCTURE --- END

  # PROJECT > COLLABORATOR
  PROJECT__COLLABORATOR___list:
    handler: src/handler.PROJECT__COLLABORATOR___list
    events:
      - http:
          path: /projects/{projectIdentifier}/collaborators
          method: get

  PROJECT__COLLABORATOR___update:
    handler: src/handler.PROJECT__COLLABORATOR___update
    events:
      - http:
          path: /projects/{projectIdentifier}/collaborators
          method: patch

  PROJECT__COLLABORATOR___replace:
    handler: src/handler.PROJECT__COLLABORATOR___replace
    events:
      - http:
          path: /projects/{projectIdentifier}/collaborators/{accountIdentifier}
          method: put

  PROJECT__COLLABORATOR___delete:
    handler: src/handler.PROJECT__COLLABORATOR___delete
    events:
      - http:
          path: /projects/{projectIdentifier}/collaborators/{accountIdentifier}
          method: delete

  # PROJECT > COLLABORATOR --- END

  # PROJECT > METRIC
  PROJECT__METRIC__DATAPOINT___list:
    handler: src/handler.PROJECT__METRIC__DATAPOINT___list
    events:
      - http:
          path: /projects/{projectIdentifier}/metrics/{metricName}/datapoints
          method: get

  PROJECT__METRIC__DATAPOINT___update:
    handler: src/handler.PROJECT__METRIC__DATAPOINT___update
    events:
      - http:
          path: /projects/{projectIdentifier}/metrics/{metricName}/datapoints
          method: patch

  PROJECT__METRIC__DATAPOINT___head:
    handler: src/handler.PROJECT__METRIC__DATAPOINT___head
    events:
      - http:
          path: /projects/{projectIdentifier}/metrics/{metricName}/datapoints/{timestamp}
          method: head

  # PROJECT > METRIC --- END

  # PROJECT > RULE
  PROJECT__RULE___list:
    handler: src/handler.PROJECT__RULE___list
    events:
      - http:
          path: /projects/{projectIdentifier}/rules
          method: get

  PROJECT__RULE___get:
    handler: src/handler.PROJECT__RULE___get
    events:
      - http:
          path: /projects/{projectIdentifier}/rules/{ruleIdentifier}
          method: get

  PROJECT__RULE___create:
    handler: src/handler.PROJECT__RULE___create
    events:
      - http:
          path: /projects/{projectIdentifier}/rules
          method: post

  PROJECT__RULE___replace:
    handler: src/handler.PROJECT__RULE___replace
    events:
      - http:
          path: /projects/{projectIdentifier}/rules/{ruleIdentifier}
          method: put

  PROJECT__RULE___delete:
    handler: src/handler.PROJECT__RULE___delete
    events:
      - http:
          path: /projects/{projectIdentifier}/rules/{ruleIdentifier}
          method: delete

  # PROJECT > RULE --- END

  # PROJECT > CACHE_SETTING
  PROJECT__CACHE_SETTING___get:
    handler: src/handler.PROJECT__CACHE_SETTING___get
    events:
      - http:
          path: /projects/{projectIdentifier}/cache-setting
          method: get

  PROJECT__CACHE_SETTING___replace:
    handler: src/handler.PROJECT__CACHE_SETTING___replace
    events:
      - http:
          path: /projects/{projectIdentifier}/cache-setting
          method: put

  # PROJECT > CACHE_SETTING --- END

  # PROJECT > PULL_SETTING
  PROJECT__PULL_SETTING___get:
    handler: src/handler.PROJECT__PULL_SETTING___get
    events:
      - http:
          path: /projects/{projectIdentifier}/pull-setting
          method: get

  PROJECT__PULL_SETTING___replace:
    handler: src/handler.PROJECT__PULL_SETTING___replace
    events:
      - http:
          path: /projects/{projectIdentifier}/pull-setting
          method: put

  # PROJECT > PULL_SETTING --- END

  # PROJECT > PRESET
  PROJECT__PRESET___list:
    handler: src/handler.PROJECT__PRESET___list
    events:
      - http:
          path: /projects/{projectIdentifier}/presets
          method: get

  PROJECT__PRESET___get:
    handler: src/handler.PROJECT__PRESET___get
    events:
      - http:
          path: /projects/{projectIdentifier}/presets/{contentType}
          method: get

  PROJECT__PRESET___create:
    handler: src/handler.PROJECT__PRESET___create
    events:
      - http:
          path: /projects/{projectIdentifier}/presets
          method: post

  PROJECT__PRESET___replace:
    handler: src/handler.PROJECT__PRESET___replace
    events:
      - http:
          path: /projects/{projectIdentifier}/presets/{contentType}
          method: put

  PROJECT__PRESET___delete:
    handler: src/handler.PROJECT__PRESET___delete
    events:
      - http:
          path: /projects/{projectIdentifier}/presets/{contentType}
          method: delete

  # PROJECT > PRESET --- END

  # PROJECT > INVALIDATION
  PROJECT__INVALIDATION___list:
    handler: src/handler.PROJECT__INVALIDATION___list
    events:
      - http:
          path: /projects/{projectIdentifier}/invalidations
          method: get

  PROJECT__INVALIDATION___get:
    handler: src/handler.PROJECT__INVALIDATION___get
    events:
      - http:
          path: /projects/{projectIdentifier}/invalidations/{invalidationIdentifier}
          method: get

  PROJECT__INVALIDATION___create:
    handler: src/handler.PROJECT__INVALIDATION___create
    events:
      - http:
          path: /projects/{projectIdentifier}/invalidations
          method: post

  PROJECT__INVALIDATION___update:
    handler: src/handler.PROJECT__INVALIDATION___update
    events:
      - http:
          path: /projects/{projectIdentifier}/invalidations/{invalidationIdentifier}
          method: patch

  # PROJECT > INVALIDATION --- END

  # PROJECT > FILE --- END
  PROJECT__FILE___create:
    handler: src/handler.PROJECT__FILE___create
    events:
      - http:
          path: /projects/{projectIdentifier}/files
          method: post

  PROJECT__FILE___list:
    handler: src/handler.PROJECT__FILE___list
    events:
      - http:
          path: /projects/{projectIdentifier}/files
          method: get

  PROJECT__FILE___get:
    handler: src/handler.PROJECT__FILE___get
    events:
      - http:
          path: /projects/{projectIdentifier}/files/{fileIdentifier}
          method: get

  PROJECT__FILE___head:
    handler: src/handler.PROJECT__FILE___head
    events:
      - http:
          path: /projects/{projectIdentifier}/files/{fileIdentifier}
          method: head

  PROJECT__FILE___replace:
    handler: src/handler.PROJECT__FILE___replace
    events:
      - http:
          path: /projects/{projectIdentifier}/files/{fileIdentifier}
          method: put

  PROJECT__FILE___delete:
    handler: src/handler.PROJECT__FILE___delete
    events:
      - http:
          path: /projects/{projectIdentifier}/files/{fileIdentifier}
          method: delete

  PROJECT__FILE___prune:
    handler: src/handler.PROJECT__FILE___prune
    events:
      - http:
          path: /projects/{projectIdentifier}/files
          method: delete

  # PROJECT > FILE --- END

  # JOB
  JOB___create:
    handler: src/handler.JOB___create
    events:
      - http:
          path: /jobs
          method: post

  JOB___logs:
    handler: src/handler.JOB___logs
    events:
      - http:
          path: /jobs/logs
          method: post

  JOB___snapshot:
    handler: src/handler.JOB___snapshot
    events:
      - http:
          path: /jobs/snapshot
          method: post

  JOB___recovery:
    handler: src/handler.JOB___recovery
    events:
      - http:
          path: /jobs/recovery
          method: post
  # JOB --- END

  # SECRET_KEY
  SECRET__KEY___create:
    handler: src/handler.SECRET__KEY___create
    events:
      - http:
          path: /secret-keys
          method: post

  SECRET__KEY___list:
    handler: src/handler.SECRET__KEY___list
    events:
      - http:
          path: /secret-keys
          method: get

  SECRET__KEY___get:
    handler: src/handler.SECRET__KEY___get
    events:
      - http:
          path: /secret-keys/{key}
          method: get

  SECRET__KEY___remove:
    handler: src/handler.SECRET__KEY___remove
    events:
      - http:
          path: /secret-keys/{key}
          method: delete
  # SECRET_KEY --- END
