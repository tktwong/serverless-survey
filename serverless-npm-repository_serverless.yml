service:
  name: ${env:NPM_REGISTRY_NAME, 'perfsys-npm-registry'}
custom:
  NPM_REGISTRY_S3_NAME: ${env:NPM_REGISTRY_NAME, 'perfsys-npm-registry'}-artifacts

package:
  exclude:
    - test/**
    - deploy.sh
    - data/**

provider:
  name: aws
  runtime: nodejs12.x
#  stage: ${opt:stage, 'dev'}
  stage: npm
  region: ${env:NPM_REGISTRY_REGION, 'us-east-1'}
#  deploymentBucket:
#    name: ${env:NPM_REGISTRY_NAME, 'perfsys-npm-registry'}-state
  iamRoleStatements:

    -
      Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - ${self:custom.NPM_REGISTRY_S3_NAME}
            - '/*'

    -
      Effect: "Allow"
      Action:
        - s3:ListBucket
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - ${self:custom.NPM_REGISTRY_S3_NAME}

  environment:
    NPM_REGISTRY_S3_NAME: ${self:custom.NPM_REGISTRY_S3_NAME}

  endpointType: regional
  apiGateway: # Optional API Gateway global config
#    restApiId: xxxxxxxxxx # REST API resource ID. Default is generated by the framework
#    restApiRootResourceId: xxxxxxxxxx # Root resource ID, represent as / path
#    restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted
#      '/users': xxxxxxxxxx
#      '/users/create': xxxxxxxxxx
#    websocketApiId: # Websocket API resource ID. Default is generated by the framework
#    apiKeySourceType: HEADER # Source of API key for usage plan. HEADER or AUTHORIZER.
#    minimumCompressionSize: 1024 # Compress response when larger than specified size in bytes (must be between 0 and 10485760)
#    description: Some Description # Optional description for the API Gateway stage deployment
    binaryMediaTypes: # Optional binary media types the API might return
      - 'application/octet-stream'
      - 'application/x-gzip'
      - 'application/x-tar'

functions:

  echo:
    handler: index.handler
    events:
      - http:
          path: '/echo'
          method: get
          cors: true

  packageInfo:
    handler: get-package-info.handle
    events:
      - http:
          path: /{path+}
          method: get

resources:
  Resources:

    s3filesbucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.NPM_REGISTRY_S3_NAME}

    MyDistResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]
        PathPart: 'dist'
        RestApiId: !Ref ApiGatewayRestApi

    MyScopeResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref MyDistResource
        PathPart: '{scope}'
        RestApiId: !Ref ApiGatewayRestApi

    MyModuleResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref MyScopeResource
        PathPart: '{module}'
        RestApiId: !Ref ApiGatewayRestApi

    MyVersionsResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref MyModuleResource
        PathPart: 'versions'
        RestApiId: !Ref ApiGatewayRestApi

    MyVersionResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref MyVersionsResource
        PathPart: '{version}'
        RestApiId: !Ref ApiGatewayRestApi

    MyFileResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref MyVersionResource
        PathPart: '{file}'
        RestApiId: !Ref ApiGatewayRestApi

    MyS3Method:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        AuthorizationType: NONE
        Integration:
#          CacheKeyParameters:
#            - String
#          CacheNamespace: String
#          ConnectionId: String
#          ConnectionType: String
#          ContentHandling: String
          Credentials:
            Fn::GetAtt:
              - ApigatewayAccessMyS3Role
              - Arn
          IntegrationHttpMethod: GET
          IntegrationResponses:
           - StatusCode: 200
             SelectionPattern: '2\d{2}'
             ResponseParameters:
               method.response.header.Content-Type: integration.response.header.Content-Type
           - StatusCode: 500
             SelectionPattern: '5\d{2}'
             ResponseParameters:
               method.response.header.Content-Type: integration.response.header.Content-Type
          PassthroughBehavior: WHEN_NO_TEMPLATES
          RequestParameters:
            integration.request.path.scope: method.request.path.scope
            integration.request.path.version: method.request.path.version
            integration.request.path.module:	method.request.path.module
            integration.request.path.file:	method.request.path.file
#          RequestTemplates:
#            Key: Value
#          TimeoutInMillis: Integer
          Type: AWS
#          Uri: arn:aws:apigateway:us-east-1:s3:path/${env:bucketNamePrefix}${self:custom:bucketName}/{key}
#          Uri:
#            "Fn::Join":
#              - ''
#              -
#                - 'arn:aws'
#                - ':apigateway:'
#                - Ref: "AWS::Region"
#                - ':s3:path/'
#                - Ref: s3filesbucket
#                - '/'
#                - '{scope}'
#                - '/'
#                - '{module}'
#                - '/versions/'
#                - '{version}'
#                - '/'
#                - '{file}'
          Uri:
            "Fn::Join":
              - ''
              - - 'arn:aws'
                - ':apigateway:'
                - Ref: "AWS::Region"
                - ':'
                - Ref: s3filesbucket
                - '.s3:path/'
                - '{scope}'
                - '/'
                - '{module}'
                - '/versions/'
                - '{version}'
                - '/'
                - '{file}'
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type

#        OperationName: String
#        RequestModels:
#          Key: Value
        RequestParameters:
          method.request.path.scope: true
          method.request.path.version: true
          method.request.path.module: true
          method.request.path.file: true
        #        RequestValidatorId: String
        ResourceId: !Ref MyFileResource
        RestApiId: !Ref ApiGatewayRestApi

    ApigatewayAccessMyS3Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-S3Role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: ''
              Effect: "Allow"
              Principal:
                Service: "apigateway.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "getS3ObjectPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - "Fn::Join":
                        - '/'
                        - - "Fn::GetAtt": ["s3filesbucket", "Arn" ]
                          - '*'
    Deployment:
      DependsOn:
        - MyS3Method
      Type: 'AWS::ApiGateway::Deployment'
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        StageName: ${self:provider.stage}

  Outputs:
    NPMRegistryBucketName:
      Description: "NPM Registry bucket name"
      Value: ${self:custom.NPM_REGISTRY_S3_NAME}
