service: covid-tracka-api

provider:
    name: aws
    region: eu-west-2
    runtime: provided
    stage: v1
    logs:
        restApi: true
    apiGateway:
        binaryMediaTypes:
            - '*/*' 
    environment:
        APP_URL: 'https://dkqvmwcc151i4.cloudfront.net/'
        APP_KEY: ${ssm:/personalised_platform/APP_KEY}
        APP_DEBUG: 'false'
        JWT_SECRET: '9gEdta11ITeum3WoQkzs6dEhbAmGYmFT23jBIUtsM1DMGH4fd7iDMCyhXhnZgxY1'
        APP_NAME: 'BudgIT'
        LOG_CHANNEL: 'stderr'
        SESSION_DRIVER: 'cookie'
        VIEW_COMPILED_PATH: '/tmp/storage/framework/views'
        DB_CONNECTION: 'mysql'
        FILESYSTEM_DRIVER: 's3'
        CACHE_DRIVER: 'database'
        QUEUE_CONNECTION: 'database'
        DB_PORT: '3306'
        DB_HOST: ${ssm:/BUDGIT_DB_HOST}
        DB_DATABASE: 'covid_tracka'
        DB_USERNAME: ${ssm:/personalised_platform/DB_USERNAME}
        DB_PASSWORD: ${ssm:/personalised_platform/DB_PASSWORD}
        MIX_ASSET_URL: 'https://covid-tracka-storage.s3.eu-west-2.amazonaws.com' 
        MAIL_MAILER: 'ses'
        MAIL_HOST: 'email-smtp.eu-west-2.amazonaws.com'
        MAIL_PORT: '587'
        MAIL_USERNAME: ${ssm:/personalised_platform/MAIL_USERNAME}
        MAIL_PASSWORD: ${ssm:/personalised_platform/MAIL_PASSWORD}
        MAIL_ENCRYPTION: 'tls'
        MAIL_FROM_ADDRESS: ${ssm:/personalised_platform/MAIL_FROM_ADDRESS} 
        MAIL_FROM_NAME: 'BudgIT' 
        SES_REGION: 'eu-west-2'
        SES_KEY: ${ssm:/personalised_platform/DB_USERNAME}
        SES_SECRET: ${ssm:/personalised_platform/DB_PASSWORD}
        AWS_ACCESS_KEY_IDD: ${ssm:/open_treasury/AWS_ACCESS_KEY_ID}
        AWS_SECRET_ACCESS_KEYY:	${ssm:/open_treasury/AWS_SECRET_ACCESS_KEY}
        #AWS_DEFAULT_REGION: 'eu-west-2'
        AWS_BUCKET: # environment variable for Laravel
            Ref: Assets

    iamRoleStatements:
        # Allow Lambda to read and write files in the S3 buckets
        -   Effect: Allow
            Action: s3:*
            Resource:
                - Fn::GetAtt: Assets.Arn # the storage bucket
                - Fn::Join: ['', [Fn::GetAtt: Assets.Arn, '/*']] # everything in the storage bucket
        -   Effect: Allow
            Action: ses:*
            Resource: "*"

plugins:
    - ./vendor/bref/bref

package:
  exclude:
    - node_modules/**
    - public/storage
    - resources/assets/**
    - storage/**
    - tests/**

functions:
    website:
        handler: public/index.php
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-73-fpm}
        events:
            -   http: 'ANY /'
            -   http: 'ANY /{proxy+}'
    artisan:
        handler: artisan
        timeout: 120 # in seconds
        layers:
            - ${bref:layer.php-73} # PHP
            - ${bref:layer.console} # The "console" layer
        events:
            - schedule:
                input:
                    cli: "route:list"
                rate: rate(1 minute)
                enabled: false
 
    queue:
        handler: artisan
        memorySize: 256
        timeout: 600 # in seconds
        layers:
            - ${bref:layer.php-73} # PHP
            - ${bref:layer.console} # The "console" layer
        events:
            - schedule:
                input:
                    cli: "queue:work --timeout=400 --once"
                rate: rate(1 minute)
                enabled: false
     
     

resources:
    Resources:
        # The S3 bucket that stores the assets
        Assets:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: covid-tracka-storage
                CorsConfiguration:
                    CorsRules:
                        -   AllowedHeaders: ["*"]
                            AllowedMethods: [GET]
                            AllowedOrigins: ["*"]
        # The policy that makes the bucket publicly readable
        AssetsBucketPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket: !Ref Assets # References the bucket we defined above
                PolicyDocument:
                    Statement:
                        -   Effect: Allow
                            Principal: '*' # everyone
                            Action: 's3:GetObject' # to read
                            Resource: !Join ['/', [!GetAtt Assets.Arn, '*']] # things in the bucket
                            # alternatively you can write out Resource: 'arn:aws:s3:::<bucket-name>/*'

        WebsiteCDN:
            Type: AWS::CloudFront::Distribution
            Properties:
                DistributionConfig:
                    Enabled: true
                    # Cheapest option by default (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DistributionConfig.html)
                    PriceClass: PriceClass_100
                    # Enable http2 transfer for better performances
                    HttpVersion: http2
                    # Origins are where CloudFront fetches content
                    Origins:
                        # The website (AWS Lambda)
                        -   Id: Website
                            DomainName: !Join ['.', [!Ref ApiGatewayRestApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
                            # This is the stage
                            OriginPath: "/${opt:stage, 'v1'}"
                            CustomOriginConfig:
                                OriginProtocolPolicy: 'https-only' # API Gateway only supports HTTPS
                        # The assets (S3)
                        -   Id: Assets
                            DomainName: !GetAtt Assets.RegionalDomainName
                            S3OriginConfig: {} # this key is required to tell CloudFront that this is an S3 origin, even though nothing is configured
                            # If you host a static website, like a SPA, use s3-website URLs instead of the config above
                            # See https://stackoverflow.com/questions/15309113/amazon-cloudfront-doesnt-respect-my-s3-website-buckets-index-html-rules#15528757
                            # DomainName: !Select [2, !Split ["/", !GetAtt Assets.WebsiteURL]]
                            # CustomOriginConfig:
                            #     OriginProtocolPolicy: 'http-only' # S3 websites only support HTTP
                            # You'll also need to enable website hosting on your s3 bucket by configuring the WebsiteConfiguration property
                            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html#cfn-s3-bucket-websiteconfiguration
                    # The default behavior is to send everything to AWS Lambda
                    DefaultCacheBehavior:
                        AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
                        TargetOriginId: Website # the PHP application
                        # Disable caching for the PHP application https://aws.amazon.com/premiumsupport/knowledge-center/prevent-cloudfront-from-caching-files/
                        DefaultTTL: 0
                        MinTTL: 0
                        MaxTTL: 0
                        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
                        ForwardedValues:
                            QueryString: true
                            Cookies:
                                Forward: all # Forward cookies to use them in PHP
                            # We must *not* forward the `Host` header else it messes up API Gateway
                            Headers:
                                - 'Accept'
                                - 'Accept-Language'
                                - 'Origin'
                                - 'Referer'
                        ViewerProtocolPolicy: redirect-to-https
                    CacheBehaviors:
                        # Assets will be served under the `/assets/` prefix
                        -   PathPattern: 'assets/*'
                            TargetOriginId: Assets # the static files on S3
                            AllowedMethods: [GET, HEAD]
                            ForwardedValues:
                                # No need for all that with assets
                                QueryString: 'false'
                                Cookies:
                                    Forward: none
                            ViewerProtocolPolicy: redirect-to-https
                            Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
                    CustomErrorResponses:
                        # Do not cache HTTP errors
                        -   ErrorCode: 500
                            ErrorCachingMinTTL: 0
                        -   ErrorCode: 504
                            ErrorCachingMinTTL: 0
