# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-serverless-nodejs-express
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  environment:
   JWT_SECRET: ${env:JWT_SECRET}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# Plugins
plugins:
# - serverless-bundle # Package our functions with Webpack
# - serverless-offline
- serverless-dotenv-plugin # Load .env as environment variables

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
package:
  excludeDevDependencies: false

functions:
  app-api:
    handler: handler.main
    description: description
    memorySize: 128
    timeout: 5
    # role: arn-role
    # tags:
    #   Department: IT
    #   Name: name
    #   Team: team
    #   TeamMember: TeamMember
    # environment:
    #   key: value
    events:
      - http:
          path: /
          method: get
          cors: true
      - http:
          path: /{proxy+}
          method: any
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


# custom:
#   bundle:
#     sourcemaps: false                # Enable source maps
#     caching: true                   # Enable Webpack caching
#     stats: false                    # Don't print out any Webpack output
#     linting: true                   # Enable linting as a part of the build process
    # tsConfig: "tsconfig.json"       # Path to your 'tsconfig.json', if it's not in the root
    # forceInclude:                   # Optional list of NPM packages that need to be included
    #   - mysql                         # Only necessary if packages are included dynamically
    # ignorePackages:                 # Ignore building any of the following packages
    #   - hiredis                       # For ex, hiredis needs to be ignored if using redis
    # externals:                      # Set non Webpack compatible packages as externals
    #   - isomorphic-webcrypto          # They'll be included in the node_modules/, more below
    # forceExclude:                   # Don't include these in the package
    #   - chrome-aws-lambda             # Because it'll be provided through a Lambda Layer
    # fixPackages:                    # Include fixes for specific packages
    #   - "formidable@1.x"              # For ex, formidable@1.x doesn't work by default with Webpack
    # copyFiles:                      # Copy any additional files to the generated package
    #   - from: './package.json'              # Where the files are currently
    #     to: './'                      # Where in the package should they go
    # aliases:                        # Create an alias to 'import' modules easily with a custom path
    #   - "@root": .       # For ex, replace the long 'custom-lib/src/lib' with 'Lib'
    #   - "@middleware": src/middleware,
    #   - "@utils": src/utils,
    #   - "@routers": src/routers
    # concatText:                     # Concatenate text files into one file on the generated package
    #   - files: 'schema/*.txt'         # Where the files that need to be concatenated are currently located
    #     outputPath: './'              # Where the concatenated file should go in the package
    #     name: 'schema.txt'            # The name the the concatenated file should have
    # packager: npm                   # Specify a packager, 'npm' or 'yarn'. Defaults to 'npm'.
    # packagerOptions:                # Run a custom script in the package process
    #   scripts:                        # https://github.com/serverless-heaven/serverless-webpack#custom-scripts
    #     - echo hello > test
    # rawFileExtensions:              # An array of file extensions to import using the Webpack raw-loader.
    #   - csv                         # Defaults to ['pem', 'txt']
