service: junior-reaktor-2021-v2
# app and org for use with dashboard.serverless.com
app: reaktor-2021
org: vietasia

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  productTableName: product

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  endpointType: REGIONAL
  stage: dev
  region: eu-west-1
  apiGateway:
    shouldStartNameWithService: true
  
  # accessible via process.env.{variable}
  environment:
    productTableName: ${self:custom.productTableName}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ ProductsTable, Arn ]
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        - "Fn::GetAtt": [ DataBucket, Arn ]

functions:
  getProductsByCategory:
    handler: getProductsByCategory.main
    events:
      - http:
          path: /products/{category}
          method: get
          cors: true
  updateDatabase:
    handler: updateDatabase.main
    timeout: 60

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.productTableName}
        AttributeDefinitions:
          - AttributeName: category
            AttributeType: S
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: category
            KeyType: HASH
          - AttributeName: productId
            KeyType: RANGE
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST
    DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000