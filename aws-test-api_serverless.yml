service: siemprepe-test-api

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  secrets: ${file(secrets.json)}
  usersTableName: 'users-table-${self:provider.stage}'
  registrationTableName: 'registration-table-${self:provider.stage}'
  parkingsTableName: 'parkings-table-${self:provider.stage}'
  reservationsTableName: 'reservations-table-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: 'users-table-${self:provider.stage}'
            sources: [./data/test-users.json]
          - table: 'parkings-table-${self:provider.stage}'
            sources: [./data/test-parkings.json]
          - table: 'reservations-table-${self:provider.stage}'
            sources: [./data/test-reservations.json]

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["RegistrationDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ParkingsDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ReservationsDynamoDBTable", "Arn" ] }
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource: "*"
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    REGISTRATION_TABLE: ${self:custom.registrationTableName}
    PARKINGS_TABLE: ${self:custom.parkingsTableName}
    RESERVATIONS_TABLE: ${self:custom.reservationsTableName}
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    DEPLOY_URL: ${file(secrets.json):${opt:stage, self:provider.stage}.DEPLOY_URL}

functions:
  verify-token:
    handler: auth/VerifyToken.auth
    cors: true
  register:
    handler: auth/AuthHandler.handler
    events:
      - http:
          path: register
          method: post
          cors: true
  activateRegistration:
    handler: auth/AuthHandler.handler
    events:
      - http:
          path: register/activate/{proxy+}
          method: get
          cors: true
  login:
    handler: auth/AuthHandler.handler
    events:
      - http:
          path: login
          method: post
          cors: true
  getParkings:
    handler: parkings/ParkingsHandler.handler
    events:
      - http:
          path: parkings
          method: get
          cors: true
          authorizer: verify-token
  addParking:
    handler: parkings/ParkingsHandler.handler
    events:
      - http:
          path: parkings
          method: post
          cors: true
          authorizer: verify-token
  getReservations:
    handler: reservations/ReservationsHandler.handler
    events:
      - http:
          path: reservations/{proxy+}
          method: get
          cors: true
          authorizer: verify-token
  addReservation:
    handler: reservations/ReservationsHandler.handler
    events:
      - http:
          path: reservations
          method: post
          cors: true
          authorizer: verify-token
  deleteReservation:
    handler: reservations/ReservationsHandler.handler
    events:
      - http:
          path: reservations/{proxy+}
          method: delete
          cors: true
          authorizer: verify-token
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTableName}
    RegistrationDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: token
            AttributeType: S
        KeySchema:
          -
            AttributeName: token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.registrationTableName}
    ParkingsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: parkingId
            AttributeType: S
        KeySchema:
          -
            AttributeName: parkingId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.parkingsTableName}
    ReservationsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: parkingId
            AttributeType: S
          -
            AttributeName: reservationDate
            AttributeType: S
        KeySchema:
          -
            AttributeName: parkingId
            KeyType: HASH
          -
            AttributeName: reservationDate
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.reservationsTableName}
