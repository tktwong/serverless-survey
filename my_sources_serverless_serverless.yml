
service: myserverlessproject
# app and org for use with dashboard.serverless.com
app: my-sources
org: mysources

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  environment:
    usersTable: ${self:custom.usersTable}
    foldersTable: ${self:custom.foldersTable}
    itemsTable: ${self:custom.itemsTable}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

custom:
  usersTable: users
  foldersTable: folders
  itemsTable: items

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true 

  listAllUserFolders:
    handler: lambdas/endpoints/listAllUserFolders.handler
    events:
      - http:
          path: list-user-folders/{ID}
          method: GET
          cors: true

  getFolderItems:
    handler: lambdas/endpoints/getFolderItems.handler
    events:
      - http:
          path: get-folder-items/{ID}
          method: POST
          cors: true

  listCategoryFolders:
    handler: lambdas/endpoints/listCategoryFolders.handler
    events:
      - http:
          path: list-category-folders/{ID}
          method: POST
          cors: true

  getCategoryItems:
    handler: lambdas/endpoints/getCategoryItems.handler
    events:
      - http:
          path: get-category-items/{ID}
          method: POST
          cors: true
    
  moveItem:
    handler: lambdas/endpoints/moveItem.handler
    events:
      - http:
          path: move-item/{ID}
          method: POST
          cors: true

  addItem:
    handler: lambdas/endpoints/addItem.handler
    events:
      - http:
          path: add-item/{ID}
          method: POST
          cors: true

  deleteFolder:
    handler: lambdas/endpoints/deleteFolder.handler
    events:
      - http:
          path: delete-folder/{ID}
          method: POST
          cors: true

  createUser:
    handler: lambdas/endpoints/createUser.handler
    events:
      - http:
          path: create-user/{ID}
          method: POST
          cors: true

  createFolder:
    handler: lambdas/endpoints/createFolder.handler
    events:
      - http:
          path: create-folder/{ID}
          method: POST
          cors: true
          
  updateFolder:
    handler: lambdas/endpoints/updateFolder.handler
    events:
      - http:
          path: update-folder/{ID}
          method: POST
          cors: true 

  removeItem:
    handler: lambdas/endpoints/removeItem.handler
    events:
      - http:
          path: remove-item/{ID}
          method: POST
          cors: true

  getItemsBySearch:
    handler: lambdas/endpoints/getItemsBySearch.handler
    events:
      - http:
          path: get-search-items/{ID}
          method: POST
          cors: true

resources:
  Resources:
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTable}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        
    FoldersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.foldersTable}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: id_cat
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

        GlobalSecondaryIndexes:
          - IndexName: id_cat
            KeySchema:
              - AttributeName: id_cat
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: user_id
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY

    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.itemsTable}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: fid_cat
            AttributeType: S
          - AttributeName: uid_cat
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

        GlobalSecondaryIndexes:
          - IndexName: fid_cat
            KeySchema:
              - AttributeName: fid_cat
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: uid_cat
            KeySchema:
              - AttributeName: uid_cat
                KeyType: HASH
            Projection:
              ProjectionType: ALL