service: tamer-service

provider:
  name: aws
  runtime: java8
  environment:
    REGION: ${opt:region, self:provider.region}
    TRAINER_TABLE: { "Ref" : "TrainerTable" }
    PET_TABLE: { "Ref" : "PetTable" }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

package:
  artifact: target/tamer-dev.jar

functions:
  feed-pet:
    handler: io.patrickmorton.tamer.handlers.FeedPetHandler
    description: Feed yo pet
    tags:
      author: Patrick Morton
      product: Tamer

  adopt-pet:
    handler: io.patrickmorton.tamer.handlers.AdoptPetHandler
    description: Get a pet!
    tags:
      author: Patrick Morton
      product: Tamer

  retire-pet:
    handler: io.patrickmorton.tamer.handlers.RetirementHandler
    description: Off to the glue factory
    tags:
      author: Patrick Morton
      product: Tamer

resources:
  Resources:
    TrainerTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: slackName
            AttributeType: S
        KeySchema:
          -
            AttributeName: slackName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: Trainer
    PetTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: petId
            AttributeType: S
        KeySchema:
          -
            AttributeName: petId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: Pet
plugins:
  - serverless-dynamodb-local
  - serverless-offline