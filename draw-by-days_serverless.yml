service:
  name: scheduled-tweeter

plugins:
  - serverless-stage-manager
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  timeout: 40
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
      Resource: { Fn::GetAtt: [ ImageInfoTable, Arn ] }

functions:
  scheduledTweeter:
    handler: handler.tweeter
    environment:
      IMAGE_STORAGE_BUCKET_NAME: ${self:custom.imageStorageName}
      IMAGE_INFO_TABLE_NAME: ${self:custom.imageInfoTableName}
      TWITTER_CONSUMER_KEY: ${ssm:/drawbydays/twitter/consumer-key~true}
      TWITTER_CONSUMER_SECRET: ${ssm:/drawbydays/twitter/consumer-secret~true}
      TWITTER_ACCESS_TOKEN: ${ssm:/drawbydays/twitter/access-token~true}
      TWITTER_TOKEN_SECRET: ${ssm:/drawbydays/twitter/access-token-secret~true}

custom:
  stages:
    - dev
    - prod
  imageStorageName: draw-by-days-images-${self:provider.stage}
  imageInfoTableName: draw-by-days-images-info-${self:provider.stage}
  remover:
    buckets:
      - ${self:custom.imageStorageName}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

resources:
  Resources:
    ImageStorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageStorageName}
        AccessControl: Private

    ImageInfoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.imageInfoTableName}

    LambdaDynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "DynamoDB-${self:custom.imageInfoTableName}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "DynamoDB-${self:custom.imageInfoTableName}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:Scan"
                  Resource:
                    - Fn::Join: ["", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { Ref: "AWS::AccountId" }, ":table/", "${self:custom.imageInfoTableName}" ]]

  Outputs:
    ImageStorageBucket:
      Value: ${self:custom.imageStorageName}
    ImageInfoTable:
      Value: ${self:custom.imageInfoTableName}
