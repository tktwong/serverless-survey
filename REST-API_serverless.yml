service: rest-api
provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  environment: ${self:custom}

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:${self:custom.DYNAMODB_TABLE}"
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

functions:
  hello:
    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get

resources:
  Resources:
    NotesDynamoDbTable:
      Type: "AWS::DYNAMODB::Table"
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchama:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.DYNAMODB_TABLE}
custom:
  DYNAMODB_TABLE: notes
  dynamodb:
    start:
      port: 8000
      inMemory: true # run in memory and won't take any storage space
      migrate: true # creates the table when running the app

plugins:
  - serverless-dynamodb-local
  - serverless-offline
