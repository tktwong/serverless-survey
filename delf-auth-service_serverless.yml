
# 
#  serverless.yml
# 
#  Unauthorized copying of this file, via any medium is strictly prohibited
#  Proprietary and confidential
# 
#  2021 @ Delfrinando Pranata (delfrinando@gmail.com)
# 

service: delf-auth-service
provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-1
  stage: dev
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  deploymentBucket:
    name: serverless-code-deployment
  environment:
    REGION: ${self:provider.region}
    USERS_TABLE: ${env:USERS_TABLE}
    ROLES_TABLE: ${env:ROLES_TABLE}
    PERMISSIONS_TABLE: ${env:PERMISSIONS_TABLE}
    JWT_SECRET: ${env:JWT_SECRET}
    AWS_ID: ${env:AWS_ID}
  memorySize: 256
  timeout: 600
  logRetentionInDays: 1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

functions:
  getApiDoc:
    handler: apidoc/index.handler
    events:
      - http:
          path: /api/documentation
          method: get
  
  verifytoken:
    handler: src/helper/security.verifyToken

  whoami:
    handler: src/handler.whoami
    events:
      - http:
          path: api/whoami
          method: get
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600

  signup:
    handler: src/handler.signup
    events:
      - http:
          path: api/signup
          method: post
          cors: true

  login:
    handler: src/handler.login
    events:
      - http:
          path: api/login
          method: post
          cors: true

  users:
    handler: src/handler.users
    events:
      - http:
          path: api/users/{id}
          method: get
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
      - http:
          path: api/users
          method: get
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600

  permissions:
    handler: src/handler.permissions
    events:
      - http:
          path: api/permissions
          method: get
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
      - http:
          path: api/permissions
          method: post
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600

  roles:
    handler: src/handler.roles
    events:
      - http:
          path: api/roles
          method: get
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
      - http:
          path: api/roles
          method: post
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600

  assignRole:
    handler: src/handler.assignRole
    events:
      - http:
          path: api/users/roles
          method: post
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
      - http:
          path: api/users/roles
          method: get
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600

  getPermissions:
    handler: src/handler.getPermissions
    events:
      - http:
          path: api/users/permissions
          method: post
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600
      - http:
          path: api/users/permissions
          method: get
          cors: true
          authorizer:
            name: verifytoken
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: email
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ByEmail
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: ByUsername
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    rolesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ROLES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ByRoleName
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    permissionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PERMISSIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: ByPermissionName
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

  Outputs:
    UsersTableArn:
      Description: The ARN for the User's Table
      Value:
        'Fn::GetAtt': [usersTable, Arn]
      Export:
        Name: ${self:service}:UsersTableArn
    RolesTableArn:
      Description: The ARN for the Role's Table
      Value:
        'Fn::GetAtt': [rolesTable, Arn]
      Export:
        Name: ${self:service}:RolesTableArn
    PermissionnsTableArn:
      Description: The ARN for the Permission's Table
      Value:
        'Fn::GetAtt': [permissionsTable, Arn]
      Export:
        Name: ${self:service}:PermissionnsTableArn

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

plugins:
  - serverless-dynamodb-local
  - serverless-offline