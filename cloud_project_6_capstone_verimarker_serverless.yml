service:
  name: verimarker-app

#package:
#  individually: true

custom:
  dynamodb:
    stages:
      - v2
    start:
      port: 8000
      inMemory: true
      migrate: true
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: VeriMarker API
        description: Serverless application for VeriMarker, a plagiarism detection application for managing student's submissions
    models:
      - name: CreateUserRequest
        contentType: application/json
        schema: ${file(models/user/create-user-request.json)}
      - name: UpdateUserRequest
        contentType: application/json
        schema: ${file(models/user/update-user-request.json)}
      - name: CreateCourseRequest
        contentType: application/json
        schema: ${file(models/course/create-course-request.json)}
      - name: UpdateCourseRequest
        contentType: application/json
        schema: ${file(models/course/update-course-request.json)}
      - name: CreateAssigmentRequest
        contentType: application/json
        schema: ${file(models/assignment/create-assignment-request.json)}
      - name: UpdateAssignmentRequest
        contentType: application/json
        schema: ${file(models/assignment/update-assignment-request.json)}
      - name: CreateSubmissionRequest
        contentType: application/json
        schema: ${file(models/submission/create-submission-request.json)}
      - name: UpdateSubmissionRequest
        contentType: application/json
        schema: ${file(models/submission/update-submission-request.json)}

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-existing-s3
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs8.10
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  stage: ${opt:stage, 'v2'}
  region: ${opt:region, 'us-east-1'}
  tracing:
    lambda: true
    apiGateway: true
  environment:
    USERS_TABLE: VeriMarker-Users-${self:provider.stage}
    USERS_USERID_INDEX: Users_userId_Index
    USERS_EMAIL_INDEX: Users_email_Index
    USERS_USERTYPE_INDEX: Users_userType_Index

    COURSES_TABLE: VeriMarker-Courses-${self:provider.stage}
    COURSES_COURSEID_INDEX: Courses_courseId_Index
    COURSES_INSTRUCTORID_INDEX: Courses_instructorId_Index
    COURSES_ACADYEAR_INDEX: Courses_acadYear_Index
    COURSES_COURSECODE_INDEX: Courses_courseCode_Index

    ASSIGNMENTS_TABLE: VeriMarker-Assignments-${self:provider.stage}
    ASSIGNMENTS_ASSIGNMENTID_INDEX: Assignments_assignmentId_Index
    ASSIGNMENTS_COURSEID_INDEX: Assignments_courseId_Index
    ASSIGNMENTS_ASSIGNMENTNAME_INDEX: Assignments_assignmentName_Index

    SUBMISSIONS_TABLE: VeriMarker-Submissions-${self:provider.stage}
    SUBMISSIONS_SUBMISSIONID_INDEX: Submissions_submissionId_Index
    SUBMISSIONS_ASSIGNMENTID_INDEX: Submissions_assignmentId_Index
    SUBMISSIONS_STUDENTID_INDEX: Submissions_studentId_Index
    SUBMISSIONS_INSTRUCTORID_INDEX: Submissions_instructorId_Index

    VG_SUBMISSIONS_FILES_S3_BUCKET: verimarker-submissions-files-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

functions:
  Auth0:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateUser:
    handler: src/lambda/http/user/createUser.handler
    events:
      - http:
          method: post
          path: users
          cors: true
          authorizer: Auth0
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new user
            description: Register an user whether it is student or instructor
            requestModels:
              'application/json': CreateUserRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_EMAIL_INDEX}      
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
  UpdateUser:
    handler: src/lambda/http/user/updateUser.handler
    events:
      - http:
          method: patch
          path: users
          cors: true
          authorizer: Auth0
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update existing user
            description: Register an user whether it is student or instructor
            requestModels:
              'application/json': UpdateUserRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_EMAIL_INDEX}      
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
  GetUser:
    handler: src/lambda/http/user/getUser.handler
    events:
      - http:
          method: get
          path: user
          cors: true
          authorizer: Auth0
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
  GetUsersByType:
    handler: src/lambda/http/user/getUsersByUserType.handler
    events:
      - http:
          method: get
          path: users/{userType}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERTYPE_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"       
  CreateCourse:
    handler: src/lambda/http/course/createCourse.handler
    events:
      - http:
          method: post
          path: courses
          cors: true
          authorizer: Auth0
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new course
            description: Create a new course for the instructor
            requestModels:
              'application/json': CreateCourseRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_COURSECODE_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"    
  GetCourses:
    handler: src/lambda/http/course/getCourses.handler
    events:
      - http:
          method: get
          path: courses
          cors: true
          authorizer: Auth0
      - http:
          method: get
          path: courses/{queryId}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_INSTRUCTORID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_ACADYEAR_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  GetInstructorCourses:
    handler: src/lambda/http/course/getInstructorCourses.handler
    events:
      - http:
          method: get
          path: instructor/{instructorId}/courses/{acadYear}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_ACADYEAR_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*" 
  GetCourse:
    handler: src/lambda/http/course/getCourse.handler
    events:
      - http:
          method: get
          path: course/{queryId}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_COURSEID_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  UpdateCourse:
    handler: src/lambda/http/course/updateCourse.handler
    events:
      - http:
          method: patch
          path: courses/{queryId}
          cors: true
          authorizer: Auth0
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update the course
            description: Update an existing course for the instructor
            requestModels:
              'application/json': UpdateCourseRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_COURSEID_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*" 
  DeleteCourse:
    handler: src/lambda/http/course/deleteCourse.handler
    events:
      - http:
          method: delete
          path: courses/{queryId}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_COURSEID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}/index/${self:provider.environment.ASSIGNMENTS_COURSEID_INDEX}   
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*" 
  CreateAssignment:
    handler: src/lambda/http/assignment/createAssignment.handler
    events:
      - http:
          method: post
          path: assignments
          cors: true
          authorizer: Auth0
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new assignment under the course of the instructor
            description: Create a new assignment under the course of the instructor
            requestModels:
              'application/json': CreateAssigmentRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}/index/${self:provider.environment.COURSES_COURSEID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}    
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}/index/${self:provider.environment.ASSIGNMENTS_ASSIGNMENTNAME_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"  
  GetAssignments:
    handler: src/lambda/http/assignment/getAssignments.handler
    events:
      - http:
          method: get
          path: assignments/{queryId}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}    
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}/index/${self:provider.environment.ASSIGNMENTS_COURSEID_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*" 
  GetAssignment:
    handler: src/lambda/http/assignment/getAssignment.handler
    events:
      - http:
          method: get
          path: assignment/{queryId}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}    
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}/index/${self:provider.environment.ASSIGNMENTS_ASSIGNMENTID_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  UpdateAssignment:
    handler: src/lambda/http/assignment/updateAssignment.handler
    events:
      - http:
          method: patch
          path: assignments/{queryId}
          cors: true
          authorizer: Auth0
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing assignment under the course of the instructor
            description: Update an existing assignment under the course of the instructor
            requestModels:
              'application/json': UpdateAssignmentRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}    
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}/index/${self:provider.environment.ASSIGNMENTS_ASSIGNMENTID_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"  
  DeleteAssignment:
    handler: src/lambda/http/assignment/deleteAssignment.handler
    events:
      - http:
          method: delete
          path: assignments/{queryId}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}    
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}/index/${self:provider.environment.ASSIGNMENTS_ASSIGNMENTID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}    
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}/index/${self:provider.environment.SUBMISSIONS_ASSIGNMENTID_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  CreateSubmission:
    handler: src/lambda/http/submission/createSubmission.handler
    events:
      - http:
          method: post
          path: submissions
          cors: true
          authorizer: Auth0
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new submission for the student
            description: Create a new submission for the student
            requestModels:
              'application/json': CreateSubmissionRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}    
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ASSIGNMENTS_TABLE}/index/${self:provider.environment.ASSIGNMENTS_ASSIGNMENTID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.VG_SUBMISSIONS_FILES_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  GetAssignmentSubmissions:
    handler: src/lambda/http/submission/getAssignmentSubmissions.handler
    events:
      - http:
          method: get
          path: submissions/assignment/{queryId}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}  
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}/index/${self:provider.environment.SUBMISSIONS_ASSIGNMENTID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  GetUserSubmissions:
    handler: src/lambda/http/submission/getUserSubmissions.handler
    events:
      - http:
          method: get
          path: submissions
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}  
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}/index/${self:provider.environment.SUBMISSIONS_STUDENTID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}/index/${self:provider.environment.SUBMISSIONS_INSTRUCTORID_INDEX}    
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  GetSubmission:
    handler: src/lambda/http/submission/getSubmission.handler
    events:
      - http:
          method: get
          path: submission/{queryId}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}/index/${self:provider.environment.SUBMISSIONS_SUBMISSIONID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  UpdateSubmission:
    handler: src/lambda/http/submission/updateSubmission.handler
    events:
      - http:
          method: patch
          path: submissions/{queryId}
          cors: true
          authorizer: Auth0
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update existing submission of the student
            description: Update existing submission of the student
            requestModels:
              'application/json': UpdateSubmissionRequest
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}/index/${self:provider.environment.SUBMISSIONS_STUDENTID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}/index/${self:provider.environment.SUBMISSIONS_INSTRUCTORID_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*" 
  DeleteSubmission:
    handler: src/lambda/http/submission/deleteSubmission.handler
    events:
      - http:
          method: delete
          path: submissions/{queryId}
          cors: true
          authorizer: Auth0
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USERS_USERID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}    
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}/index/${self:provider.environment.SUBMISSIONS_STUDENTID_INDEX}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBMISSIONS_TABLE}/index/${self:provider.environment.SUBMISSIONS_INSTRUCTORID_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.VG_SUBMISSIONS_FILES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.VG_SUBMISSIONS_FILES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: userType
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERS_USERID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.USERS_EMAIL_INDEX}
            KeySchema:
            - AttributeName: email
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.USERS_USERTYPE_INDEX}
            KeySchema:
            - AttributeName: userType
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}
    CoursesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: instructorId
            AttributeType: S
          - AttributeName: acadYear
            AttributeType: N
          - AttributeName: courseCode
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: courseId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COURSES_COURSEID_INDEX}
            KeySchema:
            - AttributeName: courseId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.COURSES_INSTRUCTORID_INDEX}
            KeySchema:
            - AttributeName: instructorId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.COURSES_ACADYEAR_INDEX}
            KeySchema:
            - AttributeName: acadYear
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.COURSES_COURSECODE_INDEX}
            KeySchema:
            - AttributeName: courseCode
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COURSES_TABLE}
    AssignmentsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: assignmentId
            AttributeType: S
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: assignmentName
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: assignmentId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ASSIGNMENTS_ASSIGNMENTID_INDEX}
            KeySchema:
            - AttributeName: assignmentId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.ASSIGNMENTS_COURSEID_INDEX}
            KeySchema:
            - AttributeName: courseId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.ASSIGNMENTS_ASSIGNMENTNAME_INDEX}
            KeySchema:
            - AttributeName: assignmentName
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ASSIGNMENTS_TABLE}
    SubmissionsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: submissionId
            AttributeType: S
          - AttributeName: assignmentId
            AttributeType: S
          - AttributeName: studentId
            AttributeType: S
          - AttributeName: instructorId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: submissionId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.SUBMISSIONS_SUBMISSIONID_INDEX}
            KeySchema:
            - AttributeName: submissionId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.SUBMISSIONS_ASSIGNMENTID_INDEX}
            KeySchema:
            - AttributeName: assignmentId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.SUBMISSIONS_STUDENTID_INDEX}
            KeySchema:
            - AttributeName: studentId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.SUBMISSIONS_INSTRUCTORID_INDEX}
            KeySchema:
            - AttributeName: instructorId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SUBMISSIONS_TABLE}
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false