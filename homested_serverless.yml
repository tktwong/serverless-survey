service: homeview-api

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${ssm:diagnosticDataCache~true}"

functions:
  getDiagnostics:
    handler: diagnostics.get
    environment:
      HDM_USER: ${ssm:HDM_user~true}
      HDM_PASSWORD: ${ssm:HDM_password~true}
      HDM_URL_PART1: ${ssm:HDM_url_part1~true}
      HDM_URL_PART2: ${ssm:HDM_url_part2~true}
      DIAGNOSTIC_DATA_CACHE: ${ssm:diagnosticDataCache~true}
    events:
      - http:
          path: get-diagnostics
          method: get
          cors: true
          authorizer: aws_iam
    Policies:
      - DynamoDBCrudPolicy:
          TableName: ${ssm:diagnosticDataCache~true}
  findCustomer:
    handler: customer.find
    environment:
      HDM_USER: ${ssm:HDM_user~true}
      HDM_PASSWORD: ${ssm:HDM_password~true}
      HDM_URL_PART1: ${ssm:HDM_url_part1~true}
      HDM_URL_PART2: ${ssm:HDM_url_part2~true}
    events:
      - http:
          path: find-customer
          method: get
          cors: true
          authorizer: aws_iam
resources:
  Resources:
    diagnosticDataCache: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${ssm:diagnosticDataCache~true}
        AttributeDefinitions:
          - AttributeName: serialNumber
            AttributeType: S
        KeySchema:
          - AttributeName: serialNumber
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: cognito_homeview_api_user_pool-${opt:stage, 'dev'}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    # Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: cognito_homeview_api_client
        UserPoolId:
          Ref: CognitoUserPool
    # Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: cognito_homeview_api_identity_pool-${opt:stage, 'dev'}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: appHomeviewApiAuthRole-${opt:stage, 'dev'}
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoHomeviewAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: appHomeViewApiUnauthRole-${opt:stage, 'dev'}

        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoHomeviewUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
