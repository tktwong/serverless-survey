service: ordersapp

# app and org for use with dashboard.serverless.com
app: ordersapp
org: lukaspierce

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.secrets.NODE_ENV}
  region: us-east-1
  environment:
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    DYNAMODB_ORDERS_TABLE: ${self:service}-orders-${self:custom.secrets.NODE_ENV}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan*
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-orders-${self:custom.secrets.NODE_ENV}

functions:
  nuxt:
    handler: index.nuxt
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{proxy+}
          method: ANY
  api:
    handler: index.api
    events:
      - http:
          path: /api
          method: ANY
          authorizer: ${self:custom.apiAuthorizer}
          cors: true
      - http:
          path: /api/{proxy+}
          method: ANY
          authorizer: ${self:custom.apiAuthorizer}
          cors: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    ordersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-orders-${self:custom.secrets.NODE_ENV}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-pseudo-parameters
  - serverless-apigw-binary
  # - serverless-domain-manager
  - serverless-offline

custom:
  secrets: ${file(secrets.json)}
  apiAuthorizer:
    arn: arn:aws:cognito-idp:us-east-1:025797272057:userpool/us-east-1_Pqb8chlM1
  apigwBinary:
    types:
      - '*/*'
    # customDomain:
    #   domainName: ${self:custom.secrets.DOMAIN}
    #   basePath: ''
    #   stage: ${self:custom.secrets.NODE_ENV}
    #   createRoute53Record: true
    ## endpointType: 'regional'
    ## if the ACM certificate is created in a region except for `'us-east-1'` you need `endpointType: 'regional'`
