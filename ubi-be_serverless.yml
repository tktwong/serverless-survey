service: ubidobi

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  vpc:
    securityGroupIds:
      - sg-0d8d6c6aa4031d6a5
    subnetIds:
      - subnet-fed3b0b6
      - subnet-dc3de086
      - subnet-d9b724bf
  environment:
    MYSQLHOST: 'ubi.colyn5fsj6kg.eu-west-1.rds.amazonaws.com'
    MYSQLPORT: '3306'
    MYSQLUSER: 'healyma'
    MYSQLPASS: 'see8Koxe2013'
    MYSQLDATABASE: 'ubi'
    todosTableName: ${self:custom.stage}-ubi-todos
    todoItemsTableName: ${self:custom.stage}-ubi-todoItems
    notesTableName: ${self:custom.stage}-ubi-notes
    stripeSecretKey: ${self:custom.environment.stripeSecretKey}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource: "arn:aws:dynamodb:eu-west-1:*:table/*/index/*"
functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create-note:
    handler: notes/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  get-note:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: notes/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list-notes:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: notes/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update-note:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: notes/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete-note: 
    # Defines an HTTP endpoint to calls the main function in delete.js
    # path: url path is /notes/{id}
    # method: DELETE request
    handler: notes/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  create-todo:
    handler: todos/create.main
    events:
      - http:
          path: todos
          method: post
          cors: true
          authorizer: aws_iam
  get-todo:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: todos/get.main
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list-todos:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: todos/list.main
    events:
      - http:
          path: todos
          method: get
          cors: true
          authorizer: aws_iam

  update-todo:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: todos/update.main
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete-todo: 
    # Defines an HTTP endpoint to calls the main function in delete.js
    # path: url path is /notes/{id}
    # method: DELETE request
    handler: todos/delete.main
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  create-todoItem:
    handler: todoItems/create.main
    events:
      - http:
          path: todoItems
          method: post
          cors: true
          authorizer: aws_iam
  get-todoItems:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: todoItems/get.main
    events:
      - http:
          path: todoItems/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list-todoItems:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: todoItems/list.main
    events:
      - http:
          path: todoItems
          method: get
          cors: true
          authorizer: aws_iam

  update-todoItems:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: todoItems/update.main
    events:
      - http:
          path: todoItems/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete-todoItems: 
    # Defines an HTTP endpoint to calls the main function in delete.js
    # path: url path is /notes/{id}
    # method: DELETE request
    handler: todoItems/delete.main
    events:
      - http:
          path: todoitems/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
