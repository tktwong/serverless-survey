service: 
  name: ${opt:servicename, "smart-sched"}

custom:
  log_level: INFO 
  region: ${opt:region, "ap-southeast-2"} # AWS deployment region
  pythonRequirements:
    noDeploy:
      [
        "docutils",
        "jmespath",
        "python-dateutil",
        "s3transfer",
        "six",
        "pip",
        "setuptools",
      ]
    slim: true
  # cli options variables 
  redshiftclusterid: ${opt:redshiftclusterid}
  algorithmarn: ${opt:algorithmarn, "arn:aws:forecast:::algorithm/ARIMA"}
  enableautoml: ${opt:enableautoml, "DISABLED"} # possible values are ENABLED or DISABLED
  timezone: ${opt:timezone, "Australia/Melbourne"}
  intervalminutes: ${opt:intervalminutes, "15"}
  # custom service wide variables 
  datasetdomain: CUSTOM
  redshiftclusterarn: "arn:aws:redshift:#{AWS::Region}:#{AWS::AccountId}:cluster:${self:custom.redshiftclusterid}" # depends on input above
  resumeredshifteventname: ${self:service}-resume-redshift-event-${self:provider.stage}
  pauseredshifteventname: ${self:service}-pause-redshift-event-${self:provider.stage}
  automl:
    ENABLED: "true"
    DISABLED: "false"
    default: "false"

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, "dev"} # Override via CLI "--stage dev"
  region: ${self:custom.region}
  stackName: ${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "forecast:*" 
      Resource: "*"
    - Effect: Allow
      Action:
        - "iam:PassRole"
      Resource: "#{ForecastRole.Arn}"
  environment: 
    DATASET_DOMAIN: ${self:custom.datasetdomain}
    DATASET_TYPE: TARGET_TIME_SERIES
    TIMEZONE: ${self:custom.timezone}
    INTERVAL_MINUTES: ${self:custom.intervalminutes}
    ALGORITHM_ARN: ${self:custom.algorithmarn}
    ENABLE_AUTOML: ${self:custom.automl.${self:custom.enableautoml}, ${self:custom.automl.default}}
    METRICS_BUCKET: "#{MetricsBucket}"
    FORECAST_EXPORT_BUCKET: "#{ForecastExportsBucket}"
    FORECAST_ROLE_ARN: "#{ForecastRole.Arn}" 
    REDSHIFT_CLUSTER_ID: ${self:custom.redshiftclusterid} 
  stackTags:
    environment: ${self:provider.stage}
    owner: "owner"
    project: ${self:service}

package:
  individually: true
  exclude: 
    - node_modules/**

functions:
  ResumeRedshift:
    handler: resume_redshift.handler
    module: auto_redshift
    name: ${self:service}-resume-redshift-${self:provider.stage}
    memorySize: 256
    timeout: 60
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-ResumeRedshift-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "redshift:DescribeClusters"
          - "redshift:ResumeCluster"
        Resource: ${self:custom.redshiftclusterarn} 
    package:
      exclude:
        - auto_forecast/**
        - auto_trigger/**
        - auto_scrape/**

  PauseRedshift:
    handler: pause_redshift.handler
    module: auto_redshift
    name: ${self:service}-pause-redshift-${self:provider.stage}
    memorySize: 256
    timeout: 60
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-PauseRedshift-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "redshift:DescribeClusters"
          - "redshift:PauseCluster"
        Resource: ${self:custom.redshiftclusterarn}
    package:
      exclude:
        - auto_forecast/**
        - auto_trigger/**
        - auto_scrape/**

  ScheduleRedshift:
    handler: schedule_redshift.handler
    module: auto_forecast
    name: ${self:service}-schedule-redshift-${self:provider.stage}
    memorySize: 256
    timeout: 60
    environment: 
      THRESHOLD: 5
      CLOUDWATCH_EVENT_ROLE_ARN: "#{CloudwatchEventRole.Arn}"
      RESUME_LAMBDA_ARN: "#{ResumeRedshiftLambdaFunction.Arn}" 
      PAUSE_LAMBDA_ARN: "#{PauseRedshiftLambdaFunction.Arn}"
      RESUME_REDSHIFT_EVENT_NAME: ${self:custom.resumeredshifteventname}
      PAUSE_REDSHIFT_EVENT_NAME: ${self:custom.pauseredshifteventname}
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-ScheduleRedshift-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "iam:PassRole"
          - "forecast:ListForecasts"
          - "forecast:QueryForecast"
          - "events:PutRule"
          - "events:PutTargets"
          - "events:DisableRule"
        Resource: "*"
      - Effect: Allow
        Action:
          - "s3:GetObject"
          - "s3:ListBucket"
        Resource: 
          - "#{ForecastExportsBucket.Arn}"
          - "#{ForecastExportsBucket.Arn}/*"
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**
  
  ScrapeRedshiftMetrics: 
    handler: scrape_redshift_metrics.handler
    module: auto_scrape
    name: ${self:service}-scrape-redshift-metrics-${self:provider.stage}
    memorySize: 256
    timeout: 60
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-ScrapeRedshiftMetrics-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "cloudwatch:GetMetricStatistics" 
        Resource: "*" 
      - Effect: Allow
        Action:
            - "s3:PutObject"
        Resource: "#{MetricsBucket.Arn}/*"
      - Effect: Allow
        Action: 
          - "redshift:DescribeClusters"
        Resource: ${self:custom.redshiftclusterarn}
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_forecast/**

  CreateDataset:
    handler: create_dataset.handler
    module: auto_forecast
    name: ${self:service}-create-dataset-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**
    
  CreateDatasetGroup:
    handler: create_dataset_group.handler
    module: auto_forecast
    name: ${self:service}-create-dataset-group-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**

  CreateDatasetImportJob:
    handler: create_dataset_import_job.handler
    module: auto_forecast
    name: ${self:service}-create-dataset-import-job-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**

  CheckDatasetImportJobStatus:
    handler: check_dataset_import_job_status.handler
    module: auto_forecast
    name: ${self:service}-check-dataset-import-job-status-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**
  
  CreatePredictorJob:
    handler: create_predictor_job.handler
    module: auto_forecast
    name: ${self:service}-create-predictor-job-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**

  CheckPredictorJobStatus:
    handler: check_predictor_job_status.handler
    module: auto_forecast
    name: ${self:service}-check-predictor-job-status-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**

  CreateForecastJob:
    handler: create_forecast_job.handler
    module: auto_forecast
    name: ${self:service}-create-forecast-job-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**

  CheckForecastJobStatus:
    handler: check_forecast_job_status.handler
    module: auto_forecast
    name: ${self:service}-check-forecast-job-status-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**
  
  CreateForecastExportJob:
    handler: create_forecast_export_job.handler
    module: auto_forecast
    name: ${self:service}-create-forecast-export-job-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**

  CheckForecastExportJobStatus:
    handler: check_forecast_export_job_status.handler
    module: auto_forecast
    name: ${self:service}-check-forecast-export-job-status-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**

  OldPredictorCleanup:
    handler: old_predictor_cleanup.handler
    module: auto_forecast
    name: ${self:service}-old-predictor-cleanup-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**

  OldForecastCleanup:
    handler: old_forecast_cleanup.handler
    module: auto_forecast
    name: ${self:service}-old-forecast-cleanup-${self:provider.stage}
    memorySize: 256
    timeout: 60
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-OldForecastCleanup-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:Get*"
          - "s3:List*"
          - "s3:DeleteObject"
          - "s3:DeleteObjects"
        Resource: 
          - "#{ForecastExportsBucket.Arn}"
          - "#{ForecastExportsBucket.Arn}/*"
      - Effect: Allow
        Action:
          - "forecast:*"
        Resource: "*"
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**

  OldDatasetImportCleanup:
    handler: old_dataset_import_cleanup.handler
    module: auto_forecast
    name: ${self:service}-old-dataset-import-cleanup-${self:provider.stage}
    memorySize: 256
    timeout: 60
    package:
      exclude:
        - auto_redshift/**
        - auto_trigger/**
        - auto_scrape/**
  
  TriggerGenerateForecasts:
    handler: trigger_generate_forecasts_step_function.handler
    module: auto_trigger
    name: ${self:service}-trigger-generate-forecasts-step-function-${self:provider.stage}
    memorySize: 256
    timeout: 60
    environment:
      STATE_MACHINE_ARN: "#{GenerateForecastsStepFunction}"
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-TriggerGenerateForecasts-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "states:DescribeStateMachine"
          - "states:StartExecution"
          - "states:DeleteStateMachine"
          - "states:ListExecutions"
          - "states:UpdateStateMachine"
        Resource: "#{GenerateForecastsStepFunction}"
    events:
      - schedule:
          name: ${self:service}-trigger-generate-forecasts-${self:provider.stage}
          rate: cron(5 0 * * ? *) # 00:05am everyday
          timezone: ${self:custom.timezone}
    package:
      exclude:
        - auto_redshift/**
        - auto_forecast/**
        - auto_scrape/**

  TriggerTrainModel: 
    handler: trigger_train_forecast_model_step_function.handler
    module: auto_trigger
    name: ${self:service}-trigger-train-forecast-model-step-function-${self:provider.stage}
    memorySize: 256
    timeout: 60
    environment:
      STATE_MACHINE_ARN: "#{TrainForecastModelStepFunction}"
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-TriggerTrainModel-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "states:DescribeStateMachine"
          - "states:StartExecution"
          - "states:DeleteStateMachine"
          - "states:ListExecutions"
          - "states:UpdateStateMachine"
        Resource: "#{TrainForecastModelStepFunction}"
    events:
      - schedule:
          name: ${self:service}-trigger-train-forecast-model-forecasts-${self:provider.stage}
          rate: cron(0 9 1 * ? *) # 9:00am every first day of the month
          timezone: ${self:custom.timezone}
    package:
      exclude:
        - auto_redshift/**
        - auto_forecast/**
        - auto_scrape/**

resources:
  Resources:
    MetricsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-redshift-metrics-bucket-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: TRUE
          BlockPublicPolicy: TRUE
          IgnorePublicAcls: TRUE
          RestrictPublicBuckets: TRUE
    
    ForecastExportsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-redshift-forecast-exports-bucket-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: TRUE
          BlockPublicPolicy: TRUE
          IgnorePublicAcls: TRUE
          RestrictPublicBuckets: TRUE

    CloudwatchEventRole: # event role to allow invoke lambda
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-cloudwatch-events-iam-role
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: ${self:service}-cloudwatch-events-invoke-lambda-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: 
                    - "#{ResumeRedshiftLambdaFunction.Arn}"
                    - "#{PauseRedshiftLambdaFunction.Arn}"

    ForecastRole:
      Type: AWS::IAM::Role
      Properties: 
        RoleName: ${self:service}-forecast-iam-role
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - forecast.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        Path: /
        Policies:
          - PolicyName: ${self:service}-aws-forecast-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "s3:Get*"
                    - "s3:List*"
                    - "s3:PutObject"
                  Resource: "#{MetricsBucket.Arn}" 

    StepFunctionsRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - states.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: ${self:service}-step-functions-invoke-lambda-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: 
                    - "#{CreateDatasetLambdaFunction.Arn}"
                    - "#{CreateDatasetGroupLambdaFunction.Arn}"
                    - "#{ScrapeRedshiftMetricsLambdaFunction.Arn}"
                    - "#{CreateDatasetImportJobLambdaFunction.Arn}"
                    - "#{CheckDatasetImportJobStatusLambdaFunction.Arn}"
                    - "#{CreatePredictorJobLambdaFunction.Arn}"
                    - "#{CheckPredictorJobStatusLambdaFunction.Arn}"
                    - "#{OldPredictorCleanupLambdaFunction.Arn}"
                    - "#{CreateForecastJobLambdaFunction.Arn}"
                    - "#{CheckForecastJobStatusLambdaFunction.Arn}"
                    - "#{CreateForecastExportJobLambdaFunction.Arn}"
                    - "#{CheckForecastExportJobStatusLambdaFunction.Arn}"
                    - "#{OldForecastCleanupLambdaFunction.Arn}"
                    - "#{OldDatasetImportCleanupLambdaFunction.Arn}"
                    - "#{ScheduleRedshiftLambdaFunction.Arn}"
          - PolicyName: ${self:service}-step-functions-logging-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                    - "logs:CreateLogDelivery"
                    - "logs:GetLogDelivery"
                    - "logs:UpdateLogDelivery"
                    - "logs:DeleteLogDelivery"
                    - "logs:ListLogDeliveries"
                    - "logs:PutResourcePolicy"
                    - "logs:DescribeResourcePolicies"
                    - "logs:DescribeLogGroups"
                  Resource: "*"
    
    ResumeRedshiftEventRule:
      Type: AWS::Events::Rule
      Properties: 
        Name: ${self:custom.resumeredshifteventname}
        RoleArn: "#{CloudwatchEventRole.Arn}"
        ScheduleExpression: "cron(0/0 0 29 2 ? *)" # a placeholder schedule 
        State: DISABLED 
        Targets: 
          - Arn: "#{ResumeRedshiftLambdaFunction.Arn}"
            Id: resume-redshift-lambda-function

    ResumeEventLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties: 
        Action: lambda:InvokeFunction
        FunctionName: "#{ResumeRedshiftLambdaFunction.Arn}"
        Principal: events.amazonaws.com
        SourceArn: "#{ResumeRedshiftEventRule.Arn}"

    PauseRedshiftEventRule:
      Type: AWS::Events::Rule
      Properties: 
        Name: ${self:custom.pauseredshifteventname}
        RoleArn: "#{CloudwatchEventRole.Arn}"
        ScheduleExpression: "cron(0/0 0 29 2 ? *)" # a placeholder schedule 
        State: DISABLED
        Targets: 
          - Arn: "#{PauseRedshiftLambdaFunction.Arn}"
            Id: pause-redshift-lambda-function
    
    PauseEventLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties: 
        Action: lambda:InvokeFunction
        FunctionName: "#{PauseRedshiftLambdaFunction.Arn}"
        Principal: events.amazonaws.com
        SourceArn: "#{PauseRedshiftEventRule.Arn}"

    # dataset imports usually finish ~5min
    # dataset predictions usually finish ~30-45min, with AutoML enabled around 2-3hours
    # dataset forecasts usually finish ~20-30min 
    GenerateForecastsStepFunction:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        StateMachineName: ${self:service}-generate-forecast-step-function-${self:provider.stage}
        RoleArn: "#{StepFunctionsRole.Arn}"
        DefinitionString:
          '{
            "Comment": "",
            "StartAt": "ScrapeRedshiftMetrics",
            "States": {
              "ScrapeRedshiftMetrics": {
                "Type": "Task",
                "Resource": "#{ScrapeRedshiftMetricsLambdaFunction.Arn}",
                "Next": "CreateDatasetImportJob"
              },
              "CreateDatasetImportJob": {
              "Type": "Task",
              "Resource": "#{CreateDatasetImportJobLambdaFunction.Arn}",
              "Next": "CheckDatasetImportJobStatus"
              },
              "CheckDatasetImportJobStatus": {
              "Type": "Task",
              "Resource": "#{CheckDatasetImportJobStatusLambdaFunction.Arn}",
              "Retry": [{
                  "ErrorEquals": ["ResourceCreateInProgressException"],
                  "IntervalSeconds": 20,
                  "MaxAttempts": 20,
                  "BackoffRate": 2
                }],
              "Next": "CreateForecastJob"
              },
              "CreateForecastJob": {
                "Type": "Task",
                "Resource": "#{CreateForecastJobLambdaFunction.Arn}",
                "Next": "CheckForecastJobStatus"
              },
              "CheckForecastJobStatus": {
                "Type": "Task",
                "Resource": "#{CheckForecastJobStatusLambdaFunction.Arn}",
                "Retry": [{
                  "ErrorEquals": ["ResourceCreateInProgressException"],
                  "IntervalSeconds": 20,
                  "MaxAttempts": 20,
                  "BackoffRate": 2
                }],
                "Next": "CreateForecastExportJob"
              },
              "CreateForecastExportJob": {
                "Type": "Task",
                "Resource": "#{CreateForecastExportJobLambdaFunction.Arn}",
                "Next": "CheckForecastExportJobStatus"
              },
              "CheckForecastExportJobStatus": {
                "Type": "Task",
                "Resource": "#{CheckForecastExportJobStatusLambdaFunction.Arn}",
                "Retry": [{
                  "ErrorEquals": ["ResourceCreateInProgressException"],
                  "IntervalSeconds": 20,
                  "MaxAttempts": 20,
                  "BackoffRate": 2
                }],
                "Next": "OldForecastCleanup"
              },
              "OldForecastCleanup": {
                "Type": "Task",
                "Resource": "#{OldForecastCleanupLambdaFunction.Arn}",
                "Next": "OldDatasetImportCleanup"
              },
              "OldDatasetImportCleanup": {
                "Type": "Task",
                "Resource": "#{OldDatasetImportCleanupLambdaFunction.Arn}",
                "Next": "ScheduleRedshift"
              },
              "ScheduleRedshift": {
                "Type": "Task",
                "Resource": "#{ScheduleRedshiftLambdaFunction.Arn}",
                "Next": "Done"
              },
                "Done": {
                  "Type": "Succeed"
              }
            }
          }'                  

    TrainForecastModelStepFunction:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        StateMachineName: ${self:service}-train-forecast-model-step-function-${self:provider.stage}
        RoleArn: "#{StepFunctionsRole.Arn}"
        DefinitionString:
          '{
            "Comment": "",
            "StartAt": "CreateDataset",
            "States": {
              "CreateDataset": {
                "Type": "Task",
                "Resource": "#{CreateDatasetLambdaFunction.Arn}",
                "Next": "CreateDatasetGroup"
              },
              "CreateDatasetGroup": {
                "Type": "Task",
                "Resource": "#{CreateDatasetGroupLambdaFunction.Arn}",
                "Next": "CreateDatasetImportJob"
              },
              "CreateDatasetImportJob": {
                "Type": "Task",
                "Resource": "#{CreateDatasetImportJobLambdaFunction.Arn}",
                "Next": "CheckDatasetImportJobStatus"
              },
              "CheckDatasetImportJobStatus": {
                "Type": "Task",
                "Resource": "#{CheckDatasetImportJobStatusLambdaFunction.Arn}",
                "Retry": [{
                  "ErrorEquals": ["ResourceCreateInProgressException"],
                  "IntervalSeconds": 20,
                  "MaxAttempts": 20,
                  "BackoffRate": 2
                }],
                "Next": "CreatePredictorJob"
              },
              "CreatePredictorJob": {
                "Type": "Task",
                "Resource": "#{CreatePredictorJobLambdaFunction.Arn}",
                "Next": "CheckPredictorJobStatus"
              },
              "CheckPredictorJobStatus": {
                "Type": "Task",
                "Resource": "#{CheckPredictorJobStatusLambdaFunction.Arn}",
                "Retry": [{
                  "ErrorEquals": ["ResourceCreateInProgressException"],
                  "IntervalSeconds": 20,
                  "MaxAttempts": 20,
                  "BackoffRate": 2
                }],
                "Next": "OldPredictorCleanup"
              },
              "OldPredictorCleanup": {
                "Type": "Task",
                "Resource": "#{OldPredictorCleanupLambdaFunction.Arn}",
                "Next": "Done"
              },
              "Done": {
                "Type": "Succeed"
              }
            }
          }'

  Outputs:
    MetricsBucketName:
      Value: "#{MetricsBucket}"
    ForecastExportsBucketName:
      Value: "#{ForecastExportsBucket}"
    Timezone:
      Value: ${self:custom.timezone}
    IntervalMinutes:
      Value: ${self:custom.intervalminutes}
    RedshiftClusterId:
      Value: ${self:custom.redshiftclusterid}
    TrainForecastModelStepFunction:
      Value: "#{TrainForecastModelStepFunction}"
    GenerateForecastsStepFunctionArn:
      Value: "#{GenerateForecastsStepFunction}"

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  - serverless-local-schedule
