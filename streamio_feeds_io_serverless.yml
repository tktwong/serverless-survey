org: faisalorg
app: my-python
service: my-python

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

  
provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  iamRoleStatements:
  - Effect: Allow
    Action: "*"
    Resource: "*"
  # - Effect: Allow
  #   Action:
  #     - s3:PutObject
  #     - s3:PutObjectAcl
  #     - s3:ListBucket
  #     - s3:GetObject
  #     - s3:GetObjectAcl
  #   Resource: 
  #     - arn:aws:s3:::website-6b3timq
  #     - arn:aws:s3:::/
  #     - arn:aws:s3:::website-6b3timq/*
  #   Action:
  #     - dynamodb:DescribeTable
  #     - dynamodb:Query
  #     - dynamodb:Scan
  #     - dynamodb:GetItem
  #     - dynamodb:PutItem
  #     - dynamodb:UpdateItem
  #     - dynamodb:DeleteItem
  #     - lambda:InvokeFunction # Added this like mentioned above
  #   Resource: "*"
  # region: ${opt:region, 'us-east-1'} 
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - sts:AssumeRole
  #       - logs:CreateLogGroup
  #       - logs:CreateLogStream
  #       - logs:PutLogEvents
  #     Resource: "*"
  #   -  Effect: "Allow"
  #      Action:
  #        - "cloudformation:DescribeStackResource"
  #      Resource: "*"

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get
  likes:
    handler: handler.likes
    events:
      - http:
          path: /likes
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                userid: true
                activityid: true
            template:
              application/json: '{ "userid":"$input.params(''userid'')","activityid":"$input.params(''activityid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"
  # create a post 
  createpost:
    handler: handler.createpost
    events:
      - http: 
          path: /createpost
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
          # cors: true
          # authorizer:
          #   type: aws_iam

  #return the trending hashtags 
  trendinghashtags:
    handler: handler.trendinghashtags1
    events:
      - http:
          path: /trendinghashtags
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                limit: true
            template:
              application/json: '{ "limit":"$input.params(''limit'')"}'
          response:
            headers:
              Content-Type: "'application/json'"

#return no of followers
  nooffollowers:
    handler: handler.list_no_of_followuser
    events:
      - http:
          path: /followinguser
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                userid: true
            template:
              application/json: '{ "userid":"$input.params(''userid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"


#follow the page using giving the list
  followthepages:
    handler: handler.following_the_page
    events:
      - http: 
          path: /followpage
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"


#return users timeline feed
  timelinesfeed:
    handler: handler.list_timeline_feed
    events:
      - http:
          path: /timelinefeed
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                userid: true
                limit: true
                offset: true
            # template:
            #   application/json: '{ "userid":"$input.params(''userid'')"},"limit":"$input.params(''limit'')","offset":"$input.params(''offset'')"}' 
          response:
            headers:
              Content-Type: "'application/json'"



#return users profile
  usersprofiledata:
    handler: handler.get_profile_of_user
    events:
      - http:
          path: /userprofile
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                userid: true
            template:
              application/json: '{ "userid":"$input.params(''userid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"



#return pages feed
  pagesfeed:
    handler: handler.get_feed_of_page
    events:
      - http:
          path: /pagefeed
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                pagename: true
                userid: true
                limit: true
                offset: true
            template:
              application/json: '{ "pagename":"$input.params(''pagename'')","userid":"$input.params(''userid'')","limit":"$input.params(''limit'')","offset":"$input.params(''offset'')"}' 
          response:
            headers:
              Content-Type: "'application/json'"


#return pages profile
  pagesprofile:
    handler: handler.get_profile_of_page
    events:
      - http:
          path: /pageprofile
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                pagename: true
            template:
              application/json: '{ "pagename":"$input.params(''pagename'')"}'
          response:
            headers:
              Content-Type: "'application/json'"


#return users profile feed
  usersprofilefeed:
    handler: handler.user_profile_feed
    events:
      - http:
          path: /usersprofilefeed
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                userid: true
                limit: true
                offset: true
              # application/json: '{ "userid":"$input.params(''userid'')"},"limit":"$input.params(''limit'')","offset":"$input.params(''offset'')"}' 
          response:
            headers:
              Content-Type: "'application/json'"

#like feed
  likethefeed:
    handler: handler.like_the_feed
    events:
      - http: 
          path: /likefeed
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"

#unlike feed
  unlikethefeed:
    handler: handler.unlike_the_feed
    events:
      - http: 
          path: /unlikefeed
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'" 

# @app.route('/checklike')
# def check_feed(event=None, context=None):
#     try:
#         x=checkFeed(userid=event['userid'],activity_id=event['activityid'])
#checking_of_like
  checkthefeed:
    handler: handler.check_feed
    events:
      - http:
          path: /checklike
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                userid: true
                activityid: true
            template:
              application/json: '{ "userid":"$input.params(''userid'')","activityid":"$input.params(''activityid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/commentfeed',methods=["POST"])
# def comment_the_feed(event=None, context=None): 
#comment on the feed
  commentthefeed:
    handler: handler.comment_the_feed
    events:
      - http: 
          path: /commentfeed
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'" 

# @app.route('/likesfeed')
# def get_likes_feed(event=None, context=None):

#     try:
#         x=Get_likes_user(activity_id=event['activityid'])
#get all the likes on feed
  getlikesfeed:
    handler: handler.get_likes_feed
    events:
      - http:
          path: /likesfeed
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                activityid: true
            template:
              application/json: '{ "activityid":"$input.params(''activityid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"
# @app.route('/commentsfeed')
# def get_comments_feed(event=None, context=None):
#get all the comments on feed
  getcommentsfeed:
    handler: handler.get_comments_feed
    events:
      - http:
          path: /commentsfeed
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                activityid: true
            template:
              application/json: '{ "activityid":"$input.params(''activityid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/unfollowpage',methods=["POST"])
# def unfollow_the_page(event=None, context=None):
#unfollow the page
  unfollowthepage:
    handler: handler.unfollow_the_page
    events:
      - http: 
          path: /unfollowpage
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/followuser',methods=["POST"])
# def follow_the_user(event=None, context=None):
# follow the user
  followtheuser:
    handler: handler.follow_the_user
    events:
      - http: 
          path: /followuser
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/unfollowuser',methods=["POST"])
# def (event=None, context=None):
# unfollow the user
  unfollowtheuser:
    handler: handler.unfollow_the_user
    events:
      - http: 
          path: /unfollowuser
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/hashtagfeed')
# def get_the_hashtag_feed(event=None, context=None):
#get hashtags feed
  gethashtagsfeed:
    handler: handler.get_the_hashtag_feed
    events:
      - http:
          path: /hashtagfeed
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                hashtag: true
                userid: true
                limit: true
                offset: true
            # template:
            #   application/json: '{ "hashtag":"$input.params(''hashtag'')","userid":"$input.params(''userid'')"},"limit":"$input.params(''limit'')","offset":"$input.params(''offset'')"}'
          response:
            headers:
              Content-Type: "'application/json'"
custom:
  wsgi:
    app: handler.app
    pythonBin: python # Some systems with Python3 may require this
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

resources:
  Resources:
    xMyRequestValidator:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'my-req-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true 