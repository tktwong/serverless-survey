service: social-spending # NOTE: update this with your service name

custom:
  relativePathToCommon: "./common"
  env: ${file(${self:custom.relativePathToCommon}/env.yml)}
  prefixes: ${file(${self:custom.relativePathToCommon}/prefixes.yml)}

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, dev}
  profile: smartshare-sls
  environment:
    MYSQL_HOST: ${self:custom.env.mysql.${self:provider.stage}.hostname}
    MYSQL_PORT: ${self:custom.env.mysql.${self:provider.stage}.port}
    MYSQL_USER: ${self:custom.env.mysql.${self:provider.stage}.username}
    MYSQL_PASS: ${self:custom.env.mysql.${self:provider.stage}.password}
    MYSQL_NAME: ${self:custom.env.mysql.${self:provider.stage}.name}
    PLAID_CLIENT_ID: ${self:custom.env.plaid.${self:provider.stage}.client_id}
    PLAID_CLIENT_SECRET: ${self:custom.env.plaid.${self:provider.stage}.client_secret}
    PLAID_PUBLIC_KEY: ${self:custom.env.plaid.${self:provider.stage}.public_key}
    DEFAULT_ACCESS_TOKEN: ${self:custom.env.plaid.${self:provider.stage}.default_access_token}

package:
  individually: true
  exclude:
    - .git/**
  include:
    - modules/*

functions:
  get_user_info:
    handler: functions/get_user_info/handler.handler
    events:
      - http:
          path: get_user_info
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:133672401164:userpool/us-east-1_vJmNossoP
  create_user:
    handler: functions/create_user/handler.handler
    events:
      - http:
          path: create_user
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:133672401164:userpool/us-east-1_vJmNossoP
  plaid_link:
    handler: functions/plaid_link/handler.handler
    events:
      - http:
          path: plaid_link
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:133672401164:userpool/us-east-1_vJmNossoP
  get_transactions:
    handler: functions/get_transactions/handler.handler
    events:
      - http:
          path: get_transactions
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:133672401164:userpool/us-east-1_vJmNossoP
  get_categories:
    handler: functions/get_categories/handler.handler
    events:
      - http:
          path: get_categories
          method: post
          # authorizer:
          #   arn: arn:aws:cognito-idp:us-east-1:133672401164:userpool/us-east-1_vJmNossoP
  create_entry:
    handler: functions/create_entry/handler.handler
    events:
      - http:
          path: create_entry
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:133672401164:userpool/us-east-1_vJmNossoP
  get_entry:
    handler: functions/get_entry/handler.handler
    events:
      - http:
          path: get_entry
          method: post
          # authorizer:
          #   arn: arn:aws:cognito-idp:us-east-1:133672401164:userpool/us-east-1_vJmNossoP
  get_feed:
    handler: functions/get_feed/handler.handler
    events:
      - http:
          path: get_feed
          method: get
          # authorizer:
          #   arn: arn:aws:cognito-idp:us-east-1:133672401164:userpool/us-east-1_vJmNossoP

plugins:
  - serverless-python-requirements
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
