service: school-web
discription: initial template for aws serverless frontend, required domain name setup.
provider:
  name: aws
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  dns: ${opt:dns, 'vclogitech.com'} # please buy a domain name

# AWS CloudFormation templates
resources:
  Resources:
    S3BucketForWebsiteContent:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: {Fn::Join: ['-', ['${self:service}','${self:provider.stage}', Ref: 'AWS::AccountId', Ref: 'AWS::Region']]}
        WebsiteConfiguration:
          IndexDocument: index.html
        CorsConfiguration:
          CorsRules:
          -
            AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*'] #todo
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketForWebsiteContent
        PolicyDocument:
          Statement:
          -
            Action:
            - "s3:GetObject"
            Effect: "Allow"
            Resource:
              {Fn::Join: ['', ['arn:aws:s3:::', Ref: S3BucketForWebsiteContent, '/*']]}
            Principal: {
              "Service": 'cloudfront.amazonaws.com',
               "AWS": {Fn::Join:['',['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', Ref: WebsiteCDNIdentity]]}
            }

    WebsiteCDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          ViewerCertificate:
            AcmCertificateArn:
              Ref: Certificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.1_2016  # SSLv3 | TLSv1 | TLSv1_2016 | TLSv1.1_2016 | TLSv1.2_2018
          Comment: CDN for S3-backed website
          Aliases:
          - {Fn::Join: ['.', ['${self:provider.stage}','${self:provider.dns}']]}
          Enabled: 'true'
          DefaultCacheBehavior:
            TargetOriginId:
              Ref: S3BucketForWebsiteContent
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Origins:
            - S3OriginConfig:
                OriginAccessIdentity: {Fn::Join: ['', ['origin-access-identity/cloudfront/', Ref: WebsiteCDNIdentity]]}
              Id:
                Ref: S3BucketForWebsiteContent
              DomainName: {Fn::Join: ['', [Ref: S3BucketForWebsiteContent, '.s3.amazonaws.com']]}
    WebsiteCDNIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: {Fn::Join: ['-', ['${self:service}','${self:provider.stage}', Ref: 'AWS::AccountId', Ref: 'AWS::Region']]}

    WebsiteDNSName:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: {Fn::Join: ['', ['${self:provider.dns}','.']]}
        AliasTarget:
         DNSName: {Fn::GetAtt: [WebsiteCDN, DomainName]}
         EvaluateTargetHealth: true
         HostedZoneId: Z2FDTNDATAQYW2 # This the HostedZoneId of all Cloudfront distribution
        Comment: CNAME redirect custom name to CloudFront distribution
        Name: {Fn::Join: ['.', ['${self:provider.stage}','${self:provider.dns}']]}
        Type: A

    Certificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: {Fn::Join: ['.', ['*','${self:provider.dns}']]}
        ValidationMethod: EMAIL

  Outputs:
    WebsiteURL:
      Value:  {Fn::Join: ['.', ['${self:provider.stage}', '${self:provider.dns}']]}
      Description: The URL of the newly created website
      Export:
        Name: {Fn::Join: ['-', [Ref: AWS::StackName, WebsiteURL]]}
    S3Bucket:
      Value:
        Ref: S3BucketForWebsiteContent
      Description: Name of S3 bucket to hold website content
      Export:
        Name: {Fn::Join: ['-', [Ref: AWS::StackName, S3Bucket]]}
