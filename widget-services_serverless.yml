
service: widget-services

provider:
  name: aws
  runtime: nodejs8.10
  stage: <STAGE>
  region: <REGION>
  profile: <YOUR AWS PROFILE>
  memorySize: 1024
  environment:
    WIDGET_TABLE: { "Ref": "DynamoDbWidget" }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["DynamoDbWidget", "Arn"] }
  individually: true
  exclude:
   - readme.md
   - .gitignore
   - lambda/**

functions:
  createWidget:
    handler: lambda/createWidget.handler
    events:
      - http:
          path: /widget
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - token
            allowCredentials: false
          authorizer:
              name: authorizer_online
              resultTtlInSeconds: 240
              identitySource: method.request.header.token
              type: token
    description: generated by serverless cli
    package:  
      include:
        - lambda/createWidget.js


  listwidgets:
    handler: lambda/listWidgets.handler
    events:
      - http:
          path: /widgets
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - token
            allowCredentials: false
          authorizer:
            name: authorizer_online
            resultTtlInSeconds: 240
            identitySource: method.request.header.token
            type: token
    description: generated by serverless cli
    package:  
      include:
        - lambda/listWidgets.js


  getwidget:
    handler: lambda/getWidget.handler
    events:
      - http:
          path: /widgets/{widgetId}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - token
            allowCredentials: false
          authorizer:
            name: authorizer_online
            resultTtlInSeconds: 240
            identitySource: method.request.header.token
            type: token
          request:
            parameters:
              paths:
                suiteId: true
    description: generated by serverless cli
    package:  
      include:
        - lambda/getWidget.js


  updatewidget:
    handler: lambda/updateWidget.handler
    events:
      - http:
          path: /widget/{widgetId}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - token
            allowCredentials: false
          authorizer:
            name: authorizer_online
            resultTtlInSeconds: 240
            identitySource: method.request.header.token
            type: token
          request:
            parameters:
              paths:
                suiteId: true
    description: generated by serverless cli
    package:  
      include:
        - lambda/updateWidget.js


  deletewidget:
    handler: lambda/deleteWidget.handler
    events:
      - http:
          path: /widget/{widgetId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - token
            allowCredentials: false
          authorizer:
            name: authorizer_online
            resultTtlInSeconds: 240
            identitySource: method.request.header.token
            type: token
          request:
            parameters:
              paths:
                suiteId: true
    description: generated by serverless cli
    package:  
      include:
        - lambda/deleteWidget.js
 


  authorizer_online:
    handler: lambda/authorizer/online.handler
    description: generated by serverless cli
    package:  
      include:
        - lambda/authorizer/online.js

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
          


    DynamoDbWidget:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: principalId
            AttributeType: S
          -
            AttributeName: widgetId
            AttributeType: S
        KeySchema:
          -
            AttributeName: principalId
            KeyType: HASH
          -
            AttributeName: widgetId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:service}-${opt:stage, self:provider.stage}-widget