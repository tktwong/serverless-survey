service: acceptessa-checklist
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-1
  deploymentBucket: serverless-upload-ap-northeast-1
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action: [ssm:GetParameter]
      Resource:
        - Fn::Join: [ ":", ["arn:aws:ssm", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "parameter/tessa_checklist/*"]]
    - Effect: Allow
      Action: [dynamodb:GetItem, dynamodb:PutItem, dynamodb:DeleteItem]
      Resource:
        - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_session"]]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_favorite"]]
        - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_favorite/index/*"]]
        - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_config"]]
    - Effect: Allow
      Action: [dynamodb:GetItem, dynamodb:UpdateItem]
      Resource:
        - Fn::Join: [ ":", ["arn:aws:dynamodb", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "table/tessa_favorite_count"]]
    - Effect: Allow
      Action: [s3:PutObject]
      Resource:
        - Fn::Join: [ "", [{ Fn::GetAtt: [ExportBucket, Arn]}, "/*"]]

functions:
  endpoint:
    handler: handler.endpoint
    description: tessa checklist application
    tags: { Application: AcceptessaChecklist }
    events: [{ http: { path: "/", method: post, cors: true } }]
    environment:
      S3BUCKET_PUBLIC_URL: { Fn::GetAtt: [ExportBucket, DomainName] }
  public:
    handler: handler.public
    description: tessa checklist public endpoint
    tags: { Application: AcceptessaChecklist }
    events: [{ http: { path: "/public/{eid}/", method: get, cors: true } }]
  auth:
    handler: handler.auth
    description: tessa checklist authentication
    tags: { Application: AcceptessaChecklist }
    events: [{ http: { path: "/auth/{action}", method: get, cors: true } }]
  stream:
    handler: handler.stream
    events:
      - stream:
          type: dynamodb
          arn: { Fn::GetAtt: [FavoriteTable, StreamArn] }

resources:
  Description: Acceptessa checklist api
  Resources:
    IamRoleLambdaExecution:
      Properties:
        RoleName: "${self:service}"

    ExportBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:service}-export"
        WebsiteConfiguration:
          ErrorDocument: error.html
          IndexDocument: index.html
    ExportBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: ExportBucket }
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action: ["s3:GetObject"]
              Resource: { Fn::Join: [ "", [{ Fn::GetAtt: [ExportBucket, Arn] }, "/*" ]] }
              Principal: "*"
    ## tables
    FavoriteTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_favorite
        AttributeDefinitions:
          - { AttributeName: member_id,     AttributeType: S }
          - { AttributeName: circle_id,     AttributeType: S }
          - { AttributeName: exhibition_id, AttributeType: S }
        KeySchema:
          - { AttributeName: member_id,     KeyType: HASH }
          - { AttributeName: circle_id,     KeyType: RANGE }
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        GlobalSecondaryIndexes:
          - IndexName: tessa_favorite_gsi
            KeySchema:
              - { AttributeName: member_id,     KeyType: HASH }
              - { AttributeName: exhibition_id, KeyType: RANGE }
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 3
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags: [{ Key: "Application", Value: "AcceptessaChecklist" }]

    ConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_config
        AttributeDefinitions:
          - { AttributeName: member_id,     AttributeType: S }
          - { AttributeName: exhibition_id, AttributeType: S }
        KeySchema:
          - { AttributeName: member_id,     KeyType: HASH }
          - { AttributeName: exhibition_id, KeyType: RANGE }
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        Tags: [{ Key: "Application", Value: "AcceptessaChecklist" }]

    SessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tessa_session
        AttributeDefinitions:
          - { AttributeName: uid, AttributeType: S }
        KeySchema:
          - { AttributeName: uid, KeyType: HASH }
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        Tags: [{ Key: "Application", Value: "AcceptessaChecklist" }]

    CountTable:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: tessa_favorite_count
       AttributeDefinitions:
         - { AttributeName: circle_id, AttributeType: S }
       KeySchema:
         - { AttributeName: circle_id, KeyType: HASH }
       ProvisionedThroughput:
         ReadCapacityUnits: 1
         WriteCapacityUnits: 1
       Tags: [{ Key: "Application", Value: "AcceptessaChecklist" }]

    ## alarms
    WCUAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "acceptessa-checklist-tessa_favorite-dynamodb-wcu"
        AlarmDescription: "DynamoDB WCU alarm for acceptessa-checklist"
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - { Name: TableName, Value: { Ref: FavoriteTable } }
        EvaluationPeriods: 1
        MetricName: ConsumedWriteCapacityUnits
        Namespace: AWS/DynamoDB
        Period: 60
        Statistic: Maximum
        Threshold: 60
        TreatMissingData: notBreaching
        AlarmActions:
          - Fn::Join: [ ":", ["arn:aws:sns", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "aws-slack-notifier"]]
        OKActions:
          - Fn::Join: [ ":", ["arn:aws:sns", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "aws-slack-notifier"]]

    RCUAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: "acceptessa-checklist-tessa_favorite-dynamodb-rcu"
        AlarmDescription: "DynamoDB RCU alarm for acceptessa-checklist"
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - { Name: TableName, Value: { Ref: FavoriteTable } }
        EvaluationPeriods: 1
        MetricName: ConsumedReadCapacityUnits
        Namespace: AWS/DynamoDB
        Period: 60
        Statistic: Maximum
        Threshold: 60
        TreatMissingData: notBreaching
        AlarmActions:
          - Fn::Join: [ ":", ["arn:aws:sns", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "aws-slack-notifier"]]
        OKActions:
          - Fn::Join: [ ":", ["arn:aws:sns", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "aws-slack-notifier"]]

    ## api domain setting
    Domain:
      Type: AWS::ApiGateway::DomainName
      Properties:
        CertificateArn: "${ssm:/tessa_checklist/acm_cert_arn~true}"
        DomainName: "api.familiar-life.info"

    Mapping:
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        DomainName: { Ref: Domain }
        RestApiId:  { Ref: ApiGatewayRestApi }
        Stage: dev

    RecordSetOfAPI:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: "api.familiar-life.info"
        Type: A
        HostedZoneName: "familiar-life.info."
        AliasTarget:
          DNSName: { Fn::GetAtt: [Domain, DistributionDomainName] }
          HostedZoneId: Z2FDTNDATAQYW2

    ## static file domain setting
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
       BucketName: "acceptessa-checklist-assets"
       CorsConfiguration:
         CorsRules:
           - AllowedMethods: ['GET']
             AllowedOrigins: ['*']
             AllowedHeaders: ['*']
       Tags: [{ Key: "Application", Value: "AcceptessaChecklist" }]

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: Bucket }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: s3:GetObject
              Principal:
                AWS: "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${ssm:/tessa_checklist/oai_id~true}"
              Resource:
                Fn::Join: [ "/", [ { Fn::GetAtt: [ Bucket, Arn ] }, "*" ] ]

    Cloudfront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: acceptessa checklist
          Aliases: ["checklist.familiar-life.info"]
          HttpVersion: http2
          ViewerCertificate:
            AcmCertificateArn: "${ssm:/tessa_checklist/acm_cert_arn~true}"
            SslSupportMethod: sni-only
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            TargetOriginId: AcceptessaChecklistWebAssets
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: true
              Headers: ["Origin"]
            MinTTL: 8640000
            MaxTTL: 8640000
            DefaultTTL: 8640000
          Enabled: true
          Origins:
            - Id: AcceptessaChecklistWebAssets
              DomainName: "acceptessa-checklist-assets.s3.amazonaws.com"
              S3OriginConfig:
                OriginAccessIdentity: "origin-access-identity/cloudfront/${ssm:/tessa_checklist/oai_id~true}"
        Tags: [{ Key: "Application", Value: "AcceptessaChecklist" }]

    RecordSetOfAssets:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: "checklist.familiar-life.info"
        Type: A
        HostedZoneName: "familiar-life.info."
        AliasTarget:
          DNSName: { Fn::GetAtt: [Cloudfront, DomainName] }
          HostedZoneId: Z2FDTNDATAQYW2
