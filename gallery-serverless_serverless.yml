service: gallery-serverless

plugins:
  - serverless-plugin-existing-s3

custom:
  usersTableName: 'users-table-${self:provider.stage}'
  itemsTableName: 'items-table-${self:provider.stage}'
  imageBucket: 'gallery-serverless'
  thumbBucket: 'gallery-serverless-thumbs'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-north-1
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    ITEMS_TABLE: ${self:custom.itemsTableName}
    IMAGE_BUCKET: ${self:custom.imageBucket}
    THUMB_BUCKET: ${self:custom.thumbBucket}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["ItemsDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
      Resource:
        - "arn:aws:s3:::${self:custom.imageBucket}"
        - "arn:aws:s3:::${self:custom.imageBucket}/*"
    - Effect: Allow
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:DeleteObject"
      Resource:
        - "arn:aws:s3:::${self:custom.thumbBucket}"
        - "arn:aws:s3:::${self:custom.thumbBucket}/*"

functions:
  app:
    handler: index.handler
    events:
      - http:
          path: '/'
          method: ANY
          cors: true
      - http:
          path: '{proxy+}'
          method: ANY
          cors: true
  thumb:
    handler: thumbs.handler
    layers:
      - arn:aws:lambda:eu-north-1:261158804248:layer:image-magick:1
    events:
      - existingS3:
          bucket: "${self:custom.imageBucket}"
          events: 
            - s3:ObjectCreated:*
  delete:
    handler: delete.handler
    events:
      - existingS3:
          bucket: "${self:custom.imageBucket}"
          events:
            - s3:ObjectRemoved:*

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    ItemsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.itemsTableName}
        AttributeDefinitions:
          - AttributeName: parent
            AttributeType: S
          - AttributeName: path
            AttributeType: S          
        KeySchema:
          - AttributeName: parent
            KeyType: HASH
          - AttributeName: path
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ThumbsBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.thumbBucket}

