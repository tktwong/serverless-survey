
service: serverless-java

provider:
  name: aws
  runtime: java8
  timeout: 20 # optional, in seconds, default is 6
  region: ap-southeast-1
  vpc:
    securityGroupIds:
      - { Ref: LambdaSG }
    subnetIds: ${{self:custom.NatSubnets}}
  # needed to not confuse serverless' variable syntax with CFN's
  # see https://serverless.com/framework/docs/providers/aws/guide/variables/#using-custom-variable-syntax
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "ssm:GetParameter"
        - "ssm:GetParameters"
      Resource: "arn:aws:ssm:${{self:provider.region}}:*:parameter/${{self:service}}/*"
                # for some reason, getting more specific than this results in fail
                # "arn:aws:ssm:${{self:provider.region}}:*:parameter//${{self:service}}/${{opt:stage, 'dev'}}/*"
    - Effect: Allow
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "*"
    - Effect: Allow
      Action:
        - "kinesis:PutRecord"
      Resource:
        - 'Fn::Join':
          - ':'
          -
            - 'arn:aws:kinesis'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'stream/${{self:resources.Resources.TestKinesisStream.Properties.Name}}'

# you can define service wide environment variables here
  environment:
    RDS_ENDPOINT: {"Fn::GetAtt": ["TestRDS","Endpoint.Address"]}
    RDS_PORT: {"Fn::GetAtt": ["TestRDS","Endpoint.Port"]}
    RDS_USERNAME_PARAMETER: /${{self:service}}/${{opt:stage, 'dev'}}/rds_username
    RDS_PASSWORD_PARAMETER: /${{self:service}}/${{opt:stage, 'dev'}}/rds_password
    RDS_DBNAME: ${{self:resources.Resources.TestRDS.Properties.DBName}}
    SOCKETIO_SERVER:
      Fn::Join:
        - ""
        - [ "http://", {Fn::GetAtt: ["PublicLoadBalancer", "DNSName"]}, "/location" ]
custom:
  # Update these for your particular deployment!
  VPCId: vpc-904ae1f7 # Joel's test VPC in ap-southeast-1 # TODO: update these accordingly
  NatSubnets:
    - subnet-3b741872
    - subnet-6bbec20c
    - subnet-59cfcc1f
  PrivateSubnets:
    - subnet-8a761ac3
    - subnet-a0bbc7c7
    - subnet-6c3d3e2a
  PublicSubnets:
    - subnet-3b791572
    - subnet-e8b4c88f
    - subnet-26c1c260
  AdminUIDockerImage: 854766835649.dkr.ecr.ap-southeast-1.amazonaws.com/egov-dev/swm-admin:latest
  SocketIODockerImage: 854766835649.dkr.ecr.ap-southeast-1.amazonaws.com/egov-dev/socketio:latest
  Ec2InstanceType: "t2.large"
  ClusterSize: "3"
  SocketIoRedisClusterType: cache.t2.small
  SocketIoRedisNumNodes: 2
package:
  artifact: target/simplelambdahandler-1.0.0.jar

functions:
  apiGatewayProcessingLambda:
    handler: org.egov.ApiGatewayProcessingLambda
    events:
      - http: POST apidirect
  apiGatewayKinesisPostingLambda:
    handler: org.egov.ApiGatewayKinesisPostingLambda
    events:
      - http: POST apikinesis
    environment:
      KINESIS_STREAM: ${{self:resources.Resources.TestKinesisStream.Properties.Name}}
  simplelambdahandler:
    handler: org.egov.SimpleLambdaHandler
    events:
      - stream:
          type: kinesis
          arn: { Fn::GetAtt: [ TestKinesisStream, Arn ] }
          batchSize: 100
          startingPosition: TRIM_HORIZON
          # be sure to understand starting position, especially when deploying a new lambda against a pre-existing kinesis stream
resources:
  # Large portions of this borrowed from https://github.com/awslabs/ecs-refarch-cloudformation
  Mappings:

    # These are the latest ECS optimized AMIs as of Jan 2018:
    #
    #   amzn-ami-2017.09.g-amazon-ecs-optimized
    #   ECS agent:    1.16.2
    #   Docker:       17.09.1-ce
    #   ecs-init:     1.16.2-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)

    AWSRegionToAMI:
        us-east-2:
            AMI: ami-ce1c36ab
        us-east-1:
            AMI: ami-28456852
        us-west-2:
            AMI: ami-decc7fa6
        us-west-1:
            AMI: ami-74262414
        eu-west-3:
            AMI: ami-9aef59e7
        eu-west-2:
            AMI: ami-67cbd003
        eu-west-1:
            AMI: ami-1d46df64
        eu-central-1:
            AMI: ami-509a053f
        ap-northeast-2:
            AMI: ami-c212b2ac
        ap-northeast-1:
            AMI: ami-872c4ae1
        ap-southeast-2:
            AMI: ami-58bb443a
        ap-southeast-1:
            AMI: ami-910d72ed
        ca-central-1:
            AMI: ami-435bde27
        ap-south-1:
            AMI: ami-00491f6f
        sa-east-1:
            AMI: ami-af521fc3
  Resources:
    TestKinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${{self:service}}-${{opt:stage, 'dev'}}-TestKinesisStream
        ShardCount: 1

    ApiGatewayToKinesis:
      Type: AWS::ApiGateway::Method
      Properties:
        ApiKeyRequired: false # todo: lock this down
        AuthorizationType: NONE # todo : lock this down
        HttpMethod: POST
        Integration:
          Type: AWS #signal that we want to use an internal AWS service
          Credentials:
            Fn::GetAtt: [ ApiGatewayToKinesisRole, Arn ] #role for the API to talk to Kinesis
          Uri:
            Fn::Join:
              - ""
              - - "arn:aws:apigateway:"
                - Ref: AWS::Region
                - ":kinesis:action/PutRecord" #this URI basically describes the service and action I want to invoke.
          IntegrationHttpMethod: POST #for kinesis using POST is required
          RequestTemplates:
            # See https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
            application/json: #now the mapping template for an incoming JSON
              Fn::Join:
                - ""
                - - "#set( $key = $context.identity.apiKey )\n" #assign the API key to local variable
                  - "#set( $keyname = \"apiKey\" )\n"
                  - "#set( $traceidval = $input.params().get(\"header\").get(\"X-Amzn-Trace-Id\"))" #get the trace id to later extract a timestamp of the incoming request
                  - "#set( $traceid = \"traceid\")\n"
                  - "#set( $body = $input.body )\n" #assign the request payload to variable
                  - "#set( $b64 = $util.base64Encode(\"$body\") )\n"
                  #now encode the payload in base64 to form a valid Kinesis request
                  - "{\n" #begin of the Kinesis PutRequest Json
                  - "\"Data\": \"$b64\",\n"
                  - "\"PartitionKey\": \"$context.requestTimeEpoch\",\n" # todo PartitionKey
                  - "\"StreamName\": \""
                  - ${{self:resources.Resources.TestKinesisStream.Properties.Name}}
                  - "\"\n}" #end of the Kinesis PutRequest json
          RequestParameters: #Kinesis requires the content type to not be json, but amz-json
            integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          IntegrationResponses:
            - StatusCode: 200 #create a default response for the caller
              ResponseTemplates:
                application/json: '{"status":"OK"}'
        MethodResponses:
          - StatusCode: 200
        ResourceId: { Ref: ApiGatewayToKinesisResource }
        RestApiId: { Ref: ApiGatewayRestApi }

    ApiGatewayToKinesisResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: {Fn::GetAtt: ["ApiGatewayRestApi", "RootResourceId"]}
        PathPart: "swm-ingest"
        RestApiId: { Ref: "ApiGatewayRestApi" }

    ApiGatewayToKinesisRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: ApiGatewayToKinesisRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                  - "kinesis:PutRecord"
                Resource:
                  - 'Fn::Join':
                    - ':'
                    -
                      - 'arn:aws:kinesis'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'stream/${{self:resources.Resources.TestKinesisStream.Properties.Name}}'

    TestRDS:
      Type: "AWS::RDS::DBInstance"
      Properties:
        AllocatedStorage: 20
        #AllowMajorVersionUpgrade: Boolean
        AutoMinorVersionUpgrade: true
        #AvailabilityZone: String
        #BackupRetentionPeriod: String
        #CharacterSetName: String
        #CopyTagsToSnapshot: Boolean
        #DBClusterIdentifier: String
        DBInstanceClass: db.t2.micro
        #DBInstanceIdentifier: String
        DBName: TestRDSDBName
        #DBParameterGroupName: String
        #DBSecurityGroups:
        #  - String
        #DBSnapshotIdentifier: String
        DBSubnetGroupName: ${{self:resources.Resources.RDSSubnetGroup.Properties.DBSubnetGroupName}}
        Engine: postgres
        #EngineVersion: 9.6
        #Iops: Number
        #KmsKeyId: String
        #LicenseModel: String
        MasterUsername: ${{ssm:/${{self:service}}/${{opt:stage, 'dev'}}/rds_username}}
        # WARNING: This embeds the password into the template in plain text!
        MasterUserPassword: ${{ssm:/${{self:service}}/${{opt:stage, 'dev'}}/rds_password~true}}
        #MonitoringInterval: Integer
        #MonitoringRoleArn: String
        #MultiAZ: Boolean
        #OptionGroupName: String
        #Port: String
        #PreferredBackupWindow: String
        #PreferredMaintenanceWindow: String
        PubliclyAccessible: false
        #SourceDBInstanceIdentifier: String
        #SourceRegion: String
        #StorageEncrypted: Boolean
        #StorageType: String
        #Tags:
        #  Resource Tag
        #Timezone: String
        VPCSecurityGroups:
          - {Ref: RDSSG}
        ### If you set VPCSecurityGroups, you must not set DBSecurityGroups, and vice versa.

    LambdaSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: "${{self:custom.VPCId}}"
        GroupDescription: SG for Lambdas
        SecurityGroupIngress: []
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-Lambdas
    RDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: DBSubnetGroup for RDS
        DBSubnetGroupName: ${{self:service}}-${{opt:stage, 'dev'}}-DBSubnetGroup
        SubnetIds: "${{self:custom.PrivateSubnets}}"
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-DBSubnetGroup
    RDSSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: "${{self:custom.VPCId}}"
        GroupDescription: SG for RDS
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-RDS
    EcsHostSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: "${{self:custom.VPCId}}"
        GroupDescription: SG for ECS hosts
        SecurityGroupIngress:
          - SourceSecurityGroupId: {Ref: LoadBalancerSG}
            IpProtocol: -1
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-Hosts
    LoadBalancerSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: "${{self:custom.VPCId}}"
        GroupDescription: SG to sit in front of ECS hosts
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-LoadBalancers
    PrivateLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-ALB
        Subnets: "${{self:custom.NatSubnets}}"
        SecurityGroups:
          - {Ref: LoadBalancerSG}
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-ALB
    PrivateLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: {Ref: PrivateLoadBalancer}
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: {Ref: DefaultPrivateTargetGroup}
    PublicLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ${{self:service}}-${{opt:stage, 'dev'}}-Pub-LB
        Subnets: "${{self:custom.PublicSubnets}}"
        SecurityGroups:
          - {Ref: LoadBalancerSG}
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-ALB
    PublicLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: {Ref: PublicLoadBalancer}
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: {Ref: DefaultPublicTargetGroup}

    # We define a default target group here, as this is a mandatory Parameters
    # when creating an Application Load Balancer Listener. This is not used, instead
    # a target group is created per-service in each service template (../services/*)
    DefaultPrivateTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ${{self:service}}-${{opt:stage, 'dev'}}-PrvTGrp
        VpcId: "${{self:custom.VPCId}}"
        Port: 80
        Protocol: HTTP
    DefaultPublicTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ${{self:service}}-${{opt:stage, 'dev'}}-PubTGrp
        VpcId: "${{self:custom.VPCId}}"
        Port: 80
        Protocol: HTTP

    ECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: ${{self:service}}-${{opt:stage, 'dev'}}-ECS-Cluster
    ECSAutoscalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier: "${{self:custom.NatSubnets}}"
        LaunchConfigurationName: {Ref: ECSLaunchConfiguration}
        MinSize: "${{self:custom.ClusterSize}}"
        MaxSize: "${{self:custom.ClusterSize}}"
        DesiredCapacity: "${{self:custom.ClusterSize}}"
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}} ECS Host
            PropagateAtLaunch: true
      CreationPolicy:
        ResourceSignal:
          Count: "${{self:custom.ClusterSize}}"
          Timeout: PT15M
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstancesInService: 1
          MaxBatchSize: 1
          PauseTime: PT15M
          SuspendProcesses:
            - HealthCheck
            - ReplaceUnhealthy
            - AZRebalance
            - AlarmNotification
            - ScheduledActions
          WaitOnResourceSignals: true
    ECSLaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId:  {Fn::FindInMap: [AWSRegionToAMI, {Ref: "AWS::Region"}, AMI]}
        InstanceType: "${{self:custom.Ec2InstanceType}}"
        # KeyName: '' # insert your keypair name for debugging
        SecurityGroups:
          - {Ref: EcsHostSG}
        IamInstanceProfile: {Ref: ECSInstanceProfile}
        UserData:
                "Fn::Base64":
                  "Fn::Sub": |
                    #!/bin/bash
                    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                    yum install -y aws-cfn-bootstrap
                    /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                    /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoscalingGroup
      Metadata:
        AWS::CloudFormation::Init:
          config:
            packages:
              yum:
                awslogs: []
            commands:
              01_add_instance_to_cluster:
                command: {"Fn::Sub": "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config"}
            files:
              "/etc/cfn/cfn-hup.conf":
                mode: 000400
                owner: root
                group: root
                content:
                  "Fn::Sub": |
                    [main]
                    stack=${AWS::StackId}
                    region=${AWS::Region}
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                content:
                  "Fn::Sub": |
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
            services:
              "/etc/awslogs/awscli.conf":
                content:
                  "Fn::Sub": |
                    [plugins]
                    cwlogs = cwlogs
                    [default]
                    region = ${AWS::Region}
              "/etc/awslogs/awslogs.conf":
                content:
                  "Fn::Sub": |
                    [general]
                    state_file = /var/lib/awslogs/agent-state
                    [/var/log/dmesg]
                    file = /var/log/dmesg
                    log_group_name = ${ECSCluster}-/var/log/dmesg
                    log_stream_name = ${ECSCluster}
                    [/var/log/messages]
                    file = /var/log/messages
                    log_group_name = ${ECSCluster}-/var/log/messages
                    log_stream_name = ${ECSCluster}
                    datetime_format = %b %d %H:%M:%S
                    [/var/log/docker]
                    file = /var/log/docker
                    log_group_name = ${ECSCluster}-/var/log/docker
                    log_stream_name = ${ECSCluster}
                    datetime_format = %Y-%m-%dT%H:%M:%S.%f
                    [/var/log/ecs/ecs-init.log]
                    file = /var/log/ecs/ecs-init.log.*
                    log_group_name = ${ECSCluster}-/var/log/ecs/ecs-init.log
                    log_stream_name = ${ECSCluster}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    [/var/log/ecs/ecs-agent.log]
                    file = /var/log/ecs/ecs-agent.log.*
                    log_group_name = ${ECSCluster}-/var/log/ecs/ecs-agent.log
                    log_stream_name = ${ECSCluster}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
                    [/var/log/ecs/audit.log]
                    file = /var/log/ecs/audit.log.*
                    log_group_name = ${ECSCluster}-/var/log/ecs/audit.log
                    log_stream_name = ${ECSCluster}
                    datetime_format = %Y-%m-%dT%H:%M:%SZ
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
                  files:
                    - /etc/cfn/cfn-hup.conf
                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                awslogs:
                  enabled: true
                  ensureRunning: true
                  files:
                    - /etc/awslogs/awslogs.conf
                    - /etc/awslogs/awscli.conf
    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.
    # TODO: This is a bit excessive and is only for a POC. Need to separate out permissions
    # used by containers with permissions of hosts, and also constrain hosts to only talk
    # to their own containers

    ECSRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: "${{self:service}}-${{opt:stage, 'dev'}}-ECSRole"
        AssumeRolePolicyDocument: |
          {
            "Statement": [{
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              }
              }]
            }
        Policies:
          - PolicyName: ecs-service
            PolicyDocument: |
              {
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "ssm:DescribeAssociation",
                    "ssm:GetDeployablePatchSnapshotForInstance",
                    "ssm:GetDocument",
                    "ssm:GetManifest",
                    "ssm:GetParameters",
                    "ssm:ListAssociations",
                    "ssm:ListInstanceAssociations",
                    "ssm:PutInventory",
                    "ssm:PutComplianceItems",
                    "ssm:PutConfigurePackageResult",
                    "ssm:UpdateAssociationStatus",
                    "ssm:UpdateInstanceAssociationStatus",
                    "ssm:UpdateInstanceInformation",
                    "ec2messages:AcknowledgeMessage",
                    "ec2messages:DeleteMessage",
                    "ec2messages:FailMessage",
                    "ec2messages:GetEndpoint",
                    "ec2messages:GetMessages",
                    "ec2messages:SendReply",
                    "cloudwatch:PutMetricData",
                    "ec2:DescribeInstanceStatus",
                    "ds:CreateComputer",
                    "ds:DescribeDirectories",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:AbortMultipartUpload",
                    "s3:ListMultipartUploadParts",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads"
                  ],
                "Resource": "*"
                }]
              }
    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - {Ref: ECSRole}

##########################################################
#             BEGIN SocketIO Service Definition          #
##########################################################
    SocketIOService:
      Type: AWS::ECS::Service
      DependsOn: SocketIOListenerRule
      Properties:
        Cluster: { Ref: ECSCluster }
        Role: { Ref: SocketIOServiceRole }
        DesiredCount: 2
        TaskDefinition: { Ref: SocketIOTaskDefinition }
        LoadBalancers:
          - ContainerName: socketio
            ContainerPort: 3005
            TargetGroupArn: { Ref: SocketIOTargetGroup }
    SocketIOTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: "${{self:service}}-${{opt:stage, 'dev'}}-socketio-service"
        ContainerDefinitions:
          - Name: socketio
            Essential: true
            Environment:
              - Name: REDIS_SERVER
                Value: { Fn::GetAtt: ["SocketIORedisCluster", "ConfigurationEndPoint.Address"] }
              - Name: REDIS_PORT
                Value: { Fn::GetAtt: ["SocketIORedisCluster", "ConfigurationEndPoint.Port"] }
            Image: ${{self:custom.SocketIODockerImage}}
            Memory: 128
            PortMappings:
              - ContainerPort: 3005
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: "${{self:service}}-${{opt:stage, 'dev'}}-socketio-server-logs"
                awslogs-region: { Ref: "AWS::Region" }
    SocketIOLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: "${{self:service}}-${{opt:stage, 'dev'}}-socketio-server-logs"
        RetentionInDays: 7
    SocketIOTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        VpcId: "${{self:custom.VPCId}}"
        Port: 3005
        Protocol: HTTP
        Matcher:
          HttpCode: 400 # ELB can't really health check a web socket
        HealthCheckIntervalSeconds: 10
        HealthCheckProtocol: HTTP
        HealthCheckPath: /socket.io/
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        TargetGroupAttributes:
          - Key: stickiness.enabled
            Value: true
          - Key: stickiness.type
            Value: lb_cookie
    SocketIOListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn: { Ref: PublicLoadBalancerListener }
        Priority: 1
        Conditions:
          - Field: path-pattern
            Values:
              - "/socket.io/*"
        Actions:
          - TargetGroupArn: { Ref: SocketIOTargetGroup }
            Type: forward
    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    SocketIOServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${{self:service}}-${{opt:stage, 'dev'}}-SocketIO-Role"
        Path: "/"
        AssumeRolePolicyDocument:  |
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
        Policies:
          - PolicyName: socketio-ecs
            PolicyDocument: >
              {
                "Version": "2012-10-17",
                "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AuthorizeSecurityGroupIngress",
                            "ec2:Describe*",
                            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                            "elasticloadbalancing:Describe*",
                            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                            "elasticloadbalancing:DeregisterTargets",
                            "elasticloadbalancing:DescribeTargetGroups",
                            "elasticloadbalancing:DescribeTargetHealth",
                            "elasticloadbalancing:RegisterTargets"
                        ],
                        "Resource": "*"
                }]
              }
    SocketIORedisSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "${{self:service}}-${{opt:stage, 'dev'}} SocketIO Redis Cluster"
        SubnetIds: "${{self:custom.PrivateSubnets}}"
    SocketIORedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: "${{self:custom.VPCId}}"
        GroupDescription: "SG For ${{self:service}}-${{opt:stage, 'dev'}} SocketIO Redis cluster"
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
        Tags:
          - Key: Name
            Value: ${{self:service}}-${{opt:stage, 'dev'}}-SocketIO-Redis-SG
    SocketIORedisCluster:
      Type: AWS::ElastiCache::ReplicationGroup
      Properties:
        AtRestEncryptionEnabled: true
        AutomaticFailoverEnabled: true
        CacheNodeType: ${{self:custom.SocketIoRedisClusterType }}
        CacheParameterGroupName: default.redis3.2.cluster.on
        CacheSubnetGroupName: { Ref: SocketIORedisSubnetGroup }
        Engine: redis
        EngineVersion: 3.2.6
        NumCacheClusters: ${{self:custom.SocketIoRedisNumNodes }}
        Port: 6379
        ReplicationGroupDescription: "Redis cluster for ${{self:service}}-${{opt:stage, 'dev'}} SocketIO cluster"
        SecurityGroupIds:
          - { Ref: SocketIORedisSecurityGroup }
##########################################################
#              END SocketIO Service Definition           #
##########################################################

##########################################################
#              BEGIN AdminUI Service Definition          #
##########################################################
# TODO: Parameterize this more, WAAY too much duplication
    AdminUIService:
      Type: AWS::ECS::Service
      DependsOn: AdminUIListenerRule
      Properties:
        Cluster: { Ref: ECSCluster }
        Role: { Ref: AdminUIServiceRole }
        DesiredCount: 2
        TaskDefinition: { Ref: AdminUITaskDefinition }
        LoadBalancers:
          - ContainerName: swm-admin
            ContainerPort: 3000
            TargetGroupArn: { Ref: AdminUITargetGroup }
    AdminUITaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: "${{self:service}}-${{opt:stage, 'dev'}}-swm-admin"
        ContainerDefinitions:
          - Name: swm-admin
            Essential: true
            Environment:
              # Note that, per https://github.com/facebook/create-react-app/issues/102, the
              # environment variable MUST start with REACT_APP_ to get made available to the apps.
              - Name: REACT_APP_SOCKETIO_SERVER
                Value:
                  Fn::Join:
                    - "/"
                    - [ "http:/", { Fn::GetAtt: ["PublicLoadBalancer", "DNSName"]}, "location" ]
            Image: ${{self:custom.AdminUIDockerImage}}
            Memory: 512
            PortMappings:
              - ContainerPort: 3000
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: "${{self:service}}-${{opt:stage, 'dev'}}-swm-admin-server-logs"
                awslogs-region: { Ref: "AWS::Region" }
    AdminUILogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: "${{self:service}}-${{opt:stage, 'dev'}}-swm-admin-server-logs"
        RetentionInDays: 7
    AdminUITargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        VpcId: "${{self:custom.VPCId}}"
        Port: 3000
        Protocol: HTTP
        Matcher:
          HttpCode: 200
        HealthCheckIntervalSeconds: 10
        HealthCheckProtocol: HTTP
        HealthCheckPath: "/#/12345"
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3
    AdminUIListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn: { Ref: PublicLoadBalancerListener }
        Priority: 2
        Conditions:
          - Field: path-pattern
            Values:
              - "/*"
        Actions:
          - TargetGroupArn: { Ref: AdminUITargetGroup }
            Type: forward
    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    AdminUIServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: "${{self:service}}-${{opt:stage, 'dev'}}-AdminUI-Role"
        Path: "/"
        AssumeRolePolicyDocument:  |
          {
              "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                  "Action": [ "sts:AssumeRole" ]
              }]
          }
        Policies:
          - PolicyName: adminui-ecs
            PolicyDocument: >
              {
                "Version": "2012-10-17",
                "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AuthorizeSecurityGroupIngress",
                            "ec2:Describe*",
                            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                            "elasticloadbalancing:Describe*",
                            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                            "elasticloadbalancing:DeregisterTargets",
                            "elasticloadbalancing:DescribeTargetGroups",
                            "elasticloadbalancing:DescribeTargetHealth",
                            "elasticloadbalancing:RegisterTargets"
                        ],
                        "Resource": "*"
                }]
              }
##########################################################
#               END AdminUI Service Definition           #
##########################################################

  Outputs:
    TestKinesisStreamARN:
      Description: "ARN for TestKinesisStream"
      Value:
        Fn::GetAtt:
          - TestKinesisStream
          - Arn
    SocketIOUrl:
      Description: "URL For SocketIO server"
      Value: {Fn::GetAtt: ["PublicLoadBalancer", "DNSName"]}
    TestRDSEndpointAddress:
      Description: "Endpoint.Address"
      Value: {"Fn::GetAtt": ["TestRDS","Endpoint.Address"]}
    TestRDSEndpointPort:
      Description: "Endpoint.Address"
      Value: {"Fn::GetAtt": ["TestRDS","Endpoint.Port"]}
    TestRDSDBName:
      Description: "RDS DBName"
      Value: ${{self:resources.Resources.TestRDS.Properties.DBName}}
