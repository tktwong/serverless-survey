service: wildrydes-serverlessfw
plugins:
  - serverless-s3-sync

# 変数
custom:
  siteName: wildrydes-serverlessfw
  userPoolName: wildrydes-serverlessfw
  userPoolClientName: wildrydes-serverlessfw
  authorizerName: wildrydes-serverlessfw
  dynamoTableName: Rides
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: website

# クラウドプロバイダ
provider:
  name: aws
  runtime: nodejs6.10

  stage: prod
  region: us-east-1

  # Lambdaの実行ロール(権限)
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
      Resource: { "Fn::GetAtt" : [ DataTable, Arn ] }

# Lambdaのデプロイパッケージに含めるディレクトリ
package:
 include:
   - lambda/**
 exclude:
   - website/**

# Lambdaの設定
functions:
  requestUnicorn:
    handler: lambda/requestUnicorn.handler
    events:
      # API Gateway の設定 (イベントソース)
      - http:
          path: ride
          method: post
          cors: true
          integration: lambda-proxy # Lambdaプロキシ統合
          # authorizer:
          #   arn: COGNITO_USER_POOL_ARN # change value after first deploy and redeploy

resources:
 Resources:
    # S3 Bucket の作成
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
    # S3 の Static Web Hosting のセキュリティ設定
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: ["", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "WebsiteBucket"
                    },
                    "/*"
                  ]
                ]
    # DynamoDB テーブルの作成
    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableName}
        AttributeDefinitions:
          - AttributeName: "RideId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "RideId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Cognito ユーザープールの作成
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}
    # Cognito ユーザープールアプリクライアントの作成
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
 Outputs:
    WebsiteURL:
      Description: "S3 Website URL"
      Value:
        "Fn::Join": [ "", [ "http://", { "Ref": "WebsiteBucket" }, ".s3-website-", "${self:provider.region}", ".amazonaws.com" ] ]
    WebsiteBucket:
      Description: "S3 Bucket"
      Value:
        Ref: WebsiteBucket
    UserPoolId:
      Description: "Cognito User Pool Name"
      Value:
        Ref: UserPool
    UserPoolClientId:
      Description: "Cognito User Pool Client ID"
      Value:
        Ref: UserPoolClient
    DynamoDBTableName:
      Description: "DynamoDB Table Name"
      Value: ${self:custom.dynamoTableName}
    UserPoolArn:
      Description: "Cognito User Pool Arn"
      Value:
        "Fn::GetAtt" : [ UserPool, Arn ]
