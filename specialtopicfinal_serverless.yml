service: musicapp



provider:
  name: aws
  runtime: nodejs6.10
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - "s3:*"
      Resource: "arn:aws:s3:::gurjeetsingh-tech1995/*"
      
      
    - Effect: Allow
      Action:
       - dynamodb:DescribeTable
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"





functions:
  filesaveinfo:
    handler: music/filesaveinf.filesaveinf
    events:
     - s3:
         bucket: gurjeetsingh-tech1995
         event: s3:ObjectCreated:*
         
  filedelinfo:
    handler: music/filedelinf.filedelinf
    events:
     - s3:
         bucket: gurjeetsingh-tech1995
         event: s3:ObjectRemoved:*
         
  create:
    handler: music/create.create
    events:
      - http:
          path: songs
          method: post
          cors: true
         
  get:
    handler: music/get.get
    events:
      - http:
          path: songs/{name}
          method: get
          cors: true
          
  list:
    handler: music/list.list
    events:
      - http:
          path: songs
          method: get
          cors: true
         
    
    
resources:
 Resources:
  MusicDynamoDbTable:
   Type: 'AWS::DynamoDB::Table'
   DeletionPolicy: Retain
   Properties:
    AttributeDefinitions:
     -
      AttributeName: fileName
      AttributeType: S
    KeySchema:
     -
      AttributeName: fileName
      KeyType: HASH
    ProvisionedThroughput:
     ReadCapacityUnits: 1
     WriteCapacityUnits: 1
    TableName: 'musicapptable'
    
  PlaylistDynamoDbTable:
   Type: 'AWS::DynamoDB::Table'
   DeletionPolicy: Retain
   Properties:
    AttributeDefinitions:
     -
      AttributeName: fileName
      AttributeType: S
    KeySchema:
     -
      AttributeName: fileName
      KeyType: HASH
    ProvisionedThroughput:
     ReadCapacityUnits: 1
     WriteCapacityUnits: 1
    TableName: 'playlisttable'