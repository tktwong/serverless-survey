service: bashChallenges

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:eu-west-1:*:table/bash_challenges*
functions:
  getBashChallenges:
      handler: index.getAll
      name: getBashChallenges
      description: Gets all bash challenges or a subset based on difficulty
      runtime: nodejs8.10
      memorySize: 512
      events:
      - http:
          path: /challenges
          method: GET
          cors: true
  getBashChallengeById:
      handler: index.getById
      name: getBashChallengeById
      description: Gets an individual bash challenge based on its ID
      runtime: nodejs8.10
      memorySize: 512
      events:
      - http:
          path: /challenges/{challengeId}
          method: GET
          cors: true
          request:
            parameters:
              paths:
                challengeId: true

resources:
  Resources:
    bashChallengesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bash_challenges
        AttributeDefinitions: # Definitions of attributes used for indexes or keys
          - AttributeName: id
            AttributeType: S
          - AttributeName: difficulty
            AttributeType: N
        KeySchema: # The Primary Key for the table
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: bash_challenges_by_difficulty
            KeySchema:
              - AttributeName: difficulty
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 1
    bashChallengesAdditionalFilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 'bash-challenges-files'
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
    bashChallengesS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: 
          Ref: 'bashChallengesAdditionalFilesBucket'
        PolicyDocument:
          Statement: 
            -
              Action:
                - 's3:GetObject'
              Effect: "Allow"
              Resource:
                Fn::Join: 
                  - ""
                  - 
                    - "arn:aws:s3:::"
                    - 
                      Ref: 'bashChallengesAdditionalFilesBucket'
                    - "/*"
              Principal: "*"
plugins:
  - serverless-offline