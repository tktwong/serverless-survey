##
##  Name: nudge-track
##  Purpose: AppSync Track API
##
##  Created By:
##    Author: Stefano Picozzi
##    Email: spicozzi@emergile.com
##    Date: SEP-2019
##

service: nudge-track

plugins:
  - serverless-appsync-plugin
  - serverless-offline
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-dotenv-plugin
  - serverless-deployment-bucket

provider:
  versionFunctions: false
  deploymentBucket:
    name: nudge-${env:RELEASE}-deployments
    serverSideEncryption: AES256
  release: ${opt:release, 'v0'} 
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'stage0'}
  region: ap-southeast-2
  # profile: ${opt:profile, 'admin'}  
  logRetentionInDays: 1
  apiname: ${self:service.name}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: arn:aws:dynamodb:#{AWS::Region}:*:*
    - Effect: "Allow"
      Action:
        - "ses:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "mobiletargeting:*"
        - "mobileanalytics:*"
      Resource: "*"

custom:
  dotenv:
    basePath: ../../
  stage: ${opt:stage, self:provider.stage}
  accountId: { Ref: AWS::AccountId }
  appSync:
    name: ${env:RELEASE}-${self:provider.stage}-${self:service.name}
    region: ${self:provider.region}
    authenticationType: API_KEY
    logConfig:
      level: ALL
    schema: schema.graphql
    serviceRole: AppSyncServiceRole
    dataSources:
      - type: AWS_LAMBDA
        name: ApplyRule
        description: "Lambda DynamoDB applyRule"
        config:
          lambdaFunctionArn: ${env:LOCAL_CUSTOM}-applyRule
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Machines
        description: "DynamoDB Machines Table"
        config:
          tableName: ${env:MACHINES_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }

      - type: AMAZON_DYNAMODB
        name: Tracks
        description: "DynamoDB Tracks Table"
        config:
          tableName: ${env:TRACKS_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
    mappingTemplatesLocation: mapping-templates
    mappingTemplates:

      # Rules
      - dataSource: ApplyRule
        type: Query
        field: applyRule
        request: "request/Rule/applyRule.vtl"
        response: "response/item.vtl"

      # Tracks
      - dataSource: Machines
        type: Track
        field: machines
        request: "request/Track/machines.vtl"
        response: "response/items.vtl"
      - dataSource: Tracks
        type: Mutation
        field: createTrack
        request: "request/Track/putItem.vtl"
        response: "response/item.vtl"
      - dataSource: Tracks
        type: Mutation
        field: updateTrack
        request: "request/updateItem.vtl"
        response: "response/item.vtl"
      - dataSource: Tracks
        type: Mutation
        field: deleteTrack
        request: "request/deleteItem.vtl"
        response: "response/item.vtl"
      - dataSource: Tracks
        type: Query
        field: getTxn
        request: "request/getItem.vtl"
        response: "response/item.vtl"
      - dataSource: Tracks
        type: Query
        field: getTxns
        request: "request/getItems.vtl"
        response: "response/items.vtl"
      - dataSource: Tracks
        type: Query
        field: getTrack
        request: "request/getItem.vtl"
        response: "response/item.vtl"
      - dataSource: Tracks
        type: Query
        field: getTracks
        request: "request/getItems.vtl"
        response: "response/items.vtl"
      - dataSource: Tracks
        type: Query
        field: listTracks
        request: "request/listItems.vtl"
        response: "response/item.vtl"

functions:
  hello:
    handler: handler.main
    name: ${env:RELEASE}-${self:provider.stage}-${self:service.name}-hello

resources:
  Resources:
    # IAM Policy to allow working with DynamoDB
    AppSyncDynamoDBPolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        Description: "Managed Policy to allow AWS AppSync to access tables in DynamoDB"
        Path: /appsync/
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - arn:aws:dynamodb:#{AWS::Region}:*:table/* 
                - arn:aws:dynamodb:#{AWS::Region}:*:table/*/* 

    # IAM Role for implementing the AppSync / DynamoDB policy
    DynamoDBRole:
      Type: "AWS::IAM::Role"
      Description: "IAM Role for allowing AppSync to access DynamoDB"
      DependsOn:
        - AppSyncDynamoDBPolicy
      Properties:
        RoleName: ${self:provider.apiname}-dynamodb-role
        ManagedPolicyArns:
          - Ref: AppSyncDynamoDBPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - appsync.amazonaws.com

    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:provider.apiname}-lambda-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-${self:service.name}-${self:provider.stage}-serviceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - 
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:#{AWS::Region}:*:function:*"
                    - "arn:aws:lambda:#{AWS::Region}:*:function:*:"

