service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    INDEX_NAME: IndexTodos
    S3_BUCKET: aws-todo-app-${self:provider.stage}
    RSA256CERT: |
      -----BEGIN CERTIFICATE-----
      MIIDDTCCAfWgAwIBAgIJXbjl0RSDRnuwMA0GCSqGSIb3DQEBCwUAMCQxIjAgBgNV
      BAMTGWRldi1tbWRjeDY4MC5ldS5hdXRoMC5jb20wHhcNMjAwODE4MTQ0NDQxWhcN
      MzQwNDI3MTQ0NDQxWjAkMSIwIAYDVQQDExlkZXYtbW1kY3g2ODAuZXUuYXV0aDAu
      Y29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0EOzqb82oPK7OgEP
      UXaP6+ItT1INIFQvI8PmybHhy1mR+mJ8l/RDWCDWyAlCF7fKXMxCT8q8wulK0tC6
      kBJi55V+WPtxASPCikgf8lGpM/CUeEKFzbgNfUXOqVs/lh2KsVWTlxpjlA5cfNtX
      Khwt82VQpEKIg6BuFz6UYB1SpSP4Y62MMt34D/Y2EP7KIcjXW3okJpV6stEEn5ye
      cUK76U5BdfaobRcVRo7lnh05grxrBS3uiqORoRmsxGMUclKBTD9jsI2JbbGaMMHU
      H8FGi5Y6R+zoiVr7Hkvj1jfOgAxK4R0lAlQ1q/sOMdTHSCkHd/eD4fTEk2Q22JSO
      H1TIVQIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQWNkHxlqBJ
      rQwVrEms5gB4R8Jk2DAOBgNVHQ8BAf8EBAMCAoQwDQYJKoZIhvcNAQELBQADggEB
      ACwNRDcIRoEpiJvJTLdKxhI0GnPguoOZBbI+HCMssfWf6RjKsJf3LhShbw6YeFtd
      KhwHRKREnb1tp4VCwmKnWFGtvINZkWYg6Wx3Y7+8q4ek3tOOlOHRUjqXKHXGFam0
      YnX6Oq8uIkXUz4ljLpDTG2gNrGI/POc4Gxr19YBtIhQgIpuvbYUhQcUGWU48PPuL
      CU1ivPSI74oPMqYlgYBU/RG2g2uqg/7WVeeH/k2PEWrjO2FxjHy+06mfIV6ZIl5E
      SFvo5nao2DFcwSjQhat9iHORDPUpFw1FUmOdqiuZfS22CbPMlK3HKjKtI549SBQq
      cMyCQ1mOLdOUvp9lymZRVCU=
      -----END CERTIFICATE-----

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
  # TODO: Configure this function
  #GetTodos:
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
resources:
  Resources:
    # TODO: Add any necessary AWS resources
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentBucket