service: personal-interface
plugins:
  - serverless-offline

package:
  exclude:
    - client/**
    - node_modules/puppeteer/.local-chromium/**
    - node_modules/chrome-aws-lambda/** # The function is provided by the layer
    - devutils/**

provider:
  name: aws
  runtime: nodejs12.x
  stage: test
  memorySize: 520 # optional, in MB, default is 1024
  timeout: 15 # optional, in seconds, default is 6
  environment: #Shared Environments
    NODE_ENV: ${opt:stage}
    MONGO_SRV: ${file(./config/${opt:stage}.json):SRV_CONFIG}
    MONGO_PORT: 27017
    MONGO_HOST: ${file(./config/${opt:stage}.json):MONGO_HOST}
    MONGO_SECRET: ${file(./config/${opt:stage}.json):MONGO_SECRET}
    MONGO_DATABASE: ${file(./config/${opt:stage}.json):MONGO_DATABASE}
    MONGO_SET: ${file(./config/${opt:stage}.json):MONGO_SET}
    MONGO_USER: ${file(./config/${opt:stage}.json):MONGO_USER}
    MONGO_SSL: true

functions:
  TwilioIncommingMessage:
    handler: AutomationServices/WhatsAppBot/handlerIncommingMessage.handler
    name: TwilioIncommingMessage-lambda-${opt:stage}
    environment:
      BODY_REQUEST: ${file(./config/${opt:stage}.json):BODY_REQUEST}
    events:
      - http:
          path: "/whatsapp/webhook/"
          method: "post"
          cors:
            - enabled: true
            - origin: "*"
            - headers:
                - Content-Type
                - Transfer-encoding

  GetPrepayments:
    handler: API/Functions/Payments.get
    name: PrepaymentsRepo-get-${opt:stage}
    events:
      - http:
          path: /prepayments
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  PutPrepayments:
    handler: API/Functions/Payments.put
    name: PrepaymentsRepo-put-${opt:stage}
    events:
      - http:
          path: /prepayments
          method: PUT
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  GetStats:
    handler: API/Functions/BoxFlow.get
    name: StatsRepo-get-${opt:stage}
    events:
      - http:
          path: /boxflow/stats
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  GetUser:
    handler: API/Functions/Users.getUserInformation
    name: UserRepo-get-${opt:stage}
    events:
      - http:
          path: /user
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  CheckUserSecret:
    handler: API/Functions/Users.checkSecretKey
    name: UserRepo-post-secretKey-${opt:stage}
    events:
      - http:
          path: /user/secret
          method: POST
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  SaveCategory:
    handler: API/Functions/Users.addNewCategory
    name: UserRepo-Categories-POST-${opt:stage}
    events:
      - http:
          path: /user/categories
          method: POST
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  GetDataCredit:
    handler: API/Functions/DataCredit.get
    name: DataCredit-get-${opt:stage}
    events:
      - http:
          path: /datacredit
          method: GET
          integration: lambda
          cors:
            - enabled: true
            - origin: "*"
            - headers: "Access-Control-Allow-Origin"
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
          authorizer:
            name: authorizer
            arn: ${file(./config/${opt:stage}.json):USER_POOL_ARN}
            claims:
              - sub

  # Create the user on the MongoDB database
  PostConfirmationUser:
    handler: API/Functions/Users.postConfirmation
    name: PostConfirmationUser-${opt:stage}


  EmailChecker:
    handler: AutomationServices/AutoMailChecker/checker.start
    name: AutomationServices-EmailChecker-${opt:stage}
    events:
      - schedule:
          name: "cw-start-email-checker"
          description: "Function to connecto to Gmail :D"
          rate: rate(20 minutes)
          enabled: true
    environment:
      EMAIL_USERNAME: ${file(./config/${opt:stage}.json):EMAIL_USERNAME}
      EMAIL_PASSWORD: ${file(./config/${opt:stage}.json):EMAIL_PASSWORD}
      
  DataCreditoScraper:
    handler: AutomationServices/DataCreditoScraper/scraper.start
    name: AutomationServices-DataCreditoScraper-${opt:stage}
    memorySize: 2048 # Recomended, in MB, default is 1024
    timeout: 60 # Recomended, in seconds, default is 6
    events:
      - schedule:
          name: "cw-start-datacredito-scraper"
          description: "Function to scraper datacredito data"
          rate: cron(0 0 15,30 * ? *) # Every Fifteen days, some entities take a time to report updates
          enabled: true
    layers:
      - arn:aws:lambda:${self:provider.region}:764866452798:layer:chrome-aws-lambda:22
    environment:
      EMAIL_USERNAME: ${file(./config/${opt:stage}.json):EMAIL_USERNAME}
      SECRET_KEY: ${file(./config/${opt:stage}.json):SECRET_KEY}
