service: smart-on-fhir-proxy

provider:

  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Action:
        - cognito-idp:AdminGetUser
      Resource: 
        - Fn::GetAtt: [CognitoUserPool, Arn]
      Effect: Allow
  logs:
    restApi: true
  environment:
    GCP_CLIENT_EMAIL: ${file(./config/${self:provider.stage}-keys.json):client_email}
    GCP_PRIVATE_KEY: ${file(./config/${self:provider.stage}-keys.json):private_key}
    GCP_AUTH_SCOPE: 'https://www.googleapis.com/auth/cloud-healthcare'
    GCP_BASE_SCOPE: 'https://www.googleapis.com/auth/cloud-healthcare'
    GCP_HC_API_HOST: 'https://healthcare.googleapis.com'
    GCP_HC_API_URI: '/v1/projects/YOUR_GOOGLE_PROJECT_ID/locations/GCP_REGION/datasets/YOUR_DATA_SET/fhirStores/YOUR_FHIR_STORE/fhir'
    COGNITO_USERPOOL_DOMAIN_URL: https://smart-on-fhir-${self:custom.currentStage}.auth.${self:custom.region}.amazoncognito.com  
    COGNITO_USER_POOL_ID: 
      Ref: CognitoUserPool

    ROLE_ATTR: 'custom:role'
    PATIENT_ROLE: 'Patient'
    PRACTITIONER_ROLE: 'Practitioner'
    ADMIN_ROLE: 'Administrator'
    PATIENT_ID_ATTR: 'custom:patientId'
    ORGANIZATION_ID_ATTR: 'custom:organizationId'
    FHIR_PATIENT_RESOURCE_TYPE: 'Patient'
    FHIR_PATIENT_MANAGING_ORG: 'managingOrganization'
    FHIR_PATIENT_REFERECNE: 'subject'
    FHIR_ID_PARM: '_id'
    FHIR_PATIENT_PARM: 'patient'
    FHIR_ORG_PARM: 'organization'
    FHIR_PATIENT_ORG_PARM: 'subject:Patient.organization'
    FHIR_INCLUDE_PARM: '_include'
    FHIR_REV_INCLUDE_PARM: '_revinclude'
    FHIR_EVERYTHING_PARM: 'everything'

custom:

  defaultStage: dev
  region: us-east-1
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: smart-on-fhir-user-pool-${self:custom.currentStage}
  #cognito userpool domains
  userPoolDomainName: smart-on-fhir-${self:custom.currentStage}
  #cognito userpool resource servers to hold Smart on FHIR auth scopes for /patient and /user 
  patientResourceServerIdentifier: patient
  userResourceServerIdentifier: user
  #cognito userpool app clients for Patient and User Apps&APIs
  adminAPPClientName: smart-on-fhir-admin-app-client-${self:custom.currentStage}   
  patientAPPClientName: smart-on-fhir-patient-app-client-${self:custom.currentStage}   
  userAPPClientName: smart-on-fhir-user-app-client-${self:custom.currentStage}   
  APIClientName: smart-on-fhir-api-client-${self:custom.currentStage}   
  
  #smart-on-fhir-auth-scopes : this list can be expanded to cover more granual and specific resoruces/operations
  all-read-scope: "*.read"
  all-write-scope: "*.write"

  patient-read-scope: "Patient.read"
  observation-read-scope: "Observation.read"
  allergyIntolerance-read-scope: "AllergyIntolerance.read"
  condition-read-scope: "Condition.read"
  procedure-read-scope: "Procedure.read"
  medicationDispense-read-scope: "MedicationDispense.read"
  carePlan-read-scope: "CarePlan.read"

  patient-write-scope: "Patient.write"
  observation-write-scope: "Observation.write"
  allergyIntolerance-write-scope: "AllergyIntolerance.write"
  condition-write-scope: "Condition.write"
  procedure-write-scope: "Procedure.write"
  medicationDispense-write-scope: "MedicationDispense.write"
  carePlan-write-scope: "CarePlan.write"
  
functions:

  read:
    handler: functions/read.handler
    events:
     - http:
         path: /fhir/{type}/{id}
         method: get
         request: 
           parameters: 
              paths: 
                type: true
                id: true
         cors: true
         integration: lambda
         authorizer:
           type: COGNITO_USER_POOLS
           authorizerId:
             Ref: ApiGatewayAuthorizer
           scopes: 
             - ${self:custom.userResourceServerIdentifier}/${self:custom.all-read-scope}
             - ${self:custom.userResourceServerIdentifier}/${self:custom.patient-read-scope}
             - ${self:custom.userResourceServerIdentifier}/${self:custom.observation-read-scope}
             - ${self:custom.userResourceServerIdentifier}/${self:custom.allergyIntolerance-read-scope}
             - ${self:custom.userResourceServerIdentifier}/${self:custom.condition-read-scope}
             - ${self:custom.userResourceServerIdentifier}/${self:custom.procedure-read-scope}
             - ${self:custom.userResourceServerIdentifier}/${self:custom.medicationDispense-read-scope}
             - ${self:custom.userResourceServerIdentifier}/${self:custom.carePlan-read-scope} 
             - ${self:custom.patientResourceServerIdentifier}/${self:custom.patient-read-scope}
             - ${self:custom.patientResourceServerIdentifier}/${self:custom.observation-read-scope}
             - ${self:custom.patientResourceServerIdentifier}/${self:custom.allergyIntolerance-read-scope}
             - ${self:custom.patientResourceServerIdentifier}/${self:custom.condition-read-scope}
             - ${self:custom.patientResourceServerIdentifier}/${self:custom.procedure-read-scope}
             - ${self:custom.patientResourceServerIdentifier}/${self:custom.medicationDispense-read-scope}
             - ${self:custom.patientResourceServerIdentifier}/${self:custom.carePlan-read-scope}             
         response:
           statusCodes:
             400:
               pattern: '.*"statusCode":400.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             401:
               pattern: '.*"statusCode":401.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             403:
               pattern: '.*"statusCode":403.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             404:
               pattern: '.*"statusCode":404.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"

  search:
    handler: functions/search.handler
    events:
     - http:
         path: /fhir/{type}
         method: get
         request: 
           parameters: 
              paths: 
                type: true
         cors: true
         integration: lambda
         authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes: 
            - ${self:custom.userResourceServerIdentifier}/${self:custom.all-read-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.patient-read-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.observation-read-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.allergyIntolerance-read-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.condition-read-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.procedure-read-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.medicationDispense-read-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.carePlan-read-scope} 
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.patient-read-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.observation-read-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.allergyIntolerance-read-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.condition-read-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.procedure-read-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.medicationDispense-read-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.carePlan-read-scope}             
         response:
           statusCodes:
             400:
               pattern: '.*"statusCode":400.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             401:
               pattern: '.*"statusCode":401.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             403:
               pattern: '.*"statusCode":403.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"

  create:
    handler: functions/create.handler
    events:
     - http:
         path: /fhir/{type}
         method: post
         request: 
           parameters: 
              paths: 
                type: true
         cors: true
         integration: lambda
         authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes: 
            - ${self:custom.userResourceServerIdentifier}/${self:custom.all-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.patient-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.observation-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.allergyIntolerance-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.condition-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.procedure-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.medicationDispense-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.carePlan-write-scope} 
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.patient-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.observation-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.allergyIntolerance-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.condition-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.procedure-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.medicationDispense-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.carePlan-write-scope}             
         response:
           statusCodes:
             400:
               pattern: '.*"statusCode":400.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             401:
               pattern: '.*"statusCode":401.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             403:
               pattern: '.*"statusCode":403.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
   
  update:
    handler: functions/update.handler
    events:
     - http:
         path: /fhir/{type}/{id}
         method: put
         request: 
           parameters: 
              paths: 
                type: true
                id: true
         cors: true
         integration: lambda
         authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes: 
            - ${self:custom.userResourceServerIdentifier}/${self:custom.all-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.patient-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.observation-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.allergyIntolerance-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.condition-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.procedure-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.medicationDispense-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.carePlan-write-scope} 
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.patient-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.observation-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.allergyIntolerance-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.condition-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.procedure-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.medicationDispense-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.carePlan-write-scope}             
         response:
           statusCodes:
             400:
               pattern: '.*"statusCode":400.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             401:
               pattern: '.*"statusCode":401.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             403:
               pattern: '.*"statusCode":403.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             404:
               pattern: '.*"statusCode":404.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'" 
  
  delete:
    handler: functions/delete.handler
    events:
     - http:
         path: /fhir/{type}/{id}
         method: delete
         request: 
           parameters: 
              paths: 
                type: true
                id: true
         cors: true
         integration: lambda
         authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
          scopes: 
            - ${self:custom.userResourceServerIdentifier}/${self:custom.all-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.patient-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.observation-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.allergyIntolerance-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.condition-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.procedure-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.medicationDispense-write-scope}
            - ${self:custom.userResourceServerIdentifier}/${self:custom.carePlan-write-scope} 
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.patient-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.observation-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.allergyIntolerance-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.condition-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.procedure-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.medicationDispense-write-scope}
            - ${self:custom.patientResourceServerIdentifier}/${self:custom.carePlan-write-scope}             

         response:
           statusCodes:
             400:
               pattern: '.*"statusCode":400.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             401:
               pattern: '.*"statusCode":401.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             403:
               pattern: '.*"statusCode":403.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"
             404:
               pattern: '.*"statusCode":404.*' 
               template: $input.path('$.errorMessage')
               headers:
                 Content-Type: "'application/json'"

resources:

  Resources:

    #cognito user pool
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
        Schema:
          - Name: role
            Mutable: true
            AttributeDataType: String
            StringAttributeConstraints:
              MinLength: 6
              MaxLength: 256
          - Name: organizationId
            Mutable: true
            AttributeDataType: String
            StringAttributeConstraints:
              MinLength: 6
              MaxLength: 256
          - Name: patientId
            Mutable: true
            AttributeDataType: String
            StringAttributeConstraints:
              MinLength: 6
              MaxLength: 256

    #cognito userpool domain      
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties: 
        Domain: ${self:custom.userPoolDomainName}
        UserPoolId: 
          Ref: CognitoUserPool

    CognitoUserPoolResourceServerPatient:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        Identifier: ${self:custom.patientResourceServerIdentifier}  
        Name: ${self:custom.patientResourceServerIdentifier}  
        Scopes:
          - ScopeName: ${self:custom.patient-read-scope}
            ScopeDescription: Access to read patient resource.
          - ScopeName: ${self:custom.observation-read-scope}
            ScopeDescription: Access to read observation resource.
          - ScopeName: ${self:custom.allergyIntolerance-read-scope}
            ScopeDescription: Access to read allergyIntolerance resource.
          - ScopeName: ${self:custom.condition-read-scope}
            ScopeDescription: Access to read condition resource.
          - ScopeName: ${self:custom.procedure-read-scope}
            ScopeDescription: Access to read procedure resource.
          - ScopeName: ${self:custom.medicationDispense-read-scope}
            ScopeDescription: Access to read medicationDispense resource.
          - ScopeName: ${self:custom.carePlan-read-scope}
            ScopeDescription: Access to read carePlan resource.
          - ScopeName: ${self:custom.patient-write-scope}
            ScopeDescription: Access to write patient resource.
          - ScopeName: ${self:custom.observation-write-scope}
            ScopeDescription: Access to write observation resource.
          - ScopeName: ${self:custom.allergyIntolerance-write-scope}
            ScopeDescription: Access to write allergyIntolerance resource.
          - ScopeName: ${self:custom.condition-write-scope}
            ScopeDescription: Access to write condition resource.
          - ScopeName: ${self:custom.procedure-write-scope}
            ScopeDescription: Access to write procedure resource.
          - ScopeName: ${self:custom.medicationDispense-write-scope}
            ScopeDescription: Access to write medicationDispense resource.
          - ScopeName: ${self:custom.carePlan-write-scope}
            ScopeDescription: Access to write carePlan resource.            
        UserPoolId: 
          Ref: CognitoUserPool
          
    CognitoUserPoolResourceServerUser:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        Identifier: ${self:custom.userResourceServerIdentifier}  
        Name: ${self:custom.userResourceServerIdentifier}  
        Scopes:
          - ScopeName: ${self:custom.all-read-scope}
            ScopeDescription: Access to read all resources.
          - ScopeName: ${self:custom.all-write-scope}
            ScopeDescription: Access to write all resources.
          - ScopeName: ${self:custom.patient-read-scope}
            ScopeDescription: Access to read patient resource.
          - ScopeName: ${self:custom.observation-read-scope}
            ScopeDescription: Access to read observation resource.
          - ScopeName: ${self:custom.allergyIntolerance-read-scope}
            ScopeDescription: Access to read allergyIntolerance resource.
          - ScopeName: ${self:custom.condition-read-scope}
            ScopeDescription: Access to read condition resource.
          - ScopeName: ${self:custom.procedure-read-scope}
            ScopeDescription: Access to read procedure resource.
          - ScopeName: ${self:custom.medicationDispense-read-scope}
            ScopeDescription: Access to read medicationDispense resource.
          - ScopeName: ${self:custom.carePlan-read-scope}
            ScopeDescription: Access to read carePlan resource.
          - ScopeName: ${self:custom.patient-write-scope}
            ScopeDescription: Access to write patient resource.
          - ScopeName: ${self:custom.observation-write-scope}
            ScopeDescription: Access to write observation resource.
          - ScopeName: ${self:custom.allergyIntolerance-write-scope}
            ScopeDescription: Access to write allergyIntolerance resource.
          - ScopeName: ${self:custom.condition-write-scope}
            ScopeDescription: Access to write condition resource.
          - ScopeName: ${self:custom.procedure-write-scope}
            ScopeDescription: Access to write procedure resource.
          - ScopeName: ${self:custom.medicationDispense-write-scope}
            ScopeDescription: Access to write medicationDispense resource.
          - ScopeName: ${self:custom.carePlan-write-scope}
            ScopeDescription: Access to write carePlan resource.            
        UserPoolId: 
          Ref: CognitoUserPool

    #cognito userpool app client - Admin 
    CognitoUserPoolAppClientAdmin:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.adminAPPClientName}
        GenerateSecret: True
        AllowedOAuthFlowsUserPoolClient: True
        AllowedOAuthFlows: 
          - code
        SupportedIdentityProviders: 
          - COGNITO
        CallbackURLs: 
          - smof://callback 
        AllowedOAuthScopes:
          - email
          - openid
          - profile
          - ${self:custom.userResourceServerIdentifier}/${self:custom.all-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.all-write-scope}
        UserPoolId:
          Ref: CognitoUserPool

    #cognito userpool app client - Patient    
    CognitoUserPoolAppClientPatient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.patientAPPClientName}
        GenerateSecret: True
        AllowedOAuthFlowsUserPoolClient: True
        AllowedOAuthFlows: 
          - code
        SupportedIdentityProviders: 
          - COGNITO
        CallbackURLs: 
          - smof://callback 
        AllowedOAuthScopes:
          - email
          - openid
          - profile
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.patient-read-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.observation-read-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.allergyIntolerance-read-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.condition-read-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.procedure-read-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.medicationDispense-read-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.carePlan-read-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.patient-write-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.observation-write-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.allergyIntolerance-write-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.condition-write-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.procedure-write-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.medicationDispense-write-scope}
          - ${self:custom.patientResourceServerIdentifier}/${self:custom.carePlan-write-scope}
        UserPoolId:
          Ref: CognitoUserPool

    #cognito userpool app client - User  
    CognitoUserPoolAppClientUser:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userAPPClientName}
        GenerateSecret: True
        AllowedOAuthFlowsUserPoolClient: True
        AllowedOAuthFlows: 
          - code
        CallbackURLs: 
          - smof://callback 
        SupportedIdentityProviders: 
          - COGNITO
        AllowedOAuthScopes:
          - email
          - openid
          - profile
          - ${self:custom.userResourceServerIdentifier}/${self:custom.patient-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.observation-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.allergyIntolerance-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.condition-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.procedure-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.medicationDispense-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.carePlan-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.patient-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.observation-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.allergyIntolerance-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.condition-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.procedure-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.medicationDispense-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.carePlan-write-scope}
        UserPoolId:
          Ref: CognitoUserPool
          
    #cognito userpool app client - API  
    CognitoUserPoolApiClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.APIClientName}
        GenerateSecret: True
        AllowedOAuthFlowsUserPoolClient: True
        SupportedIdentityProviders: 
          - COGNITO
        AllowedOAuthFlows: 
          - client_credentials
        AllowedOAuthScopes:
          - ${self:custom.userResourceServerIdentifier}/${self:custom.patient-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.observation-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.allergyIntolerance-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.condition-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.procedure-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.medicationDispense-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.carePlan-read-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.patient-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.observation-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.allergyIntolerance-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.condition-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.procedure-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.medicationDispense-write-scope}
          - ${self:custom.userResourceServerIdentifier}/${self:custom.carePlan-write-scope}
        UserPoolId:
          Ref: CognitoUserPool

    #API Gateay Cognito Authorizer      
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    
  Outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.currentStage}

       