service: the-strangler

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  region: ${opt:region, 'us-east-1'}
  stackName: ${self:service}-${self:provider.stage}
  stackTags:
    SERVICE: ${self:service}
  httpApi:
    payload: '2.0'
    cors: true

functions:
  GetUser:
    handler: index.handler
    memorySize: 1024
    timeout: 6
    tracing: Active
    environment:
      TABLE_NAME: !Ref Users
      TABLE_ARN: !GetAtt Users.Arn
    iamRoleStatementsName: ${self:service}-${self:provider.stage}-getuser-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:getItem
        Resource:
          - !Join [ '/', [ !GetAtt Users.Arn, '*' ] ]
          - !GetAtt Users.Arn
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
    events:
      - httpApi:
          path: /user/{id}
          method: get

plugins:
  - serverless-iam-roles-per-function

resources:
  Resources:
    Users:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    DefaultHttpIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties: 
        ApiId: !Ref HttpApi
        IntegrationMethod: ANY
        IntegrationType: HTTP_PROXY
        IntegrationUri: https://example.com
        PayloadFormatVersion: '1.0'
    DefaultHttpRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref HttpApi
        RouteKey: $default
        Target: !Join [ '/', [ integrations, !Ref DefaultHttpIntegration ] ]
