service: vautomator-serverless
frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: python3.7
  region: ${opt:region, 'us-west-2'}
  versionFunctions: false
  stackTags:
    SERVICE_NAME: "vautomator"
  # To use the bucket specified, we will need permissions
  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:PutObject"
       - "s3:PutObjectAcl"
       - "s3:GetObjectAcl"
     Resource:
      Fn::Join:
        - ""
        - - Fn::GetAtt:
            - S3BucketResults
            - Arn
          - "/*"
   - Effect: "Allow"
     Action:
       - "s3:ListBucket"
     Resource:
      Fn::Join:
        - ""
        - - Fn::GetAtt:
            - S3BucketResults
            - Arn
          - ""
   - Effect: "Allow"
     Action:
      - "sqs:SendMessage"
     Resource:
      Fn::GetAtt: [ SQSQueue, Arn ]
   - Effect: Allow
     Action:
      - "sqs:SendMessage"
     Resource:
      - "Fn::GetAtt":
        - ReceiverDeadLetterQueue
        - Arn
     # Required to use SSM for secrets
  #  - Effect: "Allow"
  #    Action:
  #     - ssm:GetParameter
  #     - ssm:GetParameters
  #    Resource:
  #     - "arn:#{AWS::Partition}:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.cfg.ssmAKey}"
  #     - "arn:#{AWS::Partition}:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.cfg.ssmSKey}"
  #  - Effect: "Allow"
  #    Action:
  #     - kms:Decrypt
  #    Resource: "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/${self:custom.cfg.ssmKms}"

  environment:
    HTTPOBS_API_URL: 'https://http-observatory.security.mozilla.org/api/v1'
    TLSOBS_API_URL: 'https://tls-observatory.services.mozilla.com/api/v1'
    SSHOBS_API_URL: 'https://sshscan.rubidus.com/api/v1'
    # Using Observatory list as source list for scheduled scans as it is comprehensive enough
    # This could be updated later, perhaps to another source, such as pentest-master list?
    HOST_LIST: 'https://raw.githubusercontent.com/mozilla/http-observatory-dashboard/master/httpobsdashboard/conf/sites.json'
    SQS_URL:
      Ref: SQSQueue
    S3_BUCKET:
      Ref: S3BucketResults
    # Folder to save the scan results to, make sure it is located under /tmp
    SCAN_RESULTS_BASE_PATH: '/tmp/vautomator-serverless/results'
    REGION: '#{AWS::Region}'
  apiKeys:
    - ${self:service}-api-key

# Adding some packaging information here to clean up
# and to include the nmap static library
package:
  include:
    - vendor/*
  exclude:
    - .venv/**
    - .virtualenv/**
    - .git/**
    - __pycache__/**
    - node_modules/**
    - ./Makefile
    - ./kms_policy.json
    - .vscode
    - examples/**
    - tests/**

functions:
  onDemandPortScan:
    handler: handler.queue_portscan
    description: API endpoint which consumes a host and adds it to the scan queue for port scan.
    events:
      - http:
          path: ondemand/portscan
          method: POST
          cors: true
          private: ${self:custom.cfg.private}
    tags:
      TYPE: ondemand
      SCAN_TYPE: port
  onDemandHttpObservatoryScan:
    handler: handler.queue_httpboservatory
    description: API endpoint which consumes a host and adds it to the scan queue for HTTP Observatory scan.
    events:
      - http:
          path: ondemand/httpobservatory
          method: POST
          cors: true
          private: ${self:custom.cfg.private}
    tags:
      TYPE: ondemand
      SCAN_TYPE: http-observatory
  onDemandSshObservatoryScan:
    handler: handler.queue_sshobservatory
    description: API endpoint which consumes a host and adds it to the scan queue for SSH Observatory scan.
    events:
      - http:
          path: ondemand/sshobservatory
          method: POST
          cors: true
          private: ${self:custom.cfg.private}
    tags:
      TYPE: ondemand
      SCAN_TYPE: ssh-observatory
  onDemandTlsObservatoryScan:
    handler: handler.queue_tlsobservatory
    description: API endpoint which consumes a host and adds it to the scan queue for TLS Observatory scan.
    events:
      - http:
          path: ondemand/tlsobservatory
          method: POST
          cors: true
          private: ${self:custom.cfg.private}
    tags:
      TYPE: ondemand
      SCAN_TYPE: tls-observatory
  # onDemandTenableScan:
  #   handler: handler.queue_tenableioscan
  #   description: API endpoint which consumes a host and adds it to the scan queue for Tenable.io scan.
  #   events:
  #     - http:
  #         path: ondemand/tenablescan
  #         method: POST
  #         cors: true
  #         private: ${self:custom.cfg.private} # Never remove this as it's an intrusive end-point
  #   tags:
  #     TYPE: ondemand
  #     SCAN_TYPE: tenableio
  onDemandWebSearch:
    handler: handler.queue_websearch
    description: API endpoint which consumes a host and adds it to the scan queue for a Google search of a host.
    events:
      - http:
          path: ondemand/websearch
          method: POST
          cors: true
          private: ${self:custom.cfg.private}
    tags:
      TYPE: ondemand
      SCAN_TYPE: search
  onDemandDirectoryEnumeration:
    handler: handler.queue_direnumscan
    description: API endpoint which consumes a host and adds it to the scan queue for directory enumeration scan.
    events:
      - http:
          path: ondemand/direnum
          method: POST
          cors: true
          private: ${self:custom.cfg.private}
    tags:
      TYPE: ondemand
      SCAN_TYPE: direnum
  onDemandDownloadScanResults:
    handler: handler.download_results
    description: API endpoint which consumes a host and serves a ZIP file containing all scan results for that host.
    # This is apparently an API GW constraint, lambda functions
    # attached to API GW should run & return in 30 seconds max.
    timeout: 30
    events:
      - http:
          path: results
          method: POST
          cors: true
          private: ${self:custom.cfg.private}
    tags:
      TYPE: ondemand
  cronPortScan:
    handler: handler.queue_scheduled_portscan
    description: Cron job which adds a list of hosts to the scan queue for port scan.
    timeout: 120
    events:
      # Invoke Lambda function once a week
      # Run at 6 PM UTC every Wednesday once
      - schedule:
          rate: cron(0 18 ? * WED *)
          # Not enabling this by default as it is intrusive in nature
          enabled: false
    tags:
      TYPE: cron
      SCAN_TYPE: port
  cronHttpObservatoryScan:
    handler: handler.queue_scheduled_httpobservatory
    description: Cron job which adds a list of hosts to the scan queue for HTTP Observartory scan.
    timeout: 120
    events:
      # Invoke Lambda function once a day
      # Run at 4 PM UTC every day
      # Update: Disabling scheduled scans by default
      - schedule:
          rate: cron(0 16 * * ? *)
          enabled: false
    tags:
      TYPE: cron
      SCAN_TYPE: http-observatory
  cronTlsObservatoryScan:
    handler: handler.queue_scheduled_tlsobservatory
    description: Cron job which adds a list of hosts to the scan queue for TLS Observatory scan.
    timeout: 120
    events:
      # Invoke Lambda function once a day
      # Run at 4 PM UTC every day
      # Update: Disabling scheduled scans by default
      - schedule:
          rate: cron(0 16 * * ? *)
          enabled: false
    tags:
      TYPE: cron
      SCAN_TYPE: tls-observatory
  cronSshObservatoryScan:
    handler: handler.queue_scheduled_sshobservatory
    description: Cron job which adds a list of hosts to the scan queue for SSH Observatory scan.
    timeout: 120
    events:
      # Invoke Lambda function once a day
      # Run at 4 PM UTC every day
      # Update: Disabling scheduled scans by default
      - schedule:
          rate: cron(0 16 * * ? *)
          enabled: false
    tags:
      TYPE: cron
      SCAN_TYPE: ssh-observatory
  cronDirectoryEnumeration:
    handler: handler.queue_scheduled_direnumscan
    description: Cron job which adds a list of hosts to the scan queue for directory enumeration scan.
    timeout: 120
    events:
      # Invoke Lambda function once a week
      # Run at 6 PM UTC every Thursday once
      - schedule:
          rate: cron(0 18 ? * THU *)
          # Not enabling this by default as it is intrusive in nature
          enabled: false
    tags:
      TYPE: cron
      SCAN_TYPE: direnum
  RunScanQueue:
    handler: handler.runScanFromQ
    description: Function that is triggered to run scans when new messages are in the queue.
    # Increasing this function's timeout's so port scans & directory enum scans could run
    timeout: 900
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ SQSQueue, Arn ]
          batchSize: 1
    tags:
      TYPE: async
  # runTenableScanFromStepFunc:
  #   handler: handler.run_tenableioscan
  #   description: Lambda to be triggered by a Step Function which would kick off a Tenable.io scan for a given host.
  #   tags:
  #     SCAN_TYPE: tenable.io
  # pollTenableScan:
  #   handler: handler.check_tenableioscan
  #   description: Lambda to be triggered to check and download Tenable scan result for a given host.
  #   timeout: 60
  #   tags:
  #     SCAN_TYPE: tenableio
  pollResults:
    handler: handler.check_results
    description: Lamdba to check if all scan output exists for a given host, and generate a download link if true.
    tags:
      TYPE: auxiliary
  formatForSNSEmail:
    handler: handler.formatMessage
    description: Lambda to format a message to be delivered with SNS (email).
    tags:
      TYPE: auxiliary
  ingest:
    handler: handler.putInQueue
    description: This is a demo function that can be called manually, not called on an event.
    tags:
      TYPE: demo

stepFunctions:
  stateMachines:
    ScanAllMachine:
      events:
        - http:
           path: /scan
           method: POST
           cors: true
           private: ${self:custom.cfg.private}
      name: 'ScanAll'
      definition:
        Comment: This step function consumes a host and runs all scan types subsequently.
        # StartAt: Tenablescan
        StartAt: Direnumscan
        States:
          # Tenablescan:
          #   Type: Task
          #   Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-runTenableScanFromStepFunc"
          #   Next: Direnumscan
          #   ResultPath: $.responses.Tenablescan
          Direnumscan:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-onDemandDirectoryEnumeration"
            Next: Portscan
            ResultPath: $.responses.Direnumscan
          Portscan:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-onDemandPortScan"
            Next: SSHscan
            ResultPath: $.responses.Portscan
          SSHscan:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-onDemandSshObservatoryScan"
            Next: HTTPObservatoryscan
            ResultPath: $.responses.SSHscan
          HTTPObservatoryscan:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-onDemandHttpObservatoryScan"
            Next: TLSObservatoryscan
            ResultPath: $.responses.HTTPObservatoryscan
          TLSObservatoryscan:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-onDemandTlsObservatoryScan"
            Next: Websearch
            ResultPath: $.responses.TLSObservatoryscan
          Websearch:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-onDemandWebSearch"
            # Next: Polltenableresults
            Next: WaitForScans
            ResultPath: $.responses.Websearch
          WaitForScans:
            Type: Wait
            # Wait for other scans to complete for 12 minutes
            # 12 is selected here as lambdas can run for max. 15 minutes
            Seconds: 720
            OutputPath: $
            Next: Generatedownloadlink
          # Polltenableresults:
          #   Type: Task
          #   Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-pollTenableScan"
          #   # TimeoutSeconds: 3600
          #   OutputPath: $
          #   ResultPath: $.responses.Polltenableresults
          #   Retry:
          #     # The below configuration allows polling for up to approx. 1 hour
          #     # This is generous but safe, most Tenable scans finish in 20-30 minutes
          #     - ErrorEquals:
          #       - TenableScanRunningException
          #       IntervalSeconds: 120
          #       MaxAttempts: 7
          #       BackoffRate: 1.5
          #     - ErrorEquals:
          #       - TenableScanUnexpectedStateException
          #       IntervalSeconds: 120
          #       MaxAttempts: 3
          #       BackoffRate: 1.5
          #   Catch:
          #     - ErrorEquals:
          #       - States.Timeout
          #       Next: Generatedownloadlink
          #     - ErrorEquals:
          #       - TenableScanInterruptedException
          #       Next: Generatedownloadlink
          #   # If no exceptions ...
          #   Next: Generatedownloadlink
          Generatedownloadlink:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-pollResults"
            ResultPath: $.responses.Generatedownloadlink
            Next: Formatmessage
          Formatmessage:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-formatForSNSEmail"
            ResultPath: $.responses.Formatmessage
            OutputPath: $.responses.Formatmessage
            Next: PublishresultURL
          PublishresultURL:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              Subject.$: "$.subject"
              Message.$: "$.body"
              TopicArn: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:service}-${opt:stage}-vautomator-results-topic"
            End: true

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-apigw-binary
  - serverless-step-functions
  - serverless-prune-plugin
  - serverless-domain-manager

resources:
  Resources:
    MyTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:custom.cfg.vautomatorSNS}
        TopicName: ${self:service}-${self:provider.stage}-vautomator-results-topic
        # Subscription:
        # # TODO: Change these later
        #   - Endpoint: culucenk@mozilla.com
        #     Protocol: email
        #   - Endpoint: cag@mozilla.com
        #     Protocol: email
        Tags:
          - Key: "SERVICE_NAME"
            Value: "vautomator"
    S3BucketResults:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.cfg.s3BucketName}
        Tags:
          - Key: "SERVICE_NAME"
            Value: "vautomator"
    # Define a dead letter queue here
    ReceiverDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.cfg.vautomatorDLQ}
        MessageRetentionPeriod: 120
        Tags:
          - Key: "SERVICE_NAME"
            Value: "vautomator"
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.cfg.vautomatorQ}
        VisibilityTimeout: 300
        MessageRetentionPeriod: 300
        # Use the dead letter queue
        RedrivePolicy:
          deadLetterTargetArn:
            "Fn::GetAtt":
              - ReceiverDeadLetterQueue
              - Arn
          maxReceiveCount: 2
        Tags:
          - Key: "SERVICE_NAME"
            Value: "vautomator"
custom:
  customDomain:
    domainName: ${self:custom.cfg.customDomain}
    endpointType: "regional"
    certificateRegion: ${self:provider.region}
    basePath: 'api'
    stage: ${self:provider.stage}
    createRoute53Record: true
  prune:
    automatic: true
    number: 5
  cfg:
    customDomain: "vautomator.security.allizom.org"
    s3BucketName: "vautomator-results"
    vautomatorQ: "vautomator-SQS"
    vautomatorDLQ: "vautomator-DLQ"
    vautomatorSNS: "Vulnerability Assessment Results"
    # ssmKms: beaede06-f6f5-4183-90bf-64a13edcea15
    # ssmAKey: TENABLEIO_ACCESS_KEY
    # ssmSKey: TENABLEIO_SECRET_KEY
    private: true # Change to 'false' to disable api-key authorization
  pythonRequirements:
    dockerizePip: true
  apigwBinary:
    types:
      - 'application/gzip'
