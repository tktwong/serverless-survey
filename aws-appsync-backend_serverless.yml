service: aws-appsync-backend-file

plugins:
  - serverless-appsync-plugin
  - serverless-plugin-additional-stacks
  - serverless-iam-roles-per-function
  - serverless-plugin-include-dependencies
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  profile: skilltransfers
  region: us-west-2
  timeout: 120
  stage: ${opt:stage, "test"}

custom:
  accountId: #{AWS::AccountId}
  base: ${self:service}-${self:provider.stage}
  db: ${file(./config/config.${self:provider.stage}.json):db}
  # Base naming convention for all resources
  cognitoStackName: ${self:custom.base}-cognito
  dynamoDBStackName: ${self:custom.base}-dynamodb

  # User Pool Id import from Cognito stack
  userPoolId:
    Fn::ImportValue: ${self:custom.cognitoStackName}:${self:provider.stage}:${self:custom.base}-UserPoolId

  # IAM
  role:
    arn: arn:aws:iam::#{AWS::AccountId}:role
    cognito:
      auth:
        name: ${self:custom.base}-auth-CognitoRole
        arn: ${self:custom.role.arn}/${self:custom.role.cognito.auth.name}
      unAuth:
        name: ${self:custom.base}-unAuth-CognitoRole
        arn: ${self:custom.role.arn}/${self:custom.role.cognito.unAuth.name}
    dynamodb:
      name: ${self:custom.base}-DynamoDB-AppSyncServiceRole
      arn: ${self:custom.role.arn}/${self:custom.role.dynamodb.name}
    lambda:
      name: ${self:custom.base}-Lambda-AppSyncServiceRole
      arn: ${self:custom.role.arn}/${self:custom.role.lambda.name}
    logging:
      name: ${self:custom.base}-Logging-AppSyncServiceRole
      arn:
        Fn::GetAtt:
          - AppSyncLoggingServiceRole
          - Arn

  # Plugin: additionalStacks (nesting CF stacks)
  additionalStacks:
    # deploy cognitoResources stack
    # create cognito user pool
    # outputs cognito user pool info for appSyncResources stack
    cognitoResources:
      Deploy: Before
      StackName: ${self:custom.cognitoStackName}
      Resources: ${file(./resources/cognito.yml)}
      Outputs: ${file(./resources/cognito-outputs.yml)}

    # deploy dynaoDBResources stack
    # create users table
    dynaoDBResources:
      Deploy: Before
      StackName: ${self:custom.dynamoDBStackName}
      Resources: ${file(./resources/dynamodb.yml)}

  appSync:
    name: ${self:service}-${self:provider.stage}-api
    authenticationType: AWS_IAM
    logConfig:
      loggingRoleArn: ${self:custom.role.logging.arn}
      level: ALL
    mappingTemplates:
      ## DynamoDB Resolvers
      - dataSource: Notes
        type: Mutation
        field: createNote
        request: 'request/dynamodb/create-item-request-mapping-template.vtl'
        response: 'response/generic-response-mapping-template.vtl'
      - dataSource: Notes
        type: Mutation
        field: createNote
        request: 'request/dynamodb/create-item-request-mapping-template.vtl'
        response: 'response/generic-response-mapping-template.vtl'
      - dataSource: Notes
        type: Mutation
        field: updateNote
        request: 'request/dynamodb/update-item-request-mapping-template.vtl'
        response: 'response/generic-response-mapping-template.vtl'
      - dataSource: Notes
        type: Query
        field: batchGetNotes
        request: 'request/dynamodb/batch-get-notes-request-mapping-template-${self:provider.stage}.vtl'
        response: 'response/batch-get-notes-response-mapping-template-${self:provider.stage}.vtl'
      - dataSource: Notes
        type: Query
        field: getNote
        request: 'request/dynamodb/update-item-request-mapping-template.vtl'
        response: 'response/generic-response-mapping-template.vtl'
    mappingTemplatesLocation: # defaults to mapping-templates
    # schema: ./schema-prod.graphql
    serviceRole: AppSyncServiceRole
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Notes
        description: 'Notes table'
        config:
          tableName: ${self:custom.db.table.note.name}
          serviceRoleArn: ${self:custom.role.dynamodb.arn}

resources:
  Resources:
    # Where AppSyncLoggingServiceRole is a rple with CloudWatch logs write access
    AppSyncLoggingServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: ${self:custom.role.logging.name}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: ${self:custom.role.logging.name}-Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
