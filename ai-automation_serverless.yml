service: website
provider:
  name: aws
  runtime: python3.6
  region: us-west-2
  environment:
    DYNAMODB_TABLE: SentimentReview
  # apiGateway:
  #   restApiId:
  #     'Fn::ImportValue': apiGateway-restApiId
  #   restApiRootResourceId:
  #     'Fn::ImportValue': apiGateway-rootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
custom:
  serverless-offline:
    resourceRoutes: true
  s3:
    port: 8000
    directory: .
  dynamodb:
    stages:
      - dev
    start:
      port: 8100
      #inMemory: false
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ai-frontend
        WebsiteConfiguration:
          IndexDocument: index.html
    BucketBackend:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ai-backend-udacity
    SentimentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SentimentReview
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GetSentimentResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        PathPart: getSentiment
        RestApiId:
          Ref: ApiGatewayRestApi
    GetSentimentMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        ResourceId:
          Ref: GetSentimentResource
        RestApiId:
          Ref: ApiGatewayRestApi
        HttpMethod: POST
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
        Integration:
          IntegrationHttpMethod: POST
          Type: HTTP_PROXY
          Uri: http://34.220.74.75:5000
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
    GetSentimentOptionMethod:
      Type: "AWS::ApiGateway::Method"
      Properties:
        ResourceId:
          Ref: GetSentimentResource
        RestApiId:
          Ref: ApiGatewayRestApi
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          Type: MOCK
          IntegrationResponses:
            - ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              ResponseTemplates:
                application/json: ''
              StatusCode: '200'
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: '{"statusCode": 200}'
        MethodResponses:
          - ResponseModels:
              application/json: Empty
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
            StatusCode: '200'
functions:
  approve:
    handler: backend.handler
    events:
      - http:
          method: POST
          path: setSentiment
          cors: true
  getCsv:
    handler: getcsv.handler
    events:
      - http:
          method: GET
          path: getcsv
          cors: true
