service:
  name: appsyncTest



# plugins
plugins:
  - serverless-pseudo-parameters
  - serverless-webpack
  - serverless-appsync-plugin

# provider
provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  profile: dev
  region: eu-central-1

# graphql lambda
functions:
  graphql:
    handler: handler.graphql

custom:
  accountId: {AWS::AccountId}
  appSync:
    name: sls-appsync-api
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion:  eu-central-1
      defaultAction: ALLOW
      userPoolId:  { Ref: CognitoUserPool } 
    mappingTemplates:

      #
      # getLots
      #
      - dataSource: dynamoLotTableDataSource
        type: Query #Query, Mutation, Subscription
        field: Lots
        request: "lot/getLots/getLots-request-mapping-template.vtl"
        response: "lot/getLots/getLots-response-mapping-template.vtl"

      #
      # getLotById
      #
      - dataSource: dynamoLotTableDataSource
        type: Query
        field: Lot
        request: "lot/getLotById/getLotById-request-mapping-template.vtl"
        response: "standard/standard-response-mapping-template.vtl"

      #
      # addLot
      #
      - dataSource: dynamoLotTableDataSource
        type: Mutation
        field: addLot
        request: "lot/addLot/addLot-request-mapping-template.vtl"
        response: "standard/standard-response-mapping-template.vtl"

      #
      # addContainer
      #
      - dataSource: dynamoContainerTableDataSource
        type: Mutation
        field: addContainer
        request: "container/addContainer/addContainer-request-mapping-template.vtl"
        response: "standard/standard-response-mapping-template.vtl"

      #
      # getContainerById
      #
      - dataSource: dynamoContainerTableDataSource
        type: Query
        field: Container
        request: "container/getContainerById/getContainerById-request-mapping-template.vtl"
        response: "standard/standard-list-response-mapping-template.vtl"

      #
      # getContainersByLotId
      #
      - dataSource: dynamoContainerTableDataSource
        type: Query
        field: Containers
        request: "container/getContainersByLotId/getContainersByLotId-request-mapping-template.vtl"
        response: "standard/standard-list-response-mapping-template.vtl"

      
      
    schema: # defaults schema.graphql
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: dynamoContainerTableDataSource
        config:
          tableName: { Ref: ContainerTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: dynamoLotTableDataSource
        config:
          tableName: { Ref: LotTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoServiceRole, Arn] } 
          


resources:
  Resources:

    # dynamodb container table
    ContainerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-container
        AttributeDefinitions:
          - AttributeName: lotId
            AttributeType: S
          - AttributeName: containerId
            AttributeType: S
        KeySchema:
          - AttributeName: lotId
            KeyType: HASH
          - AttributeName: containerId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: lotId-index
          KeySchema:
          - AttributeName: lotId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: containerId-index
          KeySchema:
          - AttributeName: containerId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      
    # dynamodb lot table
    LotTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-lot
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
    # Cognito - User pool 
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AdminCreateUserConfig: 
          AllowAdminCreateUserOnly: true
          UnusedAccountValidityDays: 14
        UserPoolName: ${self:service}-${self:provider.stage}-userPool
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: workerId
            Required: false
        Policies:
          PasswordPolicy: 
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
    
    # Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-cognitoUserPoolClient
        UserPoolId:
          Ref: CognitoUserPool
    
    # Cognito - Identity Pool
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:service.name}_${self:provider.stage}_cognitoIdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    
    # auth role
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-cognitoAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"          
    
    # unauth role
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-cognitoUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
    
    # AppSync dynamo role
    AppSyncDynamoServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "Dynamo-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                      - { "Fn::GetAtt": [ContainerTable, Arn] } 
                      - { "Fn::Join": ["/", [{ "Fn::GetAtt": [ContainerTable, Arn] }, "index", "containerId-index"]] }
                      - { "Fn::Join": ["/", [{ "Fn::GetAtt": [ContainerTable, Arn] }, "index", "lotId-index"]] }
                      - { "Fn::GetAtt": [LotTable, Arn] } 

    # AppSync lambda role
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "Lambda-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-dev-graphql"
                    - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-dev-graphql:*"


       

