# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-push-token-mgr # NOTE: update this with your service name

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  DDB_PORT: 10001
  TOKENS_TBL_NAME: ${self:custom.stage}-expo-tokens
  documentation: ${file(./api-defintion/api.yaml)}
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - local
    start:
      port: 10002
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'local'}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:logs'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - 'log-group:/aws/lambda/*:*:*'
    - Effect: Allow
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
      Resource: {'Fn::GetAtt': ['TokensTable', 'Arn']}

resources:
  Resources:
    TokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'deviceId'
            AttributeType: 'S'
          - AttributeName: 'flavor'
            AttributeType: 'S'
        TableName: ${self:custom.TOKENS_TBL_NAME}
        KeySchema:
          - AttributeName: 'deviceId'
            KeyType: 'HASH'
          - AttributeName: 'flavor'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST

    requestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'unikrn-request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true # true or false
        ValidateRequestParameters: false # true or false

functions:
  tokenRegistrar:
    handler: handlers/tokenRegistrar.register
    environment:
      TOKENS_TBL_NAME: ${self:custom.TOKENS_TBL_NAME}
      DDB_PORT: ${self:custom.DDB_PORT}
    events:
      - http:
          path: /tokens
          method: POST
          documentation:
            requestBody:
              description: 'Request body description'
            requestModels:
              application/json: 'TokenRegistrationRequest'

            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': 'GenericSuccessResponse'

              - statusCode: '409'
                responseModels:
                  'application/json': 'APIErrorResponseWithMessage'

  pusher:
    handler: handlers/pusher.notify
    environment:
      TOKENS_TBL_NAME: ${self:custom.TOKENS_TBL_NAME}
      DDB_PORT: ${self:custom.DDB_PORT}
    events:
      - http:
          path: /notification
          method: POST
          documentation:
            requestBody:
              description: 'Request body description'
            requestModels:
              application/json: 'PushNotificationSendRequest'

            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': 'GenericSuccessResponse'

              - statusCode: '409'
                responseModels:
                  'application/json': 'APIErrorResponseWithMessage'
