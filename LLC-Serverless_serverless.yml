service: lambda-screenshots

custom:
  # change this, so it's unique for your setup
  bucket_name: idla-screenshots-${opt:stage, 'dev'}

  stageVariables:
    bucketName: ${self:custom.bucket_name}
    endpoint: {"Fn::Join": ["", ["https://", { "Fn::GetAtt": "CloudFrontEndpoint.DomainName" }, "/"]]}
    # timeout for phantomjs
    screenshotTimeout: 3000

provider:
  name: aws
  versionLambda: false
  runtime: nodejs6.10
  memorySize: 384
  region: us-west-2

  # We need to lockdown the apigateway, so we can control who can use the api
  #apiKeys:
  # Commenting out API Key - Need to manually create usage plan
  #  - app-api-key

  # We need to give the lambda functions access to list and write to our bucket, it needs:
  # - to be able to 'list' the bucket
  # - to be able to upload a file (PutObject)
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:Put*"
        - "s3:GetObject"
      Resource:
        - "arn:aws:s3:::${self:custom.bucket_name}"
        - "arn:aws:s3:::${self:custom.bucket_name}/*"

functions:
  takeScreenshot:
    handler: handler.take_screenshot
    timeout: 30
    events:
      - http:
          path: screenshots
          method: post
          # Marking the function as private will require an api-key
          private: true

          # The url parameter is mandatory
          request:
            parameters:
              # headers:
              #   foo: false
              #   bar: true
              querystrings:
                url: true
              # paths:
              #   bar: false
              
  listScreenshots:
    handler: handler.list_screenshot
    timeout: 30
    events:
      - http:
          path: screenshots
          method: get
          private: true
          request:
            parameters:
              querystrings:
                url: true

  createThumbnails:
    handler: handler.create_thumbnails
    timeout: 30
    events:
      - s3:
          bucket: ${self:custom.bucket_name}
          event: s3:ObjectCreated:*

resources:
  Outputs:
    ScreenshotBucket:
      Description: "Screenshot bucket name"
      Value: ${self:custom.bucket_name}
    CloudFrontUrl:
      Description: "CloudFront url"
      Value: {"Fn::GetAtt": "CloudFrontEndpoint.DomainName"}
  Resources:
    OAI:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: ${self:custom.bucket_name}
    Policy:
      Type: "AWS::S3::BucketPolicy"
      Properties: 
        Bucket: ${self:custom.bucket_name}
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: 
                - "s3:GetObject"
              Principal:
                CanonicalUser: 
                  Fn::GetAtt: [ OAI, S3CanonicalUserId ] 
              Resource: 
                - "arn:aws:s3:::${self:custom.bucket_name}"
                - "arn:aws:s3:::${self:custom.bucket_name}/*"
    CloudFrontEndpoint:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: True
          DefaultCacheBehavior:
            TargetOriginId: ScreenshotBucketOrigin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: True
            MaxTTL: 0
            MinTTL: 0
            DefaultTTL: 0
          PriceClass: PriceClass_100
          HttpVersion: http2
          Origins:
            -
              Id: ScreenshotBucketOrigin
              DomainName: ${self:custom.bucket_name}.s3.amazonaws.com
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Ref: OAI
                  

plugins:
  - serverless-plugin-stage-variables
  - serverless-plugin-stack-outputs
