# inspired from https://www.codegigs.app/how-to-cognito-user-pool-using-serverless/
service: api
provider:
  name: aws
  stage: ${opt:stage, 'stage'}
  region: ap-southeast-1
  runtime: nodejs12.x
  vpc: ${file(../layers/database/aliases.yml):database_vpc.${self:provider.stage}}

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline

alias:
  - &layers
    - ${cf:layers-${self:provider.stage}.DatabaseLayerExport}
  - &authorizer
    type: COGNITO_USER_POOLS
    authorizerId:
      Ref: CognitoAuthorizer
  - &MainApiGateway
    Ref: ApiGatewayRestApi

custom:
  serverless-offline:
    httpPort: 2727

functions:
  health:
    handler: functions/health.handler
    events:
      - http:
          path: health
          method: GET
  all:
    handler: functions/all.handler
    layers: *layers
    events:
      - http:
          path: all/{table}
          method: GET
  brick-add:
    handler: functions/brick/add.handler
    layers: *layers
    events:
      - http:
          path: brick/add
          authorizer: *authorizer
          method: POST

resources:
  Resources:
    MainPostgresDb:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: main
        DBInstanceIdentifier: main
        DBInstanceClass: db.t2.micro
        AllocatedStorage: 20
        Engine: postgres
        EngineVersion: 12.3
        MasterUsername: ${env:MAIN_DATABASE_USERNAME}
        MasterUserPassword: ${env:MAIN_DATABASE_PASSWORD}

    AWSLambdaVPCAccessExecutionRole: # from https://medium.com/@antonio.cm.oliveira/how-to-access-your-rds-database-with-lambda-function-and-serverless-b7712dde9f80
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for vpc connetion.
        Roles:
          - !Ref IamRoleLambdaExecution
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"

    CognitoAuthorizer: # Duplicate from Auth stack
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: ${self:provider.stage}-cognito-authorizer
        RestApiId: *MainApiGateway
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          # - {"Fn::Join": ["", ["arn:aws:cognito-idp:", {Ref: "AWS::Region"}, ":", ${cf:authentification-${self:provider.stage}.UserPoolId}, ":userpool/", {Ref: CognitoUserPool}]]}
          - !Join
            - ''
            -  - 'arn:aws:cognito-idp:'
               - !Ref AWS::Region
               - ':'
               - !Ref AWS::AccountId
               - ':userpool/'
               - ${cf:authentification-${self:provider.stage}.UserPoolId}


  Outputs:
    MainPostgresInstanceId:
      Description: InstanceId of the newly created RDS Instance
      Value: !Ref MainPostgresDb
