# For full config options, check the docs:
#    docs.serverless.com

service: books
configValidationMode: error

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

custom:
  stage: ${opt:stage, 'dev'}
  # dbConnection: ${ssm:/aws/reference/secretsmanager/books/dev/db~true}
  smtp: ${ssm:/aws/reference/secretsmanager/books/dev/smtp~true}
  tempBookPrefix: temp
  topicName: books-${self:custom.stage}
  topicArn:
    Fn::Join:
      - ":"
      - - arn
        - aws
        - sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - ${self:custom.topicName}
  downloadQueueName: books-download-${self:custom.stage}
  sendQueueName: books-send-${self:custom.stage}
  
provider:
  name: aws
  runtime: python3.8

  stage: ${self:custom.stage}
  region: ${opt:region, 'eu-central-1'}

  stackTags:
    project: kindle-books-sender

  apiGateway:
    shouldStartNameWithService: true

  apiKeys:
    - name: test1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        !Ref booksTopic
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:DeleteObject
        - s3:GetObject
      Resource:
        !Join ["", [!GetAtt storage.Arn, "/*"]]

  environment:
  # disabled for now
  # DB_HOST: ${self:custom.dbConnection.host}
  # DB_NAME: ${self:custom.dbConnection.dbname}
  # DB_USER: ${self:custom.dbConnection.username}
  # DB_PASSWORD: ${self:custom.dbConnection.password}
  # DB_ENGINE: postgres
    BOOKS_TOPIC: ${self:custom.topicArn}

package:
 exclude:
   - tests
   - appConfig.local.json

functions:
  add_book:
    handler: handler.handle_add_book
    events:
     - http:
         path: books
         method: post
         private: true
  download_book:
    handler: handler.handle_download_book
    environment:
      FILE_PREFIX: ${self:custom.tempBookPrefix}
      FILE_STORAGE: !GetAtt storage.Arn
    events:
      - sqs: 
          arn: 
            !GetAtt downloadQueue.Arn
  send_book:
    handler: handler.handle_send_book
    environment:
      SMTP_SERVER: ${self:custom.smtp.server}
      SMTP_USER: ${self:custom.smtp.username}
      SMTP_PASSWORD: ${self:custom.smtp.password}
      SMTP_PORT: ${self:custom.smtp.port}
      FILE_STORAGE: !GetAtt storage.Arn
    events:
      - sqs:
          arn:
            !GetAtt sendQueue.Arn

resources:
  Resources:
    downloadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: books-downloads
    booksTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.topicName}

    downloadDeadletterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.downloadQueueName}-error
        VisibilityTimeout: 120
    downloadQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.downloadQueueName}
        VisibilityTimeout: 120
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - downloadDeadletterQueue
              - Arn
          maxReceiveCount: 3

    downloadSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: 
          Fn::GetAtt: 
            - downloadQueue
            - Arn
        TopicArn: !Ref booksTopic
        FilterPolicy: 
          state:
            - new
    downloadQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref downloadQueue
        PolicyDocument:
          Statement:
            -
              Action:
                - "SQS:SendMessage"
                - "SQS:GetQueueAttributes"
              Effect: "Allow"
              Resource: !GetAtt downloadQueue.Arn
              Principal:
                Service:
                  - "sns.amazonaws.com" 
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref booksTopic
    downloadErrorQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref downloadDeadletterQueue
        PolicyDocument:
          Statement:
            -
              Action:
                - "SQS:SendMessage"
                - "SQS:GetQueueAttributes"
              Effect: "Allow"
              Resource: !GetAtt downloadDeadletterQueue.Arn
              Principal:
                Service:
                  - "sns.amazonaws.com" 
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref booksTopic

    sendQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sendQueueName}
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt sendErrorQueue.Arn
          maxReceiveCount: 3
    sendErrorQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sendQueueName}-error
        VisibilityTimeout: 60
    sendSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt sendQueue.Arn
        TopicArn: !Ref booksTopic
        FilterPolicy:
          state:
            - downloaded
    sendQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref sendQueue
        PolicyDocument:
          Statement:
            -
              Action:
                - "SQS:SendMessage"
                - "SQS:GetQueueAttributes"
              Effect: Allow
              Resource: !GetAtt sendQueue.Arn
              Principal:
                Service:
                  - "sns.amazonaws.com"
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref booksTopic
    sendErrorQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref sendErrorQueue
        PolicyDocument:
          Statement:
            -
              Action:
                - "SQS:SendMessage"
                - "SQS:GetQueueAttributes"
              Effect: Allow
              Resource: !GetAtt sendErrorQueue.Arn
              Principal:
                Service:
                  - "sns.amazonaws.com"
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref booksTopic

    storage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: books-download-${self:custom.stage}
        AccessControl: Private
        LifecycleConfiguration:
          Rules:
            - Id: TempBooks
              Prefix: ${self:custom.tempBookPrefix}
              Status: Enabled
              ExpirationInDays: "1"
              

plugins:
  - serverless-python-requirements

