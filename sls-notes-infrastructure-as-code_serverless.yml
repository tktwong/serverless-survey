service: pk-sls-notes-api-v2
# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # serverless-offline:
  #   host: 0.0.0.0
  #   port: 3000

  # opt:stage is from what will passed in from sls command line: 
  # deploy --stage $STAGE_NAME
  # fallback to provider.stage -> which is dev
  stage: ${opt:stage, self:provider.stage}
  # setting table name to ${STAGE}-notes
  tableName: ${self:custom.stage}-notes

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-cors.yml)}
  # DynamoDB
  - ${file(resources/dynamoDB.yml)}
  # s3-bucket
  - ${file(resources/s3-bucket.yml)}
  # Cognito userPool
  - ${file(resources/cognito-user-pool.yml)}
  # Cognito userIdentity
  - ${file(resources/cognito-identity-pool.yml)}

provider:
  name: aws
  runtime: nodejs8.10
  # overide deploy stage by running `sls deploy --stage $STAGE_NAME`
  stage: dev
  region: us-east-1

  # will be available in process.env.tableName
  environment:
    tableName: ${self:custom.tableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      
      # allow this lambda to have IAM Action access only to Resource below
      # which is NotesTable
      # -> Resource: get Arn for NotesTable defined in NotesTable dynamoDB.yml; 
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: endpoints/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: endpoints/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: endpoints/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  update:
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: endpoints/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # - path: url path is /notes/{id}
    # - method: delete request (no body)
    handler: endpoints/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
