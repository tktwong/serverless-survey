service: websocket-step-function-sample

provider:
  name: aws
  runtime: python3.7
  region: eu-central-1
  websocketsApiName: websocket-step-function-sample-api
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:resources.Resources.Tasks.Properties.TableName}"
    - Effect: "Allow"
      Action:
        - "states:*"
      Resource:
        - !Ref LongRunningTasksStepFunction
        - "arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:execution:longRunningTasksStepFunction-${self:provider.stage}:*"
    - Effect: "Allow"
      Action:
        - "execute-api:Invoke"
      Resource:
        - "arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:**/@connections/*"

  environment:
    STEP_FUNCTION_ARN: !Ref LongRunningTasksStepFunction

functions:
  register_task:
    handler: handler.register_task
    events:
      - http:
          path: tasks
          method: post
  connectHandler:
    handler: handler.ws_connect_handler
    events:
      - websocket: $connect
  defaultHandler:
    handler: handler.ws_default_handler
    events:
      - websocket: $default
  stepFunctionSuccessfulHandler:
    handler: handler.step_function_successful

resources:
  Resources:
    Tasks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tasks
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH

stepFunctions:
  stateMachines:
    longRunningTasksStepFunction:
      id: LongRunningTasksStepFunction
      name: longRunningTasksStepFunction-${self:provider.stage}
      definition:
        StartAt: wait_using_seconds
        States:
          wait_using_seconds:
            Type: Wait
            Seconds: 30
            Next: success
          success:
            Type: Succeed
      notifications:
        SUCCEEDED:
        - lambda:  "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-stepFunctionSuccessfulHandler"

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    noDeploy: []
