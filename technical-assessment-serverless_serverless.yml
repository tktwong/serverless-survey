service: technical-assessment-serverless

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-iam-roles-per-function # Define IAM roles per function

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  environment:
    tableName: fleet

functions:

  update-account-usage:
    handler: update-account-usage.main
    iamRoleStatementsName: update-account-usage-lambdaRole
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: "arn:aws:dynamodb:us-east-1:*:table/fleet"

  get-account-usage:
    handler: get-account-usage.main
    iamRoleStatementsName: get-account-usage-lambdaRole
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: "arn:aws:dynamodb:us-east-1:*:table/fleet"
    events:
      - http:
          path: accounts/{accountId}
          method: get
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
