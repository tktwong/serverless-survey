# Welcome to Serverless!
#    docs.serverless.com

service: order-process-wf-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: '2'
plugins:
  - serverless-offline

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name

#  customDomain:
#   domainName: api.XXXXXX.com   [USE CUSTOM DOMAIN TO CREATE SIMPLIFIED CUSTOM REST API]
#   basePath: 'V1'
#    stage: ${self:provider.stage}
#    certificateName: XXXXXXX.com [USE CUSTOM DOMAIN SSL TO SECURE REST API]
#    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-south-1
  stage: prod
  memorySize: 128
  timeout: 5
  endpointType: regional 
  environment:
    ORDER_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:*
      Resource: [USE ARN OF STEP FUNCTION STATEMACHINE]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORDER_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORDER_TABLE}/index/*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  invoke-order-process:
    handler: api/invoke-order-process.handler
    description: GET /trigger order process
    environment:
      STATE_MACHINE_ARN: [USE ARN OF STEP FUNCTION STATEMACHINE]
    events:
      - http:
          path: trigger
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  add-order:
    handler: api/add-order.handler
    description: POST /order
    events:
      - http:
          path: order
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  add-order-wf:
    handler: api/add-order-wf.handler
    description: Workflow - Order Process /create order

  update-order:
    handler: api/update-order.handler
    description: PATCH /order
    events:
      - http:
          path: order
          method: patch
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
      
  get-order:
    handler: api/get-order.handler
    description: GET /order/n/{order_id}
    events:
      - http:
          path: order/n/{order_id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  delete-order:
    handler: api/delete-order.handler
    description: DELETE /order/s/{service}
    events:
      - http:
          path: order/s/{service}
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

resources:
  Resources:
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ORDER_TABLE}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: service
            AttributeType: S
          - AttributeName: order_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: service
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: order_id-index
            KeySchema:
             - AttributeName: order_id
               KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1          