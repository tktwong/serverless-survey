# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myService

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  region: ap-northeast-1
  memorySize: 128   #default 1024
  stage: dev

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

custom:
  iam:
#    prod: AWS_IAM
#    dev: AWS_IAM
#    devWithoutIam: NONE
    prod: true
    dev: true
    devWithoutIam: false
  myStage: ${opt:stage, self:provider.stage}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
package:
  exclude:
    - "**"
  include:
    - dist/bundle.js

functions:
  graphql:
    handler: dist/bundle.handler
    events:
      - http:
          path: '{proxy+}'
          method: any
          useIAMAuth: ${self:custom.iam.${self:custom.myStage}}
          cors:
            origins:
              - '*'
            methods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            headers:
              - 'Content-Type'
              - 'X-Amz-Date'
              - 'Authorization'
              - 'X-Api-Key'
              - 'X-Amz-Security-Token'
              - '_headers'
              - '_normalizednames'
    environment:
      STAGE: ${self:custom.myStage}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"

#    Define function environment variables here
#    environment:
#      variable2: value2

#resources:
#  Resources:
#    ApiGatewayMethodGraphqlAny:
#      Type: AWS::ApiGateway::Method
#      Properties:
#        AuthorizationType: ${self:custom.iam.${self:custom.myStage}}
#        HttpMethod: ANY
#        ResourceId:
#          Ref: ApiGatewayResourceProxyVar
#        RestApiId:
#          Ref: ApiGatewayRestApi

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - api-gateway-auth-plugin
#  - serverless-webpack
