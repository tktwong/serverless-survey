service: demo-site

frameworkVersion: '>=1.9.0 <2.0.0'

custom:
  vars: ${file(./vars.yml):${opt:stageflag, "dev"}}
  exportGitVariables: false
  output:
    format: toml
    file: ../frontend/.env
  scriptHooks:
    after:deploy:deploy:
      - cd ../frontend && yarn build
      - cd ../frontend && sh ./scripts/deploy_static_files.sh ${self:custom.vars.STACKNAME}
    before:remove:remove:
      - cd ../frontend && sh ./scripts/remove_static_files.sh ${self:custom.vars.STACKNAME}

provider:
  name: aws
  region: us-east-1
  runtime: nodejs8.10
  stackName: ${self:custom.vars.STACKNAME}
  stackTags: ${self:custom.vars.STACK_TAGS}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'
    - Effect: Allow
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
      Resource:
        - Fn::GetAtt: [ChatConnectionsTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ChatConnectionsTable, Arn]
              - '*'
  environment:
    CHATCONNECTION_TABLE:
      Ref: ChatConnectionsTable

  websocketApiName: websocket-chat-${self:provider.stage}
  websocketApiRouteSelectionExpression: $request.body.action

functions:
  connectionManager:
    handler: handler.connectionManager
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  defaultMessages:
    handler: handler.defaultMessage
    events:
      - websocket:
          route: $default
  sendMessage:
    handler: handler.sendMessage
    events:
      - websocket:
          route: sendMessage

resources:
  Description: Demo Site
  Conditions:
    isProd: { 'Fn::Equals': ['${self:custom.vars.STAGEFLAG}', 'prod'] }
    isRC: { 'Fn::Equals': ['${self:custom.vars.STAGEFLAG}', 'rc'] }
    isDev: { 'Fn::Equals': ['${self:custom.vars.STAGEFLAG}', 'dev'] }
    isProdOrRC:
      { 'Fn::Or': [{ 'Condition': 'isProd' }, { 'Condition': 'isRC' }] }
  Resources:
    ProxyEntry:
      Type: 'Custom::MarketingStackProxyEntry'
      Condition: isDev
      Version: '1.0'
      Properties:
        ServiceToken: ${self:custom.vars.CFPROXYENTRY_ARN}
        Service: ${self:service}
        Stage: ${self:custom.vars.STAGE}
        Origin: { 'Fn::GetAtt': [WebsiteBucket, DomainName] }
    WebsiteBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
    BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: { Ref: WebsiteBucket }
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Principal:
              Fn::If:
                - isProdOrRC
                - CanonicalUser:
                    - { 'Fn::GetAtt': [CloudfrontOAI, S3CanonicalUserId] }
                  AWS:
                    - ${self:custom.vars.ORIGINREQUEST_ROLE_ARN}
                - CanonicalUser:
                    - ${self:custom.vars.CLOUDFRONT_OAI_PROXY}
                  AWS:
                    - ${self:custom.vars.ORIGINREQUESTPROXY_ROLE_ARN}
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - { 'Fn::Join': ['', ['arn:aws:s3:::', { Ref: WebsiteBucket }]] }
              - {
                  'Fn::Join':
                    ['', ['arn:aws:s3:::', { Ref: WebsiteBucket }, '/*']],
                }
    CloudfrontOAI:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Condition: isProdOrRC
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Created for ${self:custom.vars.STACKNAME}
    CDN:
      Type: 'AWS::CloudFront::Distribution'
      Condition: isProdOrRC
      Properties:
        DistributionConfig:
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.vars.ACM_CERT_ARN}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2018
          WebACLId: ${self:custom.vars.WAF}
          Aliases:
            - ${self:custom.vars.DOMAIN}
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_100
          IPV6Enabled: true
          DefaultRootObject: index.html
          Origins:
            - DomainName: { 'Fn::GetAtt': [WebsiteBucket, DomainName] }
              Id: s3-origin
              S3OriginConfig:
                OriginAccessIdentity:
                  {
                    'Fn::Join':
                      [
                        '',
                        [
                          'origin-access-identity/cloudfront/',
                          { Ref: CloudfrontOAI },
                        ],
                      ],
                  }
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
              Headers:
                - Host
                - CloudFront-Viewer-Country
                - Accept-Language
            DefaultTTL: 3600
            MaxTTL: 86400
            MinTTL: 0
            TargetOriginId: s3-origin
            ViewerProtocolPolicy: redirect-to-https
            LambdaFunctionAssociations:
              - EventType: origin-request
                LambdaFunctionARN: ${self:custom.vars.ORIGINREQUEST_LAMBDA_ARN}
              - EventType: origin-response
                LambdaFunctionARN: ${self:custom.vars.ORIGINRESPONSE_LAMBDA_ARN}
        Tags: ${self:custom.vars.TAGS}
    DnsRecords:
      Condition: isProdOrRC
      Type: 'AWS::Route53::RecordSetGroup'
      Properties:
        HostedZoneName: ${self:custom.vars.HOSTED_ZONE}
        Comment: 'DNS records associated with ${self:custom.vars.STACKNAME}'
        RecordSets:
          - Name: ${self:custom.vars.DOMAIN}
            Type: A
            AliasTarget:
              DNSName: { 'Fn::GetAtt': [CDN, DomainName] }
              HostedZoneId: Z2FDTNDATAQYW2
    ChatConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  Outputs:
    SiteUrl:
      Value: ${self:custom.vars.SITE_URL}
      Description: URL of the website
    WebsiteBucket:
      Value: { Ref: WebsiteBucket }
      Description: ID of the S3 bucket hosting static files
    CdnUrl:
      Condition: isProdOrRC
      Value: { 'Fn::GetAtt': [CDN, DomainName] }
      Description: URL of the CloudFront distribution
    DistributionId:
      Condition: isProdOrRC
      Value: { Ref: CDN }
      Description: ID of the CloudFront distribution
    ReactAppStackname:
      Value: ${self:custom.vars.STACKNAME}
      Description: Name of stack/service
    ReactAppGitHash:
      Value: ${git:sha1}
      Description: Git Hash
    ReactAppServiceEndpoint:
      Value: ${self:custom.vars.SERVICE_ENDPOINT}
      Description: Service Endpoint
    ReactAppDemoUrl:
      Value: ${self:custom.vars.SITE_URL}
      Description: URL of the website

plugins:
  - serverless-plugin-git-variables
  - serverless-stack-output
  - serverless-scriptable-plugin
  - serverless-print-dots

package:
  individually: true
  exclude:
    - '**/*'
  include:
    - node_modules/**/*
    - handler.js
