service:
  name: serverless-market-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    AUTH_JWKS: https://dev-8o8y6cnh.auth0.com/.well-known/jwks.json
    CATEGORIES_TABLE: categories-${self:provider.stage}
    ITEMS_TABLE: items-${self:provider.stage}
    ITEM_CATEGORY_INDEX: category-index
    IMAGE_PLACEHOLDER_URL: https://my-serverless-images.s3.amazonaws.com/images.png
    IMAGES_S3_BUCKET: images-for-listings-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  documentation: 
    api:
      info:
        version: v1.0.0
        title: Local Marketplace
        description: Sample marketplace app for buy/sell items.
    models:
      - name: CreateItemRequest
        contentType: application/json
        schema: ${file(src/models/schemas/create-item-model.json)}
      - name: UpdateItemRequest
        contentType: application/json
        schema: ${file(src/models/schemas/update-item-model.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    
  GetCategories:
    handler: src/lambda/http/getCategories.handler
    events:
      - http:
          method: get
          path: categories
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}  
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*" 

  GetItemByCategory:
    handler: src/lambda/http/getListings.handler
    events:
      - http:
          method: get
          path: category/{categoryName}/items
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}/index/${self:provider.environment.ITEM_CATEGORY_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*" 

  GetItemByUser:
    handler: src/lambda/http/getUserListings.handler
    events:
      - http:
          method: get
          path: items
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*" 

  CreateItem:
    handler: src/lambda/http/createItem.handler
    events:
      - http:
          method: post
          path: items
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Create a new listing 
            description: Create a new item
            requestModels: 
              'application/json': CreateItemRequest
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}  
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*" 

  UpdateItem:
    handler: src/lambda/http/updateItem.handler
    events:
      - http:
          method: patch
          path: items/{itemId}
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Update an existing listing 
            description: Update an item using the Item ID
            requestModels: 
              'application/json': UpdateItemRequest
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*" 

  DeleteItem:
    handler: src/lambda/http/deleteItem.handler
    events:
      - http:
          method: delete
          path: items/{itemId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:deleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*" 

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: items/{itemId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: 'Allow'
        Action: 
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: "Allow"
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*" 

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    CategoryDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CATEGORIES_TABLE}

    ItemDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: categoryStatus
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: price
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ITEMS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ITEM_CATEGORY_INDEX}
            KeySchema:
            - AttributeName: categoryStatus
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
              
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false