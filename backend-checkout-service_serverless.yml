# @format

service:
  name: lanacodeproject

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      packagePath: './package.json'
    # includeModules: true
  serverless-offline:
    port: 3000
  dotenv:
    path: ./config/.env.local
    basePath: ./config/

# Add the serverless-webpack plugin
plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:AWS_INSTANCE}
  region: ${env:AWS_REGION}
  stack: ${env:AWS_STACK}
  memorySize: 1024
  timeout: 20
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    ENVIRONMENT: ${env:AWS_INSTANCE}
    region: ${self:provider.region}
    logLevel: DEBUG
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

iamRoleStatements:
  - Effect: Allow
    Action:
      - lambda:InvokeFunction
      - lambda:InvokeAsync
    Resource: 'arn:aws:lambda:${self:provider.region}:*:function:*'

functions:
  applyPromotions:
    handler: src/lambdas/lambdas.applyPromotions
    events:
      - http:
          path: v1/cart/applyPromotions
          method: put
          cors: false

  getItemInfo:
    handler: src/lambdas/lambdas.getItemInfo
    events:
      - http:
          path: v1/cart/getItemQuantity/{itemSku}
          method: get
          cors: false

  adjustItemQuantity:
    handler: src/lambdas/lambdas.adjustItemQuantity
    events:
      - http:
          path: v1/cart/adjustItemQuantity/{itemSku}
          method: put
          cors: false

  health:
    handler: src/lambdas/lambdas.health
    events:
      - http:
          path: health
          method: get
          cors: false
