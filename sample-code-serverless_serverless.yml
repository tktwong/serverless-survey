service: test-projects

plugins:
  - serverless-webpack

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: "../../../webpack.config.js" # Name of webpack configuration file
    includeModules: false # Node modules configuration for packaging
    packager: "yarn" # Packager that will be used to package your external modules
  package:
    individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:custom.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.stage}-ApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - ses:SendEmail
        - ses:SendRawEmail
        - s3:GetObject
        - s3:GetObjectTagging
        - s3:PutObject
        - s3:PutObjectTagging
        - s3:CopyObject
        - s3:DeleteObjects
        - s3:PutObjectAcl
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource:
        - "*"
        - "Fn::ImportValue": ${self:custom.stage}-ProjectsTableArn
        - "Fn::ImportValue": ${self:custom.stage}-InvitesTableArn
        - arn:aws:ses:*:*:identity/*
        - arn:aws:lambda:*:*:*
        - arn:aws:s3:::*
  environment:
    projectsTable:
      "Fn::ImportValue": ${self:custom.stage}-ProjectsTable
    invitesTable:
      "Fn::ImportValue": ${self:custom.stage}-InvitesTable
    stage: ${self:custom.stage}
functions:
  getProjectDetails:
    handler: handler.getProjectDetails
    events:
      - http:
          path: project/details/{projectId}
          method: get
          cors: true
          authorizer: aws_iam
  getRecentProjects:
    handler: handler.getRecentProjects
    events:
      - http:
          path: project/recentProjects
          method: post
          cors: true
          authorizer: aws_iam
  deleteCurrentProject:
    handler: handler.deleteCurrentProject
    events:
      - http:
          path: project/{projectId}/deleteProject
          method: delete
          cors: true
          authorizer: aws_iam
