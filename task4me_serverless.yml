service:
  name: task4me

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  tracing:
    lambda: true
    apiGateway: true

  environment:
    PROJECTS_TABLE: Task4Me-Projects-${self:provider.stage}
    TASKS_TABLE: Task4Me-Tasks-${self:provider.stage}
    PROJECT_USERID_INDEX: ProjectUserIdIndex
    TASK_USERID_PROJECTID_INDEX: TaskUserIdProjectIdIndex
    IMAGES_S3_BUCKET: task4me-images-gokalpi-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    
  serverless-offline:
    port: 3003
  
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - ${self:provider.stage}

  documentation:
    api:
      info:
        version: v1.0.0
        title: Task4Me API
        description: Serverless application for project and task management
    models:
      - name: CreateProjectRequest
        contentType: application/json
        schema: ${file(models/create-project-request.json)}
      - name: UpdateProjectRequest
        contentType: application/json
        schema: ${file(models/update-project-request.json)}
      - name: CreateTaskRequest
        contentType: application/json
        schema: ${file(models/create-task-request.json)}
      - name: UpdateTaskRequest
        contentType: application/json
        schema: ${file(models/update-task-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetAllProjects:
    handler: src/lambda/http/projects/getAllProjects.handler
    events:
      - http:
          method: get
          path: projects
          cors: true
          authorizer: Auth
          documentation:
            summary: Getting all projects of user
            description: Getting all projects of user
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}/index/${self:provider.environment.PROJECT_USERID_INDEX}

  GetProject:
    handler: src/lambda/http/projects/getProject.handler
    events:
      - http:
          method: get
          path: projects/{projectId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}
            
  CreateProject:
    handler: src/lambda/http/projects/createProject.handler
    events:
      - http:
          method: post
          path: projects
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new project
            description: Create a new project
            requestModels:
              'application/json': CreateProjectRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}

  UpdateProject:
    handler: src/lambda/http/projects/updateProject.handler
    events:
      - http:
          method: put
          path: projects/{projectId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update project
            description: Update project
            requestModels:
              'application/json': UpdateProjectRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}

  DeleteProject:
    handler: src/lambda/http/projects/deleteProject.handler
    events:
      - http:
          method: delete
          path: projects/{projectId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}

  getProjectTasks:
    handler: src/lambda/http/projects/getProjectTasks.handler
    events:
      - http:
          method: get
          path: projects/{projectId}/tasks
          cors: true
          authorizer: Auth
          documentation:
            summary: Getting all tasks of project
            description: Getting all tasks of a project
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}/index/${self:provider.environment.TASK_USERID_PROJECTID_INDEX}

  GetTask:
    handler: src/lambda/http/tasks/getTask.handler
    events:
      - http:
          method: get
          path: tasks/{taskId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
      
  CreateTask:
    handler: src/lambda/http/tasks/createTask.handler
    events:
      - http:
          method: post
          path: tasks
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new task
            description: Create a new task
            requestModels:
              'application/json': CreateTaskRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}

  UpdateTask:
    handler: src/lambda/http/tasks/updateTask.handler
    events:
      - http:
          method: put
          path: tasks/{taskId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update task
            description: Update task
            requestModels:
              'application/json': UpdateTaskRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROJECTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}

  DeleteTask:
    handler: src/lambda/http/tasks/deleteTask.handler
    events:
      - http:
          method: delete
          path: tasks/{taskId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}

  generateUrl:
    handler: src/lambda/http/tasks/generateUrl.handler
    events:
      - http:
          method: post
          path: tasks/{taskId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    ProjectsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: projectId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: projectId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.PROJECT_USERID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PROJECTS_TABLE}

    TasksDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: projectId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TASK_USERID_PROJECTID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: projectId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TASKS_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket