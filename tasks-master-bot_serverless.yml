service:
  name: serverless-tg-bot-with-db-bootstrap
# app and org for use with dashboard.serverless.com
app: example
org: leovs09

plugins:
  - serverless-webpack
  - serverless-secrets-plugin
  - serverless-mocha-plugin
  # dynamodb-local must be loaded before offline for start automatically
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SECRET_SERVICE_KEY: ${self:custom.secrets.SECRET_SERVICE_KEY}
    TELEGRAM_TOKEN: ${self:custom.secrets.TELEGRAM_TOKEN}
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom:
  secrets: ${file(./secrets.${opt:stage, self:provider.stage}.yml)}
  
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    packager: 'yarn'
  
  serverless-offline:
    printOutput: true
    noAuth: true
    host: 0.0.0.0 # allow connect outside use only if you inside of container
  
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      host: dynamo # or the name of your Dynamo docker container
      port: "8000" # the port of our Dynamo docker container
      noStart: true

      # Will setup dynamodb on start with you Table scheme
      migrate: true
      # Define is need to inject data on start
      #seed: true
    
    #seed:
    #  source:
    #    test:
    #      sources:
    #        - table: TodosDynamoDbTable
    #          rawsources: [./fake-test-todo.json]


functions:
  telegram:
    handler: handler.telegram
    events:
      - http:
          method: post
          path: telegram
    enviroment:
      STAGE: ${self:provider.stage}
      SECRET_FUNCTION_TOKEN: ${env:SECRET_FUNCTION_TOKEN}
  
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true          

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: todos/delete.deleteFn
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
