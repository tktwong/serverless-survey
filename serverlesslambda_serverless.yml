# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: notes
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

memorySize: 128 # set the maximum memory of the Lambdas in Megabytes
  
  # setting the env stage to dev, this will be visible in the routes
  

functions: # add 4 functions for CRUD
  verify-jwt:
    handler: authentication/VerifyJWT.verify
  login:
    handler: authentication/AuthenticationHandler.login
    events:
      - http:
          path: auth/login
          method: post
          cors: true
  register:
    handler: authentication/AuthenticationHandler.register
    events:
      - http:
          path: auth/register
          method: post
          cors: true
  myProfile:
    handler: user.myProfile
    events:
      - http:
          path: user/myprofile
          method: get
          cors: true
          authorizer: verify-jwt
  create:
    handler: handler.create
    events:
      - http:
          path: notes/ # path will be domain.name.com/dev/notes
          method: post
          cors: true
  getOne:
    handler: handler.getOne
    events:
      - http:
          path: notes/{id} # path will be domain.name.com/dev/notes/1
          method: get
          cors: true
  getAll:
    handler: handler.getAll # path will be domain.name.com/dev/notes
    events:
     - http:
         path: notes
         method: get
         cors: true
  update:
    handler: handler.update # path will be domain.name.com/dev/notes/1
    events:
     - http:
         path: notes/{id}
         method: put
         cors: true
  delete:
    handler: handler.delete
    events:
     - http:
         path: notes/{id} # path will be domain.name.com/dev/notes/1
         method: delete
         cors: true
  createCart:
    handler: cart.create
    events:
      - http:
          path: carts/ # path will be domain.name.com/dev/notes
          method: post
          cors: true
  getOneCart:
    handler: cart.getOne
    events:
      - http:
          path: carts/{id} # path will be domain.name.com/dev/notes/1
          method: get
          cors: true       

plugins:
- serverless-offline # adding the plugin to be able to run the offline emulation