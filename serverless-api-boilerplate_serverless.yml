# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ${env:SF_SERVICE_NAME} # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-jest-plugin
  - serverless-webpack
  - serverless-offline

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true
  serverless-offline:
    babelOptions:
      presets: ["env", "stage-3"]
  jest:
    collectCoverage: true

provider:
  name: aws
  runtime: nodejs6.10
  deploymentBucket: ${env:SF_DEPLOY_BUCKET}
  vpc:
    securityGroupIds:
      - ${env:SF_SECURITY_GROUP}
    subnetIds:
      - ${env:SF_SUBNET_ID_1}
      - ${env:SF_SUBNET_ID_2}
  # you can overwrite defaults here
  stage: ${env:SF_STAGE}
  region: ${env:SF_REGION}
  # required billing tags - same tags used on all lambda functions by default
  stackTags:
    Account: ${env:SF_ACCOUNT_ID}
    Environment: ${env:SF_ENVIRONMENT}
    Product: echo
    Customer: pacificmetrics
    Application: echo-${env:SF_ENVIRONMENT}
  cfLogs: true

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    db_select: ${env:SF_DB_NAME}
    db_user: ${env:SF_DB_USER}
    db_pass: ${env:SF_DB_PASS}
    db_host: ${env:SF_DB_HOST}
    deploymentBucket: ${env:SF_DEPLOY_BUCKET}

# you can add packaging information here
package:
  exclude:
    - .DS_Store
    - tests/**
# include:
#     - node_modules/**
#     - lib/**
#   exclude:
#     - handler.js

functions:
  userAuthorizer:
    handler: app/lib/authorization.userAuthorizer
    role: arn:aws:iam::${env:SF_ACCOUNT_ID}:role/echo-${env:SF_ENVIRONMENT}-${env:SF_REGION}-serverless-lambda-execution-role
    description: Lambda custom authorizer for Auth0 for all endpoints - ${env:SF_DEPLOY_DETAILS, 'no-deploy-details-provided'}
    environment:
      SF_AUTH0_DOMAIN: ${env:SF_AUTH0_DOMAIN}
      SF_AUTH0_CLIENT_ID: ${env:SF_AUTH0_CLIENT_ID}
      SF_AUTH0_CLIENT_NAME: ${env:SF_AUTH0_CLIENT_NAME}
      SF_AUTH0_CLIENT_SECRET: ${env:SF_AUTH0_CLIENT_SECRET}

  some-lambda-function-name:
    handler: app/api/myresource/index.handler
    role: arn:aws:iam::${env:SF_ACCOUNT_ID}:role/echo-${env:SF_ENVIRONMENT}-${env:SF_REGION}-serverless-lambda-execution-role
    description: Get all the stuff at your endpoint - ${env:SF_DEPLOY_DETAILS, 'no-deploy-details-provided'}
    events:
      - http:
          path: yourUrlPath/yourEndpoint
          method: get
          authorizer: userAuthorizer
          integration: lambda-proxy
          cors: true

resources:
  Resources:
    # set API gateway name to follow expected naming conventions
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${env:SF_SERVICE_NAME}-${env:SF_STAGE}

# resources:
#   Resources:
#     echoDevTestConfigurations:
#       Type: AWS::IAM::Role
#       Properties:
#         RoleName: echo-dev-test-configurations-role
#         AssumeRolePolicyDocument:
#           Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Principal:
#                 Service:
#                   - lambda.amazonaws.com
#               Action: sts:AssumeRole
#         Policies:
#           - PolicyName: echo-dev-test-configurations-policy
#             PolicyDocument:
#               Version: '2012-10-17'
#               Statement: [
#                 {
#                     Sid: "",
#                     Effect: "Allow",
#                     Action: [
#                         "kms:Decrypt"
#                     ],
#                     Resource  : "arn:aws:kms:us-west-2:587010381366:key/0d17beb8-6a92-493b-899f-e5f6f01a134c"
#                 },
#                {
#                  Sid: "",
#                  Effect: "Allow",
#                  Action: [
#                    "ec2:CreateNetworkInterface",
#                    "ec2:DeleteNetworkInterface",
#                    "ec2:DescribeNetworkInterfaces",
#                    "ec2:DetachNetworkInterface",
#                  ],
#                  Resource : "*"
#                }
#             ]
# vpc:
#       securityGroupIds:
#         - sg-2aa1f056
#       subnetIds:
#         - subnet-df0408b9
#         - subnet-edd6faa5

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
