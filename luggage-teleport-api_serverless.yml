# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: luggage-teleport-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom:
  bucket: "luggageteleport.net"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-1
  environment:
    TABLE_NAME: "AirportToHotel"
    TABLE_NAME2: "HotelToAirport"
    TABLE_NAME3: "AirportToAirport"
    TABLE_NAME4: "HotelToHotel"
    TABLE_NAME5: "Airport"
    # TABLE_NAME6: "Hotel"
    TABLE_NAME7: "Airline"
    TABLE_NAME8: "Users"
    TABLE_NAME9: "Corporate"
    TABLE_NAME10: "PromoCode"
    TABLE_INDEX_NAME: email
    LOCATION_ID: ${file(apikeys.js):apikeys.location_id_sandbox}
    SQUARE_ACCESS_TOKEN: ${file(apikeys.js):apikeys.square_access_token_sandbox}
    SENDGRID_API_KEY: ${file(apikeys.js):apikeys.sendgrid}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}/index/${self:provider.environment.TABLE_INDEX_NAME}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME2}/index/${self:provider.environment.TABLE_INDEX_NAME}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME3}/index/${self:provider.environment.TABLE_INDEX_NAME}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME4}/index/${self:provider.environment.TABLE_INDEX_NAME}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME5}"
    # - Effect: Allow
    #   Action:
    #     - dynamodb:Query
    #     - dynamodb:Scan
    #     - dynamodb:GetItem
    #   Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME6}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME7}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME8}/index/${self:provider.environment.TABLE_INDEX_NAME}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME9}/index/trackingNumber"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME10}/index/id"
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"
        #  table: ${self:service}-${opt:stage, self:provider.stage}
  #iamRoleStatements:
  # - Effect: Allow
  #    Action:
  #      - dynamodb:Query
  #      - dynamodb:Scan
  #      - dynamodb:GetItem
  #      - dynamodb:PutItem
  #      - dynamodb:UpdateItem
  #      - dynamodb:DeleteItem
  #    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  AirportToHotel-create:
    handler: handler/AirportToHotel.create
    events:
      - http:
          path: handler/AirportToHotel-create
          method: post
          #cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME}
  AirportToHotel-scan:
    handler: handler/AirportToHotel.scan
    events:
      - http:
          path: handler/AirportToHotel-scan
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME}
  # AirportToHotel-update:
  #   handler: handler/AirportToHotel.update
  #   events:
  #     - http:
  #         path: handler/AirportToHotel-update/{id}
  #         method: put
  #         cors: true
  #         request:
  #          parameters:
  #            querystrings:
  #              url: true
  #   environment:
  #     TABLE_NAME: ${self:provider.environment.TABLE_NAME}
  AirportToHotel-get:
    handler: handler/AirportToHotel.get
    events:
      - http:
          path: handler/AirportToHotel-get/{email}
          method: get
          cors: true
          request:
           parameters:
             querystrings:
               url: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME}
  HotelToAirport-create:
    handler: handler/HotelToAirport.create
    events:
      - http:
          path: handler/HotelToAirport-create
          method: post
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME2}
  HotelToAirport-scan:
    handler: handler/HotelToAirport.scan
    events:
      - http:
          path: handler/HotelToAirport-scan
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME2}
  HotelToAirport-get:
    handler: handler/HotelToAirport.get
    events:
      - http:
          path: handler/HotelToAirport-get/{email}
          method: get
          cors: true
          request:
           parameters:
             querystrings:
               url: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME2}
  AirportToAirport-create:
    handler: handler/AirportToAirport.create
    events:
      - http:
          path: handler/AirportToAirport-create
          method: post
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME3}
  AirportToAirport-scan:
    handler: handler/AirportToAirport.scan
    events:
      - http:
          path: handler/AirportToAirport-scan
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME3}
  AirportToAirport-get:
    handler: handler/AirportToAirport.get
    events:
      - http:
          path: handler/AirportToAirport-get/{email}
          method: get
          cors: true
          request:
           parameters:
             querystrings:
               url: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME3}
  HotelToHotel-create:
    handler: handler/HotelToHotel.create
    events:
      - http:
          path: handler/HotelToHotel-create
          method: post
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME4}
  HotelToHotel-scan:
    handler: handler/HotelToHotel.scan
    events:
      - http:
          path: handler/HotelToHotel-scan
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME4}
  HotelToHotel-get:
    handler: handler/HotelToHotel.get
    events:
      - http:
          path: handler/HotelToHotel-get/{email}
          method: get
          cors: true
          request:
           parameters:
             querystrings:
               url: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME4}
  Airport-scan:
    handler: handler/Airport.scan
    events:
      - http:
          path: handler/Airport-scan
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME5}
  Airport-get:
    handler: handler/Airport.get
    events:
      - http:
          path: handler/Airport-get/{id}
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME5}
  # Hotel-scan:
  #   handler: handler/Hotel.scan
  #   events:
  #     - http:
  #         path: handler/Hotel-scan
  #         method: get
  #         cors: true
  #   environment:
  #     TABLE_NAME: ${self:provider.environment.TABLE_NAME6}
  # Hotel-get:
  #   handler: handler/Hotel.get
  #   events:
  #     - http:
  #         path: handler/Hotel-get/{id}
  #         method: get
  #         cors: true
  #         request:
  #          parameters:
  #            querystrings:
  #              url: true
  #   environment:
  #     TABLE_NAME: ${self:provider.environment.TABLE_NAME6}
  Airline-scan:
    handler: handler/Airline.scan
    events:
      - http:
          path: handler/Airline-scan
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME7}
  Airline-get:
    handler: handler/Airline.get
    events:
      - http:
          path: handler/Airline-get/{id}
          method: get
          cors: true
          request:
           parameters:
             querystrings:
               url: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME7}
  Users-create:
    handler: handler/Users.create
    events:
      - http:
          path: handler/Users-create
          method: post
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME8}
  # Users-scan:
  #   handler: handler/Users.scan
  #   events:
  #     - http:
  #         path: handler/Users-scan
  #         method: get
  #         cors: true
  #   environment:
  #     TABLE_NAME: ${self:provider.environment.TABLE_NAME8}
  Users-get:
    handler: handler/Users.get
    events:
      - http:
          path: handler/Users-get/{id}
          method: get
          cors: true
          request:
           parameters:
             querystrings:
               url: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME8}
  Corporate-create:
    handler: handler/Corporate.create
    events:
      - http:
          path: handler/Corporate-create
          method: post
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME9}
  Corporate-scan:
    handler: handler/Corporate.scan
    events:
      - http:
          path: handler/Corporate-scan
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME9}
  Corporate-get:
    handler: handler/Corporate.get
    events:
      - http:
          path: handler/Corporate-get/{trackingNumber}/{sequence}
          method: get
          cors: true
          request:
           parameters:
             querystrings:
               url: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME9}
  PromoCode-create:
    handler: handler/PromoCode.create
    events:
      - http:
          path: handler/PromoCode-create
          method: post
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME10}
  PromoCode-scan:
    handler: handler/PromoCode.scan
    events:
      - http:
          path: handler/PromoCode-scan
          method: get
          cors: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME10}
  PromoCode-get:
    handler: handler/PromoCode.get
    events:
      - http:
          path: handler/PromoCode-get/{id}
          method: get
          cors: true
          request:
           parameters:
             querystrings:
               url: true
    environment:
      TABLE_NAME: ${self:provider.environment.TABLE_NAME10}
  UploadImage:
    handler: handler/UploadImage.save
    environment:
      BUCKET: ${self:custom.bucket}
resources:
  Resources:
    AirportToHotelDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - 
          AttributeName: id
          AttributeType: S
        - 
          AttributeName: email
          AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TABLE_NAME}
        GlobalSecondaryIndexes:
        - IndexName: email
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          # Projection:
          #   NonKeyAttributes:
          #     - user_id
          #     - user_organization_id
          #   ProjectionType: INCLUDE
          Projection:
              ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    HotelToAirportDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - 
          AttributeName: id
          AttributeType: S
        - 
          AttributeName: email
          AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TABLE_NAME2}
        GlobalSecondaryIndexes:
        - IndexName: email
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          # Projection:
          #   NonKeyAttributes:
          #     - user_id
          #     - user_organization_id
          #   ProjectionType: INCLUDE
          Projection:
              ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    AirportToAirportDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - 
          AttributeName: id
          AttributeType: S
        - 
          AttributeName: email
          AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TABLE_NAME3}
        GlobalSecondaryIndexes:
        - IndexName: email
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          # Projection:
          #   NonKeyAttributes:
          #     - user_id
          #     - user_organization_id
          #   ProjectionType: INCLUDE
          Projection:
              ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    HotelToHotelDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - 
          AttributeName: id
          AttributeType: S
        - 
          AttributeName: email
          AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TABLE_NAME4}
        GlobalSecondaryIndexes:
        - IndexName: email
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          # Projection:
          #   NonKeyAttributes:
          #     - user_id
          #     - user_organization_id
          #   ProjectionType: INCLUDE
          Projection:
              ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    AirportDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - 
          AttributeName: id
          AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TABLE_NAME5}
    # HotelDynamoDbTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #     - 
    #       AttributeName: id
    #       AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5
    #     TableName: ${self:provider.environment.TABLE_NAME6}
    AirlineDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - 
          AttributeName: id
          AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TABLE_NAME7}
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - 
          AttributeName: id
          AttributeType: S
        - 
          AttributeName: email
          AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TABLE_NAME8}
        GlobalSecondaryIndexes:
        - IndexName: email
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          # Projection:
          #   NonKeyAttributes:
          #     - user_id
          #     - user_organization_id
          #   ProjectionType: INCLUDE
          Projection:
              ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    CorporateDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - 
          AttributeName: id
          AttributeType: S
        - 
          AttributeName: trackingNumber
          AttributeType: S
        KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TABLE_NAME9}
        GlobalSecondaryIndexes:
        - IndexName: trackingNumber
          KeySchema:
            - AttributeName: trackingNumber
              KeyType: HASH
          # Projection:
          #   NonKeyAttributes:
          #     - user_id
          #     - user_organization_id
          #   ProjectionType: INCLUDE
          Projection:
              ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    PromoCodeDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        - 
          AttributeName: id
          AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.TABLE_NAME10}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
