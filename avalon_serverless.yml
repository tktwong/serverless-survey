service: avalon-serverless # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs8.10

  stage: dev
  region: ${env:AWS_REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
      Resource:
        - Fn::GetAtt: [lobbyTable, Arn]
        - Fn::Join:
            - "/"
            - - Fn::GetAtt: [lobbyTable, Arn]
              - "*"
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - ${self:custom.myTopic}
  websocketApiRouteSelectionExpression: $request.body.action
functions:
  # connectionLobby:
  #   handler: src/lib/lambda/lobby-lambda.connectionLobby
  #   events:
  #     - websocket:
  #         route: $default
  #     - websocket:
  #         route: $disconnect

  lobbyCreateCommand:
    handler: src/lib/lambda/lobby-lambda.lobbyCreateHandler
    events:
      - http:
          path: lobby
          method: post
  lobbyStartCommand:
    handler: src/lib/lambda/game-lambda.gameHandler
    events:
      - http:
          path: game
          method: post
  lobbyJoinCommand:
    handler: src/lib/lambda/lobby-lambda.lobbyJoinHandler
    events:
      - websocket:
          route: $connect

  gameGetQuery:
    handler: src/lib/lambda/game-lambda.gameGetHandler
    events:
      - http:
          path: game/{code}
          method: get
  lobbyPlayersQuery:
    handler: src/lib/lambda/lobby-lambda.getPlayers
    events:
      - http:
          path: lobby/{code}/players
          method: get
  voteCommand:
    handler: src/lib/lambda/vote-lambda.voteHandler
    events:
      - http:
          path: vote
          method: post
  setupCommand:
    handler: src/lib/lambda/setup-lambda.setupHandler
    events:
      - http:
          path: setup
          method: post
  missionCommand:
    handler: src/lib/lambda/mission-lambda.missionHandler
    events:
      - http:
          path: mission
          method: post
  voteNotification:
    handler: src/lib/notification/vote-notification.voteNotification
    events:
      - sns:
          topicName: dispatch
          filterPolicy:
            type:
              - vote
  # commandHandler:
  #   handler: src/lib/lambda/command-lambda.commandHandler
  #   events:
  #     - http:
  #         path: command
  #         method: post
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  myTopic:
    Fn::Join:
      - ":"
      - - arn
        - aws
        - sns
        - Ref: AWS::Region
        - Ref: AWS::AccountId
        - dispatch
  webpack:
    includeModules: true
    packager: "npm"
    package:
      individually: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

plugins:
  - serverless-websockets-plugin
  - serverless-dynamodb-local
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-step-functions
  - serverless-offline
