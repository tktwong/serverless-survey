# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hds-simple-nodejs-serverless # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  role: arn:aws:iam::560395879688:role/Hds-Lambda
# cfnRole: arn:aws:iam::560395879688:role/Hds-Developer
  stackName: hds-${self:provider.stage}-${self:service}
  deploymentBucket: 
    name: hds-chc-dev-medicaltransactions
    tags:
      Owner: LDC
      Zone: us-east-1
      Usage: DevOps

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'} 
  region: ${opt:retion, 'us-east-1'}

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", "hds-chc-dev-medicaltransactions" ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "hds-chc-dev-medicaltransactions"
            - "/*"

# you can define service wide environment variables here
  environment:
    DEBUG: true

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    tags:
      Owner: LDC
      Zone: us-east-1
      
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
       - stream:
            batchSize: 1
            arn:
              arn:aws:dynamodb:us-east-1:560395879688:table/hds_payer/stream/2019-04-29T04:13:51.403
#       - stream:
#           type: dynamodb
#           batchSize: 1
#           startingPosition: LATEST
#           arn:
#             Fn::GetAtt: [ "hds_payer", StreamArn ]
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
