service: ${self:custom.SubdomainName}-${self:custom.ServiceName}-api

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-prune-plugin

custom:
  ServiceName: "bookings"
  StageName: ${opt:stage, 'sandpit'}
  StageNameCert: ${opt:stageCert, ''}
  SubdomainName: "spacenow"
  FirstAttributeName: "bookingId"
  TableName: ${self:custom.StageName}-${self:custom.ServiceName}
  PreReservationTableName: ${self:custom.StageName}-${self:custom.ServiceName}-pre-reservation
  TableThroughputs:
    prod: 3
    default: 1
  TableThroughput: ${self:custom.TableThroughputs.${self:custom.StageName}, self:custom.TableThroughputs.default}
  domains:
    default: api-${self:custom.ServiceName}.${self:custom.StageName}.cloud.spacenow.com
    prod: api-${self:custom.ServiceName}.spacenow.com
  subnet:
    sandpit:
      privateA: subnet-0c75bbd1ea60481d4
      privateB: subnet-070ac699acd775765
      privateC: subnet-0eca793083726120c
    prod:
      privateA: subnet-04d5af2458ebdabbf
      privateB: subnet-010ee1d571a9ca82c
      privateC: subnet-069abf1da82eb3acc
  securityGroup:
    sandpit: sg-0dbf2b9d996f4c91e
    prod: sg-00b4a2172f7e29276
  customDomain:
    domainName: ${self:custom.domains.${self:custom.StageName}, self:custom.domains.default}
    basePath: ""
    stage: ${self:custom.StageName}
    certificateArn: ${ssm:/${self:custom.StageNameCert, ''}/ACM_CERTIFICATE, ''}
    createRoute53Record: true
    endpointType: "regional"
  prune:
    automatic: true
    number: 5

dotenv:
  path: ./.env
  basePath: ./
  include:
    - tableName
    - environment
    - region
    - accountId
    - queueName
    - DATABASE_SCHEMA
    - DATABASE_HOST
    - DATABASE_USERNAME
    - DATABASE_PASSWORD

provider:
  name: aws
  runtime: nodejs10.x
  timeout: 20
  versionFunctions: false
  stage: ${self:custom.StageName, 'sandpit'}
  region: ${opt:region, 'ap-southeast-2'}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource: "arn:aws:sqs:${opt:region, 'ap-southeast-2'}:${opt:accountId, ''}:${self:custom.SubdomainName}-${self:custom.TableName}"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
  vpc:
    securityGroupIds:
      - ${self:custom.securityGroup.${self:custom.StageName, 'sandpit'}}
    subnetIds:
      - ${self:custom.subnet.${self:custom.StageName, 'sandpit'}.privateA}
      - ${self:custom.subnet.${self:custom.StageName, 'sandpit'}.privateB}
      - ${self:custom.subnet.${self:custom.StageName, 'sandpit'}.privateC}
  environment:
    tableName: ${self:custom.TableName}
    preReservationTableName: ${self:custom.PreReservationTableName}
    accountId: ${opt:accountId, ''}
    region: ${opt:region, 'ap-southeast-2'}
    queueName: ${self:custom.SubdomainName}-${self:custom.TableName}
    environment: ${self:custom.StageName}
    DATABASE_SCHEMA: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_SCHEMA~true}
    DATABASE_HOST: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_HOST~true}
    DATABASE_USERNAME: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_USER~true}
    DATABASE_PASSWORD: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_PASSWORD~true}

functions:
  create:
    handler: core/create.main
    memorySize: 1024
    events:
      - http:
          path: bookings
          method: post
          cors: true
  update:
    handler: core/update.main
    memorySize: 1024
    events:
      - http:
          path: bookings/{id}
          method: put
          cors: true
  get:
    handler: core/get.main
    memorySize: 1024
    events:
      - http:
          path: bookings/{id}
          method: get
          cors: true
  getByHostId:
    handler: core/getByHostId.main
    memorySize: 1024
    events:
      - http:
          path: bookings/byHostId/{id}
          method: get
          cors: true
  getByGuestId:
    handler: core/getByGuestId.main
    memorySize: 1024
    events:
      - http:
          path: bookings/byGuestId/{id}
          method: get
          cors: true
  list:
    handler: core/list.main
    memorySize: 1024
    events:
      - http:
          path: bookings
          method: get
          cors: true
  count:
    handler: core/count.main
    memorySize: 1024
    events:
      - http:
          path: bookings/date
          method: get
          cors: true
  approve:
    handler: core/approve.main
    memorySize: 1024
    events:
      - http:
          path: bookings/approve/{id}
          method: put
          cors: true
  paymentConfirmation:
    handler: core/paymentConfirmation.main
    memorySize: 1024
    events:
      - http:
          path: bookings/paymentConfirmation
          method: post
          cors: true
  request:
    handler: core/request.main
    memorySize: 1024
    events:
      - http:
          path: bookings/request/{id}
          method: put
          cors: true
  decline:
    handler: core/decline.main
    memorySize: 1024
    events:
      - http:
          path: bookings/decline/{id}
          method: put
          cors: true
  expire:
    handler: core/expire.main
    memorySize: 1024
    events:
      - http:
          path: bookings/expire/{id}
          method: put
          cors: true
  getByCompleted:
    handler: core/getByCompleted.main
    memorySize: 1024
    events:
      - http:
          path: bookings/getByCompleted
          method: get
          cors: true
  getByExpired:
    handler: core/getByExpired.main
    memorySize: 1024
    events:
      - http:
          path: bookings/getByExpired
          method: get
          cors: true
      - schedule: rate(24 hours)
  cleanAvailabilities:
    handler: core/cleanAvailabilities.main
    memorySize: 1024
    events:
      - http:
          path: bookings/cleanAvailabilities
          method: put
          cors: true
      - schedule: rate(15 minutes)
  cleanListingAvailabilities:
    handler: core/cleanListingAvailabilities.main
    memorySize: 1024
    events:
      - http:
          path: bookings/cleanListingAvailabilities/{id}
          method: put
          cors: true
  getPendingByGuestId:
    handler: core/getPendingByGuestId.main
    memorySize: 1024
    events:
      - http:
          path: bookings/getPendingByGuestId/{id}/{listingId}
          method: get
          cors: true
  timeout:
    handler: core/timeout.main
    memorySize: 1024
    events:
      - http:
          path: bookings/timeout/{id}
          method: put
          cors: true
  getHourlyAvailability:
    handler: core/getHourlyAvailability.main
    memorySize: 1024
    events:
      - http:
          path: bookings/getHourlyAvailability
          method: post
          cors: true
  checkOutTrigger:
    handler: core/checkOutTrigger.main
    memorySize: 1024
    timeout: 120
    events:
      - http:
          path: bookings/checkOutTrigger
          method: post
          cors: true
      - schedule: rate(24 hours)
  voucherList:
    handler: core/voucherList.main
    memorySize: 1024
    events:
      - http:
          path: bookings/voucher
          method: get
          cors: true
  voucherCreate:
    handler: core/voucherCreate.main
    memorySize: 1024
    events:
      - http:
          path: bookings/voucher
          method: post
          cors: true
  voucherUpdateUsage:
    handler: core/voucherUpdateUsage.main
    memorySize: 1024
    events:
      - http:
          path: bookings/voucher/{voucherCode}/usage
          method: put
          cors: true
  voucherDesactive:
    handler: core/voucherDesactive.main
    memorySize: 1024
    events:
      - http:
          path: bookings/voucher/{voucherCode}
          method: delete
          cors: true
  voucherValidate:
    handler: core/voucherValidate.main
    memorySize: 1024
    events:
      - http:
          path: bookings/voucher/{voucherCode}/validate
          method: get
          cors: true
  voucherBookingInsert:
    handler: core/voucherBookingInsert.main
    memorySize: 1024
    events:
      - http:
          path: bookings/voucher/{voucherCode}/booking/{bookingId}/insert
          method: put
          cors: true
  voucherBookingRemove:
    handler: core/voucherBookingRemove.main
    memorySize: 1024
    events:
      - http:
          path: bookings/voucher/{voucherCode}/booking/{bookingId}/remove
          method: put
          cors: true
  getByTimedOut:
    handler: core/getByTimedOut.main
    memorySize: 1024
    events:
      - http:
          path: bookings/getByTimedOut
          method: get
          cors: true
      - schedule: rate(24 hours)

resources:
  - ${file(resources/api-gateway-errors.yml)}
