service: fueller-serverless

plugins:
  - serverless-finch

custom:
  client:
    bucketName: fueller-serverless-website

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  environment:
    DYNAMODB_TABLE: ${self:service}-customer-${opt:stage, self:provider.stage}
    TRANSACTION_TABLE: ${self:service}-transaction-${opt:stage, self:provider.stage}
    TO_ADDRESS: de5be1fe8b-48cfe7@inbox.mailtrap.io
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TRANSACTION_TABLE}"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"

functions:
  find-customer:
    handler: functions/find-customer.handler
    events:
      - http:
          path: /customer/{id}
          method: get
          cors: true
          request: 
            parameters: 
             paths: 
               id: true

  auth-customer:
    handler: functions/authorise-customer.handler
    events:
      - http:
          path: auth
          method: post
          cors: true

  submit-transaction:
    handler: functions/submit-transaction.handler
    events:
      - http:
          path: transaction
          method: post
          cors: true

# you can add CloudFormation resource templates here
#resources:
resources:
  Resources:
    GroupsIdTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "CustomerId"
          AttributeType: S
        KeySchema:
        - AttributeName: "CustomerId"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    
    TranactionTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "TransactionCode"
          AttributeType: S
        KeySchema:
        - AttributeName: "TransactionCode"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TRANSACTION_TABLE}
