service: rest-api
frameworkVersion: '>=1.74.1'
custom:
    webpack:
        webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
        includeModules: false   # Node modules configuration for packaging
        packager: 'npm'   # Packager that will be used to package your external modules
    myStage: '${opt:stage, self:provider.stage}'
    myEnvironment:
        DB:
            dev: 'mongodb+srv://<user>:<pass>@<host>/<db>'
            test: 'mongodb://localhost:27017/test'
provider:
    name: aws
    runtime: nodejs12.x
    memorySize: 128
    timeout: 10
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'us-east-1'}
    environment:
        DB: '${self:custom.myEnvironment.DB.${self:custom.myStage}}'
functions:
    greeting:
        handler: src/functions/hello.handler.hello
        events:
            - {http: {path: hello, method: get, cors: true}}
    store-save:
        handler: src/functions/store.handler.saveStore
        events:
            - {http: {path: store, method: post, cors: true}}
    store-update:
        handler: src/functions/store.handler.updateStore
        events:
            - {http: {path: store, method: put, cors: true}}
    store-delete:
        handler: src/functions/store.handler.deleteStore
        events:
            - {http: {path: 'store/{id}', method: delete, cors: true, request: {parameters: {paths: {id: true}}}}}
    store-get:
        handler: src/functions/store.handler.getStore
        events:
            - {http: {path: 'store/{id}', method: get, cors: true, request: {parameters: {paths: {id: true}}}}}
    store-get-many:
        handler: src/functions/store.handler.getStores
        events:
            - {http: {path: 'store', method: get, cors: true}}
    product-save:
        handler: src/functions/product.handler.saveProduct
        events:
            - {http: {path: product, method: post, cors: true}}
    product-update:
        handler: src/functions/product.handler.updateProduct
        events:
            - {http: {path: product, method: put, cors: true}}
    product-delete:
        handler: src/functions/product.handler.deleteProduct
        events:
            - {http: {path: 'product/{id}', method: delete, cors: true, request: {parameters: {paths: {id: true}}}}}
    product-get:
        handler: src/functions/product.handler.getProduct
        events:
            - {http: {path: 'product/{id}', method: get, cors: true, request: {parameters: {paths: {id: true}}}}}
    product-get-many:
        handler: src/functions/product.handler.getProducts
        events:
            - {http: {path: 'product', method: get, cors: true}}
    price-get-many:
        handler: src/functions/price.handler.getManyByProductRef
        events:
            - {http: {path: 'price/{productRef}', method: get, cors: true, request: {parameters: {paths: {productRef: true}}}}}

plugins:
    - serverless-webpack
    - serverless-jest-plugin
    - serverless-offline
