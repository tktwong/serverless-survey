service:
  name: "static-website"
  publish: false # disable auto-publishing to the Serverless platform

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-pseudo-parameters


package:
  individually: true

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

custom:
  name: "${self:service}-${opt:bucket-name}-${self:provider.stage}"
  accountId: #{AWS::AccountId}
  s3BucketName: "s3.${opt:bucket-name}"
  regionMap:
      us-east-1:
        S3hostedzoneID: Z3AQBSTGFYJSTF
        websiteendpoint: s3-website-us-east-1.amazonaws.com
      us-west-1:
        S3hostedzoneID: Z2F56UZL2M1ACD
        websiteendpoint: s3-website-us-west-1.amazonaws.com
      us-west-2:
        S3hostedzoneID: Z3BJ6K6RIION7M
        websiteendpoint: s3-website-us-west-2.amazonaws.com
      eu-west-1:
        S3hostedzoneID: Z1BKCTXD74EZPE
        websiteendpoint: s3-website-eu-west-1.amazonaws.com
      ap-southeast-1:
        S3hostedzoneID: Z3O0J2DXBE1FTB
        websiteendpoint: s3-website-ap-southeast-1.amazonaws.com
      ap-southeast-2:
        S3hostedzoneID: Z1WCIGYICN2BYD
        websiteendpoint: s3-website-ap-southeast-2.amazonaws.com
      ap-northeast-1:
        S3hostedzoneID: Z2M4EHUR26P7ZW
        websiteendpoint: s3-website-ap-northeast-1.amazonaws.com
      sa-east-1:
        S3hostedzoneID: Z31GFT0UA1I2HV
        websiteendpoint: s3-website-sa-east-1.amazonaws.com



resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.htm

    BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Id: S3PublicSitePolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: "arn:aws:s3:::${self:custom.s3BucketName}/*"
        Bucket:
          Ref: S3Bucket

    Certificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${opt:bucket-name}
        DomainValidationOptions:
        -
          DomainName: ${opt:bucket-name}
          ValidationDomain: ${opt:verification-domain}


    CloudfrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          -
            DomainName: "${self:custom.s3BucketName}.s3.amazonaws.com"
            Id: ${self:custom.s3BucketName}
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
          Enabled: 'true'
          Comment: s3 static site hosting
          DefaultRootObject: index.html
          Aliases:
          - "${opt:bucket-name}"
          DefaultCacheBehavior:
            AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
            TargetOriginId: ${self:custom.s3BucketName}
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn:
              Ref: Certificate
            SslSupportMethod: "sni-only"
    Route53:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${opt:hosted-zone-id}
        Comment: Cloudformation created zone for static s3 website hosting with cloudfront pull through.
        RecordSets:
        -
          Name: ${self:custom.s3BucketName}
          Type: A
          AliasTarget:
            HostedZoneId: ${self:custom.regionMap.${self:provider.region}.S3hostedzoneID}
            DNSName: ${self:custom.regionMap.${self:provider.region}.websiteendpoint}
        -
          Name: ${opt:bucket-name}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # default cloudfront id
            DNSName:
              Fn::GetAtt: [CloudfrontDistribution, DomainName]
Outputs:
  S3BucketURL:
    Value:
      GetAtt:
        S3Bucket.WebsiteURL
    Description: URL for website hosted on S3