service: ${self:custom.SubdomainName}-${self:custom.ServiceName}-api

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-webpack

custom:
  ServiceName: 'availabilities'
  QueueName: 'bookings'
  StageName: ${opt:stage, 'sandpit'}
  StageNameCert: ${opt:stageCert, ''}
  SubdomainName: 'spacenow'
  FirstAttributeName: 'listingId'
  SecondAttributeName: 'availabilityId'
  TableName: ${self:custom.StageName}-${self:custom.ServiceName}
  TableThroughputs:
    prod: 3
    default: 1
  TableThroughput: ${self:custom.TableThroughputs.${self:custom.StageName}, self:custom.TableThroughputs.default}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  domains:
    default: api-${self:custom.ServiceName}.${self:custom.StageName}.cloud.spacenow.com
    prod: api-${self:custom.ServiceName}.spacenow.com
  subnet:
    sandpit:
      privateA: subnet-0c75bbd1ea60481d4
      privateB: subnet-070ac699acd775765
      privateC: subnet-0eca793083726120c
    prod:
      privateA: subnet-04d5af2458ebdabbf
      privateB: subnet-010ee1d571a9ca82c
      privateC: subnet-069abf1da82eb3acc
  securityGroup:
    sandpit: sg-0dbf2b9d996f4c91e
    prod: sg-00b4a2172f7e29276
  customDomain:
    domainName: ${self:custom.domains.${self:custom.StageName}, self:custom.domains.default}
    basePath: ''
    stage: ${self:custom.StageName}
    certificateArn: ${ssm:/${self:custom.StageNameCert}/ACM_CERTIFICATE}
    createRoute53Record: true
    endpointType: 'regional'
  prune:
    automatic: true
    number: 5

dotenv:
  path: ./.env
  basePath: ./
  include:
    - tableName
    - environment
    - region
    - accountId
    - DATABASE_SCHEMA
    - DATABASE_HOST
    - DATABASE_USERNAME
    - DATABASE_PASSWORD

provider:
  name: aws
  runtime: nodejs10.x
  timeout: 20
  versionFunctions: false
  stage: ${self:custom.StageName}
  region: ${opt:region, 'ap-southeast-2'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: '*'
  vpc:
    securityGroupIds:
      - ${self:custom.securityGroup.${self:custom.StageName, 'sandpit'}}
    subnetIds:
      - ${self:custom.subnet.${self:custom.StageName, 'sandpit'}.privateA}
      - ${self:custom.subnet.${self:custom.StageName, 'sandpit'}.privateB}
      - ${self:custom.subnet.${self:custom.StageName, 'sandpit'}.privateC}
  environment:
    tableName: ${self:custom.TableName}
    environment: ${self:custom.StageName}
    region: ${opt:region, 'ap-southeast-2'}
    accountId: ${opt:accountId, ''}
    DATABASE_SCHEMA: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_SCHEMA~true}
    DATABASE_HOST: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_HOST~true}
    DATABASE_USERNAME: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_USER~true}
    DATABASE_PASSWORD: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_PASSWORD~true}

functions:
  book:
    handler: core/book.main
    memorySize: 1024
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - BookingQueue
              - Arn
    reservedConcurrency: 1
  create:
    handler: core/create.main
    memorySize: 1024
    events:
      - http:
          path: availabilities
          method: post
          cors: true
  get:
    handler: core/get.main
    memorySize: 1024
    events:
      - http:
          path: availabilities/{id}
          method: get
          cors: true
  getByListing:
    handler: core/getByListing.main
    memorySize: 1024
    events:
      - http:
          path: availabilities/getByListing/{id}
          method: get
          cors: true
  deleteByListing:
    handler: core/deleteByListing.main
    memorySize: 1024
    events:
      - http:
          path: availabilities/deleteByListing/{id}
          method: delete
          cors: true
  deleteByBooking:
    handler: core/deleteByBooking.main
    memorySize: 1024
    events:
      - http:
          path: availabilities/deleteByBooking/{id}
          method: delete
          cors: true

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/booking-queue.yml)}
