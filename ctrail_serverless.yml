service: ctrail-api

provider:
  name: aws
  runtime: nodejs12.x  # set node.js runtime
  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes
  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)
  stage: dev # setting the env stage to dev, this will be visible in the routes
  region: us-east-1
  environment:
    MONGO_PASSWORD: ${opt:AWS_MONGO_PASSWORD}
    MONGO_USERNAME: ${opt:AWS_MONGO_USERNAME}
    MONGO_HOSTNAME: ${opt:AWS_MONGO_HOSTNAME}
    MONGO_PORT: ${opt:AWS_MONGO_PORT}
    MONGO_DB: ${opt:AWS_MONGO_DB}
    JWT_KEY: ${opt:AWS_JWT_KEY}
    MAIL_USERNAME: ${opt:AWS_MAIL_USERNAME}
    MAIL_PASSWORD: ${opt:AWS_MAIL_PASSWORD}

functions: # add functions
  # User login
  loginUser:
    handler: handler.signIn # point to exported create function in handler.js
    events:
      - http:
          path: login # path will be domain.name.com/dev/login
          method: post
          cors: true
  
  # register user
  # registerUser:
  #   handler: handler.registerUser # point to exported create function in handler.js
  #   events:
  #     - http:
  #         path: user/register # path will be domain.name.com/dev/register
  #         method: post
  #         cors: true
  
  # renew token
  renewExpiredToken:
    handler: handler.renewExpiredToken # point to exported create function in handler.js
    events:
      - http:
          path: user/token # path will be domain.name.com/dev/user/token
          method: post
          cors: true
  
  # register client
  registerClient:
    handler: handler.registerClient # point to exported create function in handler.js
    events:
      - http:
          path: client # path will be domain.name.com/dev/client
          method: post
          cors: true
   
  # User logout
  logoutUser:
    handler: handler.signOut # point to exported create function in handler.js
    events:
      - http:
          path: logout # path will be domain.name.com/dev/login
          method: post
          cors: true
  
  # Change user password
  changePassword:
    handler: handler.changePassword # point to exported create function in handler.js
    events:
      - http:
          path: user/password # path will be domain.name.com/dev/user/password
          method: post
          cors: true
  
  # User handlers
  registerUser:
    handler: handler.registerUser # point to exported create function in handler.js
    events:
      - http:
          path: user/register # path will be domain.name.com/dev/user
          method: post
          cors: true
  
  # User handlers
  verifySetupTokenUser:
    handler: handler.setupTokenVerify # point to exported create function in handler.js
    events:
      - http:
          path: user/setup_account # path will be domain.name.com/dev/user
          method: post
          cors: true
    
  # User setup password
  setupUserPassword:
    handler: handler.setupPassword # point to exported create function in handler.js
    events:
      - http:
          path: user/set_password # path will be domain.name.com/dev/user
          method: post
          cors: true

  # User handlers
  createUser:
    handler: handler.createUser # point to exported create function in handler.js
    events:
      - http:
          path: user # path will be domain.name.com/dev/user
          method: post
          cors: true

  # Update user
  updateUser:
    handler: handler.updateUser # point to exported create function in handler.js
    events:
      - http:
          path: user/update # path will be domain.name.com/dev/user/update
          method: post
          cors: true

  # get users
  getUser:
    handler: handler.getUsers # point to exported create function in handler.js
    events:
      - http:
          path: user # path will be domain.name.com/dev/user/
          method: get
          cors: true

  # remove users
  removeUser:
    handler: handler.removeUser # point to exported create function in handler.js
    events:
      - http:
          path: user/{id} # path will be domain.name.com/dev/user/{id}
          method: delete
          cors: true

  # search users
  searchUsers:
    handler: handler.searchUsers # point to exported create function in handler.js
    events:
      - http:
          path: user/search # path will be domain.name.com/dev/user/search
          method: get
          cors: true

  createService:
    handler: handler.createService # point to exported createService function in handler.js
    events:
      - http:
          path: service #path will be domain.name.com/dev/service
          method: post
          cors: true

  updateService:
    handler: handler.editService # point to exported createService function in handler.js
    events:
      - http:
          path: service #path will be domain.name.com/dev/service
          method: put
          cors: true
  
  removeService:
    handler: handler.removeService # point to exported createService function in handler.js
    events:
      - http:
          path: service/{id} #path will be domain.name.com/dev/service/1
          method: delete
          cors: true
  getPointService:
    handler: handler.getServicesByPointId # point to exported createService function in handler.js
    events:
      - http:
          path: service/point/{id} #path will be domain.name.com/dev/service/1
          method: get
          cors: true

  # Log handlers
  createLog:
    handler: handler.createLog # point to exported create function in handler.js
    events:
      - http:
          path: log # path will be domain.name.com/dev/log
          method: post
          cors: true

  # Point handlers
  createPoint:
    handler: handler.createPoint # point to exported create function in handler.js
    events:
      - http:
          path: point # path will be domain.name.com/dev/point
          method: post
          cors: true
  
  editPoint:
    handler: handler.editPoint # point to exported create function in handler.js
    events:
      - http:
          path: point # path will be domain.name.com/dev/point
          method: put
          cors: true

  searchPoint:
    handler: handler.searchPoints
    events:
      - http:
          path: point/search/ # path will be domain.name.com/dev/point/1
          method: get
          cors: true

  findClosestPoints:
    handler: handler.findClosestPoints
    events:
      - http:
          path: point/findclosestlocation/ # path will be domain.name.com/dev/point/findClosestLocation
          method: get
          cors: true

  removePoint:
    handler: handler.removePoint
    events: 
      - http:
          path: point/{id} #path will be domain.name.com/dev/point/remove/1
          method: delete
          cors: true

  getPoints:
    handler: handler.getPoints
    events:
      - http:
          path: point # path will be domain.name.com/dev/point/1
          method: get
          cors: true
  
  getMyPoints:
    handler: handler.getMyPoints
    events:
      - http:
          path: point/personal # path will be domain.name.com/dev/point/1
          method: get
          cors: true

  findContactLogs:
    handler: handler.findContactLogs # path will be domain.name.com/dev/notes/1
    events:
     - http:
         path: log/contacts
         method: get
         cors: true
  
  traceContacts:
    handler: handler.traceContactLogs # path will be domain.name.com/dev/notes/1
    events:
     - http:
         path: log/trace
         method: post
         cors: true

plugins:
- serverless-offline # adding the plugin to be able to run the offline emulation

custom:
  serverless-offline:
    host: 0.0.0.0