service: serverless-sample

provider:
  name: aws
  runtime: nodejs6.10
  stage: demo
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "apigateway:GET"
      Resource:
        - "arn:aws:apigateway:${self:provider.region}::/restapis*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-aws-documentation
  - serverless-domain-manager
  - serverless-stack-output

package:
  include:
    src/**/!(*.spec).js


functions:
  getSwaggerJson:
    handler: src/swagger/swagger.getSwaggerJson
    description: Returns the Swagger documentation of the API in JSON format.

    environment:
      REGION_NAME: ${self:provider.region}
      REST_API_NAME: ${self:service}
      STAGE_NAME: ${self:provider.stage}
      API_INFO_VERSION: ${file(./swagger/documentation.yml):api.info.version}
      API_INFO_TITLE: ${file(./swagger/documentation.yml):api.info.title}

    events:
      - http:
          path: swagger.json
          method: get
          cors: true

  getHealthCheck:
    handler: src/health/health.getHealthCheck
    description: Returns the result of a quick health check of the API.

    events:
      - http:
          path: health/check
          method: get
          cors: true
          documentation:
            summary: Returns the result of a quick health check of the API.
            tags:
              - Health
            description: Returns the result of a quick health check of the API.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetHealthCheck
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  

  createBill:
    handler: src/EnergyBillFunction/EnergyBillFunction.createBill
    description: Create a bill instance in a DB

    events:
      - http:
          path: energybill/create
          method: post
          cors: true

  softdelete:
    handler: src/EnergyBillFunction/EnergyBillFunction.softdelete
    description: Implementing a soft delete by updating the whole model data

    events:
      - http:
          path: energybill/softdelete
          method: put
          cors: true

  updatemodel:
    handler: src/EnergyBillFunction/EnergyBillFunction.updatemodel
    description: Implementing an update model in settings page.

    events:
      - http:
          path: energybill/updatedata
          method: put
          cors: true
  
  billdetails:
    handler: src/EnergyBillFunction/EnergyBillFunction.billdetails
    description: Implementing an update model in settings page.

    events:
      - http:
          path: energybill/getBillDetails
          method: post
          cors: true

  getHealthCheckDetailed:
    handler: src/health/health.getHealthCheckDetailed
    description: Returns the result of a detailed health check of the API.

    events:
      - http:
          path: health/detailed
          method: get
          cors: true
          documentation:
            summary: Returns the result of a detailed health check of the API.
            tags:
              - Health
            description: Returns the result of a detailed health check of the API.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetHealthCheckDetailed
              - ${file(./swagger/error-responses/internal-server-error.yml)}

  getCity:
    handler: src/cities/cities.getCity
    description: Returns a single city.

    environment:
      DEFAULT_COUNTRY: Hungary

    events:
      - http:
          path: cities/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
          documentation:
            summary: Get a city.
            tags:
              - City
            description: Returns the specified city.
            pathParams:
              - name: id
                description: The unique identifier of the city to retrieve.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetCityResponse
              - ${file(./swagger/error-responses/bad-request.yml)}
              - ${file(./swagger/error-responses/forbidden.yml)}
              - ${file(./swagger/error-responses/not-found.yml)}
              - ${file(./swagger/error-responses/internal-server-error.yml)}

custom:
  documentation: ${file(./swagger/documentation.yml)}
  customDomain:
    basePath: "api"
    domainName: serverless-sample.balassy.me
    certificateName: serverless-sample.balassy.me
    stage: ${self:provider.stage}
    createRoute53Record: true
  output:
    file: .serverless/output.json
