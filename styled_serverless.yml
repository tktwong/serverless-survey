service: styled

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  environment:
    DYNAMODB_TABLE: ${self:custom.dynamodb}
    SQS_QUEUE: ${self:custom.sqs}
    SQS_QUEUE_URL: https://sqs.us-west-2.amazonaws.com/398722583859/${self:custom.sqs}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource: arn:aws:sqs:*:*:${self:custom.sqs}

custom:
  prefix: ${self:service}-${opt:stage, self:provider.stage}
  dynamodb: ${self:custom.prefix}
  sqs: ${self:custom.prefix}-messages

functions:
  createRecord:
    handler: functions/create.createRecord
    name: ${self:provider.stage}-createRecord
    description: Puts new requests for records in SQS and stores them in DynamoDB
    memorySize: 512
    timeout: 10
    reservedConcurrency: 5
    events:
      - http:
          path: records
          method: post
          cors: true
  fetchRecords:
    handler: functions/read.fetchRecords
    name: ${self:provider.stage}-fetchRecords
    description: Reads the current records stored in DynamoDB
    memorySize: 512
    timeout: 10
    reservedConcurrency: 5
    events:
      - http:
          path: records
          method: get
          cors: true

resources:
  Resources:
    Messages:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.environment.SQS_QUEUE}
    RecordsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
