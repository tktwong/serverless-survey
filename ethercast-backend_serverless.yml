service:
  name: ethercast

plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-autoscaling
  - serverless-webpack

custom:
  webpackIncludeModules: true # enable auto-packing of external modules
  stage: ${opt:stage, self:provider.stage}
  prefix: ${self:service}-${self:custom.stage}
  subscriptionsTable: ${self:custom.prefix}-subscriptions
  receiptsTable: ${self:custom.prefix}-receipts
  apiKeysTable: ${self:custom.prefix}-api-keys
  logNotificationTopicName: ${self:custom.prefix}-logs-topic
  txNotificationTopicName: ${self:custom.prefix}-txs-topic
  sendWebhookLambdaName: ${self:custom.prefix}-send-webhook-lambda
  blockProcessedTopicName: "serverless-blockstream-${self:custom.stage}-block-processed"
  logQueueName: "serverless-blockstream-${self:custom.stage}-log-firehose.fifo"
  txQueueName: "serverless-blockstream-${self:custom.stage}-tx-firehose.fifo"
  getAbisLambdaName: "serverless-blockstream-${self:custom.stage}-get-abis"
  baseDynamoDDBCapacity: ${opt:baseDynamoDDBCapacity, "2"}
  maxDynamoDDBCapacity: ${opt:baseDynamoDDBCapacity, "100"}
  dynamoTargetUtilitzation: ${opt:dynamoTargetUtilitzation, env:dynamoTargetUtilitzation, "0.6"}
  tokenIssuer: ${opt:tokenIssuer, "https://ethercast.auth0.com/"}
  tokenAudience: ${opt:tokenAudience, "https://api.ethercast.io"}
  logLevel: ${opt:logLevel, "info"}
  capacities:
    - table: SubscriptionsTable  # DynamoDB Resource
      index:
        - ByUser
        - BySubscriptionArn
      read:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum read capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum read capacity
        usage: ${self:custom.dynamoTargetUtilitzation}        # Targeted usage percentage
      write:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum write capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum write capacity
        usage: ${self:custom.dynamoTargetUtilitzation}        # Targeted usage percentage
    - table: WebhookReceiptsTable  # DynamoDB Resource
      index:
        - BySubscriptionId
      read:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum read capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum read capacity
        usage: ${self:custom.dynamoTargetUtilitzation}        # Targeted usage percentage
      write:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum write capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum write capacity
        usage: ${self:custom.dynamoTargetUtilitzation}        # Targeted usage percentage
    - table: ApiKeysTable  # DynamoDB Resource
      index:
        - ByUser
      read:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum read capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum read capacity
        usage: ${self:custom.dynamoTargetUtilitzation}        # Targeted usage percentage
      write:
        minimum: ${self:custom.baseDynamoDDBCapacity}        # Minimum write capacity
        maximum: ${self:custom.maxDynamoDDBCapacity}      # Maximum write capacity
        usage: ${self:custom.dynamoTargetUtilitzation}        # Targeted usage percentage

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  logRetentionInDays: 7
  environment:
    LOG_LEVEL: ${self:custom.logLevel}
    SUBSCRIPTIONS_TABLE: ${self:custom.subscriptionsTable}
    WEBHOOK_RECEIPTS_TABLE: ${self:custom.receiptsTable}
    API_KEYS_TABLE: ${self:custom.apiKeysTable}
    LOG_NOTIFICATION_TOPIC_NAME: ${self:custom.logNotificationTopicName}
    TX_NOTIFICATION_TOPIC_NAME: ${self:custom.txNotificationTopicName}
    SEND_WEBHOOK_LAMBDA_NAME: ${self:custom.sendWebhookLambdaName}
    LOG_QUEUE_NAME: ${self:custom.logQueueName}
    TX_QUEUE_NAME: ${self:custom.txQueueName}
    GET_ABIS_LAMBDA_NAME: ${self:custom.getAbisLambdaName}
    TOKEN_ISSUER: ${self:custom.tokenIssuer}
    TOKEN_AUDIENCE: ${self:custom.tokenAudience}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource:
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.subscriptionsTable}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.subscriptionsTable}/index/ByUser"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.subscriptionsTable}/index/BySubscriptionArn"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.receiptsTable}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.receiptsTable}/index/BySubscriptionId"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.apiKeysTable}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.apiKeysTable}/index/ByUser"
    - Effect: Allow
      Action:
        - sns:Subscribe
        - sns:Unsubscribe
        - sns:ConfirmSubscription
        - sns:SetSubscriptionAttributes
        - sns:GetTopicAttributes
        - sns:CreateTopic
        - sns:Publish
      Resource:
        - "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.logNotificationTopicName}"
        - "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.txNotificationTopicName}"
    - Effect: Allow
      Action:
        - lambda:CreateAlias
        - lambda:AddPermission
      Resource:
        - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.sendWebhookLambdaName}"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.getAbisLambdaName}"
    - Effect: Allow
      Action:
        - sqs:GetQueueUrl
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:DeleteMessageBatch
      Resource:
        - "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.logQueueName}"
        - "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.txQueueName}"

functions:
  drain-log-firehose-queue:
    handler: src/pipe/drain-log-firehose-queue.handle
    memorySize: 256
    reservedConcurrency: 1
    timeout: 300
    events:
      - sns:
          arn: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.blockProcessedTopicName}"
          topicName: ${self:custom.blockProcessedTopicName}

  drain-tx-firehose-queue:
    handler: src/pipe/drain-tx-firehose-queue.handle
    memorySize: 256
    reservedConcurrency: 1
    timeout: 300
    events:
      - sns:
          arn: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.blockProcessedTopicName}"
          topicName: ${self:custom.blockProcessedTopicName}

  send-webhook-request:
    handler: src/pipe/send-webhook-request.handle
    name: ${self:custom.sendWebhookLambdaName}
    timeout: 5

  # CRUD

  auth:
    handler: src/crud/auth.authorize

  list-keys:
    handler: src/crud/list-keys.handle
    events:
      - http:
          method: get
          path: api-keys
          authorizer:
            name: auth
            identitySource: ''
            resultTtlInSeconds: 0
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Api-Secret
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  post-key:
    handler: src/crud/post-key.handle
    events:
      - http:
          method: post
          path: api-keys
          authorizer:
            name: auth
            identitySource: ''
            resultTtlInSeconds: 0
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Api-Secret
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  delete-key:
    handler: src/crud/delete-key.handle
    events:
      - http:
          method: delete
          path: api-keys/{id}
          authorizer:
            name: auth
            identitySource: ''
            resultTtlInSeconds: 0
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Api-Secret
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  list-subs:
    handler: src/crud/list-subs.handle
    events:
      - http:
          method: get
          path: subscriptions
          authorizer:
            name: auth
            identitySource: ''
            resultTtlInSeconds: 0
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Api-Secret
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  list-receipts:
    handler: src/crud/list-receipts.handle
    events:
      - http:
          method: get
          path: subscriptions/{id}/receipts
          authorizer:
            name: auth
            identitySource: ''
            resultTtlInSeconds: 0
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Api-Secret
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  get-sub:
    handler: src/crud/get-sub.handle
    events:
      - http:
          method: get
          path: subscriptions/{id}
          authorizer:
            name: auth
            identitySource: ''
            resultTtlInSeconds: 0
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Api-Secret
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  post-sub:
    handler: src/crud/post-sub.handle
    events:
      - http:
          method: post
          path: subscriptions
          authorizer:
            name: auth
            identitySource: ''
            resultTtlInSeconds: 0
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Api-Secret
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  delete-sub:
    handler: src/crud/delete-sub.handle
    events:
      - http:
          method: delete
          path: subscriptions/{id}
          authorizer:
            name: auth
            identitySource: ''
            resultTtlInSeconds: 0
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Api-Secret
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  get-examples:
    handler: src/crud/get-examples.handle
    events:
      - http:
          method: post
          path: get-examples
          authorizer:
            name: auth
            identitySource: ''
            resultTtlInSeconds: 0
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Api-Secret
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

resources:
  Description: CRUD API for subscriptions as well as ingest and egest notifications for log firehose
  Resources:
    LogNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.logNotificationTopicName}
    TransactionNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.txNotificationTopicName}
    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.subscriptionsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: user
            AttributeType: S
          - AttributeName: subscriptionArn
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        GlobalSecondaryIndexes:
          -
            IndexName: ByUser
            KeySchema:
              - AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
              WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          -
            IndexName: BySubscriptionArn
            KeySchema:
              - AttributeName: subscriptionArn
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
              WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}

    WebhookReceiptsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.receiptsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: subscriptionId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        GlobalSecondaryIndexes:
          -
            IndexName: BySubscriptionId
            KeySchema:
              - AttributeName: subscriptionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
              WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    ApiKeysTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.apiKeysTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
          WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        GlobalSecondaryIndexes:
          -
            IndexName: ByUser
            KeySchema:
              - AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
              WriteCapacityUnits: ${self:custom.baseDynamoDDBCapacity}
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
