# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: goservice # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  runtime: go1.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:135764319795:table/Artists"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:135764319795:table/SessionData"


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  getArtist:
    handler: bin/getArtist
    events:
      - http:
          path: artists/{Name}
          method: get
          request:
            parameter:
              paths:
                name: true
  getAllArtists:
    handler: bin/getAllArtists
    events:
      - http:
          path: artists
          method: get
  createArtist:
    handler: bin/createArtist
    events:
      - http:
          path: artists
          method: post
  editArtist:
    handler: bin/editArtist
    events:
      - http:
          path: artists/{Name}
          method: put
          request:
            parameter:
              paths:
                name: true
  deleteArtist:
    handler: bin/deleteArtist
    events:
      - http:
          path: artists/{Name}
          method: delete
          request:
            parameter:
              paths:
                name: true
  home:
    handler: bin/home
    events:
      - http:
          path: home
          method: get
          request:
            parameter:
              paths:
                name: true 
  login:
    handler: bin/login
    events:
      - http:
          path: login
          method: get
          request:
            parameter:
              paths:
                name: true 
  callback:
    handler: bin/callback
    events:
      - http:
          path: callback
          method: get
          request:
            parameter:
              paths:
                name: true
  loggedIn:
    handler: bin/loggedIn
    events:
      - http:
          path: loggedIn
          method: get
          request:
            parameter:
              paths:
                name: true

resources:
  Resources:
    Artists:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: ArtistID
          AttributeType: S
        KeySchema:
        - AttributeName: ArtistID
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        TableName: Artists
    SessionData:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: ClientID
          AttributeType: S
        KeySchema:
        - AttributeName: ClientID
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        TableName: SessionData
    Domain:
      Type: AWS::SSM::Parameter
      Properties:
        Name: '/dev/Domain'
        Type: String
        Value: 'https://jasvig.auth0.com/'
    ClientID:
      Type: AWS::SSM::Parameter
      Properties:
        Name: '/dev/ClientID'
        Type: String
        Value: 'kf9yX2qaBa7J5tV1PtL5SpcdZ2GXHEo9'
    ClientSecret:
      Type: AWS::SSM::Parameter
      Properties:
        Name: '/dev/ClientSecret'
        Type: String
        Value: 'q21XgkalMEr1WL81tx62ZgErY2-ZJTS5o3xs_ntm8uiwMiib5Z7N5SL92TLux2_1'
    RedirectURL:
      Type: AWS::SSM::Parameter
      Properties:
        Name: '/dev/RedirectURL'
        Type: String
        Value: 'https://2ttvj85an1.execute-api.us-east-1.amazonaws.com/dev/callback'
    LoggedInURL:
      Type: AWS::SSM::Parameter
      Properties:
        Name: '/dev/LoggedInURL'
        Type: String
        Value: 'https://2ttvj85an1.execute-api.us-east-1.amazonaws.com/dev/loggedIn'
    Recipient:
      Type: AWS::SSM::Parameter
      Properties:
        Name: '/dev/Recipient'
        Type: String
        Value: 'jaskiratvig@gmail.com'

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
