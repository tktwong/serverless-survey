service: WaitlistAppCrudLambdas

provider:
  name: aws
  runtime: java8

  stage: dev
  region: us-west-2
  memorySize: 512

custom:
  authorizationLambdaName: WaitlistAppAuthLambdas-${self:provider.stage}-Authorization
  authorizationLambdaArn: WaitlistAppAuthLambdas-${self:provider.stage}.AuthorizationLambdaFunctionQualifiedArn
  accountIdIndexName: AccountIdIndex
  waitlistIdIndexName: WaitlistIdIndex
  notifyAtIndexName: NotifyAtIndex

package:
  artifact: build/libs/WaitlistAppCrudLambdas-${self:provider.stage}-all.jar

functions:
  WaitlistCrudHandler:
    handler: com.korest.lambda.WaitlistCrudHandler
    role: CrudLambdaRole
    events:
    - http:
        path: /waitlists
        method: get
        cors: true
        authorizer: ${cf:${self:custom.authorizationLambdaArn}}
    - http:
        path: /waitlists
        method: post
        cors: true
        authorizer: ${cf:${self:custom.authorizationLambdaArn}}
    - http:
        path: /waitlists/{waitlistId}
        method: put
        cors: true
        authorizer: ${cf:${self:custom.authorizationLambdaArn}}
    - http:
        path: /waitlists/{waitlistId}
        method: delete
        cors: true
        authorizer: ${cf:${self:custom.authorizationLambdaArn}}
    environment:
      region: ${self:provider.region}
      waitlistsTableName:
        Ref: WaitlistsTable
      accountIdIndexName: ${self:custom.accountIdIndexName}
  WaiteeCrudHandler:
    handler: com.korest.lambda.WaiteeCrudHandler
    role: CrudLambdaRole
    events:
    - http:
        path: /waitlists/{waitlistId}/waitees
        method: get
        cors: true
        authorizer: ${cf:${self:custom.authorizationLambdaArn}}
    - http:
        path: /waitlists/{waitlistId}/waitees
        method: post
        cors: true
        authorizer: ${cf:${self:custom.authorizationLambdaArn}}
    - http:
        path: /waitlists/{waitlistId}/waitees/{waiteeId}
        method: put
        cors: true
        authorizer: ${cf:${self:custom.authorizationLambdaArn}}
    - http:
        path: /waitlists/{waitlistId}/waitees/{waiteeId}
        method: delete
        cors: true
        authorizer: ${cf:${self:custom.authorizationLambdaArn}}
    environment:
      region: ${self:provider.region}
      waitlistsTableName:
        Ref: WaitlistsTable
      waiteesTableName:
        Ref: WaiteesTable
      waitlistIdIndexName: ${self:custom.waitlistIdIndexName}

resources:
  Resources:
    WaitlistsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Waitlists
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: accountId
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: accountId
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: ${self:custom.accountIdIndexName}
          KeySchema:
          - AttributeName: accountId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    WaiteesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Waitees
        AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: notifyAt
          AttributeType: N
        - AttributeName: waitlistId
          AttributeType: S
        KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: waitlistId
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: timeToLive
          Enabled: true
        GlobalSecondaryIndexes:
        - IndexName: ${self:custom.waitlistIdIndexName}
          KeySchema:
          - AttributeName: waitlistId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: ${self:custom.notifyAtIndexName}
          KeySchema:
          - AttributeName: notifyAt
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

    CrudLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CrudLambdaRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action: sts:AssumeRole
        Policies:
        - PolicyName: MyDefaultPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              Resource:
                Fn::GetAtt:
                - WaitlistsTable
                - Arn
            - Effect: Allow
              Action:
              - dynamodb:Query
              Resource:
                Fn::Join:
                - "/"
                - - Fn::GetAtt:
                    - WaitlistsTable
                    - Arn
                  - "index"
                  - "*"
            - Effect: Allow
              Action:
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              Resource:
                Fn::GetAtt:
                - WaiteesTable
                - Arn
            - Effect: Allow
              Action:
              - dynamodb:Query
              Resource:
                Fn::Join:
                - "/"
                - - Fn::GetAtt:
                    - WaiteesTable
                    - Arn
                  - "index"
                  - "*"
            - Effect: Allow
              Action:
              - lambda:InvokeFunction
              Resource:
                Fn::Join:
                - ":"
                - - "arn:aws:lambda"
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - "function"
                  - ${self:custom.authorizationLambdaName}
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
                Fn::Join:
                - ":"
                - - "arn:aws:logs"
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - "log-group:/aws/lambda/*:*:*"
  Outputs:
    WaiteesTable:
      Value:
        Fn::GetAtt:
        - WaiteesTable
        - Arn