service: ph-roadshow-demo

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    CARDS_TABLE: ${self:service}-${self:custom.stage}-cards
    TRANSACTIONS_TABLE: ${self:service}-${self:custom.stage}-transactions
    URL: { "Fn::Join" : ["", [" https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}/" ] ]  }
    ACCOUNT: "test"
    MERCHANT_ID: "test_merchantId"
    KEY: "testKey"
    SECRET: "testSecret"
    SERVICE_URL: "https://v1-hub-staging.sph-test-solinor.com"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CARDS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TRANSACTIONS_TABLE}"

functions:
  listCards:
    handler: listCards.list
    events:
      - http:
          path: cards
          method: get
          cors: true
  addCard:
    handler: addCard.add
    events:
      - http:
          path: card/add
          method: get
          cors: true
  buildAddCardForm:
    handler: buildAddCardForm.build
    events:
      - http:
          path: card/add/form
          method: get
          cors: true
  charge:
    handler: charge.charge
    events:
      - http:
          path: charge
          method: get
          cors: true
  listTransactions:
    handler: listTransactions.list
    events:
      - http:
          path: transactions
          method: get
          cors: true
  commitScaPayment:
    handler: charge.commitScaPayment
    events:
      - http:
          path: charge/webhook
          method: get
          cors: true

resources:
  Resources:
    CardsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: user
            AttributeType: S
          -
            AttributeName: card_token
            AttributeType: S
        KeySchema:
          -
            AttributeName: user
            KeyType: HASH
          -
            AttributeName: card_token
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CARDS_TABLE}
    TransactionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: transaction_id
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: transaction_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TRANSACTIONS_TABLE}
