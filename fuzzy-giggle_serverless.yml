# Fuzzy-Giggle - Serverless, aws, nodejs, lambda, gateway-api, dynamodb
# Javier Azaret

service: fuzzy-giggle 

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    SYSTEM_EMAIL: jazaret@gmail.com  

# you can overwrite defaults here
#  stage: dev
  region: us-east-1

package:
  exclude:
    - .serverless/**
    - .vs/**
    - .vscode/**    
    - .gitignore
    - node_modules/**    
    - tests/**    
    - resources/**    
    - package.json
    - README.md
    - terraform.tf
    - swagger.json
  include:
    - node_modules/node-uuid/**

functions:
  getTasks:
    role: myRoleForGetTasks
    handler: handlerTasks.getTasks
    environment:
          TABLE_NAME: tasks-table
    events:
        - http: GET tasks
  addTask:
      role: myRoleForAddTask
      handler: handlerTasks.addTask
      environment:
                TABLE_NAME: tasks-table
      events:
        - http: POST tasks
  updateTask:
      role: myRoleForUpdateTask
      handler: handlerTasks.updateTask
      environment:
                TABLE_NAME: tasks-table      
      events:
        - http: PUT tasks
  deleteTask:
      role: myRoleForDeleteTask
      handler: handlerTasks.deleteTask
      environment:
                TABLE_NAME: tasks-table      
      events:
        - http: DELETE tasks            
  emailTasks:
      role: myRoleForEmailTasks
      handler: handlerTasks.emailTasks
      environment:
                TABLE_NAME: tasks-table      
      events:
            - schedule: rate(24 hours)   
# Messages
#######
  getMessages:
      role: myRoleForGetMesssages
      handler: handlerMessages.getMessages
      environment:
                TABLE_NAME: messages-table      
      events:
            - http: GET messages
  addMessage:
      role: myRoleForUpdateMesssage
      handler: handlerMessages.addMessage
      environment:
                TABLE_NAME: messages-table            
      events:
          - http: POST messages
  updateMessage:
      role: myRoleForUpdateMesssage
      handler: handlerMessages.updateMessage
      environment:
                TABLE_NAME: messages-table          
      events:
        - http: PUT messages      
  triggerMessagesNotify:
      role: myRoleForMessagesEmailDbTrigger
      handler: handlerMessages.triggerMessagesNotify
      environment:
                TABLE_NAME: messages-table      
      events:
#          - stream:
#            arn: arn:aws:dynamodb:us-east-1:918902313573:table/messages-table/stream/2017-04-17T12:53:37.913
#            batchSize: 1
#            startingPosition: LATEST
#            enabled: true

resources:  
  Resources:
    DynamoDbTableTasks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tasks-table
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5       
        StreamSpecification:
                  StreamViewType: NEW_AND_OLD_IMAGES    
    DynamoDbTableMessages:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: messages-table
        AttributeDefinitions:
          - AttributeName: messageId
            AttributeType: S
        KeySchema:
          - AttributeName: messageId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5       
        StreamSpecification:
                  StreamViewType: NEW_AND_OLD_IMAGES       
    myRoleForGetTasks:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForGetTasks
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Scan
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table
    myRoleForAddTask:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForAddTask
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table             
    myRoleForUpdateTask:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForUpdateTask
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table        
    myRoleForDeleteTask:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForDeleteTask
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                      - dynamodb:DeleteItem
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table                                        
    myRoleForEmailTasks:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForEmailTasks
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                  Resource: arn:aws:dynamodb:*:*:table/tasks-table           
          - PolicyName: myPolicyToSendEmailsWithSes
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ses:SendEmail
                  Resource: '*'
    myRoleForGetMesssages:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForUpdateMessage
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                      - dynamodb:Scan
                  Resource: arn:aws:dynamodb:*:*:table/messages-table                                                
    myRoleForUpdateMesssage:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: policyForLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*:*      
          - PolicyName: myPolicyForUpdateMessage
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                  Resource: arn:aws:dynamodb:*:*:table/messages-table                      
    myRoleForMessagesEmailDbTrigger:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyToSendEmailsWithSesDbTrigger
            PolicyDocument: 
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:DescribeStream
                    - dynamodb:ListStreams
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - ses:SendEmail
                  Resource: '*'