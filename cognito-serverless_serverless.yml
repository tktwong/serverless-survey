service: cognito

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ca-central-1'}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

# functions:
#   hello:
#     handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    OrganizationUserPool:
      Type: AWS::Cognito::UserPool
      Properties: 
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true 
        AliasAttributes: 
          - email
          - phone_number
        # AutoVerifiedAttributes: 
        #   - email
        #   - phone_number
        DeviceConfiguration: 
          DeviceOnlyRememberedOnUserPrompt: false
          ChallengeRequiredOnNewDevice: true
        # EmailConfiguration:
        #   EmailSendingAccount: COGNITO_DEFAULT
        #   ReplyToEmailAddress: noreply@alayacare.com
        # EmailConfiguration: 
        #   EmailConfiguration
        # EmailVerificationMessage: String
        # EmailVerificationSubject: String
        # EnabledMfas: 
        #   - SMS_MFA
        # LambdaConfig: 
        #   LambdaConfig
        MfaConfiguration: "OFF"
        Policies: 
          PasswordPolicy:            
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: 7
        # Schema: 
        #   - SchemaAttribute
        # SmsAuthenticationMessage: String
        # SmsConfiguration: 
        #   ExternalId: String
        #   SnsCallerArn: String        
        # SmsVerificationMessage: String
        # UsernameAttributes: 
        #   - String
        UserPoolAddOns: 
          AdvancedSecurityMode: AUDIT
        UserPoolName: ${opt:userpool-name}-${self:provider.stage}
        # VerificationMessageTemplate: 
        #   VerificationMessageTemplate

    OrganizationUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref OrganizationUserPool
        Domain: ${opt:userpool-name}

    OrganizationUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        AllowedOAuthFlows: 
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes: 
          - openid
    #     AnalyticsConfiguration: 
    #       AnalyticsConfiguration
        CallbackURLs: 
          - http://localhost/callback
        ClientName: OrganizationClient
    #     DefaultRedirectURI: String
    #     ExplicitAuthFlows: 
    #       - String
        GenerateSecret: false
        LogoutURLs: 
          - http://localhost
    #     ReadAttributes: 
    #       - String
    #     RefreshTokenValidity: Integer
    #     SupportedIdentityProviders: 
    #       - String
        UserPoolId: !Ref OrganizationUserPool
    #     WriteAttributes: 
    #       - String

    # SupportUserPoolClient:
    #   Type: AWS::Cognito::UserPoolClient
    #   Properties:
    #     AllowedOAuthFlows: 
    #       - code
    #     AllowedOAuthFlowsUserPoolClient: true
    #     AllowedOAuthScopes: 
    #       - openid
    # #     AnalyticsConfiguration: 
    # #       AnalyticsConfiguration
    # #     CallbackURLs: 
    # #       - String
    #     ClientName: SupportClient
    # #     DefaultRedirectURI: String
    # #     ExplicitAuthFlows: 
    # #       - String
    #     GenerateSecret: false
    # #     LogoutURLs: 
    # #       - String
    # #     ReadAttributes: 
    # #       - String
    # #     RefreshTokenValidity: Integer
    # #     SupportedIdentityProviders: 
    # #       - String
    #     UserPoolId: !Ref OrganizationUserPool
    # #     WriteAttributes: 
    # #       - String


  Outputs:
    UserPoolId:
      Value: !Ref OrganizationUserPool
    UserPoolDomain:
      Value: !Ref OrganizationUserPoolDomain