# filename: serverless.yml
service: aws-dashboard

# The `provider` block defines where your service will be deployed
custom:
  bucket: aws-dashboard-application-frontend
plugins:
  - serverless-offline
provider:
  name: aws
  runtime: nodejs8.10
  region: ap-south-1
  stackName: dashboardServerlessApplication
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "cloudformation:DescribeStackResources"
        - "cloudformation:ListStackResources"
        - "tag:GetResources"
        - "tag:TagResources"
        - "tag:UntagResources"
        - "tag:getTagKeys"
        - "tag:getTagValues"
        - "ec2:Describe*"
        - "elasticloadbalancing:Describe*"
        - "cloudwatch:ListMetrics"
        - "cloudwatch:GetMetricStatistics"
        - "cloudwatch:Describe*"
        - "autoscaling:Describe*"
        - "workspaces:DescribeWorkspaces"
        - "aws-portal:View*"
        - "ce:*"
        - "ecr:DescribeRepositories"
        - "ecr:ListImages"
        - "ecr:DescribeImages"       
        - "lambda:ListFunctions"
        - "cloudfront:List*"
        - "rds:Describe*"
        - "cloudwatch:Get*"
        - "cloudwatch:List*"
      Resource: 
        - "*" 

# The `functions` block defines what code to deploy
functions:
  getEc2Instances:
    handler: lambda-functions/src/getEc2Instances.handler
    # The `events` block defines how to trigger the uploadImage.handler code
    events:
      - http:
          path: ec2instances
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getEbsVolumes:
    handler: lambda-functions/src/getEbsVolumes.handler
    # The `events` block defines how to trigger the uploadImage.handler code
    events:
      - http:
          path: ebsVolumes
          method: get             
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getWorkspaces:
    handler: lambda-functions/src/getWorkspaces.handler
    # The `events` block defines how to trigger the uploadImage.handler code
    events:
      - http:
          path: Workspaces
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getBilling:
    handler: lambda-functions/src/getDailyBilling.handler
    events:
      - http: 
          path: billing
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getVPCresources:
    handler: lambda-functions/src/getVPCresources.handler
    events:
      - http: 
          path: vpc-resources
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
    
  getEC2PricingInstances:
    handler: lambda-functions/src/getEC2PricingInstances.handler
    events:
      - http: 
          path: ec2-pricing-instances
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getAllRegions:
    handler: lambda-functions/src/getAllRegions.handler
    events:
      - http: 
          path: all-regions
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getVpcs:
    handler: lambda-functions/src/getVpcs.handler
    events:
      - http: 
          path: vpc
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getLambda:
    handler: lambda-functions/src/getLambda.handler
    events:
      - http: 
          path: lambda
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getEcrRepositories:
    handler: lambda-functions/src/getEcrRepositories.handler
    events:
      - http: 
          path: EcrRepositories
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getRds:
    handler: lambda-functions/src/getRds.handler
    events:
      - http: 
          path: rds
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getDynamoDbInsights:
    handler: lambda-functions/src/getDynamoDbInsights.handler
    events:
      - http: 
          path: dynamodb-insights
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
  getCloudFront:
    handler: lambda-functions/src/getCloudFront.handler
    events:
      - http: 
          path: cloudfront
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:ap-south-1:645489126171:userpool/ap-south-1_QgTRzltsA
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Region
resources:
  Resources:
    StorageBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.bucket}