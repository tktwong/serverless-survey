# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: test-template-7
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  stage: ${opt:stage, self:provider.stage}
  deployment_configs:
    develop:
      min_version: "0.0.0"
      max_version: "*.*.*"
    staging:
      min_version: "0.0.0"
      max_version: "0.0.5"
    production:
      min_version: "0.0.0"
      max_version: "0.0.0"
  envvars:
    develop:
      message: "This is the newest message from the develop environment"
    staging:
      message: "This is the newest message from the staging environment"
    production:
      message: "This is the newest message from the staging environment"

provider:
  name: aws
  runtime: python3.8
  stage: develop # default, can be overridden on the cli
  region: us-west-2 # default, can be overridden on the cli

# you can define service wide environment variables here
  environment:
    message: ${self:custom.envvars.${self:custom.stage}.message}
    # secret: ${ssm:/${self:custom.stage}/test~true}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - "*"

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-west-2:100924391987:listener/app/tf-lb-20190725222421338000000003/2872171832b3a958/b4179ec7f079fef4
#          priority: 3
#          conditions:
#            host: develop.livesafemobile.net
#            path: /hello

#    deploymentSettings:
#      type: Linear10PercentEvery1Minute
#      alias: Live

#      preTrafficHook: preHook
#      postTrafficHook: postHook
#      alarms:
#        - FooAlarm          # When a string is provided, it expects the alarm Logical ID
#        - name: BarAlarm    # When an object is provided, it expects the alarm name in the name property
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp


#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ALBLambdaPermission:
      Type: AWS::Lambda::Permission
      DependsOn: "HelloLambdaFunction"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: { "Fn::GetAtt" : [ "HelloLambdaFunction", "Arn" ] }
        Principal: elasticloadbalancing.amazonaws.com

#plugins:
#  - serverless-pseudo-parameters
