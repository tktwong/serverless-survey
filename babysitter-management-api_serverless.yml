# NOTE: update this with your service name
service: babysitter-management-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-southeast-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: babysitters

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:updatePoint
        - dynamodb:DeleteItem
        - dynamodb:deletePoint
      Resource: "arn:aws:dynamodb:ap-southeast-2:*:*"

functions:
  create:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /babysitter/{id}
    # - method: GET request
    handler: create.main
    events:
      - http:
          path: babysitter
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /babysitter/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: babysitter/{id}
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /babysitter/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: babysitter
          method: put
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /babysitter/{id}
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: babysitters
          method: get
          cors: true
          authorizer: aws_iam
          request:
            template:
              application/json: '{ "dateStart" : "$input.params(''dateStart'')", "dateStop" : "$input.params(''dateStop'')", "lat" : "$input.params(''lat'')", "lng" : "$input.params(''lng'')", "rad" : "$input.params(''rad'')", "hasCar" : "$input.params(''hasCar'')", , "lightHousekeeping" : "$input.params(''lightHousekeeping'')"  }'
