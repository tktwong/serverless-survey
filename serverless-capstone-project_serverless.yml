service:
  name: cloud-capstone-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    IMAGE_TABLE: Capstone-Image-${self:provider.stage}
    COMMENTS_TABLE: Capstone-Comment-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    IMAGE_ID_INDEX: ImageIdIndex
    IMAGES_S3_BUCKET: cloud-capstone-app-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Cloud capstone serverless
        description: Serverless application for Udacity Cloud Developer
    models:
      - name: ImageCreateRequest
        contentType: application/json
        schema: ${file(src/requests/create-image-request.json)}
      - name: CommentCreateRequest
        contentType: application/json
        schema: ${file(src/requests/create-comment-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetImages:
    handler: src/lambda/http/getImages.handler
    events:
      - http:
          method: get
          path: images
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  CreateImage:
    handler: src/lambda/http/createImage.handler
    events:
      - http:
          method: post
          path: images
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new image
            description: Create a new image
            requestModels:
              "application/json": ImageCreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  CreateComment:
    handler: src/lambda/http/createComment.handler
    events:
      - http:
          method: post
          path: images/{imageId}/comments
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a comment
            description: Create a comment for an Image
            requestModels:
              "application/json": CommentCreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  DeleteImage:
    handler: src/lambda/http/deleteImage.handler
    events:
      - http:
          method: delete
          path: images/{imageId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  ElasticSearchSync:
    environment:
      ES_ENDPOINT: !GetAtt LogSearch.DomainEndpoint
    handler: src/lambda/cloudWatch/elasticSearchSync.handler
    tracing: PassThrough
    events:
      - cloudwatchLog:
          logGroup: "/aws/lambda/cloud-capstone-app-${self:provider.stage}-GetImages"
      - cloudwatchLog:
          logGroup: "/aws/lambda/cloud-capstone-app-${self:provider.stage}-Auth"
      - cloudwatchLog:
          logGroup: "/aws/lambda/cloud-capstone-app-${self:provider.stage}-CreateImage"
      - cloudwatchLog:
          logGroup: "/aws/lambda/cloud-capstone-app-${self:provider.stage}-CreateComment"
      - cloudwatchLog:
        logGroup: "/aws/lambda/cloud-capstone-app-${self:provider.stage}-DeleteImage"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - es:*
        Resource: arn:aws:es::${self:provider.region}:*:domain/log-search-${self:provider.stage}

resources:
  Resources:
    ImagesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: imageId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGE_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    CommentsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: imageId
            AttributeType: S
          - AttributeName: commentId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: commentId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
            KeySchema:
              - AttributeName: imageId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: "request-body-validator"
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
        Bucket: !Ref ImagesBucket

    LogSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: "6.3"
        DomainName: log-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: "1"
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: "gp2"
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: "es:*"
              Resource: "*"
