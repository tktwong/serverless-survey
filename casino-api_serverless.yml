# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: casino-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore3.1
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:us-east-1:*:*'


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1
package:
  individually: true
  artifact: bin/Release/netcoreapp3.1/hello.zip
functions:
  hello:
    handler: CsharpHandlers::CasinoApi.Handler::Hello
    events:
      - http:
          path: /test
          method: GET
          cors:
            origin: '*'
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:295391181070:userpool/us-east-1_kfIgjGclx
  getCompanies:
    handler: CsharpHandlers::CasinoApi.Handler::GetCompanies
    events: 
      - http:
          path: /getcompanies
          method: GET
          cors:
            origin: '*'
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:295391181070:userpool/us-east-1_kfIgjGclx
  getCompaniesByEmployee:
    handler: CsharpHandlers::CasinoApi.Handler::GetCompaniesByEmployee
    events: 
      - http:
          path: /getCompaniesByEmployee
          method: GET
          cors:
            origin: '*'
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:295391181070:userpool/us-east-1_kfIgjGclx
            # headers:
            #   - Content-Type
            #   - X-Amz-Date
            #   - X-Api-Key
            #   - X-Amz-Security-Token
            #   - X-Amz-User-Agent

            # cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'
# resources:
#   Resources:
#     # This response is needed for custom authorizer ¯\_(ツ)_/¯
#     GatewayResponse:
#       Type: 'AWS::ApiGateway::GatewayResponse'
#       Properties:
#         ResponseParameters:
#           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#         ResponseType: EXPIRED_TOKEN
#     AuthFailureGatewayResponse:
#       Type: 'AWS::ApiGateway::GatewayResponse'
#       Properties:
#         ResponseParameters:
#           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#         ResponseType: UNAUTHORIZED
#         RestApiId:
#           Ref: 'ApiGatewayRestApi'
#         StatusCode: '401'
    # you can add packaging information here

    #  exclude:
    #    - exclude-me.js
    #    - exclude-me-dir/**
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
# resources:
#   Resources:
#     ItemsDynamoDbTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: CompanyId
#             AttributeType: S
#           - AttributeName: EntryDate
#             AttributeType: S
#         KeySchema:
#           - AttributeName: CompanyId
#             KeyType: HASH
#           - AttributeName: EntryDate
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: Company.Values
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
