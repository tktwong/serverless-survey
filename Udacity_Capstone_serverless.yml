service:
  name: sls-exercise-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    EXERCISES_TABLE: Exercise-${self:provider.stage}
    INDEX_NAME: indexname
    S3_BUCKET: exercise-attachment-welldone-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  custom:
    serverless-offline:
      port: 3003

    dynamodb:
      start:
        port: 8000
        inMemory: true
        migrate: true
      stages:
        - dev

    serverless-iam-roles-per-function:
      defaultInherit: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetExercise:
    handler: src/lambda/http/getExercise.handler
    events:
      - http:
          method: get
          path: exercises
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXERCISES_TABLE}

  # TODO: Configure this function
  CreateExercise:
    handler: src/lambda/http/createExercise.handler
    events:
      - http:
          method: post
          path: exercises
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/create-exercise-model.json)} # relative to where the serverless.yaml is
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXERCISES_TABLE}

  # TODO: Configure this function
  UpdateExercise:
    handler: src/lambda/http/updateExercise.handler
    events:
      - http:
          method: patch
          path: exercises/{exerciseId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/update-exercise-model.json)} # relative to where the serverless.yaml is
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXERCISES_TABLE}

  # TODO: Configure this function
  DeleteExercise:
    handler: src/lambda/http/deleteExercise.handler
    events:
      - http:
          method: delete
          path: exercises/{exerciseId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXERCISES_TABLE}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: exercises/{exerciseId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXERCISES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXERCISES_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*  



resources:
  Resources:
    # TODO: Add any necessary AWS resources
    ExercisesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: exerciseId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: exerciseId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EXERCISES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: serverless
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket