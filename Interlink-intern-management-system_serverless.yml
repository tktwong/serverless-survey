service: student

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: false
      migrate: false
      sharedDb: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs4.3
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: signup/create.create
    events:
      - http:
          path: signup
          method: post
          cors: true

  createapst:
    handler: approvestu/create.create
    events:
      - http:
          path: approvestu
          method: post
          cors: true

  create2:
    handler: skills/create.create
    events:
      - http:
          path: skills
          method: post
          cors: true

  create3:
    handler: techskills/create.create
    events:
      - http:
          path: techskills
          method: post
          cors: true

  create4:
    handler: notice/create.create
    events:
      - http:
          path: notice
          method: post
          cors: true

  create5:
    handler: sup/create.create
    events:
      - http:
          path: sup
          method: post
          cors: true

  create6:
    handler: userroles/create.create
    events:
      - http:
          path: roles
          method: post
          cors: true

  create7:
    handler: files/create.create
    events:
      - http:
          path: files
          method: post
          cors: true
  
  create8:
    handler: pendingtech/create.create
    events:
      - http:
          path: pending
          method: post
          cors: true

  create9:
    handler: approvedtech/create.create
    events:
      - http:
          path: approve
          method: post
          cors: true

  create10:
    handler: recommendation/create.create
    events:
      - http:
          path: recommendation
          method: post
          cors: true

  create11:
    handler: todo/create.create
    events:
      - http:
          path: todo
          method: post
          cors: true


  create12:
    handler: answer/create.create
    events:
      - http:
          path: answer
          method: post
          cors: true

  
  create13:
    handler: question/create.create
    events:
      - http:
          path: question
          method: post
          cors: true

  list:
    handler: signup/list.list
    events:
      - http:
          path: signup
          method: get
          cors: true
  
  listapstu:
    handler: approvestu/list.list
    events:
      - http:
          path: approvestu
          method: get
          cors: true

  listskills:
    handler: skills/list.list
    events:
      - http:
          path: skills
          method: get
          cors: true
        
  listsup:
    handler: sup/list.list
    events:
      - http:
          path: sup
          method: get
          cors: true
  
  listroles:
    handler: userroles/list.list
    events:
      - http:
          path: roles
          method: get
          cors: true

  listtechskills:
    handler: techskills/list.list
    events:
      - http:
          path: techskills
          method: get
          cors: true

  listnotice:
    handler: notice/list.list
    events:
      - http:
          path: notice
          method: get
          cors: true

  listfiles:
    handler: files/list.list
    events:
      - http:
          path: files
          method: get
          cors: true
  
  listpending:
    handler: pendingtech/list.list
    events:
      - http:
          path: pending
          method: get
          cors: true
  
  listapproved:
    handler: approvedtech/list.list
    events:
      - http:
          path: approve
          method: get
          cors: true

  listapprovedappo:
    handler: approvedappo/list.list
    events:
      - http:
          path: approveappo
          method: get
          cors: true

  listpendingappo:
    handler: pendingappo/list.list
    events:
      - http:
          path: pendingappo
          method: get
          cors: true

  listprojects:
    handler: projects/list.list
    events:
      - http:
          path: projects
          method: get
          cors: true

  listrecommendation:
    handler: recommendation/list.list
    events:
      - http:
          path: recommendation
          method: get
          cors: true

  listtodo:
    handler: todo/list.list
    events:
      - http:
          path: todo
          method: get
          cors: true 

  listAnswer:
    handler: answer/list.list
    events:
      - http:
          path: answer
          method: get
          cors: true

  listquestion:
    handler: question/list.list
    events:
      - http:
          path: question
          method: get
          cors: true          

  get:
    handler: signup/get.get
    events:
      - http:
          path: signup/{id}
          method: get
          cors: true
  
  getapstu:
    handler: approvestu/get.get
    events:
      - http:
          path: approvestu/{id}
          method: get
          cors: true

  getskills:
    handler: skills/get.get
    events:
      - http:
          path: skills/{studentid}
          method: get
          cors: true

  gettechskills:
    handler: techskills/get.get
    events:
      - http:
          path: techskills/{studentid}
          method: get
          cors: true

  getnotice:
    handler: notice/get.get
    events:
      - http:
          path: notice/{id}
          method: get
          cors: true

  getsup:
    handler: sup/get.get
    events:
      - http:
          path: sup/{id}
          method: get
          cors: true
  
    
  getroles:
    handler: userroles/get.get
    events:
      - http:
          path: roles/{type}
          method: get
          cors: true

  gettech:
    handler: pendingtech/get.get
    events:
      - http:
          path: pending/{id}
          method: get
          cors: true



  getrecommendation:
    handler: recommendation/get.get
    events:
      - http:
          path: recommendation/{id}
          method: get
          cors: true

  gettodo:
    handler: todo/get.get
    events:
      - http:
          path: todo/{id}
          method: get
          cors: true
  
  update:
    handler: signup/update.update
    events:
      - http:
          path: signup/{id}
          method: put
          cors: true

  updateapstu:
    handler: approvestu/update.update
    events:
      - http:
          path: approvestu/{id}
          method: put
          cors: true

  updateskills:
    handler: skills/update.update
    events:
      - http:
          path: skills/{id}
          method: put
          cors: true

  updatetechskills:
    handler: techskills/update.update
    events:
      - http:
          path: techskills/{id}
          method: put
          cors: true

  updatenotice:
    handler: notice/update.update
    events:
      - http:
          path: notice/{id}
          method: put
          cors: true

  updatesup:
    handler: sup/update.update
    events:
      - http:
          path: sup/{id}
          method: put
          cors: true

  updaterecommendation:
    handler: recommendation/update.update
    events:
      - http:
          path: recommendation/{id}
          method: put
          cors: true

  updatetodo:
    handler: todo/update.update
    events:
      - http:
          path: todo/{id}
          method: put
          cors: true

  updatepw:
    handler: password/update.update
    events:
      - http:
          path: pw/{id}
          method: put
          cors: true
  
  delete:
    handler: signup/delete.delete
    events:
      - http:
          path: signup/{id}
          method: delete
          cors: true

  deleteappstu:
    handler: approvestu/delete.delete
    events:
      - http:
          path: approvestu/{id}
          method: delete
          cors: true

  deleteskills:
    handler: skills/delete.delete
    events:
      - http:
          path: skills/{id}
          method: delete
          cors: true

  deletetechskills:
    handler: techskills/delete.delete
    events:
      - http:
          path: techskills/{id}
          method: delete
          cors: true

  deletenotice:
    handler: notice/delete.delete
    events:
      - http:
          path: notice/{id}
          method: delete
          cors: true

  deletesup:
    handler: sup/delete.delete
    events:
      - http:
          path: sup/{id}
          method: delete
          cors: true

  deletepending:
    handler: pendingtech/delete.delete
    events:
      - http:
          path: pending/{id}
          method: delete
          cors: true

  deleteaprroved:
    handler: approved/delete.delete
    events:
      - http:
          path: approve/{id}
          method: delete
          cors: true

  deletependingappo:
    handler: pendingtech/delete.delete
    events:
      - http:
          path: pendingappo/{id}
          method: delete
          cors: true

  deleteaprrovedappo:
    handler: approved/delete.delete
    events:
      - http:
          path: approveappo/{id}
          method: delete
          cors: true

  deleterecommendation:
    handler: recommendation/delete.delete
    events:
      - http:
          path: recommendation/{id}
          method: delete
          cors: true

  deletertodo:
    handler: todo/delete.delete
    events:
      - http:
          path: todo/{id}
          method: delete
          cors: true


resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    TodosDynamoDbTable2:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "skills"  

    TodosDynamoDbTable3:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "techskills" 

    TodosDynamoDbTable4:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "notice" 


    TodosDynamoDbTable5:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "supervisor"

    TodosDynamoDbTable6:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "userroles"

    TodosDynamoDbTable7:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "pendingtech"

    TodosDynamoDbTable9:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "approvedtech"

    TodosDynamoDbTable10:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "approvedappo"
    
    TodosDynamoDbTable11:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "pendingappo"
  
    TodosDynamoDbTable12:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "projects"

    TodosDynamoDbTable13:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "recommendation"

    TodosDynamoDbTable14:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "todo"

    TodosDynamoDbTable15:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "question"

    TodosDynamoDbTable16:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "answer"
    
    TodosDynamoDbTable17:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "approvestudent"