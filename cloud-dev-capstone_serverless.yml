service:
  name: udacity-clouddeveloper-satya-capstone

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk

  documentation:
    api:
      info:
        version: v1.0.0
        title: Excercise API
        description: serverless api for Excercise application
    models:
      - name: CreateExcercise
        contentType: application/json
        schema: ${file(validators/create-excercise-request.json)}
      - name: UpdateExcercise
        contentType: application/json
        schema: ${file(validators/update-excercise-request.json)}
        

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    EXCERCISE_TABLE: excercise3-capstone-${self:provider.stage}
    EXCERCISE_BUCKET: excercise2-capstone-${self:provider.stage}
    USER_ID_INDEX: userId
  tracing:
    lambda: true
    apiGateway: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatementsName: Auth-User
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"

  ImageUploaded:
    handler: src/lambda/s3/s3ImageUploaded.handler
    events:
      - s3:
          bucket: ${self:provider.environment.EXCERCISE_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
    iamRoleStatementsName: Image-Uploaded
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXCERCISE_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
  
  GetExcercises:
    handler: src/lambda/http/getExcercises.handler
    iamRoleStatementsName: Get-Excercises
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXCERCISE_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.EXCERCISE_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXCERCISE_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
    events:
      - http:
          method: get
          path: excercises
          authorizer: Auth
          cors: true
    
  DeleteExcercise:
    handler: src/lambda/http/deleteExcercise.handler
    events:
      - http:
          method: delete
          path: excercises/{excerciseId}
          authorizer: Auth
          cors: true
    iamRoleStatementsName: Delete-Excercise
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXCERCISE_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"

  CreateExcercise:
    handler: src/lambda/http/createExcercise.handler
    events:
      - http:
          method: post
          path: excercises
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: create new Excercise 
            description: create new Excercise
            requestModels:
              'application/json': CreateExcercise
    iamRoleStatementsName: Create-Excercise
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXCERCISE_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
          - events:PutRule
        Resource: "*"

  UpdateExcercise:
    handler: src/lambda/http/updateExcercise.handler
    events:
      - http:
          method: patch
          path: excercises/{excerciseId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update a Excercise 
            description: update a Excercise
            requestModels:
              'application/json': UpdateExcercise
    iamRoleStatementsName: Update-Excercise
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXCERCISE_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: excercises/{excerciseId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatementsName: Generate-Upload-Url-For-Excercise
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXCERCISE_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.EXCERCISE_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
        
resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'" 
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    ExcerciseDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: excerciseId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: excerciseId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EXCERCISE_TABLE}
    ExcerciseBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.EXCERCISE_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - POST
                - PUT
              AllowedOrigins:
                - "*"
