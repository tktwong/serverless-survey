custom: 
  service: ${file(env.yml):service}
  awsProfile: ${file(env.yml):awsProfile}
  awsTagName: ${file(env.yml):awsTagName}
  serverless-offline:
    port: 8000
  customDomain: 
    domainName: ${file(env.yml):customDomain.${opt:stage, 'dev'}.domainName}
    certificateName: ${file(env.yml):customDomain.${opt:stage, 'dev'}.certificateName}
    basePath: ${file(env.yml):customDomain.${opt:stage, 'dev'}.basePath}
    stage: ${opt:stage, 'dev'}
    createRoute53Record: ${file(env.yml):customDomain.${opt:stage, 'dev'}.createRoute53Record}

service: ${self:custom.service}

frameworkVersion: ">=1.23.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  region: ap-southeast-1
  memorySize: 128
  profile: ${self:custom.awsProfile} # aws named profile
  stage: ${opt:stage, 'dev'} # `sls deploy --stage prod` if --stage is provided, else use dev
  stackTags: # Optional CF stack tags
    Name: ${self:custom.awsTagName}
    Stage: ${opt:stage, 'dev'}
  environment:
    bundleHash: ${opt:bundleHash}
    assetDomainName: ${file(env.yml):assetDomainName}

functions:
  renderHome:
    handler: handler.render
    tags:
      Name: ${self:custom.awsTagName}
      Stage: ${opt:stage, 'dev'}
    events:
      - http:
          path: '/'
          method: get
          cors: true
  renderHtml:
    handler: handler.render
    tags:
      Name: ${self:custom.awsTagName}
      Stage: ${opt:stage, 'dev'}
    events:
      - http:
          path: '{proxy+}'
          method: get
          cors: true

plugins:
  - serverless-offline
  - serverless-domain-manager