# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bob

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem" 
        - "dynamodb:GetItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:GetRecords"
        - "dynamodb:GetShardIterator"
        - "dynamodb:DescribeStream"
        - "dynamodb:ListStreams"
      Resource: "arn:aws:dynamodb:*:*:table/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:Query"
      Resource: "arn:aws:dynamodb:*:*:table/*/index/*"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  requestHandler:
    handler: lexCodeHook.requestHandler


  samlSaveHandler: 
    handler: samlConfirmation.samlSaveHandler
    events: 
      - http: 
          path: auth/{code}/{token}
          method: POST
          request:
            parameters:
              paths:
                code: true
                token: true

  confirmedUserHandler:
    handler: confirmedUser.confirmedUserHandler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - authRequestTable
              - StreamArn
          batchSize: 1
    environment:
      TWILIO_ACCOUNT_SID: ${ssm:TWILIO_ACCOUNT_SID}
      TWILIO_API_KEY: ${ssm:TWILIO_API_KEY}
      TWILIO_API_SECRET: ${ssm:TWILIO_API_SECRET}
      TWILIO_PHONE_NUMBER: ${ssm:TWILIO_PHONE_NUMBER}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:  # CloudFormation template syntax
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: phone
            AttributeType: S
        KeySchema:
          - AttributeName: phone
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    authRequestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: authRequest
        AttributeDefinitions:
          - AttributeName: code
            AttributeType: N
        KeySchema:
          - AttributeName: code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    eventTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: event
        AttributeDefinitions:
          - AttributeName: transId
            AttributeType: S
        KeySchema:
          - AttributeName: transId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
