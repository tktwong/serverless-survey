service: github-app-example

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  region: us-east-1
  memorySize: 128
  timeout: 15
  deploymentBucket: sls-depl-${self:provider.region}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: { "Fn::Join" : [ ":", [ "arn:aws:dynamodb:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.userTable}" ] ] }

  environment:
    CLIENT_ID: ${self:custom.clientId}
    CLIENT_SECRET: ${self:custom.clientSecret}
    JWT_SECRET: ${self:custom.jwtSecret}
    USER_TABLE: ${self:custom.userTable}
    WEBHOOK_SECRET: ${self:custom.webhookSecret}

functions:
  authenticate:
    handler: index.authenticate
    events:
      - http:
          path: oauth/authenticate
          cors: true
          method: get

  logout:
    handler: index.logout
    events:
      - http:
          path: logout
          cors: true
          method: get
          authorizer: authorizer

  authorizer:
    handler: auth.authorizer

  webhook:
    handler: index.webhook
    events:
      - http:
          path: webhook
          cors: true
          method: post

custom:
  defaultStage: dev
  profiles:
    dev: development
    prod: production
  common: ${file(../config/common.json)}
  conf: ${file(../config/config-${self:provider.stage}.json)}
  clientId: ${self:custom.conf.clientId}
  clientSecret: ${self:custom.conf.clientSecret}
  jwtSecret: ${self:custom.conf.jwtSecret}
  userTable: ${self:custom.common.userTable}
  webhookSecret: ${self:custom.conf.webhookSecret}
