service:
  name: basic-chat-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    CHANNEL_TABLE: channel-table
    ENTRY_TABLE: entry-table
    ENTRY_INDEX: entry-index
  tracing:
    lambda: true
    apiGateway: true

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  CreateChannel:
    handler: src/lambda/http/createChannel.handler
    events:
      - http:
          method: post
          path: createChannel
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/ChannelRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHANNEL_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource: '*'
  GetChannel:
    handler: src/lambda/http/getChannels.handler
    events:
      - http:
          method: get
          path: channels
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHANNEL_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource: '*'
  CreateEntry:
    handler: src/lambda/http/createEntry.handler
    events:
      - http:
          method: post
          path: createEntry
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/EntryRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource: '*'
  GetEntries:
    handler: src/lambda/http/getEntries.handler
    events:
      - http:
          method: get
          path: chats/{channelId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}/index/${self:provider.environment.ENTRY_INDEX}
      - Effect: Allow
        Action:
          - xray:*
        Resource: '*'
  UpdateEntry:
    handler: src/lambda/http/updateEntry.handler
    events:
      - http:
          method: patch
          path: update/{channelId}/entry/{entryId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/EntryUpdateRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource: '*'
  DeleteEntry:
    handler: src/lambda/http/deleteEntry.handler
    events:
      - http:
          method: delete
          path: delete/{channelId}/entry/{entryId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ENTRY_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource: '*'

resources:
  Resources:
    ChannelTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: channelId
            AttributeType: S
        KeySchema:
          - AttributeName: channelId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CHANNEL_TABLE}
    EntryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: channelId
            AttributeType: S
          - AttributeName: entryId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: channelId
            KeyType: HASH
          - AttributeName: entryId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ENTRY_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ENTRY_INDEX}
            KeySchema:
              - AttributeName: channelId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index