service: music-service

provider:
  name: aws
  tracing: true
  runtime: nodejs6.10
  timeout: 30
  deploymentBucket: music-repository-serverless-deploy
  region: eu-west-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource: '*'
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::music-repository-files
        - arn:aws:s3:::music-repository-files/*
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - Fn::Join:
            - '/'
            - - Fn::Join:
                - ':'
                - - arn:aws:dynamodb
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - table
              - Ref: MusicTable
        - Fn::Join:
            - '/'
            - - Fn::Join:
                - ':'
                - - arn:aws:dynamodb
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - table
              - Ref: GroupTable
custom:
  properties:
    authorizer:
      name: authorizer
      arn: arn:aws:cognito-idp:eu-west-1:432337707074:userpool/eu-west-1_RYCwKGXfY

plugins:
  - serverless-plugin-tracing

functions:
  music:
    handler: handler.musicHandler
    environment:
      TABLE_NAME:
        Ref: MusicTable
      GROUP_TABLE_NAME:
        Ref: GroupTable
    events:
      - http:
          path: music
          method: get
          cors: true
          authorizer: ${self:custom.properties.authorizer}
      - http:
          path: music
          method: post
          cors: true
          authorizer: ${self:custom.properties.authorizer}
      - http:
          path: music/{uid}/thumbnail
          method: get
          cors: true
          authorizer: ${self:custom.properties.authorizer}
      - http:
          path: music/{uid}/pdf
          method: get
          cors: true
          authorizer: ${self:custom.properties.authorizer}
      - http:
          path: groups
          method: get
          cors: true
          authorizer: ${self:custom.properties.authorizer}
      - http:
          path: groups
          method: post
          cors: true
          authorizer: ${self:custom.properties.authorizer}
      - http:
          path: groups/{gid}/invitation
          method: post
          cors: true
          authorizer: ${self:custom.properties.authorizer}
      - http:
          path: groups/{gid}/music
          method: post
          cors: true
          authorizer: ${self:custom.properties.authorizer}

resources:
  Resources:

    MusicTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: oid
            AttributeType: S
          - AttributeName: uid
            AttributeType: S
        KeySchema:
          - AttributeName: oid
            KeyType: HASH
          - AttributeName: uid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    GroupTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
          - AttributeName: gid
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
          - AttributeName: gid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5