
service: serverless-cart-api

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  environment:
    PRODUCTS_TABLE: ${self:service}-products-${self:provider.stage}
    CARTS_TABLE: ${self:service}-carts-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CARTS_TABLE}"

plugins:
  - serverless-offline

custom:
  version: v1

functions:
  echo:
    handler: src/echo/handler.handler
    events:
      - http:
          path: ${self:custom.version}/echo
          method: get
  getProducts:
    handler: src/getProducts/handler.handler
    events:
      - http:
          path: ${self:custom.version}/products
          method: get
  getCart:
    handler: src/getCart/handler.handler
    events:
      - http:
          path: ${self:custom.version}/carts/{cartId}
          method: get
  createCart:
    handler: src/createCart/handler.handler
    events:
      - http:
          path: ${self:custom.version}/carts
          method: post
  addProductToCart:
    handler: src/addProductToCart/handler.handler
    events:
      - http:
          path: ${self:custom.version}/carts/{cartId}/products/{productId}
          method: put

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
