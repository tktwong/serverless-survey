service: videolyzer-test

provider:
    name: aws
    runtime: python3.6
    profile: ${file(../config.${self:provider.stage}.json):videolyzer.profile}
    iamRoleStatements:
        - Effect: "Allow"
          Action:
              - "rekognition:*"
          Resource: "*"

        - Effect: "Allow"
          Action:
              - "s3:GetObject"
          Resource:
              - Fn::Join:
                  - ''
                  - - ${self:custom.videosBucketArn}
                    - '/*'

        # Lambda function can pass the role to specified role.
        - Effect: "Allow"
          Action:
              - iam:GetRole
              - iam:PassRole
          Resource:
              # GetAtt function returns the value of an attribute from a resource in the template
              Fn::GetAtt:
                  - RekognitionSNSPublishRole
                  - Arn

        - Effect: "Allow"
          Action:
              - "dynamodb:PutItem"
          Resource:
              Fn::GetAtt:
                  - VideosTable
                  - Arn

    environment:
        REKOGNITION_SNS_TOPIC_ARN: ${self:custom.rekognitionSNSTopicArn}
        DYNAMODB_TABLE_NAME: ${self:custom.videosTableName}
        REKOGNITION_ROLE_ARN:
            Fn::GetAtt:
                - RekognitionSNSPublishRole
                - Arn

custom:
    videosTableName: ${file(../config.${self:provider.stage}.json):videolyzer.videos_table}
    rekognitionSNSTopicArn:
        Fn::Join:
            - ':'
            - - arn
              - aws
              - sns
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - handleLabelDetectionTopic

    videosBucketArn:
        Fn::Join:
            - ':'
            - - arn
              - aws
              - s3
              - ''
              - ''
              - ${file(../config.${self:provider.stage}.json):videolyzer.videos_bucket}

functions:
    startProcessingVideo:
        handler: handler.start_processing_video
        events:
            - s3:
                bucket: ${file(../config.${self:provider.stage}.json):videolyzer.videos_bucket}
                event: s3:ObjectCreated:*
                rules:
                    - suffix: .mp4

    handleLabelDetection:
        handler: handler.handle_label_detection
        events:
            - sns: handleLabelDetectionTopic

# Create new aws resources using cloudformation.
resources:
    Resources:

        # Create a DynamoDB table.
        VideosTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    -
                      AttributeName: videoName
                      AttributeType: S
                KeySchema:
                    -
                      AttributeName: videoName
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                TableName: ${self:custom.videosTableName}

        # Create a new assumable role for Rekognition, this role is passed by Lambda function.
        RekognitionSNSPublishRole:
            Type: AWS::IAM::Role
            Properties:
                AssumeRolePolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                        - Effect: Allow
                          Principal:
                              Service:
                                  - rekognition.amazonaws.com
                          Action:
                              - sts:AssumeRole
                Policies:
                    - PolicyName: RekognitionSNSPublishPolicy
                      PolicyDocument:
                          Version: '2012-10-17'
                          Statement:
                              - Effect: Allow
                                Action:
                                    - sns:Publish
                                Resource: ${self:custom.rekognitionSNSTopicArn}
