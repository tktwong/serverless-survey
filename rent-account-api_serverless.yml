service: rent-account-api
provider:
  name: aws
  runtime: dotnetcore3.1
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
  apiKeys:
    - secureAccess:
      - api-key-${self:service}-${self:provider.stage}
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100
  environment:
    AUDIT_TABLE_NAME: MyRentAccountAdminAudit-${self:provider.stage}

package:
# TODO: Rename zipfile in build.sh and build.cmd to match this
  artifact: ./bin/release/netcoreapp3.1/rent-account-api.zip

functions:
  rentAccountApi:
    name: ${self:service}-${self:provider.stage}
    handler: RentAccountApi::RentAccountApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
      AUDIT_TABLE_NAME: ${self:provider.environment.AUDIT_TABLE_NAME}
      CRM_API_ENDPOINT: ${ssm:/rent-account-api/${self:provider.stage}/crm-api-endpoint}
      CRM_TOKEN_ENDPOINT: ${ssm:/rent-account-api/${self:provider.stage}/crm-token-endpoint}
      CRM_TOKEN_KEY: ${ssm:/rent-account-api/${self:provider.stage}/crm-token-key}
      CRM_TOKEN_API: ${ssm:/rent-account-api/${self:provider.stage}/crm-token-api}
      CRM_TOKEN_API_KEY: ${ssm:/rent-account-api/${self:provider.stage}/crm-token-api-key}
      RENT_ACCOUNT_BREAKDOWN_API_ENDPOINT: ${ssm:/rent-account-api/${self:provider.stage}/rent-account-breakdown-api-endpoint}
      RENT_ACCOUNT_BREAKDOWN_API_KEY: ${ssm:/rent-account-api/${self:provider.stage}/rent-account-breakdown-api-key}
      TRANSACTIONS_API_ENDPOINT: ${ssm:/rent-account-api/${self:provider.stage}/transactions-api-endpoint}
      TRANSACTIONS_API_KEY: ${ssm:/rent-account-api/${self:provider.stage}/transactions-api-key}
      ENV: ${self:provider.stage}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: true
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: dynamoAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                  Resource:
                    - "Fn::GetAtt": [ MRAAuditTable, Arn ]
    MRAAuditTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.AUDIT_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: User
            AttributeType: S
          - AttributeName: TimeStamp
            AttributeType: S
        KeySchema:
          - AttributeName: User
            KeyType: HASH
          - AttributeName: TimeStamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  vpc:
    development:
      securityGroupIds:
        - sg-07aa5b4bfe5431d73
      subnetIds:
        - subnet-000b89c249f12a8ad
    staging:
      securityGroupIds:
        - sg-00be85a006bff97e8
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      securityGroupIds:
        - sg-038eb450496ec5548
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
