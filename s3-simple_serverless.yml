

service: s3-simple 

custom: 
    settings:
      DYNAMODB: authors_table
      STREAMNAME: my_first_stream
package:
  exclude:
    - node_modules/**
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  memorySize: 128
  environment: ${self:custom.settings}
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action: s3:*
      Resource: "*"
    - Effect: "Allow"
      Action: kinesis:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:ListStreams"
        - "dynamodb:Query"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.DYNAMODB}"
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello/{name}
          method: get
  produce:
    handler: handler.produce
    events:
      - schedule: rate(1 minute)
  reads3:
    handler: handler.reads3
    events:
      - http:
          path: reads3
          method: get
  getauthors:
    handler: handler.getauthors
    events:
      - http:
          path: getauthors/{email}
          method: get
  createauthors:
    handler: handler.createauthors
    events:
      - http:
          path: createauthors
          method: post
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
  NewBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: shouldnotbe
  NewKinesis:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: ${self:custom.settings.STREAMNAME}
      ShardCount: 1
  # Resources:
  NewTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.settings.DYNAMODB}
      AttributeDefinitions:
        - AttributeName: email_address
          AttributeType: "S"
      KeySchema:
        - AttributeName: email_address
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
