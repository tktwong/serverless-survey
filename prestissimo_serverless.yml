service: prestissimo

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'local'}
  deploymentBucket:
    name: shared-private-bucket.alexjpaz.com
  environment:
    GIT_SHA: ${env.CIRCLE_SHA1, 'UNKNOWN'}
    NODE_ENV: ${env:NODE_ENV, 'development'}
    NODE_APP_INSTANCE: ${env:NODE_APP_INSTANCE}
    awsBucket: "${self:custom.bucketName}"

  s3:
    stagingBucket:
      name: "${self:custom.bucketName}"
      corsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - POST
            AllowedOrigins:
              - "*"

  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:*"
     Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
   - Effect: "Allow"
     Action:
       - "s3:*"
     Resource: "arn:aws:s3:::${self:custom.bucketName}"



custom:
  bucketName: ${self:service}.${self:provider.stage}

plugins:
  - serverless-offline

functions:
  httpRouter:
    handler: src/http/index.router
    events:
      - http:
          path: "/"
          method: any
      - http:
          path: "{proxy+}"
          method: any
      - http:
          path: "/api/{proxy+}"
          method: any
          authorizer: authorizer
      - http:
          path: "/restricted/{proxy+}"
          method: any
          authorizer: authorizer

  authorizer:
    handler: src/http/index.authorizer
  convert:
    handler: handler.convert
    events:
      - s3:
          bucket: stagingBucket
          event: s3:ObjectCreated:*
          rules:
            - prefix: inbox/
