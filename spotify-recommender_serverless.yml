# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: spot-rec-api

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: eu-west-1
  environment:
    TRACKS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-dynamodb
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - ssm:GetParameter
        - s3:PutObject
      Resource: "*"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  getSoundsLike:
    handler: app.get
    memorySize: 128
    description: Get sounds like suggestions for query track.
    events:
      - http:
          path: sounds-like
          method: get
          statusCodes:
            200:
              pattern: '*"statusCode":[\w]+200'
            400:
              pattern: '*"statusCode":[\w]+400'
            404:
              pattern: '*"statusCode":[\w]+404'
            500:
              pattern: '*"statusCode":[\w]+500'
  putSoundsLike:
    handler: app.put
    memorySize: 128
    description: Create or update features for track.
    events:
      - http:
          path: sounds-like
          method: put
          statusCodes:
            200:
              pattern: '*"statusCode":[\w]+200'
            202:
              pattern: '*"statusCode":[\w]+202'
            204:
              pattern: '*"statusCode":[\w]+204'
            400:
              pattern: '*"statusCode":[\w]+400'
            500:
              pattern: '*"statusCode":[\w]+500'

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
