# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: album-bot

resources:
  Resources:
    ItemStore:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stage}itemStore
        AttributeDefinitions:
          - AttributeName: sourceId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: sourceId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TalkStore:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stage}talkStore
        AttributeDefinitions:
          - AttributeName: talkId
            AttributeType: S
        KeySchema:
          - AttributeName: talkId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SessionStore:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stage}sessionStore
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    WWWBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.stage}.album-bot.ar90n.net
#    BlobBucket: #      Type: AWS::S3::Bucket
#      Properties:
#        AccessControl: PublicRead
#        BucketName: ${self:custom.stage}.storage.album-bot.ar90n.net

provider:
  name: aws
  runtime: nodejs4.3
  region: ap-northeast-1
  stage: dev
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource:
        - "arn:aws:dynamodb:ap-northeast-1:*"
        - "arn:aws:s3::*"

plugins:
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-plugin-write-env-vars
  - serverless-mocha-plugin
  - serverless-webpack
  - serverless-s3-assets
  - serverless-plugin-export-endpoints

custom:
  stage: ${opt:stage, self:provider.stage}
  dynamodb:
    start:
      port: 8000
      migration: true
    migration:
      dir: resources/migrations
  s3:
    port: 8001
    buckets:
      - ${self:custom.stage}.storage.album-bot.ar90n.net
    directory: /tmp
  writeEnvVars:
    REMOTE_STAGE: ${self:custom.stage}
    CHANNEL_ID: ${file(./.env.yml):${self:custom.stage}_CHANNEL_ID}
    CHANNEL_SECRET: ${file(./.env.yml):${self:custom.stage}_CHANNEL_SECRET}
    CHANNEL_ACCESS_TOKEN: ${file(./.env.yml):${self:custom.stage}_CHANNEL_ACCESS_TOKEN}
  webpackIncludeModules: true
  s3Assets:
    client/dist:
      bucket: ${self:custom.stage}.album-bot.ar90n.net
      cacheTime: 300
      contentType: text/html
      templates:
        cacheTime: 20

functions:
  webhook:
    handler: src/handler.webhook
    events:
      - http:
          method: POST
          path: webhook
          integration: lambda
  api:
    handler: src/handler.api
    events:
      - http:
          method: ANY
          path: api/{proxy+}
          cors: true
          integration: lambda-proxy
  resize:
    handler: src/handler.s3hookResize
    events:
      - s3:
          bucket: ${self:custom.stage}.storage.album-bot.ar90n.net
          event: s3:ObjectCreated:*
          rules:
            - prefix: photo/original/
  createItem:
    handler: src/handler.s3hookCreateImageItem
    events:
      - s3:
          bucket: ${self:custom.stage}.storage.album-bot.ar90n.net
          event: s3:ObjectCreated:*
          rules:
            - prefix: photo/preview/
  createVideoItem:
    handler: src/handler.s3hookCreateVideoItem
    events:
      - s3:
          bucket: ${self:custom.stage}.storage.album-bot.ar90n.net
          event: s3:ObjectCreated:*
          rules:
            - prefix: video/
