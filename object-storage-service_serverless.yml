service: object-storage-service

frameworkVersion: "=1.9.0"

plugins:
  - serverless-offline
  - serverless-mocha-plugin
  - serverless-secrets-plugin
  - serverless-deployment-bucket-plugin
  - serverless-dynamodb-migrations-plugin

package:
  exclude:
    - mochawesome-reports/**
    - test/**
    - tmp/**

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  region: us-east-1
  profile: ${self:custom.profiles.${self:provider.stage}}
  deploymentBucket: ${self:service}-${self:provider.stage}-deployment-${self:provider.environment.ACCOUNT_ID}
  environment: ${file(config/env.yml)}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
        - "lambda:InvokeFunction"
        - "dynamodb:*"
        - "sqs:*"
        - "logs:*"
      Resource: "*"
  apiKeys:
    - ${self:service}-${self:provider.stage}-smart-wifi
  vpc:
    securityGroupIds:
      - ${self:provider.environment.SECURITY_GROUP_ID}
    subnetIds:
      - ${self:provider.environment.SUBNET_ID_1}
      - ${self:provider.environment.SUBNET_ID_2}
      - ${self:provider.environment.SUBNET_ID_3}


custom:
  defaultStage: alpha # 預設 -s 沒輸入時是 alpha
  profiles:
    test: pcloud_alpha
    alpha: pcloud_alpha
    beta: pcloud_beta_and_prod
    prod: pcloud_beta_and_prod
  httpGetRequestTemplate: >
    #set($allParams = $input.params())
    {
      "resource_path": "$context.resourcePath",
      "method": "$context.httpMethod",
      "request_id": "$context.requestId",
      "source_ip": "$context.identity.sourceIp",
      "path": {
        #set($params = $allParams.get("path"))
        #foreach($paramName in $params.keySet())
          "$paramName":"$util.escapeJavaScript($params.get($paramName))"
          #if($foreach.hasNext),#end
        #end
      },
      "headers": {
        #set($params = $allParams.get("header"))
        #foreach($paramName in $params.keySet())
          "$paramName":"$util.escapeJavaScript($params.get($paramName))"
          #if($foreach.hasNext),#end
        #end
      },
      "query": {
        #set($params = $allParams.get("querystring"))
        #foreach($paramName in $params.keySet())
          "$paramName" :"$util.escapeJavaScript($params.get($paramName))"
          #if($foreach.hasNext),#end
        #end
      }
    }

  httpPostRequestTemplate: >
    #define( $body )
      {
      #foreach( $token in $input.path('$').split('&') )
        #set( $keyVal = $token.split('=') )
        #set( $keyValSize = $keyVal.size() )
          #if( $keyValSize >= 1 )
            #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )
          #if( $keyValSize >= 2 )
            #set( $val = $util.escapeJavaScript($util.urlDecode($keyVal[1])) )
          #else
            #set( $val = '' )
          #end
          "$key": "$val"#if($foreach.hasNext),#end
        #end
      #end
      }
    #end
    #set($allParams = $input.params())
    {
      "resource_path": "$context.resourcePath",
      "method": "$context.httpMethod",
      "request_id": "$context.requestId",
      "source_ip": "$context.identity.sourceIp",
      "path": {
        #set($params = $allParams.get("path"))
        #foreach($paramName in $params.keySet())
          "$paramName":"$util.escapeJavaScript($params.get($paramName))"
          #if($foreach.hasNext),#end
        #end
      },
      "headers": {
        #set($params = $allParams.get("header"))
        #foreach($paramName in $params.keySet())
          "$paramName":"$util.escapeJavaScript($params.get($paramName))"
          #if($foreach.hasNext),#end
        #end
      },
      "body": $body
    }

  httpResponseTemplate: >
    #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
    {
      "code" : "$errorMessageObj.code",
      "message" : "$errorMessageObj.message"
    }

  httpServerErrorResponseTemplate: >
    {}

# API endpints:

functions:

  createDomain:
    handler: endpoints/v1/domains/create/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/domains
          method: post
          integration: lambda
          private: true
          request:
            template:
              application/json: ${self:custom.httpPostRequestTemplate}
              application/x-www-form-urlencoded: ${self:custom.httpPostRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpServerErrorResponseTemplate}

  updateDomain:
    handler: endpoints/v1/domains/update/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/domains/{domain}
          method: put
          integration: lambda
          private: true
          request:
            parameters:
              paths:
                domain: true
            template:
              application/json: ${self:custom.httpPostRequestTemplate}
              application/x-www-form-urlencoded: ${self:custom.httpPostRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpServerErrorResponseTemplate}

  getDomain:
    handler: endpoints/v1/domains/show/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/domains/{domain}
          method: get
          integration: lambda
          private: true
          request:
            parameters:
              paths:
                domain: true
            template:
              application/json: ${self:custom.httpGetRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}

  listDomains:
    handler: endpoints/v1/domains/index/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/domains
          method: get
          integration: lambda
          private: true
          request:
            template:
              application/json: ${self:custom.httpGetRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}

  deleteDomain:
    handler: endpoints/v1/domains/delete/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/domains/{domain}
          method: delete
          integration: lambda
          private: true
          request:
            parameters:
              paths:
                domain: true
            template:
              application/json: ${self:custom.httpGetRequestTemplate}
              application/x-www-form-urlencoded: ${self:custom.httpGetRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}

  createObject:
    handler: endpoints/v1/objects/create/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/objects
          method: post
          integration: lambda
          private: true
          request:
            template:
              application/json: ${self:custom.httpPostRequestTemplate}
              application/x-www-form-urlencoded: ${self:custom.httpPostRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpServerErrorResponseTemplate}

  updateObject:
    handler: endpoints/v1/objects/update/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/objects/{domain}/{key}
          method: put
          integration: lambda
          private: true
          request:
            parameters:
              paths:
                domain: true
                key: true
            template:
              application/json: ${self:custom.httpPostRequestTemplate}
              application/x-www-form-urlencoded: ${self:custom.httpPostRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpServerErrorResponseTemplate}

  getObject:
    handler: endpoints/v1/objects/show/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/objects/{domain}/{key}
          method: get
          integration: lambda
          private: true
          request:
            parameters:
              paths:
                domain: true
                key: true
            template:
              application/json: ${self:custom.httpGetRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                302:
                    pattern: '^http.*'
                    template:
                      application/json: $input.path("$.errorMessage")
                    headers:
                      Location: integration.response.body.errorMessage
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}

  listObjects:
    handler: endpoints/v1/objects/index/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/objects/{domain}
          method: get
          integration: lambda
          private: true
          request:
            parameters:
              paths:
                domain: true
            template:
              application/json: ${self:custom.httpGetRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}

  deleteObject:
    handler: endpoints/v1/objects/delete/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - http:
          path: v1/objects/{domain}/{key}
          method: delete
          integration: lambda
          private: true
          request:
            parameters:
              paths:
                domain: true
                key: true
            template:
              application/json: ${self:custom.httpGetRequestTemplate}
              application/x-www-form-urlencoded: ${self:custom.httpGetRequestTemplate}
          response:
            template: $input.path('$')
            statusCodes:
                400:
                    pattern: '.*"httpStatus":400.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                401:
                    pattern: '.*"httpStatus":401.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                403:
                    pattern: '.*"httpStatus":403.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                404:
                    pattern: '.*"httpStatus":404.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}
                500:
                    pattern: '.*"httpStatus":500.*'
                    template:
                      application/json: ${self:custom.httpResponseTemplate}

  # validateAccessToken:
  #   handler: functions/validators/access_token/handler.handler
  #   timeout: 6
  #   memorySize: 128
  #   vpc:
  #     securityGroupIds:
  #       - ${self:provider.environment.SECURITY_GROUP_ID}
  #     subnetIds:
  #       - ${self:provider.environment.SUBNET_ID_1}
  #       - ${self:provider.environment.SUBNET_ID_2}
  #       - ${self:provider.environment.SUBNET_ID_3}

  s3Handler:
    handler: functions/s3_handler/handler.handler
    timeout: 12
    memorySize: 128
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET_NAME}
          event: s3:ObjectCreated:Put
          # rules:
            # - prefix: object_storage_test/
            # - suffix: .*

  RdsOperator:
    handler: functions/rds_operator.handler
    timeout: 12
    memorySize: 128
    vpc:
      securityGroupIds:
        - ${self:provider.environment.SECURITY_GROUP_ID}
      subnetIds:
        - ${self:provider.environment.SUBNET_ID_1}
        - ${self:provider.environment.SUBNET_ID_2}
        - ${self:provider.environment.SUBNET_ID_3}

  housekeeping:
    handler: functions/housekeeping/handler.handler
    timeout: 60
    memorySize: 128
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
