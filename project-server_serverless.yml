# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: users
plugins:
  - serverless-nested-stack

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  stage: dev
  region: us-east-1
  runtime: nodejs6.10
  profile: tutor_server
  environment:
    GW_URL: { "Fn::Join" : ["", [ "https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}" ] ]  }
  role: myDefaultRole
  versionFunctions: false


custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

resources:
  Resources:
    myDefaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: MyDefaultRole
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action: # Gives permission to DynamoDB tables in a specific region
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:us-east-1:*:*"

    myCustRole0:
      Type: AWS::IAM::Role
      Properties:
        Path: /my/cust/path/
        RoleName: MyCustRole0
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action: # Gives permission to DynamoDB tables in a specific region
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:us-east-1:*:*"
                - Effect: Allow
                  Action:
                    - s3:*
                  Resource: "*"

# The `functions` block defines what code to deploy
functions:
  register:
    handler: register/handler.register
    # The `events` block defines how to trigger the handler.register code
    events:
      - http:
          path: register
          method: post
          cors: true
          integration: lambda

  validateNewUserInfo:
    handler: register/handler.validateNewUserInfo
    # The `events` block defines how to trigger the handler.validateNewUserInfo code
    events:
      - http:
          path: validateNewUserInfo
          method: post
          cors: true
          integration: lambda

  login:
    handler: login/handler.login
    # The `events` block defines how to trigger the handler.login code
    events:
      - http:
          path: login
          method: post
          cors: true
          integration: lambda


  upload:
    handler: upload/handler.upload
    # The `events` block defines how to trigger the handler.upload code
    role: myCustRole0
    events:
      - http:
          path: upload
          method: post
          cors: true
          integration: lambda

  updateAvatar:
    handler: updateAvatar/handler.updateAvatar
    # The `events` block defines how to trigger the handler.updateAvatar code
    role: myCustRole0
    events:
      - http:
          path: updateAvatar
          method: post
          cors: true
          integration: lambda

  updateProfile:
    handler: profile/handler.updateProfile
    # The `events` block defines how to trigger the handler.updateAvatar code
    events:
      - http:
          path: updateProfile
          method: post
          cors: true
          integration: lambda

  addToBookmark:
    handler: history/handler.addToBookmark
    events:
      - http:
          path: addToBookmark/{id}
          method: post
          cors: true
          integration: lambda

  removeFromBookmark:
    handler: history/handler.removeFromBookmark
    events:
      - http:
          path: removeFromBookmark/{id}
          method: post
          cors: true
          integration: lambda

  createClass:
    handler: class/handler.createClass
    events:
      - http:
          path: createClass
          method: post
          cors: true
          integration: lambda

  updateClass:
    handler: class/handler.updateClass
    events:
      - http:
          path: updateClass/{id}
          method: post
          cors: true
          integration: lambda

  deleteClass:
    handler: class/handler.deleteClass
    events:
      - http:
          path: deleteClass/{id}
          method: post
          cors: true
          integration: lambda

  getClassList:
    handler: class/handler.getClassList
    events:
      - http:
          path: getClassList
          method: post
          cors: true
          integration: lambda

  getClassDetail:
    handler: class/handler.getClassDetail
    events:
      - http:
          path: getClassDetail/{id}
          method: post
          cors: true
          integration: lambda

  getAllClassList:
    handler: class/handler.getAllClassList
    events:
      - http:
          path: getAllClassList
          method: post
          cors: true
          integration: lambda

  searchClassList:
    handler: class/handler.searchClassList
    events:
      - http:
          path: searchClassList
          method: post
          cors: true
          integration: lambda

  getFavouriteClassList:
    handler: class/handler.getFavouriteClassList
    events:
      - http:
          path: getFavouriteClassList
          method: post
          cors: true
          integration: lambda

  giveComment:
    handler: class/handler.giveComment
    events:
      - http:
          path: giveComment/{id}
          method: post
          cors: true
          integration: lambda


  applyClass:
    handler: applyClass/handler.applyClass
    events:
      - http:
          path: applyClass/{id}
          method: post
          cors: true
          integration: lambda

  getAppliedClassList:
    handler: applyClass/handler.getAppliedClassList
    events:
      - http:
          path: getAppliedClassList
          method: post
          cors: true
          integration: lambda

  duplicateClass:
    handler: class/handler.duplicateClass
    events:
      - http:
          path: duplicateClass/{id}
          method: post
          cors: true
          integration: lambda

  payment:
    handler: payment/handler.payment
    events:
      - http:
          path: payment
          method: post
          cors: true
          integration: lambda

  paymentSuccess:
    handler: payment/handler.paymentSuccess
    events:
      - http:
          path: paymentSuccess
          method: get
          cors: true
          integration: lambda

  paymentError:
    handler: payment/handler.paymentError
    events:
      - http:
          path: paymentError
          method: get
          cors: true
          integration: lambda

  createTutor:
    handler: tutor/handler.createTutor
    events:
      - http:
          path: createTutor
          method: post
          cors: true
          integration: lambda

  getTutorList:
    handler: tutor/handler.getTutorList
    events:
      - http:
          path: getTutorList
          method: post
          cors: true
          integration: lambda

  getTutorDetail:
    handler: tutor/handler.getTutorDetail
    events:
      - http:
          path: getTutorDetail
          method: post
          cors: true
          integration: lambda

  deleteTutor:
    handler: tutor/handler.deleteTutor
    events:
      - http:
          path: deleteTutor/{id}
          method: post
          cors: true
          integration: lambda

  updateTutor:
    handler: tutor/handler.updateTutor
    events:
      - http:
          path: updateTutor/{id}
          method: post
          cors: true
          integration: lambda

  getCompanyDetail:
    handler: company/handler.getCompanyDetail
    events:
      - http:
          path: getCompanyDetail
          method: post
          cors: true
          integration: lambda

  getProductList:
    handler: product/handler.getProductList
    events:
      - http:
          path: getProductList
          method: post
          cors: true
          integration: lambda

  purchaseGold:
    handler: product/handler.purchaseGold
    events:
      - http:
          path: purchaseGold
          method: post
          cors: true
          integration: lambda

  getCoinHistoryList:
    handler: product/handler.getCoinHistoryList
    events:
      - http:
          path: getCoinHistoryList
          method: post
          cors: true
          integration: lambda

  getWalletRevenue:
    handler: wallet/handler.getWalletRevenue
    events:
      - http:
          path: getWalletRevenue
          method: post
          cors: true
          integration: lambda

  getWithdrawnRecord:
    handler: wallet/handler.getWithdrawnRecord
    events:
      - http:
          path: getWithdrawnRecord
          method: post
          cors: true
          integration: lambda

  getWithdrawnList:
    handler: wallet/handler.getWithdrawnList
    events:
      - http:
          path: getWithdrawnList
          method: post
          cors: true
          integration: lambda

  applyWithdrawn:
    handler: wallet/handler.applyWithdrawn
    events:
      - http:
          path: applyWithdrawn
          method: post
          cors: true
          integration: lambda

  approveWithdrawn:
    handler: wallet/handler.approveWithdrawn
    events:
      - http:
          path: approveWithdrawn
          method: post
          cors: true
          integration: lambda

  getRefundList:
    handler: wallet/handler.getRefundList
    events:
      - http:
          path: getRefundList
          method: post
          cors: true
          integration: lambda

  applyRefund:
    handler: wallet/handler.applyRefund
    events:
      - http:
          path: applyRefund
          method: post
          cors: true
          integration: lambda

  approveRefund:
    handler: wallet/handler.approveRefund
    events:
      - http:
          path: approveRefund
          method: post
          cors: true
          integration: lambda

  getPaypalReport:
    handler: wallet/handler.getPaypalReport
    events:
      - http:
          path: getPaypalReport
          method: post
          cors: true
          integration: lambda

  getWithdrawnReport:
    handler: wallet/handler.getWithdrawnReport
    events:
      - http:
          path: getWithdrawnReport
          method: post
          cors: true
          integration: lambda

  getRefundReport:
    handler: wallet/handler.getRefundReport
    events:
      - http:
          path: getRefundReport
          method: post
          cors: true
          integration: lambda

  pushWebNotification:
    handler: pushNotification/handler.pushWebNotification
    events:
      - http:
          path: pushWebNotification
          method: post
          cors: true
          integration: lambda

  updateWebSubscription:
    handler: pushNotification/handler.updateWebSubscription
    events:
      - http:
          path: updateWebSubscription
          method: post
          cors: true
          integration: lambda

  getAdvertisement:
    handler: advertisement/handler.getAdvertisement
    events:
      - http:
          path: getAdvertisement
          method: post
          cors: true
          integration: lambda

  updateAdvertisement:
    handler: advertisement/handler.updateAdvertisement
    role: myCustRole0
    events:
      - http:
          path: updateAdvertisement
          method: post
          cors: true
          integration: lambda
