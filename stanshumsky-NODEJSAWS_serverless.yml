service: import-service
plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-dotenv-plugin
package:
  individually: false
  excludeDevDependencies: false
provider:
  name: aws
  region: eu-west-1
  stage: ${self:custom.stage}
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SQS_URL:
      Ref: SQSQueue
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - s3:ListObjects
      Resource: arn:aws:s3:::shumsky-s3/*
    - Effect: Allow
      Action: sqs:*
      Resource:
        Fn::GetAtt: [SQSQueue, Arn]
functions:
  importProductsFile:
    handler: handlers/import-products-file.handler
    events:
      - http:
          method: get
          path: import
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            type: token
            name: basicAuthorizer
            arn: ${cf:authorization-service-${self:provider.stage}.basicAuthorizerArn}
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
  importFileParser:
    handler: handlers/import-file-parser.handler
    events:
      - s3:
          event: s3:ObjectCreated:*
          bucket: shumsky-s3
          rules:
            - prefix: uploaded/
            - suffix: .csv
          existing: true
resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
  Outputs:
    SQSQueueArn:
      Value:
        Fn::GetAtt: [SQSQueue, Arn]
    SQSQueue:
      Value:
        Ref: SQSQueue

custom:
  stage: ${opt:stage,'dev'}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      packagePath: ../../package.json
  dotenv:
    path: ../../.env
    logging: false
