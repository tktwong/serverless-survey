service: tutelage-ws-root
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: tce
  memorySize: 1024
  timeout: 30
  logRetentionInDays: 7
  stackTags:
    Customer: Tutelage
  tags:
    Customer: Tutelage
  deploymentPrefix: ws-root-apig
  cfnRole: arn:aws:iam::074127281063:role/tutelage-service-${self:provider.stage}-cfnRole
  apiGateway:
    minimumCompressionSize: 1024
    description: The root API gateway for DEV micro-services
  logs:
    restApi:
      accessLogging: false
      format: 'requestId: $context.requestId'
      executionLogging: true
      level: 'ERROR'
      fullExecutionData: true
    websocket: false
    frameworkLambda: false
  environment:
    STAGE: ${opt:stage, 'dev'}


package:
  individually: true
  excludeDevDependencies: false
  # path: dist/apps/ws-root-apig
  custom:
    enable_optimize:
      local: false

custom:
  serverless-offline:
    httpPort: 3333
    lambdaPort: 8000

functions:
  health-check:
    handler: src/health.handler
    description: A function for health status check
    memorySize: 512
    events:
      - http:
          cors: false
          path: '/health'
          method: get

resources:
  Description: The AWS CloudFormation template to generate Root API Gateway for TuteLage micro-service
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "message": ''Unauthorized error occurs.'' }'
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: 403
    GatewayResponseIntegrationTimeout:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: INTEGRATION_TIMEOUT
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "code": "IntegrationTimeout", "message": $context.error.messageString }'
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseUnsupportedMediaType:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: UNSUPPORTED_MEDIA_TYPE
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "code": "UnsupportedMediaType", "message": $context.error.messageString }'
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseResourceNotFound:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: RESOURCE_NOT_FOUND
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "code": "ResourceNotFound", "message": $context.error.messageString }'
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseAccessDenied:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: ACCESS_DENIED
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "code": "NotAuthorized", "message": $context.error.messageString, "errorMessage": "$context.authorizer.customErrorMessage" }'
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseExpiredToken:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: EXPIRED_TOKEN
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "code": "TokenExpired", "message": $context.error.messageString }'
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseMissingAuthnticationToken:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: MISSING_AUTHENTICATION_TOKEN
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "code": "MissingToken", "message": $context.error.messageString }'
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: UNAUTHORIZED
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "code": "AuthenticationFailure", "message": $context.error.messageString }'
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseInvalidSignature:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseType: INVALID_SIGNATURE
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: '{ "code": "InvalidSignature", "message": $context.error.messageString }'
        RestApiId: !Ref ApiGatewayRestApi

  Outputs:
    TutelageApiGWRestApiId:
      Value: !Ref ApiGatewayRestApi
      Export:
        Name: TutelageApiGW-RestApiId-DEV

    TutelageApiGWRestApiRootResourceId:
      Value: !GetAtt ApiGatewayRestApi.RootResourceId
      Export:
        Name: TutelageApiGW-RootResourceId-DEV

plugins:
  - serverless-offline
  # - serverless-domain-manager
  # - serverless-pseudo-parameters
