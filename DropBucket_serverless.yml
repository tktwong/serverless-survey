# TODO: Trim Lambda permissions

service:
  name: dropbucket
  
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  
provider:
  name: aws
  runtime: nodejs12.x
  tracing:
    lambda: true
    apiGateway: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    FILES_TABLE: dropbucket-${self:provider.stage}
    FILES_BUCKET: dropbucket-${self:provider.stage}
    LAST_MODIFIED_INDEX: lastModifiedIndex
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatementsName: AuthUser
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"

  GetFiles:
    handler: src/lambda/http/getFiles.handler
    iamRoleStatementsName: GetFiles
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.FILES_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}/index/${self:provider.environment.LAST_MODIFIED_INDEX}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
    events:
      - http:
          method: get
          path: files
          authorizer: Auth
          cors: true
  
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatementsName: GenerateUploadUrlForFile
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.FILES_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
    events:
      - http:
          method: post
          path: files/upload
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(src/schemas/upload-file.json)}
  
  UploadFile:
    handler: src/lambda/http/uploadFile.handler
    iamRoleStatementsName: UploadFile
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
          - events:PutRule
        Resource: "*"
    events:
      - s3:
          bucket: ${self:provider.environment.FILES_BUCKET}
          event: s3:ObjectCreated:*
          existing: true

  GenerateDownloadUrl:
    handler: src/lambda/http/generateDownloadUrl.handler
    iamRoleStatementsName: GenerateDownloadUrlForFile
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}
      - Effect: Allow
        Action:
          - s3:getObject
        Resource: arn:aws:s3:::${self:provider.environment.FILES_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
    events:
      - http:
          method: get
          path: files/{fileKeyEncoded}/download
          authorizer: Auth
          cors: true

  DeleteFile:
    handler: src/lambda/http/deleteFile.handler
    iamRoleStatementsName: DeleteFile
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.FILES_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:CreateLogGroup
          - logs:PutLogEvents
        Resource: "*"
    events:
      - http:
          method: delete
          path: files/{fileKeyEncoded}
          authorizer: Auth
          cors: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
    FilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: fileKey
            AttributeType: S
          - AttributeName: lastModified
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: fileKey
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.LAST_MODIFIED_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: lastModified
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.FILES_TABLE}
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.FILES_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD