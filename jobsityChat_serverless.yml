service: jobsityChat
frameworkVersion: "1.74.1"

custom:
  lambdaRunTime: python3.8
  dynamodbTableName: jobsityChat
  stage: ${opt:stage, self:provider.stage}
  domain: jobsitychat-#{AWS::AccountId}-${self:custom.stage}
  s3Sync:
    - bucketNameKey: BucketStaticSite
      localDir: ../client
      acl: public-read
      deleteRemoved: true

provider:
  name: aws
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
    - arn:aws:iam::aws:policy/AWSLambdaFullAccess
    - arn:aws:iam::aws:policy/AmazonCognitoPowerUser 
  runtime: ${self:custom.lambdaRunTime}
  versionFunctions: false
  region: us-west-2
  timeout: 300

plugins:
  - serverless-pseudo-parameters
  - serverless-s3-sync
package:
  individually: true
  exclude:
    - "lib/**"
    - "node_modules/**"
    - "test/**"
    - "*.egg-info/**"
    - "*.egg-info/**"
    - "venv/**"

layers:
  pythonPackageLayer:
    path: lib
    name: Python-Package-layer
    description: Python Package layer
    compatibleRuntimes:
      - ${self:custom.lambdaRunTime}

functions:
  connectHandler:
    handler: jobsitychat/routes/connection.insert_connection
    events:
      - websocket:
          route: $connect
          authorizer:
            name: auth
            identitySource:
              - 'route.request.querystring.Authorizer'
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }
    environment:
      table: ${self:custom.dynamodbTableName}

  disconnectHandler:
    handler: jobsitychat/routes/connection.delete_connection
    events:
      - websocket: $disconnect
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }
    environment:
      table: ${self:custom.dynamodbTableName}

  onMessageHandler:
    handler: jobsitychat/routes/message.post_message
    events:
      - websocket:
          route: onMessage
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }
    environment:
      table: ${self:custom.dynamodbTableName}

  postMessageStock:
    handler: jobsitychat/routes/stock.post_message
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }
    environment:
      table: ${self:custom.dynamodbTableName}

  auth:
    handler: jobsitychat/routes/auth.authenticate
    layers:
      - { Ref: PythonPackageLayerLambdaLayer }
    environment:
      USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient

resources:
  Resources:
    jobsityChatTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamodbTableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.stage}-user-pool-jobsity-chat
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: False
            RequireSymbols: False
            RequireUppercase: False

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.stage}-user-pool-client-jobsity-chat
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        CallbackURLs: 
          - https://${self:custom.domain}.s3-us-west-2.amazonaws.com/index.html
        LogoutURLs: 
          - 'https://www.amazon.com'
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthScopes:
          - openid
          - email
          - aws.cognito.signin.user.admin
          - phone
          - profile

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref CognitoUserPool
        Domain: jobsitychat-#{AWS::AccountId}-${self:custom.stage}

    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.domain}
        WebsiteConfiguration:
          IndexDocument: index.html

  Outputs:
    BucketStaticSite:
      Value: jobsitychat-#{AWS::AccountId}-${self:custom.stage}
