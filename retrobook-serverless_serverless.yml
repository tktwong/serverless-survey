service: retrobook-service

custom: 
  retrobook_ddb_table_test: RetroBook_Books
  default_lambda_role: arn:aws:iam::535116423835:role/RetroBook-API_Lambda_Role

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  profile: retrobook_admin
  region: us-west-2
  role: ${self:custom.default_lambda_role}
  apiKeys:
    - retrobook_admin_key
  usagePlan:
      quota:
        limit: 200
        period: WEEK
      throttle:
        burstLimit: 300
        rateLimit: 3

# you can define service wide environment variables here
#  environment:
#    variable1: value1

#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  retrobook_get_books: 
    handler: src/get_books/get_books.handler
    events: ${file(./src/get_books/properties.yml):events}
    environment: 
      TABLE_NAME: ${self:custom.retrobook_ddb_table_test}
  retrobook_get_books_id: 
    handler: src/get_books_id/get_books_id.handler
    events: ${file(./src/get_books_id/properties.yml):events}
    environment:
      TABLE_NAME: ${self:custom.retrobook_ddb_table_test}

# resources:
#   Resources:
#     volumesBucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: retrobooktest
#     volumesDb:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: RetroBook_Books
#         AttributeDefinitions:
#           - AttributeName: id
#             AttributeType: S
#           - AttributeName: author
#             AttributeType: S
#         KeySchema:
#           - AttributeName: id
#             KeyType: HASH
#           - AttributeName: author
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 5
#           WriteCapacityUnits: 5
