# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-workshop
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws

  # you can overwrite defaults here
  stage: dev
  region: ap-south-1

  # you can add statements to the Lambda function's IAM Role here
  #  iamRoleStatements:
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:ListBucket"
  #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:PutObject"
  #      Resource:
  #        Fn::Join:
  #          - ""
  #          - - "arn:aws:s3:::"
  #            - "Ref" : "ServerlessDeploymentBucket"
  #            - "/*"

  # you can define service wide environment variables here
  environment:
    user_pool: <Your User Pool ID>

# you can add packaging information here
package:
  #  include:
  #    - include-me.js
  #    - include-me-dir/**
  exclude:
    - .idea/**

functions:
  getUsers:
    handler: node/users.get
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer:
            name: ServerlessWorkshop
            arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    authorizer:
      arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    runtime: nodejs12.x
    role: arn:aws:iam::920658451822:role/ServerlessWorkshop
  createUser:
    handler: node/users.add
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer:
            name: ServerlessWorkshop
            arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    authorizer:
      arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    runtime: nodejs12.x
    role: arn:aws:iam::920658451822:role/ServerlessWorkshop
  enableUser:
    handler: python/users.enable
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
          authorizer:
            name: ServerlessWorkshop
            arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    authorizer:
      arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    runtime: python3.6
    role: arn:aws:iam::920658451822:role/ServerlessWorkshop
  disableUser:
    handler: python/users.disable
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
          authorizer:
            name: ServerlessWorkshop
            arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    authorizer:
      arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    runtime: python3.6
    role: arn:aws:iam::920658451822:role/ServerlessWorkshop
  getFeedback:
    handler: python/feedback.get
    events:
      - http:
          path: feedback
          method: get
          cors: true
          authorizer:
            name: ServerlessWorkshop
            arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    authorizer:
      arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    runtime: python3.6
    role: arn:aws:iam::920658451822:role/ServerlessWorkshop
  addFeedback:
    handler: node/feedback.add
    events:
      - http:
          path: feedback
          method: post
          cors: true
          authorizer:
            name: ServerlessWorkshop
            arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    authorizer:
      arn: arn:aws:cognito-idp:ap-south-1:920658451822:userpool/ap-south-1_rxZdv5Odl
    runtime: nodejs12.x
    role: arn:aws:iam::920658451822:role/ServerlessWorkshop
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
