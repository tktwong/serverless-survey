# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service:
  name: stomble-backend-internship
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

custom:
  webpack:
    webpackConfig: "./webpack.config.js"
    includeModules: true

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-2
  profile: serverlessUser

  apiGateway:
    minimumCompressionSize: 1024

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  addLocation:
    handler: "./src/handler/addLocation.handler"
    events:
      - http:
          method: post
          path: "locations/{locationID}"
    role: addLocationRole

  removeLocation:
    handler: "./src/handler/removeLocation.handler"
    events:
      - http:
          method: delete
          path: "locations/{locationID}"
    role: removeLocationRole

  locationHelp:
    handler: "./src/handler/locationHelp.handler"
    events:
      - http:
          method: get
          path: "locations/help"

  addSpaceship:
    handler: "./src/handler/addSpaceship.handler"
    events:
      - http:
          method: post
          path: "spaceships/{spaceshipID}"
    role: addSpaceshipRole

  updateSpaceshipStatus:
    handler: "./src/handler/updateSpaceshipStatus.handler"
    events:
      - http:
          method: put
          path: "spaceships/status/{spaceshipID}"
    role: updateSpaceshipStatusRole

  removeSpaceship:
    handler: "./src/handler/removeSpaceship.handler"
    events:
      - http:
          method: delete
          path: "spaceships/{spaceshipID}"
    role: removeSpaceshipRole

  spaceshipHelp:
    handler: "./src/handler/spaceshipHelp.handler"
    events:
      - http:
          method: post
          path: "spaceships/help"

  spaceshipTravelTo:
    handler: "./src/handler/spaceshipTravelTo.handler"
    events:
      - http:
          method: put
          path: "travel"

  travelHelp:
    handler: "./src/handler/travelHelp.handler"
    events:
      - http:
          method: get
          path: "travel/help"
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    spaceshipTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Spaceship-Table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    LocationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Location-Table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    addLocationRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: addLocationRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: addLocationPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource: "arn:aws:dynamodb:ap-southeast-2:243528592214:table/Location-Table"

    removeLocationRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: removeLocationRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: removeLocationPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:ap-southeast-2:243528592214:table/Location-Table"

    addSpaceshipRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: addSpaceshipRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: addSpaceshipPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource: "arn:aws:dynamodb:ap-southeast-2:243528592214:table/Spaceship-Table"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:UpdateItem
                  Resource: "arn:aws:dynamodb:ap-southeast-2:243528592214:table/Location-Table"

    removeSpaceshipRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: removeSpaceshipRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: removeSpaceshipPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:ap-southeast-2:243528592214:table/Spaceship-Table"
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                  Resource: "arn:aws:dynamodb:ap-southeast-2:243528592214:table/Location-Table"

    updateSpaceshipStatusRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: updateSpaceshipStatusRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: updateSpaceshipStatusPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:UpdateItem
                  Resource: "arn:aws:dynamodb:ap-southeast-2:243528592214:table/Spaceship-Table"

    spaceshipTravelToRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: spaceshipTravelToRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: spaceshipTravelToPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:UpdateItem
                  Resource: "arn:aws:dynamodb:ap-southeast-2:243528592214:table/Spaceship-Table"
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:UpdateItem
                  Resource: "arn:aws:dynamodb:ap-southeast-2:243528592214:table/Location-Table"
