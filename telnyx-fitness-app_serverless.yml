service: fitness-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: clients
    statusTableName: status_updates
    telnyx_api_key: KEY017648B2A94C60500B8F46CFE1C94AEC_SIcqzXjn23R81vrNYGRfkX
    telnyx_number: '+17733028081'
    telnyx_status_url: https://z256forypj.execute-api.us-east-2.amazonaws.com/prod/status


  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-2:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /clients
  # - method: POST request
  create:
    handler: create.main
    events:
      - http:
          path: clients
          method: post
          cors: true

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /clients/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: clients/{id}
          method: get
          cors: true

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /clients
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: clients
          method: get
          cors: true

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /clients/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: clients/{id}
          method: put
          cors: true

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /clients/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: clients/{id}
          method: delete
          cors: true

  progress:
    # Defines an HTTP API endpoint that can be used as a webhook for telnyx messages
    # - path: url path is /progress
    # - method: POST request
    handler: progress.main
    events:
      - http:
          path: progress
          method: post
          cors: true

  status:
    # Defines an HTTP API endpoint that can be used as a webhook for telnyx messaging updates
    # - path: url path is /status
    # - method: POST request
    handler: status.main
    events:
      - http:
          path: status
          method: post
          cors: true

  send:
    # Defines an HTTP API endpoint that can be used to send a telnyx message
    # - path: url path is /send
    # - method: POST request
    handler: send.main
    events:
      - http:
          path: send
          method: post
          cors: true

  listStatuses:
    # Defines an HTTP API endpoint that lists all status updates
    # - path: url path is /status
    # - method: GET request
    handler: listStatuses.main
    events:
      - http:
          path: status
          method: get
          cors: true