org: eugeny
app: storage-app

service: storage

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "cognito-idp:*"
      Resource:
        - Fn::GetAtt: [CognitoUserPool, Arn]
    - Effect: Allow
      "Action": [
          "s3:*"
      ]
      Resource: [
          "arn:aws:s3:::yevhenii-aws-lambda-pictures",
          "arn:aws:s3:::yevhenii-aws-lambda-pictures/*",
      ]

#layers:
#  putPicture:
#    path: psycopg2.zip # required, path to layer contents on disk
#    name: psy2


functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /hello
          method: post
  
  signup:
    handler: signUp.handler
    events:
      - http:
          path: /signup
          method: post

  presignup:
    handler: preSignUp.handler
    events:
      - cognitoUserPool:
          pool: pictures-user-pool
          trigger: PreSignUp

  signin:
    handler: signIn.handler
    events:
      - http:
          path: /signin
          method: post

  preSignedPost:
    handler: preSignedPost.handler
    events:
      - http:
          path: /bucket
          method: get
          authorizer:
            name: MyAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  putPicture:
    handler: putPicture.handler
    events:
      - s3:
          bucket: yevhenii-aws-lambda-pictures
          event: s3:ObjectCreated:*
          existing: true

  listPictures:
    handler: listPicures.handler
    events:
      - http:
          path: /list
          method: get
          authorizer:
            name: MyAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn

  deletePicture:
    handler: deletePicture.handler
    events:
      - http:
          path: /delete
          method: post
          authorizer:
            name: MyAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - CognitoUserPool
                - Arn


resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: pictures-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
            TemporaryPasswordValidityDays: 7



    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: pictures-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: true

#plugins:
#  - serverless-python-requirements
#  -
