service:
  name: serverless-talk

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-pseudo-parameters

custom:
  bucketName: ${self:provider.stage}-fetch-and-upload
  topicName: ${self:provider.stage}-upload-event
  topicArn: 'arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.topicName}'    
  queueName: ${self:provider.stage}-upload-event-queue

provider:
  name: aws
  runtime: nodejs10.x
  region: ${opt:region, env:AWS_DEFAULT_REGION, 'eu-west-1'}
  stage: dev
  memorySize: 512
  environment:
    UPLOAD_BUCKET: ${self:custom.bucketName}
    UPLOAD_EVENT_TOPIC_ARN: ${self:custom.topicArn}
  iamRoleStatements:    
    - Effect: "Allow"
      Action:
        - s3:*
      Resource:
        - 'arn:aws:s3:::${self:custom.bucketName}/*'
    - Effect: "Allow"
      Action:
        - sns:Publish
        - sns:CreateTopic
      Resource:
        - 'Fn::Join':
          - ':'
          - - 'arn:aws:sns'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - ${self:custom.topicName}

resources:
  Resources:
    UploadEventTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.topicName}
    S3BucketImagesUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    PublishEventLambdaPermissionImagesUploadS3:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName:
          'Fn::GetAtt':
            - PublishEventLambdaFunction
            - Arn
        Principal: 's3.amazonaws.com'
        Action: 'lambda:InvokeFunction'
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: 'arn:aws:s3:::${self:custom.bucketName}'

    UploadEventQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}
        VisibilityTimeout: 90
        RedrivePolicy:
          deadLetterTargetArn:
            "Fn::GetAtt":
              - UploadEventDeadLetterQueue
              - Arn   
          maxReceiveCount: 4           

    UploadEventDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}-DeadLetters
        MessageRetentionPeriod: 1209600 # 14 days in seconds


    UploadEventQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: UploadEventQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - sqs:SendMessage
              Resource: "*"
              Condition:
                ArnEquals:
                  aws:SourceArn: ${self:custom.topicArn}

    UploadEventSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: ${self:custom.topicArn}
        Endpoint:
          Fn::GetAtt:
            - UploadEventQueue
            - Arn
        RawMessageDelivery: true
        Protocol: sqs

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          method: get
          path: hello
  fetchAndUpload:
    handler: src/fetchAndUpload/handler.fetchAndUpload
    events:
      - http:
          method: post
          path: fetch
  publishEvent:
    handler: src/publishEvent/handler.publishEventFromS3
    events:
      - s3:
          bucket: ImagesUpload
          event: s3:ObjectCreated:*
  processQueue:
    handler: src/processQueue/handler.processQueue
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - UploadEventQueue
              - Arn
