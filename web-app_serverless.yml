# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: web-app # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7

# you can overwrite defaults here
  stage: dev
  region: us-east-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-product_catalog
    PHOTOGRAPHER_TABLE: ${self:service}-${opt:stage, self:provider.stage}-photographers
    CREDITCARD_TABLE: ${self:service}-${opt:stage, self:provider.stage}-creditcards
    TRANSACTION_TABLE: ${self:service}-${opt:stage, self:provider.stage}-transactions
    # S3_PRODUCT_PHOTOS: ${self:service}-${opt:stage, self:provider.stage}-s3-photos
    # S3_PRODUCT_PHOTOS_RESIZED: ${self:service}-${opt:stage, self:provider.stage}-s3-photos-resized
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - ses:SendEmail
        - "s3:*"
      Resource:
        - "*"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PHOTOGRAPHER_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CREDITCARD_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TRANSACTION_TABLE}"
        - "arn:aws:ses:us-east-1:287819213717*"
        # you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
       - http:
          path: first-endpoint
          method: get
  hellopost:
    handler: handler2.hellopost
    events:
       - http:
          path: second-endpoint
          method: post
          cors: true
  create:
    handler: product_catalog_api/create.create
    events:
      - http:
          path: product_catalog-create
          method: post
          cors: true
  list:
    handler: product_catalog_api/list.list
    events:
      - http:
          path: product_catalog-list
          method: get
          cors: true
  delete:
    handler: product_catalog_api/delete.delete
    events:
      - http:
          path: product_catalog-delete/{id}
          method: delete
          cors: true
  update:
    handler: product_catalog_api/update.update
    events:
      - http:
          path: product_catalog-update/{id}
          method: put
          cors: true

  register:
    handler: photographer_api/register.register
    events:
      - http:
          path: photographer_api-register
          method: post
          cors: true
  photo_request:
    handler: photo_request.request
    events:
      - stream: arn:aws:dynamodb:us-east-2:287819213717:table/web-app-dev-product_catalog/stream/2019-03-31T18:08:59.310
  purchase:
    handler: purchase_api/purchase.purchase
    events:
      - http:
          path: purchase_api-purchase
          method: post
          cors: true
  
  resize:
    handler: photo_resize.resize
    events:
      - s3:
          bucket: web-app-jiashuoz-product-photos
          event: s3:ObjectCreated:*
          rules:
            - suffix: .jpg
    # events:
    #   - s3:
    #       ### indentation is important
    #       bucket: test-s3-bucket-jiashuoz
    #       event: s3:ObjectCreated:*
    #       rules:
    #         - suffix: .jpg
      #    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    ProductDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # add stream to dynamo table
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    PhotographerDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.PHOTOGRAPHER_TABLE}
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CreditCardDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.CREDITCARD_TABLE}
        AttributeDefinitions:
          -
            AttributeName: credit_card_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: credit_card_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
    TransactionDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TRANSACTION_TABLE}
        AttributeDefinitions:
          -
            AttributeName: order_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: order_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3BucketProductPhotosResized:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: web-app-jiashuoz-product-photosresized
        # Set the CORS policy
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    # S3BucketProductPhotos:
    #   Type: 'AWS::S3::Bucket'
    #   Properties:
    #     BucketName: ${self:provider.environment.S3_PRODUCT_PHOTOS}
    #     # Set the CORS policy
    #     CorsConfiguration:
    #       CorsRules:
    #         -
    #           AllowedOrigins:
    #             - '*'
    #           AllowedHeaders:
    #             - '*'
    #           AllowedMethods:
    #             - GET
    #             - PUT
    #             - POST
    #             - DELETE
    #             - HEAD
    #           MaxAge: 3000
    # S3BucketProductPhotosResized:
    #   Type: 'AWS::S3::Bucket'
    #   Properties:
    #     BucketName: ${self:provider.environment.S3_PRODUCT_PHOTOS_RESIZED}
    #     # Set the CORS policy
    #     CorsConfiguration:
    #       CorsRules:
    #         -
    #           AllowedOrigins:
    #             - '*'
    #           AllowedHeaders:
    #             - '*'
    #           AllowedMethods:
    #             - GET
    #             - PUT
    #             - POST
    #             - DELETE
    #             - HEAD
    #           MaxAge: 3000
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: non-linux