service: serverless-messaging

frameworkVersion: '>=1.1.0 <2.0.0'

custom:
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  region: eu-west-1
  runtime: python3.7

  usagePlan:
    quota:
      limit: ${env:QUOTA_LIMIT, 50}
      period: ${env:QUOTA_PERIOD, DAY}
  apiKeys:
    - demo

  environment:
    DB_TABLE_MESSAGES: ${ssm:DB_TABLE_MESSAGES}
    SOURCE_EMAIL_ADDRESS: ${ssm:SOURCE_EMAIL_ADDRESS}

  iamRoleStatements:
    # DynamoDB
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${ssm:DB_TABLE_MESSAGES}'

    # Emails
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: arn:aws:ses:${opt:region, self:provider.region}:*:identity/${ssm:SOURCE_EMAIL_ADDRESS}

    # SMS
    - Effect: Deny
      Action:
        - sns:Publish
      Resource: arn:aws:sns:*:*:* # topics and applications
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: '*'

functions:
  getMessages:
    handler: messaging/handlers/messages_get.handler
    events:
      - http:
          path: messages
          method: get
          private: true

  postMessages:
    handler: messaging/handlers/messages_post.handler
    events:
      - http:
          path: messages
          method: post
          private: true

resources:
  Resources:
    MessagesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${ssm:DB_TABLE_MESSAGES}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-python-requirements
  - serverless-offline
