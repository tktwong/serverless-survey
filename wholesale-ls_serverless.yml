service: wholesale-ls-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-properties
  tableNameProfiles: ${self:custom.stage}-profiles
  tableNameWebsockets: ${self:custom.stage}-websockets
  tableNameConversations: ${self:custom.stage}-conversations
  tableNameMessages: ${self:custom.stage}-messages
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

  environment:
    tableName: ${self:custom.tableName}
    tableNameProfiles: ${self:custom.tableNameProfiles}
    tableNameWebsockets: ${self:custom.tableNameWebsockets}
    tableNameConversations: ${self:custom.tableNameConversations}
    tableNameMessages: ${self:custom.tableNameMessages}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [PropertiesTable, Arn]
        - "Fn::GetAtt": [ProfilesTable, Arn]
        - "Fn::GetAtt": [WebsocketsTable, Arn]
        - "Fn::GetAtt": [ConversationsTable, Arn]
        - "Fn::GetAtt": [MessagesTable, Arn]

functions:
  create:
    handler: create.main
    events:
      - http:
          path: properties
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: properties/{id}
          method: get
          cors: true
# testing userdashboard with all properties
  list:
    handler: list.main
    events:
      - http:
          path: allproperties
          method: get
          cors: true

  listFilter:
    handler: listFilter.main
    events:
      - http:
          path: properties
          method: get
          cors: true

  update:
    handler: update.main
    events:
      - http:
          path: properties/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: properties/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  createProfile:
    handler: createProfile.main
    events:
      - http:
          path: profiles
          method: post
          cors: true
          authorizer: aws_iam

  userProperties:
    handler: userProperties.main
    events:
      - http:
          path: userproperties
          method: get
          cors: true
          authorizer: aws_iam

  getProfile:
    handler: getProfile.main
    events:
      - http:
          path: profiles/{id}
          method: get
          cors: true

  propertyEmail:
    handler: propertyEmail.main
    events:
      - http:
          path: propertyemail
          method: post
          cors: true

  updateProfile:
    handler: updateProfile.main
    events:
      - http:
          path: profiles/{id}
          method: put
          cors: true
          authorizer: aws_iam

  createPost:
    handler: createPost.main
    events:
      - http:
          path: blogPosts
          method: post
          cors: true
          authorizer: aws_iam

  websocket-connect:
    handler: websockets/connect.handler
    events:
      - websocket:
          route: $connect
      
  websocket-disconnect:
    handler: websockets/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  
  websocket-default:
    handler: websockets/default.handler
    events:
      - websocket:
          route: $default
  
  websocket-message:
    handler: websockets/message.handler
    events:
      - websocket:
          route: message

  getConversation:
    handler: getConversation.main
    events:
      - http:
          path: properties/{id}/chat
          method: get
          cors: true
          authorizer: aws_iam
    
  createConversation:
    handler: createConversation.main
    events:
      - http:
          path: properties/{id}/chat
          method: post
          cors: true
          authorizer: aws_iam
  
  createMessage:
    handler: createMessage.main
    events:
      - http:
          path: properties/{id}/message
          method: post
          cors: true
          authorizer: aws_iam

  getConversationMessages:
    handler: getConversationMessages.main
    events:
      - http:
          path: conversation/messages
          method: get
          cors: true
          authorizer: aws_iam


# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}

