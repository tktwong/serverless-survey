service: logins-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: logins

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /infos
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: logins
          method: post
          cors: true
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /infos/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: infos/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /infos
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: infos
          method: get
          cors: true
          authorizer: aws_iam
  update:
  # Defines an HTTP API endpoint that calls the main function in update.js
  # - path: url path is /infos/{id}
  # - method: PUT request
    handler: update.main
    events:
      - http:
          path: infos/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /infos/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: infos/{id}
          method: delete
          cors: true
          authorizer: aws_iam
    # Create our resources with separate CloudFormation templates
  # resources:
  #   # API Gateway Errors
  #   - ${file(resources/api-gateway-errors.yml)}
        