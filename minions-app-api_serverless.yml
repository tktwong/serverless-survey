service: minions-app-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-minions02
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

environment:

  MailgunApiKey: ${self:environment.MailgunApiKey}


provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-1

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:003473412493:table/minions02"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:us-east-1:003473412493:table/minions02/index/reserved_by-index"
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:us-east-1:003473412493:table/minions02"

    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:us-east-1:003473412493:table/minions02"


    - Effect: Allow
      Action:
        - cognito-idp:AdminGetUser
        - cognito-idp:ListUsers
        - cognito-idp:ListUsersInGroups
      Resource: "arn:aws:cognito-idp:us-east-1:003473412493:userpool/us-east-1_r5k0eKMkA"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /minions
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: minions
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /minions/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: minions/{id}
          method: get
          cors: true
          authorizer: aws_iam

  getReservedMinion:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /minions/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: minions/reserved/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listMyMinions:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /minions
    # - method: GET request
    handler: listMyMinions.main
    events:
      - http:
          path: minions
          method: get
          cors: true
          authorizer: aws_iam

  reserveMinion:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: reserveMinion.main
    events:
      - http:
          path: minions/{id}
          method: patch
          cors: true
          authorizer: aws_iam

  unreserveMinion:
    handler: unreserveMinion.main
    events:
      - http:
          path: minions/reserved/{id}
          method: patch
          cors: true
          authorizer: aws_iam

  listAvailableMinions:

    handler: listAvailableMinions.main
    events:
      - http:
          path:  minions/available
          method: get
          cors: true
          authorizer: aws_iam

  listMyReservedMinions:

    handler: listMyReservedMinions.main
    events:
      - http:
          path: minions/reserved
          method: get
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}

