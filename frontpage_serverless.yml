custom:
  additionalStacks:
    permanent:
      Resources:
        UserTable:
          Properties:
            AttributeDefinitions:
              - AttributeName: userId
                AttributeType: S
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
            TableName: '${self:provider.environment.USER_TABLE_NAME}'
          Type: 'AWS::DynamoDB::Table'
functions:
  acceptUserBotMessage:
    events:
      - http:
          method: post
          path: api/user_bot
    handler: com.github.ithildir.frontpage.aws.AcceptUserBotMessageRequestHandler
  getUserHomeView:
    events:
      - http:
          method: get
          path: 'users/{id}'
          request:
            parameters:
              paths:
                id: true
    handler: com.github.ithildir.frontpage.aws.GetUserHomeViewRequestHandler
  processUserLinkedIn:
    events:
      - s3: '${self:provider.environment.USER_LINKEDIN_BUCKET_NAME}'
    handler: com.github.ithildir.frontpage.aws.ProcessUserLinkedInRequestHandler
  sendUserBotReply:
    events:
      - sns:
          arn:
            'Fn::Join':
              - ''
              - - 'arn:aws:sns:'
                - Ref: 'AWS::Region'
                - ':'
                - Ref: 'AWS::AccountId'
                - ':UserBotReply'
          topicName: UserBotReply
    handler: com.github.ithildir.frontpage.aws.SendUserBotReplyRequestHandler
package:
  artifact: build/distributions/frontpage.zip
plugins:
  - serverless-plugin-additional-stacks
  - serverless-sam
provider:
  environment:
    BING_GEOCODER_KEY: '${ssm:FrontpageBingGeocoderKey~true}'
    REDIS_HOST: '${ssm:FrontpageRedisHost}'
    REDIS_PASSWORD: '${ssm:FrontpageRedisPassword~true}'
    REDIS_PORT: '${ssm:FrontpageRedisPort}'
    USER_BOT_APP_ID: '${ssm:FrontpageUserBotAppId~true}'
    USER_BOT_APP_PASSWORD: '${ssm:FrontpageUserBotAppPassword~true}'
    USER_BOT_DIRECT_LINE_SECRET: '${ssm:FrontpageUserBotDirectLineSecret~true}'
    USER_BOT_REPLY_QUEUE_TOPIC:
      Ref: UserBotReplyTopic
    USER_LINKEDIN_BUCKET_NAME: '${self:service}-${opt:stage, self:provider.stage}-user-linkedin'
    USER_TABLE_NAME: 'User-${opt:stage, self:provider.stage}'
    USER_WIT_AI_TOKEN: '${ssm:FrontpageUserWitAiToken~true}'
  iamRoleStatements:
    - Action:
        - 'dynamodb:DeleteItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:UpdateItem'
      Effect: Allow
      Resource: >-
        arn:aws:dynamodb:${opt:region,self:provider.region}:*:table/${self:provider.environment.USER_TABLE_NAME}
    - Action:
        - 's3:DeleteObject'
        - 's3:GetObject'
      Effect: Allow
      Resource: 'arn:aws:s3:::${self:provider.environment.USER_LINKEDIN_BUCKET_NAME}/*'
    - Action:
        - 'sns:Publish'
      Effect: Allow
      Resource:
        - Ref: UserBotReplyTopic
  name: aws
  region: us-west-1
  runtime: java8
resources:
  Resources:
    UserBotReplyTopic:
      Properties:
        TopicName: UserBotReply
      Type: 'AWS::SNS::Topic'
service: frontpage
