service: my-express-application

provider:
  name: aws
  runtime: nodejs6.10
  stage: web
  region: us-east-1
  memorySize: 128
  timeout: 30

  usagePlan:
    quota:
      limit: 10000000
      offset: 0
      period: MONTH
    throttle:
      burstLimit: 5000
      rateLimit: 10000
  environment:
    DB_DATABASE: ${self:custom.settings.${self:custom.stage}.DB_DATABASE}
    DB_HOST: ${self:custom.settings.${self:custom.stage}.DB_HOST}
    DB_PASSWORD: ${self:custom.settings.${self:custom.stage}.DB_PASSWORD}
    DB_PORT: ${self:custom.settings.${self:custom.stage}.DB_PORT}
    DB_USER: ${self:custom.settings.${self:custom.stage}.DB_USER}    

plugins:
  - serverless-offline

custom:
  stage: ${self:provider.stage}
  allowed-headers:
    - Content-Type
    - X-Amz-Date
    - Access-Control-Allow-Origin
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - odin
    - loki
    - thor  
  settings:
    web:
      DB_HOST: 'remotemysql.com'
      DB_PORT: '1433'
      DB_DATABASE: 'UkigjKnCyz'
      DB_USER: 'UkigjKnCyz'  
      DB_PASSWORD: '97mYna1ete'  

package:
  individually: true
  include:
    - utils/**     

  customDomain:
    domainName: 'example.dev.services'
    stage: ${self:provider.stage}
    basePath: 'web'
  splitStacks:
    perFunction: true
    perType: false
  apiGatewayCaching:
    enabled: true
    clusterSize: '0.5'
    ttlInSeconds: 60
    perKeyInvalidation:
      requireAuthorization: false # default is true
      handleUnauthorizedRequests: Fail # default is "IgnoreWithWarn
  contentEncoding:
    contentCompression: 1000    

functions:
  handlerUser:
    handler: user/handlers/handlerUser.handler
    timeout: 800
    events:
      - http:
          path: '/api/services/{version}/user/{type}/'
          method: GET
          cors:
            origin: "*"
            headers: ${self:custom.allowed-headers}
            allowCredentials: true
          private: false
          #authorizer: aws_iam
      - http:
          path: '/api/services/{version}/user/{type}/'
          method: POST
          cors:
            origin: "*"
            headers: ${self:custom.allowed-headers}
            allowCredentials: true
          private: false
          #authorizer: aws_iam
    package:
      include:
        - user/** 

  handlerTask:        
    handler: task/handlers/handlerTask.handler
    timeout: 800
    events:
      - http:
          path: '/api/services/{version}/task/'
          method: GET
          cors:
            origin: "*"
            headers: ${self:custom.allowed-headers}
            allowCredentials: true
          private: false
          #authorizer: aws_iam
      - http:
          path: '/api/services/{version}/task/{type}/'
          method: POST
          cors:
            origin: "*"
            headers: ${self:custom.allowed-headers}
            allowCredentials: true
          private: false
          #authorizer: aws_iam
      - http:
          path: '/api/services/{version}/task/{id}'
          method: GET
          cors:
            origin: "*"
            headers: ${self:custom.allowed-headers}
            allowCredentials: true
          private: false
          #authorizer: aws_iam  
      - http:
          path: '/api/services/{version}/task/{id}'
          method: PUT
          cors:
            origin: "*"
            headers: ${self:custom.allowed-headers}
            allowCredentials: true
          private: false
          #authorizer: aws_iam  
      - http:
          path: '/api/services/{version}/task/{id}'
          method: DELETE
          cors:
            origin: "*"
            headers: ${self:custom.allowed-headers}
            allowCredentials: true
          private: false
          #authorizer: aws_iam              
    package:
      include:
        - task/**  
        
  handlerMatrixIndex:        
    handler: matrizIndex/handlers/handlerMatrizIndex.handler
    timeout: 800
    events:
      - http:
          path: '/api/services/{version}/indexMatriz'
          method: POST
          cors:
            origin: "*"
            headers: ${self:custom.allowed-headers}
            allowCredentials: true
          private: false
          #authorizer: aws_iam
    package:
      include:
        - matrizIndex/**       
       
