service: rss-crawler

provider:
  name: aws
  runtime: python3.8
  profile: ${opt:profile}
  stage: ${opt:stage, dev}
  region: ap-northeast-1
  timeout: 30
  tracing:
    apiGateway: false
    lambda: true
  environment:
    AWS_ACCOUNT_ID: '#{AWS::AccountId}'
    # AWS_REGION_NAME: ''  # lambda runtime already reserved
    RSS_TABLE_NAME: ${self:service}-rss-table-${self:provider.stage}
    RSS_TABLE_GSI: idx_rss_source
    RSS_QUEUE_NAME: ${self:service}-rss-${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        # - "sqs:DeleteMessage"
      Resource: "arn:aws:sqs:*:#{AWS::AccountId}:${self:provider.environment.RSS_QUEUE_NAME}"
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - 'dynamodb:UpdateItem'
      Resource: 
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.RSS_TABLE_NAME}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.RSS_TABLE_NAME}/index/*"
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-pseudo-parameters

custom:
  pythonRequirements:
    usePipenv: true

# you can add packaging information here
package:
  # include:
  #   - include-me.py
  #   - include-me-dir/**
  exclude:
    - node_modulees/**

functions:
  TechEventsNotification:
    handler: rsscrawler.functions.eventnotifier.handler
    events:
      # キリの良い時間だと AWS 側が詰まる可能性があるのでずらす
      - schedule: cron(33 1 * * ? *)
  
  # Crawler
  RssCrawler:
    handler: rsscrawler.functions.crawler.handler
    events:
      - schedule: cron(3 0 * * ? *)
  
  RssConsumer:
    handler: rsscrawler.functions.consumer.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - FeedQueue
              - Arn

  # Notifier
  RssNotifier:
    handler: rsscrawler.functions.notify.handler
    events:
      - schedule: cron(3 1 * * ? *)

resources:
  Resources:
    RssTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RSS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: rss_id
            AttributeType: S
          - AttributeName: source_rss
            AttributeType: S
          - AttributeName: is_notified
            AttributeType: "N"
        KeySchema:
          - AttributeName: rss_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.RSS_TABLE_GSI}
            KeySchema:
              - AttributeName: is_notified
                KeyType: HASH
              - AttributeName: source_rss
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    FeedQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.RSS_QUEUE_NAME}
        # VisibilityTime must be greeter than lambda timeout
        VisibilityTimeout: 45
  Outputs:
    RssTableArn:
      Description: Table ARN
      Value: 
        Fn::GetAtt: [ RssTable, Arn ]
    FeedQueueArn:
      Description: Feed Queue
      Value: 
        Fn::GetAtt: FeedQueue.Arn