service: webapi 
plugins:
  - serverless-appsync-plugin

parameters:
  shouldcreatetable: "false"

provider:
  name: aws
  runtime: nodejs8.10
  apiname: 'corvid'
  region: 'us-east-1'

functions:
  hello:
    handler: handler.hello

custom:
  accountId: { Ref: AWS::AccountId }
  appSync:
    name: ${self:provider.apiname}
    region: ${self:provider.region}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: { Ref: AWS::Region }
      defaultAction: ALLOW
      userPoolId: "us-east-1_3Kv91pd2A" #{ Ref: UserPool }
    schema: schema.graphql # In case you want to change it
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: ProfileTableDS
        description: "DynamoDB Profile Table"
        config:
          tableName: "profile"
          serviceRoleArn: "arn:aws:iam::558796877616:role/corvid-appsync-dynamodb-role"
      - type: AMAZON_DYNAMODB
        name: EventsTableDS
        description: "DynamoDB Profile Table"
        config:
          tableName: "events"
          serviceRoleArn: "arn:aws:iam::558796877616:role/corvid-appsync-dynamodb-role"
    mappingTemplates:
      - dataSource: ProfileTableDS
        type: Mutation
        field: saveProfile
        request: "saveprofile-request.vtl"
        response: "common-response.vtl"
      - dataSource: ProfileTableDS
        type: Query
        field: getProfile
        request: "getprofile-request.vtl"
        response: "common-response.vtl"
      - dataSource: EventsTableDS
        type: Query
        field: getEvents
        request: "getevents-request.vtl"
        response: "common-response.vtl"  

resources:
  Resources:

    # ProfileTable:
    #   Type: "AWS::DynamoDB::Table"
    #   Description: "Data Store for AWS AppSync Profile Type"
    #   Properties:
    #     TableName: profile
    #     AttributeDefinitions:
    #       - AttributeName: "userid"
    #         AttributeType: "S"
    #     KeySchema:
    #       - AttributeName: "userid"
    #         KeyType: "HASH"
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5

    # EventsTable:
    #   Type: "AWS::DynamoDB::Table"
    #   Description: "Data Store for AWS AppSync event Type"
    #   Properties:
    #     TableName: events
    #     AttributeDefinitions:
    #       - AttributeName: "userid"
    #         AttributeType: "S"
    #       - AttributeName: "happend"
    #         AttributeType: "N"
    #     KeySchema:
    #       - AttributeName: "userid"
    #         KeyType: "HASH"
    #       - AttributeName: "happend"
    #         KeyType: "RANGE"
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5

    # IAM Policy to allow working with DynamoDB
    AppSyncDynamoDBPolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        Description: "Managed Policy to allow AWS AppSync to access tables in DynamoDB"
        Path: /appsync/
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - arn:aws:dynamodb:us-east-1:558796877616:table/*

    # IAM Role for implementing the AppSync / DynamoDB policy
    DynamoDBRole:
      Type: "AWS::IAM::Role"
      Description: "IAM Role for allowing AppSync to access DynamoDB"
      DependsOn:
        - AppSyncDynamoDBPolicy
      Properties:
        RoleName: ${self:provider.apiname}-appsync-dynamodb-role
        ManagedPolicyArns:
          - Ref: AppSyncDynamoDBPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - appsync.amazonaws.com        


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**                  