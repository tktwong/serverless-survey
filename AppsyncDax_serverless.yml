service:
  name: appsyncCacheLayer

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  timeout: 15
  vpc:
    securityGroupIds:
      - Fn::GetAtt: [DaxVpcSecurityGroup, GroupId]
    subnetIds:
      - Ref: daxSubnet1
      - Ref: daxSubnet2
  environment:
    POSTS_TABLE_NAME: ${self:custom.postsTable}
    DAX_ENDPOINT: { Fn::GetAtt: [DaxCluster, ClusterDiscoveryEndpoint] }
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dax:*"
      Resource: { Fn::GetAtt: [DaxCluster, Arn] }

plugins:
  - serverless-appsync-plugin
  - serverless-pseudo-parameters

custom:
  poolName: ${self:provider.stage}SimpleCMS
  dbName: "simpleCMS"
  ses:
    region: "us-east-1"
  daxIamRole: ${self:service.name}DaxIamRole
  postsTable: ${self:provider.stage}Posts
  systemUserEmail: "yi.ai@neami.app"
  daxClusterName: "myDynamodbDax"
  tableThroughput: 5
  appSync:
    region: ${self:provider.region}
    name: ${self:service.name}-${self:provider.stage}
    authenticationType: AWS_IAM
    serviceRole: "${self:service.name}-AppSyncServiceRole"
    userPoolConfig:
      awsRegion: "${self:provider.region}"
      userPoolId: ${self:service.name.${self:provider.stage}}
      defaultAction: ALLOW
    mappingTemplates:
      - type: Query
        field: getPosts
        request: Query-getPosts-request.vtl
        response: common-response.vtl
        kind: PIPELINE
        functions:
          - getPostsFromDax
          - getPostsFromDB
      - type: Mutation
        field: addPost
        request: Mutation-addPost-request.vtl
        response: common-response.vtl
        kind: PIPELINE
        functions:
          - addPostViaDax
          - addPostToDB
      - type: Mutation
        dataSource: AWSSES
        field: sendNotification
        request: Mutation-sendNotification-request.vtl
        response: Mutation-sendNotification-response.vtl
    functionConfigurations:
      - dataSource: LambdaSource
        name: "getPostsFromDax"
        request: "Function-getPostsFromDax-request.vtl"
        response: "Function-getPostsFromDax-response.vtl"
      - dataSource: Posts
        name: "getPostsFromDB"
        request: "Function-getPostsFromDB-request.vtl"
        response: "Function-getPostsFromDB-response.vtl"
      - dataSource: LambdaSource
        name: addPostViaDax
        request: Function-addPostViaDax-request.vtl
        response: common-response.vtl
      - dataSource: Posts
        name: addPostToDB
        request: "Function-addPostToDB-request.vtl"
        response: "common-response.vtl"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Posts
        description: "Posts table"
        config:
          tableName: ${self:custom.postsTable}
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      - type: HTTP
        name: AWSSES
        description: "send email"
        config:
          endpoint: "https://email.us-east-1.amazonaws.com/"
          authorizationConfig:
            authorizationType: "AWS_IAM"
            awsIamConfig:
              signingRegion: "us-east-1"
              signingServiceName: "ses"
          serviceRoleArn: { Fn::GetAtt: [AppSyncSESserviceRole, Arn] }
      - type: AWS_LAMBDA
        name: LambdaSource
        description: "Lambda DataSource"
        config:
          functionName: graphql
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
functions:
  graphql:
    handler: handler.graphqlHandler
resources:
  # appSync data source role
  - ${file(resources/appsync.yml)}
    # Cognito
  - ${file(resources/dynamodb.yml)}
    # Cognito
  - ${file(resources/cognito.yml)}
    # Dax
  - ${file(resources/dax.yml)}
