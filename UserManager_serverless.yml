service: user-manager-backend

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  profile: ben-main
  stage: ${opt:stage, 'dev'}
  stackTags:
    Application: user-manager-backend
  tags:
    Application: user-manager-backend

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.users-table-name}"

plugins:
  - aws-amplify-serverless-plugin
  - serverless-domain-manager
  - serverless-iopipe-layers

custom:
  customDomain:
    domainName: 'geotracker.api.cloud-master-team.com' # Change this to your domain.
    certificateArn: 'arn:aws:acm:eu-west-1:813860980995:certificate/d097cff5-7e0b-4c03-932e-db88b052bded'
    basePath: 'users' # This will be prefixed to all routes
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: regional
  users-table-name: ${self:service}-${self:provider.stage}
  users-bucket-name: ${self:service}-${self:provider.stage}
  iopipe:
    debug: true
    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYmJiZTkzOS1iMWZmLTRkNTQtOTU1Yy03MTY0MTEyN2IyNDgiLCJqdGkiOiI3OTNkMDY5NC01ZDNhLTQyYTYtODYxYS0xNjRhYmQ3N2E0NzkiLCJpYXQiOjE1NTYyODQ3MTUsImlzcyI6Imh0dHBzOi8vaW9waXBlLmNvbSIsImF1ZCI6Imh0dHBzOi8vaW9waXBlLmNvbSxodHRwczovL21ldHJpY3MtYXBpLmlvcGlwZS5jb20vZXZlbnQvLGh0dHBzOi8vZ3JhcGhxbC5pb3BpcGUuY29tIn0.KI3yAqOw-tM4by8z3sJbc7Tgnt8oQdLmgss1cAVdJnY
  admin-email: benjamin.ehlers@hardis.fr
  amplify:
    - filename: ./aws-exports.js
      type: javascript
      appClient: AppClient
      s3bucket: disabled

functions:
  users-api:
    name: ${self:service}-${self:provider.stage}-api
    handler: users-api.router
    timeout: 30
    memorySize: 128
    events:
      - http:
          path: 'v1/{proxy+}'
          method: any
          authorizer:
            name: users-authorizer
            resultTtlInSeconds: 30
            identitySource: method.request.header.Authorization
            type: token
    environment:
      TABLE_NAME: ${self:custom.users-table-name}

  users-authorizer:
    name: ${self:service}-${self:provider.stage}-authorizer
    handler: auth.handler
    timeout: 30
    memorySize: 128
    environment:
      TOKEN_ISSUER: 
        Fn::Join:
          - ''
          -
            - 'https://cognito-idp.'
            - ${self:provider.region}
            - '.amazonaws.com/'
            - !Ref CognitoUserPoolUserPool
      JWKS_URI: 
        Fn::Join:
          - ''
          -
            - 'https://cognito-idp.'
            - ${self:provider.region}
            - '.amazonaws.com/'
            - !Ref CognitoUserPoolUserPool
            - '/.well-known/jwks.json'
      PERMISSION_BUCKET_NAME: ${self:custom.users-bucket-name}
    role: UsersAuthorizerRole
  
  post-confirmation:
    DepensdOn: CognitoUserPoolUserPool
    name: ${self:service}-${self:provider.stage}-post-confirmation
    handler: postConfirmation.addUserToGroup
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: PostConfirmation
    role: PostConfirmationRole

# CloudFormation resource templates
resources:
  Resources:
    UsersBucket:
      Type: AWS::S3::Bucket
      Properties: 
        AccessControl: Private
        BucketName: ${self:custom.users-bucket-name}

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.users-table-name}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CognitoUserPoolUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        AdminCreateUserConfig: 
          AllowAdminCreateUserOnly: false
        UsernameAttributes: 
          - email
        UserPoolName: geotracker-${self:provider.stage}
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false

    UserPoolGroupAdmin:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: Admin
        GroupName: admin
        Precedence: 0
        UserPoolId: !Ref CognitoUserPoolUserPool

    UserPoolGroupUser:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: User
        GroupName: user
        Precedence: 1
        UserPoolId: !Ref CognitoUserPoolUserPool

    UserPoolUser:        
      Type: AWS::Cognito::UserPoolUser
      Properties:
        DesiredDeliveryMediums: 
          - EMAIL
        UserAttributes: 
          - Name: email
            Value: ${self:custom.admin-email}
        Username: ${self:custom.admin-email}
        UserPoolId: !Ref CognitoUserPoolUserPool

    # AdminUserToAdminGroup:  
    #   Type: AWS::Cognito::UserPoolUserToGroupAttachment
    #   Properties:
    #     GroupName: !Ref UserPoolGroupAdmin
    #     Username: !Ref UserPoolUser
    #     UserPoolId: !Ref UserPool

    AppClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
          ClientName: ${self:service}-${self:provider.stage}
          ExplicitAuthFlows:
            - USER_PASSWORD_AUTH
          GenerateSecret: false
          UserPoolId: !Ref CognitoUserPoolUserPool
          
    UsersAuthorizerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-authorizer
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action: # Gives permission to S3
                    - s3:GetObject
                  Resource: 
                    - arn:aws:s3:::${self:custom.users-bucket-name}/*
          
    PostConfirmationRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-post-confirmation
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-${self:provider.stage}-post-confirmation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action: # Gives permission to S3
                    - cognito-idp:AdminAddUserToGroup
                  Resource: 
                    Fn::Join:
                      - ''
                      -
                        - 'arn:aws:cognito-idp:'
                        - ${self:provider.region}
                        - ':'
                        - !Ref AWS::AccountId
                        - ':userpool/*'

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
  Outputs:
    CognitoUserPool:
      Description: "Cognito user pool Id"
      Value: !Ref CognitoUserPoolUserPool
      Export: 
        Name : 
          Fn::Join:
            - ''
            -
              - !Ref AWS::StackName
              - '-CognitoUserPool'
