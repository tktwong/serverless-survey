service: users-accounts
frameworkVersion: '>=1.28.0 <2.0.0'
provider:
  name: aws
  runtime: go1.x
  stage: dev 
  environment:
    IAM_TABLE_NAME: ${self:custom.iamTableName}
  iamRoleStatements: 
    - Effect: Allow 
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - ${self:custom.iamTableArn}
        - Fn::Join:
          - /
          - - ${self:custom.iamTableArn}
            - index/*
custom:
  iamTableName: ${self:service}-${self:provider.stage}-iam
  iamTableArn:
    Fn::Join:
    - ":"
    - - arn
      - aws
      - dynamodb
      - Ref: AWS::Region
      - Ref: AWS::AccountId
      - table/${self:custom.iamTableName}
package:
  exclude:
    - ./**
  include:
    - ./bin/**
functions:
  createAccount:
    handler: bin/createAccount
    events:
      - http:
          path: accounts
          method: post
    environment:
      IAM_TABLE_NAME: ${self:custom.iamTableName}
  getAllAccounts:
    handler: bin/getAllAccounts
    events:
      - http:
          path: accounts
          method: get
    environment:
      IAM_TABLE_NAME: ${self:custom.iamTableName} 
  getAccount:
    handler: bin/getAccount
    events:
      - http:
          path: accounts/{username}
          method: get
    environment:
      IAM_TABLE_NAME: ${self:custom.iamTableName}
resources:
  Resources: 
    iamTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.iamTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        AttributeDefinitions:
          - AttributeName: user_name
            AttributeType: S
        KeySchema:
          - AttributeName: user_name
            KeyType: HASH
