# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: minigoodeed

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-reqvalidator-plugin
  - serverless-dotenv-plugin
  - serverless-aws-documentation
provider:
  name: aws
  runtime: nodejs8.10
  profile: speechless
# you can overwrite defaults here
  stage: dev
  region: ${env:GOODEED_AWS_REGION}
  role: ${env:GOODEED_AWS_LAMBDA_ROLE}

custom:
  documentation:
    api:
      info:
        version: '1'
        title: 'Mini Goodeed API '
        contact:
          name: Marc sirisak
          email: marc.sirisak@gmail.com
        license:
          name: Private
    models: ${file(./documentation/requestsModels.yml)}

package:
  individually: true
  excludeDevDependencies: true
  exclude:
   - ".*/**"

functions:
  db:
    handler: functions/db/index.handler
    name: ${self:provider.stage}-db
    timeout: 10
    package:
      exclude:
        - functions/**
      include:
        - 'functions/db/**'
    environment:
      MONGO_URI: ${env:MONGO_URI}
      GOODEED_AWS_S3_BUCKET: ${env:GOODEED_AWS_S3_BUCKET}
      GOODEED_AWS_REGION: ${env:GOODEED_AWS_REGION}

  Project_GET:
    handler: functions/Project_GET/index.handler
    name: ${self:provider.stage}-Project_GET
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/Project_GET/**'
    events:
      - http:
          path: Project/
          method: get
          private: true
          cors: true
          documentation:
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": ProjectGETResp

  Association_GET:
    handler: functions/Association_GET/index.handler
    name: ${self:provider.stage}-Association_GET
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/Association_GET/**'
    events:
      - http:
          path: Association/
          method: get
          private: true
          cors: true
          documentation:
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": AssociationGETResp

  Association_GETById:
    handler: functions/Association_GETById/index.handler
    name: ${self:provider.stage}-Association_GETById
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/Association_GETById/**'
    events:
      - http:
          path: Association/{assosId}
          method: get
          private: true
          cors: true
          documentation:
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": AssociationGETResp

  Annonceur_GET:
    handler: functions/Annonceur_GET/index.handler
    name: ${self:provider.stage}-Annonceur_GET
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/Annonceur_GET/**'
    events:
      - http:
          path: Annonceur/
          method: get
          private: true
          cors: true
          documentation:
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": AnnonceurGETResp

  AdCampaign_GET:
    handler: functions/AdCampaign_GET/index.handler
    name: ${self:provider.stage}-AdCampaign_GET
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/AdCampaign_GET/**'
    events:
      - http:
          path: AdCampaign/
          method: get
          private: true
          cors: true
          documentation:
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": AdCampaignGETResp

  Donation_POST:
    handler: functions/Donation_POST/index.handler
    name: ${self:provider.stage}-Donation_POST
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/Donation_POST/**'
    events:
      - http:
          path: Donation/
          method: post
          authorizer: verify-token
          private: true
          cors: true
          documentation:
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": DonationRequest


  verify-token:
    handler: functions/Auth/Authorizer/index.auth
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/Auth/Authorizer/**'
    environment:
      MONGO_URI: ${env:MONGO_URI}
      JWT_SECRET: ${env:JWT_SECRET}

  login:
    handler: functions/Auth/AuthHandler/index.login
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/Auth/AuthHandler/**'
    environment:
      MONGO_URI: ${env:MONGO_URI}
      JWT_SECRET: ${env:JWT_SECRET}
    events:
      - http:
          path: login
          method: post
          cors: true

  register:
    handler: functions/Auth/AuthHandler/index.register
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/Auth/AuthHandler/**'
    environment:
      MONGO_URI: ${env:MONGO_URI}
      JWT_SECRET: ${env:JWT_SECRET}
    events:
      - http:
          path: register
          method: post
          cors: true