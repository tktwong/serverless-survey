# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: connect

package:
  excludeDevDependencies: false

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=1.0.1"


provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: dev
  role: arn:aws:iam::222322594734:role/lambda_basic_execution # Overwrite the default IAM role which is used for all functions
  tags: # Optional service wide function tags
      freefrom  : freefrom
      project   : connect


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
#  backend-freeform-submit:
#    handler: src/handler/freeform/backend/submit.handler
#    memorySize: 1024 # function specific
#    timeout: 30 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
#    logRetentionInDays: 14 # Set the default RetentionInDays for a CloudWatch LogGroup
#    description: Some text # The description of your function.
#    tags: # Function specific tags
#      type      : backend
##    Check the event documentation for details
#    events:
#      - sns: arn:aws:sns:eu-west-1:222322594734:freeform-submit-form #freeform-submit-form

#  test-graphql:
#    handler: src/handler/connect/graphql/index.handler

  test-angular:
    handler: src/handler/connect/angular-web/index.handler


  whatsapp-1dnevnik-send-or-input:
    handler: 'src/handler/1dnevnik/whatsapp/index.handler'

#  example:
#    handler: src/handler/example.base

#  frontend-freeform-index-point:
##    name: connect-freeform; #${self:provider.stage}-lambdaName # optional, Deployed Lambda name
##    description: My function # The description of your function.
##    runtime: nodejs8.10 # Used for this function
##    role: arn:aws:iam::222322594734:role/lambda_basic_execution # Overwrite the default IAM role which is used for this function
#    handler: src/handler/freeform/frontend.handler
#    memorySize: 1024 # function specific
#    timeout: 30 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
#    logRetentionInDays: 14 # Set the default RetentionInDays for a CloudWatch LogGroup
##    environment: # Function level environment variables
##        functionEnvVar: 12345678
#    description: Some text # The description of your function.
#    tags: # Function specific tags
#      type      : frontend

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: testCreate/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-plugin-typescript
  - serverless-mocha-plugin
#  - serverless-offline
#
#package:
#  exclude:
#  include:
#    - src/**/*
#    - src/handler/connect/angular-web/dist/server.js
