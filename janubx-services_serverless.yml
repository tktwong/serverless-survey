service: janubx-funds

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-python-requirements

package:
  exclude:
    - docs/**
    - local/**
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  stage: dev
  environment:
    BASE_URL: {"Fn::Join": ["", ["https://", {"Ref": "ApiGatewayRestApi"}, ".execute-api.${self:provider.region}.amazonaws.com/${opt:stage, self:provider.stage}"]]}
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-table
    SETUP_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-setup-bucket
    SERVICE_VERSION: v1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - "arn:aws:s3:::${self:provider.environment.SETUP_BUCKET}"
        - "arn:aws:s3:::${self:provider.environment.SETUP_BUCKET}/*"

functions:
  ping:
    handler: handler.ping
    events:
      - http:
          path: ping
          method: get
          cors: true
  populate-currencies-task:
    handler: apps.currencies.cron.populate_currencies
    events:
      - schedule: cron(5 6 1 * ? *)
  create-funds-service:
    handler: apps.funds.api.create_fund
    events:
      - http:
          path: funds
          method: post
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"
            template: $input.json('$.body')

resources:
  Resources:
    FundsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    FundsSetupS3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.SETUP_BUCKET}

Outputs:
  ServiceUrl:
    Description: Url for fund services
    Value:
      'Fn::GetAtt': [apiGateway, Url]
    Export:
      Name: ${self:provider}:${opt:stage, self:provider.stage}:${self:service}-ServiceUrl