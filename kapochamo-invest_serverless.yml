
service: kapochamo-invest
package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  environment:
    SELLER_QUEUE_NAME: ${self:provider.stage}-trader-queue
    TOPIC_EMAIL_NAME: EmailNotification
    NEWS_TRIGGER_DB_NAME: ${self:provider.stage}-news-trigger-db
    NEWS_TRIGGER_DB_PK: key
    SYMBOL_DB_NAME: symbol-dynamo
    SYMBOL_DB_PK: symbol
    TRANSACTION_DB_NAME: transaction
    TRANSACTION_DB_PK: orderId
    TRANSACTION_DB_SK: transactTime
    PUBLISHING_DB_NAME: publishing
    PUBLISHING_DB_PK: url
    PUBLISHING_DB_SK: timestamp

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - lambda:InvokeFunction
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - sns:CreateTopic
        - sns:Publish
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - sqs:GetQueueAttributes
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource:
        - !GetAtt TradingQueue.Arn
        - !GetAtt TradingQueueDLQ.Arn
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
      Resource:
        - !GetAtt NewsTrigger.Arn
        - !GetAtt SymbolDb.Arn
        - !GetAtt TransactionDb.Arn
        - !GetAtt PublishingDb.Arn
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource:
        - !Sub "arn:aws:s3:::${self:provider.environment.SYMBOL_DB_NAME}/*"
        - !Sub "arn:aws:s3:::${self:provider.environment.SYMBOL_DB_NAME}"


custom:
  logRetentionInDays: 3
  # apiGatewayCaching:
  #   enabled: true
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'npm' # Packager that will be used to package your external modules
  prune:
    automatic: true
    number: 5 # Number of versions to keep


functions:
  ApiView:
    handler: src/api/view/handler.default
    events:
      - http:
          path: view
          method: get
  ApiDashboard:
    handler: src/api/dashboard/handler.default
    events:
      - http:
          path: dashboard
          method: get
          # caching:
          #   enabled: true
          #   ttlInSeconds: 120
  PopulateSymbols:
    handler: src/functions/populateSymbols.default
    description: Populate symbols in dynamo database
    events:
      - schedule: rate(1 day)
  WatcherBinance:
    handler: src/functions/watcher/handler.default
    description: Watch Binance news and trigger trader if needed
    events:
      - http: GET watcher
  Seller:
    handler: src/functions/seller/handler.default
    description: Buy and sell a symbol on Binance
    timeout: 900 # 15 minutes
    events:
      - sqs:
          arn: !GetAtt TradingQueue.Arn
          batchSize: 1

resources:
  Resources:
    # SNS
    EmailNotification:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Email Notification
        TopicName: ${self:provider.environment.TOPIC_EMAIL_NAME}
        Subscription:
          - Protocol: email
            Endpoint: rulliere.francois+kapochamo@gmail.com
          - Protocol: email
            Endpoint: paul_gaymard+kapochamo@hotmail.fr


    # Queues
    TradingQueue:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 0
        MessageRetentionPeriod: 345600 # 4 days
        QueueName: ${self:provider.environment.SELLER_QUEUE_NAME}
        ReceiveMessageWaitTimeSeconds: 0
        VisibilityTimeout: 900
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt TradingQueueDLQ.Arn
          maxReceiveCount: 1
      DependsOn:
        - TradingQueueDLQ
    TradingQueueDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.SELLER_QUEUE_NAME}-DLQ
        MessageRetentionPeriod: 1209600 # 14 days

    # Databases
    NewsTrigger:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.NEWS_TRIGGER_DB_NAME}
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.NEWS_TRIGGER_DB_PK}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:provider.environment.NEWS_TRIGGER_DB_PK}
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    SymbolDb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SYMBOL_DB_NAME}
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.SYMBOL_DB_PK}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:provider.environment.SYMBOL_DB_PK}
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    TransactionDb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TRANSACTION_DB_NAME}
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.TRANSACTION_DB_PK}
            AttributeType: S
          - AttributeName: ${self:provider.environment.TRANSACTION_DB_SK}
            AttributeType: N
        KeySchema:
          - AttributeName: ${self:provider.environment.TRANSACTION_DB_PK}
            KeyType: HASH
          - AttributeName: ${self:provider.environment.TRANSACTION_DB_SK}
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    PublishingDb:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PUBLISHING_DB_NAME}
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.PUBLISHING_DB_PK}
            AttributeType: S
          - AttributeName: ${self:provider.environment.PUBLISHING_DB_SK}
            AttributeType: N
        KeySchema:
          - AttributeName: ${self:provider.environment.PUBLISHING_DB_PK}
            KeyType: HASH
          - AttributeName: ${self:provider.environment.PUBLISHING_DB_SK}
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5


plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-prune-plugin
  # - serverless-api-gateway-caching
  - serverless-plugin-log-retention
