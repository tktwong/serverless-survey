#
# This file is part of the ONEMA onema Package.
# For the full copyright and license information,
# please view the LICENSE file that was distributed
# with this source code.
#
# copyright (c) 2018, Juan Manuel Torres (http://onema.io)
#
# @author Juan Manuel Torres <kinojman@gmail.com>
#
service: microb

provider:
  name: aws
  runtime: java8
  profile: ${opt:profile, 'default'}
  timeout: 30
  versionFunctions: false
  memorySize: 512

# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - Fn::GetAtt: [ DynamoDBTable, Arn ]
        - Fn::Join: ["/", [ Fn::GetAtt: [DynamoDBTable, Arn], "index", "*"]]
        - Fn::GetAtt: [ CorsDynamoDBTable, Arn ]
        - Fn::Join: ["/", [ Fn::GetAtt: [CorsDynamoDBTable, Arn], "index", "*"]]

# you can define service wide environment variables here
  environment:
    STAGE_NAME: ${self:custom.stageName}
    SNS_ERROR_TOPIC: "arn:aws:sns:*:*:${self:custom.stageName}-error-topic"
    DYNAMOTABLE_NAME:
      Ref: TableName
    CORS_DYNAMOTABLE_NAME:
      Ref: CorsTableName

# Custom values. These can be referenced in the Cloud Formation template
custom:
  stageName: ${opt:stage, self:provider.stage}

# you can add packaging information here
# Make sure to run "sbt assembly" to create a jar file
# with all your dependencies and put that jar file name here.
package:
  artifact: target/scala-2.12/app.jar

functions:

  # functions
  list-microb:
    handler: onema.microb.list.Function::lambdaHandler
    events:
      - http:
          path: items
          method: get
          cors: true

  get-microb:
    handler: onema.microb.get.Function::lambdaHandler
    events:
      - http:
          path: items/{id}
          method: get
          cors: true

  create-microb:
    handler: onema.microb.create.Function::lambdaHandler
    events:
      - http:
          path: items
          method: post
          cors: true

  update-microb:
    handler: onema.microb.update.Function::lambdaHandler
    events:
      - http:
          path: items/{id}
          method: put
          cors: true

  delete-microb:
    handler: onema.microb.delete.Function::lambdaHandler
    events:
      - http:
          path: items/{id}
          method: delete
          cors: true
resources:
  Parameters: ${file(infrastructure/microb-table_cfn.yml):Parameters}
  Resources:
    DynamoDBTable: ${file(infrastructure/microb-table_cfn.yml):Resources.DynamoDBTable}
    CorsDynamoDBTable: ${file(infrastructure/microb-table_cfn.yml):Resources.CorsDynamoDBTable}

    WebsiteBucket: ${file(infrastructure/static-website_cfn.yml):Resources.WebsiteBucket}
    WebsiteBucketPolicy: ${file(infrastructure/static-website_cfn.yml):Resources.WebsiteBucketPolicy}
    S3Role: ${file(infrastructure/static-website_cfn.yml):Resources.S3Role}
