# NOTE: update this with your service name
service: chat-messages-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /messages
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: chatmessages
          method: post
          cors: true
          # authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /messages/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: chatmessages/{id}
          method: get
          cors: true
          # authorizer: aws_iam

  list:
  # Defines an HTTP API endpoint that calls the main function in list.js 
  # filtered by room
  # - path: url path is /messages 
  # - method: GET request
    handler: list.main
    events:
      - http:
          path: chatmessages
          method: get
          cors: true
          # authorizer: aws_iam

  all:
  # Defines an HTTP API endpoint that calls the main function in list.js 
  # table scan not filtered
  # - path: url path is /messages/all
  # - method: GET request
    handler: list-all.main
    events:
      - http:
          path: chatmessages/all
          method: get
          cors: true
          # authorizer: aws_iam

  update:
  # Defines an HTTP API endpoint that calls the main function in update.js
  # - path: url path is /messages/{id}
  # - method: PUT request
    handler: update.main
    events:
      - http:
          #path: chatmessages/{id}
          path: chatmessages/update
          method: put
          cors: true
          # authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /messages/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: chatmessages/{id}
          method: delete
          cors: true
          # authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}





