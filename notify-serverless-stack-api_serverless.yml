service: notes-api

# Ensure that Serverless Framework is packaging our functions individually for optimized performance
package:
    individually: true

plugins:
    # Package our functions with Webpack
    - serverless-bundle
    - serverless-offline
    # Load .env as environment variables
    - serverless-dotenv-plugin

custom:
    # `stage` is based on what is passed in when running `serverless`
    # commands [serverless deploy --stage $STAGE]. Or falls back to what we have set in the provider section.
    stage: ${opt:stage, self:provider.stage}
    # Name of the SST app that's deploying our infrastructure
    sstApp: ${self:custom.stage}-notify-infra

provider:
    name: aws
    runtime: nodejs12.x
    stage: dev
    region: us-east-1

    # These environment variables are made available to our functions
    # under process.env.
    environment:
        stripeSecretKey: ${env:STRIPE_SECRET_KEY}
        tableName: !ImportValue '${self:custom.sstApp}-TableName'

    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
          # Restrict our IAM role permissions to
          # the specific table for the stage
          Resource:
              - !ImportValue '${self:custom.sstApp}-TableArn'

functions:
    # Defines an HTTP API endpoint that calls the main function in create.js
    create:
        handler: create.main
        events:
            - http:
                  # - path: url path is /notes
                  path: notes
                  # - method: POST request
                  method: post
                  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
                  # - domain api call
                  cors: true
                  # - authorizer: authenticate using the AWS IAM role
                  authorizer: aws_iam
    # Defined an HTTP API endpoint that calls the main function in get.js
    get:
        handler: get.main
        events:
            - http:
                  # path: url path is /notes/{id}
                  path: notes/{id}
                  method: get
                  cors: true
                  authorizer: aws_iam
    # Defined an HTTP API endpoint that calls the main function in list.js
    list:
        handler: list.main
        events:
            - http:
                  # path: url path is /notes/{id}
                  path: notes
                  method: get
                  cors: true
                  authorizer: aws_iam
    # Defined an HTTP API endpoint that calls the main function in update.js
    update:
        handler: update.main
        events:
            - http:
                  # path: url path is /notes/{id}
                  path: notes/{id}
                  method: put
                  cors: true
                  authorizer: aws_iam
    # Defined an HTTP API endpoint that calls the main function in update.js
    delete:
        handler: delete.main
        events:
            - http:
                  # path: url path is /notes/{id}
                  path: notes/{id}
                  method: delete
                  cors: true
                  authorizer: aws_iam
    # Defined an HTTP API endpoint that calls the main function in billing.js
    billing:
        handler: billing.main
        events:
            - http:
                  # path: url path is /notes/{id}
                  path: billing
                  method: post
                  cors: true
                  authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
    # API Gateway Errors
    - ${file(resources/api-gateway-errors.yml)}
    # Cognito Identity Pool Policy
    - ${file(resources/cognito-policy.yml)}
