service: mnphoto-api-2

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table names here so we can use it while testing locally
  albumsTableName: ${self:custom.stage}-albums

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    category: ${env:CATEGORY}
    albumsTableName: ${self:custom.albumsTableName}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ AlbumsTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /albums
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create-album:
    handler: album/create.main
    events:
      - http:
          path: albums
          method: post
          cors: true
          authorizer: aws_iam
  get-album:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /albums/{id}
    # - method: GET request
    handler: album/get.main
    events:
      - http:
          path: albums/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list-album:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /albums
    # - method: GET request
    handler: album/list.main
    events:
      - http:
          path: albums
          method: get
          cors: true
          authorizer: aws_iam
  update-album:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /albums/{id}
    # - method: PUT request
    handler: album/update.main
    events:
      - http:
          path: albums/{id}
          method: put
          request:
            parameters:
              querystrings:
                foo: true
          cors: true
          authorizer: aws_iam
  delete-album:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /albums/{id}
    # - method: DELETE request
    handler: album/delete.main
    events:
      - http:
          path: albums/{id}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-tables.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}