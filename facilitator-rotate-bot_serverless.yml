service: facilitator-bot
frameworkVersion: "=1.21.1"

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage}
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: '*'
    - Action:
        - dynamodb:GetItem
        - dynamodb:GetRecords
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.ddb_candidates_table}
      Effect: Allow
custom:
  dev:
    ddb_candidates_table: ${env:ddb_candidates_table}
  stg:
    ddb_candidates_table: facilitator-bot-candidates

package:
  artifact: target/scala-2.12/facilitator_bot.jar

functions:
  remind_facilitator:
    handler: facilitator_bot.CronHandler
    events:
      - schedule: cron(25 1 ? * MON-FRI *)
        enabled: true
  skip_command:
    handler: facilitator_bot.CommandHandler
    events:
    - http: POST skip
resources:
  Resources:
    CandidateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.${self:provider.stage}.ddb_candidates_table}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        SSESpecification:
          SSEEnabled: true
plugins:
  - serverless-pseudo-parameters