# cd serverless-apis
# serverless deploy --aws-profile tanmay
service: placement-socket

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  #profile: tanmay
  environment:
    DYNAMODB_TABLE: 'PlacementSocketStudents'
    DYNAMODB_TABLE_COMPANY: 'PlacementSocketCompanies'
    DYNAMODB_TABLE_REGISTER_LOGS: 'PlacementSocketRegisterLogs'
    DYNAMODB_TABLE_FEEDS: 'PlacementSocketFeeds'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      # Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
      Resource: "*"

    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"

functions:
  createUser:
    handler: src/user.create
    events:
      - http:
          path: createUser
          method: post
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  getUser:
    handler: src/user.get
    events:
      - http:
          path: getUser/{id}
          method: get
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  updateUser:
    handler: src/user.update
    events:
      - http:
          path: updateUser/{id}
          method: post
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  createCompany:
      handler: src/company.create
      events:
        - http:
            path: createCompany
            method: post
            cors: true
      layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}
            
  getCompany:
    handler: src/company.get
    events:
      - http:
          path: getCompany/{id}
          method: get
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  updateCompany:
    handler: src/company.update
    events:
      - http:
          path: updateCompany/{id}
          method: post
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  loginUser:
    handler: src/loginUser.login
    events:
      - http:
          path: loginUser
          method: post
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  registerForCompany:
    handler: src/registerLogs.create
    events:
      - http:
          path: registerForCompany
          method: post
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  getRegisterLogs:
    handler: src/registerLogs.get
    events:
      - http:
          path: getRegisterLogs/{id}
          method: get
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  createFeed:
    handler: src/feed.create
    events:
      - http:
          path: createFeed
          method: post
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  getFeed:
    handler: src/feed.get
    events:
      - http:
          path: getFeed/{id}
          method: get
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}

  updateFeeds:
    handler: src/feedsUpdate.update
    events:
      - http:
          path: updateFeeds/{id}
          method: post
          cors: true
    layers:
      - ${cf:placement-socket-nodejs-layer-dev.PlacementSocketNodejsExport}


resources:
  Resources:

    PlacementSocketDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    PlacementSocketCompaniesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_COMPANY}
    PlacementSocketRegisterLogsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_REGISTER_LOGS}
    PlacementSocketFeedsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_FEEDS}

package:
  exclude:
    - ./**
  include:
    - ./src/**
