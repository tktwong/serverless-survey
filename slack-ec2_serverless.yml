service: slack-ec2

provider:
  name: aws
  runtime: nodejs6.10
  region: ${self:custom.config.${self:provider.stage}.provider.region}
  stage: ${opt:stage, self:custom.defaultStage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:*"
      Resource: "*"

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
    packager: 'npm'
  defaultStage: dev
  config:
    dev: ${file(./config/dev.yml)}
    prd: ${file(./config/prd.yml)}

functions:
  events:
    handler: src/handler.events
    environment:
      REGION: ${self:provider.region}
      AUTH_TOKEN: ${self:custom.config.${self:provider.stage}.slack.authToken}
      VERIFICATION_TOKEN: ${self:custom.config.${self:provider.stage}.slack.verificationToken}
      FORCE_INSTANCE: ${self:custom.config.${self:provider.stage}.app.forceInstance}
      STARTING_MESSAGES: ${self:custom.config.${self:provider.stage}.app.startingMessages}
      STOPPING_MESSAGES: ${self:custom.config.${self:provider.stage}.app.stoppingMessages}
    events:
      - http:
          path: events
          method: post
  scheduled:
    handler: src/handler.scheduled
    environment:
      REGION: ${self:provider.region}
      AUTH_TOKEN: ${self:custom.config.${self:provider.stage}.slack.authToken}
      VERIFICATION_TOKEN: ${self:custom.config.${self:provider.stage}.slack.verificationToken}
      FORCE_INSTANCE: ${self:custom.config.${self:provider.stage}.app.forceInstance}
      STARTING_MESSAGES: ${self:custom.config.${self:provider.stage}.app.startingMessages}
      STOPPING_MESSAGES: ${self:custom.config.${self:provider.stage}.app.stoppingMessages}
      SCHEDULED_INSTANCE: ${self:custom.config.${self:provider.stage}.app.scheduledInstance}
      SCHEDULED_MESSAGE_CHANNEL: ${self:custom.config.${self:provider.stage}.app.scheduledMessageChannel}
    events:
      - schedule: cron(0 16 * * ? *)

plugins:
  - serverless-webpack
