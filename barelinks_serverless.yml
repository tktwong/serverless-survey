service: barelinks-api-service
# app and org for use with dashboard.serverless.com
# app: barelinks
org: tdehollain

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  environment:
    # BARELINKS_TABLE: ${self:app}-${self:provider.stage}
    BARELINKS_TABLE: barelinks-${self:provider.stage}
    STAGE: ${self:provider.stage}
  # IAM statements
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::GetAtt': ['BarelinksTable', 'Arn']
        - arn:aws:dynamodb:eu-west-1:072129581133:table/barelinks-temp
        - arn:aws:dynamodb:eu-west-1:072129581133:table/barelinks-production

custom:
  auth0audience:
    dev: https://3u2so4i6m0.execute-api.eu-west-1.amazonaws.com/dev
    production: https://tjhe8rann5.execute-api.eu-west-1.amazonaws.com/production

functions:
  getLinks:
    handler: functions/getLinks.handler
    timeout: 30
    memorySize: 256
    events:
      - http:
          path: /link
          method: GET
          authorizer: barelinks-authorizer
          cors: true
  putLink:
    handler: functions/putLink.handler
    timeout: 30
    memorySize: 256
    events:
      - http:
          path: /link
          method: put
          authorizer: barelinks-authorizer
          cors: true
  deleteLink:
    handler: functions/deleteLink.handler
    timeout: 30
    memorySize: 256
    events:
      - http:
          path: /link
          method: DELETE
          authorizer: barelinks-authorizer
          cors: true
  getLinksByTag:
    handler: functions/getLinksByTag.handler
    timeout: 30
    memorySize: 256
    events:
      - http:
          path: /linksbytag
          method: GET
          authorizer: barelinks-authorizer
          cors: true
  getLinksBySearchTerm:
    handler: functions/getLinksBySearchTerm.handler
    timeout: 30
    memorySize: 256
    events:
      - http:
          path: /linksbysearchterm
          method: GET
          authorizer: barelinks-authorizer
          cors: true
  getTags:
    handler: functions/getTags.handler
    timeout: 30
    memorySize: 256
    events:
      - http:
          path: /tags
          method: GET
          authorizer: barelinks-authorizer
          cors: true
  updateLink:
    handler: functions/updateLink.handler
    timeout: 30
    memorySize: 256
    events:
      - http:
          path: /link/tag
          method: POST
          authorizer: barelinks-authorizer
          cors: true
  barelinks-authorizer:
    handler: auth/index.handler
    environment:
      TOKEN_ISSUER: https://barelinks.auth0.com/
      JWKS_URI: https://barelinks.auth0.com/.well-known/jwks.json
      AUDIENCE: ${self:custom.auth0audience.${self:provider.stage}}
    cors: true
  copyData:
    handler: functions/copyData.handler
    timeout: 300
    memorySize: 512

resources:
  Resources:
    BarelinksTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: linkId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: linkId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BARELINKS_TABLE}

    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
