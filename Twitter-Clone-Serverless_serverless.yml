service:
  name: serverless-post-app
## ------------------------- Plugins ---------------------------------## 
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
## ------------------------ Provider ---------------------------------##
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true
  
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    ATTACHMENTS_TABLE: Attachments-${self:provider.stage}
    ATTACHMENTS_S3_BUCKET: serverlessfinalproject-snehal-4-${self:provider.stage}
    AUTH_0_SECRET: SZIJu_M9fMlTlLOzFWMUIKV1Hzj3lU5erfrcTIAQvnZLPoDTdCj2LFfZEgWHhaU3
    USERID_INDEX: UserIdIndex
  
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:PutItem
  #       - dynamodb:GetItem
  #       - dynamodb:DeleteItem
  #       - dynamodb:Scan
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:PutItem
  #       - dynamodb:Query
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATTACHMENTS_TABLE} 
  #   - Effect: Allow
  #     Action:
  #       - s3:PutObject
  #       - s3:GetObject
  #     Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USERID_INDEX}
## ------------------------------- Models ------------------------------------ ##      
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: post API
        description: serverless app
    models:
      - name: PostRequest
        contentType: application/json
        schema: ${file(models/create-post-request.json)}
      - name: UpdatePostRequest
        contentType: application/json
        schema: ${file(models/update-post-request.json)}

## -------------------------------- Functions --------------------------------- ##
functions:
 ## Auth
  RS256Auth:
    handler: src/lambda/auth/rs256Auth0Authorizer.handler
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  ## Get post
  GetPosts:
    handler: src/lambda/http/getPosts.handler
    events:
      - http:
          method: get
          path: posts
          cors: true
          authorizer: RS256Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USERID_INDEX}      
  ## Create post
  CreatePost:
    handler: src/lambda/http/createPost.handler
    events:
      - http:
          method: post
          path: posts
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new post
            description: Create a new post
            requestModels:
              'application/json': PostRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE} 
      - Effect: Allow
        Action:
          - s3:GetSignedUrl
        Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*"       
  ## Update post
  UpdatePost:
    handler: src/lambda/http/updatePost.handler
    events:
      - http:
          method: patch
          path: posts/{postId}
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing post
            description: Update an existing post
            requestModels:
              'application/json': UpdatePostRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}      

  ## Delete post
  DeletePost:
    handler: src/lambda/http/deletePost.handler
    events:
      - http:
          method: delete
          path: posts/{postId}
          cors: true
          authorizer: RS256Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}      
  
  ## Generate upload url
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: posts/{postId}/attachment
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:           
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*              
  ## send notifications
  SendUploadNotifications:
    handler: src/lambda/s3/sendNotifications.handler    
## ---------------------------------- Resources ------------------------------------- ##
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    # Getposts table
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S  
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: postId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL    
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
    ## Validator
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    ## Attachments table
    AttachmentsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: attachmentId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ATTACHMENTS_TABLE}
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        NotificationConfiguration:
          LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt SendUploadNotificationsLambdaFunction.Arn
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    SendUploadNotificationsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref SendUploadNotificationsLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment. ATTACHMENTS_S3_BUCKET} 

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket        