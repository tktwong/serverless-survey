service: slsnuxt

frameworkVersion: ">=1.39.0"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.PARAMS.NODE_ENV}
  region: ap-northeast-1
  logRetentionInDays: 7
  apiKeys:
    - name: ${self:custom.PARAMS.NODE_ENV}-slsnuxt-apiKey
      value: ${self:custom.PARAMS.API_KEY}
  environment:
    NODE_ENV: ${self:custom.PARAMS.NODE_ENV}

functions:
  app:
    handler: server/lambda.handler
    timeout: 30
    memorySize: 512
    environment:
      NODE_ENV: ${self:custom.PARAMS.NODE_ENV}
    events:
      - http:
          path: '/'
          method: any
          private: true
      - http:
          path: '/{proxy+}'
          method: any
          private: true

package:
  excludeDevDependencies: true
  exclude:
    - .**
    - aws/**
    - client/**
    - README.md
    - package.json
    - jsconfig.json
    - yarn.lock
    # 不要なモジュールを除外
    - node_modules/.cache/**
    - node_modules/@babel/**
    - node_modules/@types/**
    - node_modules/@types**/**
    - node_modules/@nuxtjs/eslint/**
    - node_modules/@nuxtjs/eslint**/**
    - node_modules/aws-sdk/**
    - node_modules/babel**/**
    - node_modules/browserify**/**
    - node_modules/eslint/**
    - node_modules/eslint**/**
    - node_modules/postcss/**
    - node_modules/postcss**/**
    - node_modules/prettier/**
    - node_modules/webpack/**
    - node_modules/webpack**/**

plugins:
  - serverless-apigw-binary
  - serverless-prune-plugin
  - serverless-s3-sync
  - serverless-offline

custom:
  PARAMS: ${file(aws/sls-params.js)}
  lambdaFunctionAssociations:
    true:
      - EventType: viewer-request
        LambdaFunctionARN: ${self:custom.PARAMS.LAMBDA_ARN}
    false:
      - []
  apigwBinary:
    types:
      - '*/*'
  prune:
    automatic: true
    number: 3
  serverless-offline:
    port: 4000
  s3Sync:
    - bucketName: ${self:custom.PARAMS.S3_BUCKET_NAME}
      acl: public-read
      bucketPrefix: "static"
      localDir: "client/static"
    # - bucketName: ${self:custom.PARAMS.S3_BUCKET_NAME}
    #   acl: public-read
    #   bucketPrefix: '_nuxt/images'
    #   localDir: '.nuxt/dist/client/images'

# CloudFormation
resources:
  Resources:
    # ------
    # S3: 静的ファイル用のS3バケット
    # ------
    StaticS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        Tags:
          - Key: Domain
            Value: ${self:custom.PARAMS.DOMAIN}
        BucketName: ${self:custom.PARAMS.S3_BUCKET_NAME}
        AccessControl: Private

    # ------
    # S3: 静的ファイル用のS3バケットポリシー
    # ------
    StaticS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticS3Bucket
        PolicyDocument:
          Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - " "
                  - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                    - Ref: CFOriginAccessIdentity
            Resource: "arn:aws:s3:::${self:custom.PARAMS.S3_BUCKET_NAME}/*"

    # ------
    #  Cloud Front AccessIdentity: 静的ファイル用のIdentity
    # ------
    CFOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment:
            Ref: AWS::StackName

  # 出力値
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi # APIGWのID (Serverlessの仕様)
      Export:
        Name: ${self:custom.PARAMS.NODE_ENV}-slsnuxt-apiId
    ApiGatewayApiKey:
      Value: ${self:custom.PARAMS.API_KEY}
      Export:
        Name: ${self:custom.PARAMS.NODE_ENV}-slsnuxt-apiKey
    CFOriginAccessIdentity:
      Value:
        Ref: CFOriginAccessIdentity
      Export:
        Name: ${self:custom.PARAMS.NODE_ENV}-slsnuxt-cfOAI
    StaticS3BucketDomainName:
      Value:
        Fn::GetAtt: [StaticS3Bucket, DomainName]
      Export:
        Name: ${self:custom.PARAMS.NODE_ENV}-slsnuxt-s3dn


