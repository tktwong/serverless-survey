# NOTE: update this with your service name
service: project-management-api2

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: eu-west-2
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.cmd
  #
  #environment: ${file(env.yml):${self:provider.stage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:us-east-1:*:*"

functions:
  createUser:
    handler: createUser.main
    events:
      - http:
          path: createUser
          method: post
          cors: true
          authorizer: aws_iam
  getUserSkills:
    handler: getUserSkills.main
    events:
      - http:
          path: getUserSkills/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getAllUsers:
    handler: getAllUsers.main
    events:
      - http:
          path: getAllUsers
          method: get
          cors: true
          authorizer: aws_iam
  getUserName:
    handler: getUserName.main
    events:
      - http:
          path: getUserName/{id}
          method: get
          authorizer: aws_iam
  getDevelopers:
    handler: getDevelopers.main
    events:
      - http:
          path: getDevelopers
          method: get
          authorizer: aws_iam
  getProjectManagers:
    handler: getProjectManagers.main
    events:
      - http:
          path: getProjectManagers
          method: get
          authorizer: aws_iam        
  updateUserProjects:
    handler: updateUserProjects.main
    events:
      - http:
          path: updateUserProjects
          method: put
          cors: true
          authorizer: aws_iam
  createProject:
    handler: createProject.main
    events:
      - http:
          path: createProject
          method: post
          cors: true
          authorizer: aws_iam
  getProject:
    handler: getProject.main
    events:
      - http:
          path: getProject/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getProjectsUser:
    handler: getProjectsUser.main
    events:
      - http:
          path: getProjectsUser/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updateProject:
    handler: updateProject.main
    events:
      - http:
          path: updateProject
          method: put
          cors: true
          authorizer: aws_iam
        createProject:
  createProject2:        
    handler: createProject2.main
    events:
      - http:
          path: createProject2
          method: post
          cors: true
          authorizer: aws_iam
  deleteProject:
    handler: deleteProject.main
    events:
      - http:
          path: deleteProject/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  updateUserSkills:
    handler: updateUserSkills.main
    events:
      - http:
          path: updateUserSkills
          method: put
          cors: true
          authorizer: aws_iam
  getProjectsManager:
    handler: getProjectsManager.main
    events:
      - http:
          path: getProjectsManager/{id}
          method: get
          cors: true
          authorizer: aws_iam
  adminAddUserToGroupOnSignup:
    handler: adminAddUserToGroupOnSignup.main
    events:
      - http:
          path: adminAddUserToGroupOnSignup
          method: post
          cors: true
          authorizer: aws_iam
  adminAddUserToGroup:
    handler: adminAddUserToGroup.main
    events:
      - http:
          path: adminAddUserToGroup
          method: post
          cors: true
          authorizer: aws_iam
  admimRemoveUserFromGroup:
    handler: adminRemoveUserFromGroup.main
    events:
      - http:
          path: adminRemoveUserFromGroup
          method: post
          cors: true
          authorizer: aws_iam
  getUsersInGroupDevelopers:
    handler: getUsersInGroupDevelopers.main
    events:
      - http:
          path: getUsersInGroupDevelopers
          method: get
          cors: true
          authorizer: aws_iam
  getUsersInGroupManagers:
    handler: getUsersInGroupManagers.main
    events:
      - http:
          path: getUsersInGroupManagers
          method: get
          cors: true
          authorizer: aws_iam


  
