service: wojtek-httpapisdemo3

provider:
    name: aws
    region: eu-central-1
    runtime: go1.x
    httpApi:
        cors: true
        authorizers:
            CognitoJWTAuthorizer:
                identitySource: $request.header.Authorization
                issuerUrl: !Join ["", ["https://cognito-idp.", "${self:provider.region}", ".amazonaws.com/", !Ref UserPool]]
                audience:
                    - !Ref UserPoolClient
package:
    excludeDevDependencies: false

custom:
    CALLBACK_URLS: [http://localhost:3000]
    LOGOUT_URLS: [http://localhost:3000]
    GOOGLE_IDP_CLIENT_SECRET: ${env:GOOGLE_IDP_CLIENT_SECRET}
    GOOGLE_IDP_CLIENT_ID: ${env:GOOGLE_IDP_CLIENT_ID}
    BUCKET_NAME: ${self:service}-${self:provider.stage}-images
    HTTP_API_ROOT_URL: !Join ["", ["https://", !Ref HttpApi, ".execute-api.", "${self:provider.region}", ".amazonaws.com"]]
    
    dotenv:
        include:
            - disabled
    
    go:
        baseDir: ./backend
        
    output:
        handler: scripts/output.handler
        file: frontend/config/config.json

plugins:
    - serverless-go-plugin
    - serverless-dotenv-plugin
    - serverless-stack-output
    - serverless-iam-roles-per-function


functions:
    uploadURL:
        handler: ./functions/upload-url
        environment:
            BUCKET_NAME: ${self:custom.BUCKET_NAME}
        # so that user can actually upload stuff to the bucket
        iamRoleStatementsName: ${self:service}-upload-url-role
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - s3:PutObject
              Resource:
                  - !GetAtt ImagesBucket.Arn
                  - !Join ["", [!GetAtt ImagesBucket.Arn, "/*"]]
        events:
            - httpApi:
                  method: GET
                  path: /presigned
                  authorizer:
                      name: CognitoJWTAuthorizer
                  scopes:
                      - email
                      - profile

resources:
    Resources:
        UserPool:
            Type: AWS::Cognito::UserPool
            Properties:
                UserPoolName: ${self:service}-user-pool
                AutoVerifiedAttributes:
                    - email
                UsernameAttributes:
                    - email
                Schema:
                    - AttributeDataType: String
                      Name: email
                      Required: false
                      

        GoogleIdentityProvider:
            Type: AWS::Cognito::UserPoolIdentityProvider
            Properties:
                UserPoolId: !Ref UserPool
                ProviderName: "Google"
                ProviderDetails:
                    client_id: ${env:GOOGLE_IDP_CLIENT_ID}
                    client_secret: ${env:GOOGLE_IDP_CLIENT_SECRET}
                    authorize_scopes: "profile email openid"
                ProviderType: "Google"
                AttributeMapping:
                    email: "email"

        UserPoolClient:
            Type: AWS::Cognito::UserPoolClient
            DependsOn:
                - GoogleIdentityProvider
            Properties:
                UserPoolId: !Ref UserPool
                ClientName: ${self:service}-user-pool-client
                GenerateSecret: false
                SupportedIdentityProviders:
                    - COGNITO
                    - Google
                CallbackURLs: ${self:custom.CALLBACK_URLS}
                LogoutURLs: ${self:custom.LOGOUT_URLS}
                AllowedOAuthFlowsUserPoolClient: true
                AllowedOAuthFlows:
                    - code
                    - implicit # for postman
                # These tell an application what the application is allowed to know about you
                AllowedOAuthScopes:
                    - email
                    - openid
                    - profile

        UserPoolDomain:
            Type: AWS::Cognito::UserPoolDomain
            Properties:
                Domain: ${self:service}-user-pool-domain
                UserPoolId: !Ref UserPool
                
        ImagesBucket:
            Type: AWS::S3::Bucket
            DeletionPolicy: Delete
            Properties:
                BucketName: ${self:custom.BUCKET_NAME}
                CorsConfiguration:
                    CorsRules:
                        - AllowedHeaders:
                              - "*"
                          AllowedMethods:
                              - "GET"
                              - "PUT"
                          AllowedOrigins:
                              - "*"
                          MaxAge: 3600

    Outputs:
        AWSRegion:
            Value: ${self:provider.region}
        CognitoUserPoolId:
            Value: !Ref UserPool
        CognitoUserPoolWebClientId:
            Value: !Ref UserPoolClient
        CognitoDomain:
            Value: !Join ["", [!Ref UserPoolDomain, ".auth.eu-central-1.amazoncognito.com"]]
        CognitoScope:
            # Should be split into an array when consumed by amplify on frontend
            Value: "email, profile, openid"
        CognitoRedirectSignIn:
            Value: !Select [0, "${self:custom.CALLBACK_URLS}"]
        CognitoRedirectSignOut:
            Value: !Select [0, "${self:custom.LOGOUT_URLS}"]
        CognitoOAuthResponseType:
            Value: "token"
        SignedURLLambdaEndpoint:
            Value: !Join ["", ["${self:custom.HTTP_API_ROOT_URL}", "/presigned"]]
