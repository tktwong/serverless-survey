AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: aws-sns-sqs serverless stack

Parameters:
  Environment:
    Type: String
  Service:
    Type: String

Globals:
  Function:
    Runtime: nodejs8.10
    Timeout: 600
    Handler: index.handler
    MemorySize: 512

Resources:

  # Event
  EventLauncherRule01:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Trigger PollerLambda'
      ScheduleExpression: 'rate(1 minute)'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt EventLauncher.Arn
          Id: event-launcher-rule-01
          Input: |
            {
              "frequency": 1
            }

  EventLauncherRule10:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Trigger PollerLambda'
      ScheduleExpression: 'rate(10 minutes)'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt EventLauncher.Arn
          Id: event-launcher-rule-10
          Input: |
            {
              "frequency": 10
            }

  PermissionForEventToInvokeLambda01:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EventLauncher
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventLauncherRule01.Arn

  PermissionForEventToInvokeLambda10:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EventLauncher
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventLauncherRule10.Arn

  EventSender:
    Description: Sends configs to SNS
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Service}-snsSender
      CodeUri: ../src/snsSender
      Description: Polls and sends to SNS
      Policies:
        - AWSLambdaRole
        - SNSPublishMessagePolicy:
            TopicName:
              Fn::ImportValue: EventsSNSTopicName
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          NUMBER_TO_POLL: '50'
          EVENTS_TOPIC_ARN:
            Fn::ImportValue: EventsSNSArn

  EventLauncher:
    Description: Launches Lambda/s based on config from DynamoDB
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Service}-launcher
      CodeUri: ../src/snsSenderLauncher
      Description: Launches sns sender for enabled resources
      Policies:
        - AWSLambdaRole
        - DynamoDBReadPolicy:
            TableName:
              Fn::ImportValue: ResourceConfig
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          POLL_LAMBDA_ARN: !GetAtt EventSender.Arn
          CONFIG_TABLE_NAME:
            Fn::ImportValue: ResourceConfig

  EventSenderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Service}-snsSender

  EventLauncherLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Service}-launcher

