# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: burger-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  state: dev
  region: us-east-1
  runtime: python3.7

layers:
  CallFunction:
    compatibleRuntimes:
      - python3.7
    package:
      artifact: functions/CallFunction/CallFunction.zip

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  GenericDao:
    handler: lambda_function.lambda_handler
    timeout: 30
    rumtime: python3.7
    memorySize: 128
    environment:
      DATA_TABLE: !Ref DataTable
    role:
      Fn::GetAtt:
        - LambdaTestEntitesDBInvokeRole
        - Arn
    package:
      artifact: functions/GenericDao/GenericDao.zip

  ListIngredients:
    handler: lambda_function.lambda_handler
    timeout: 30
    rumtime: python3.7
    memorySize: 128
    package:
      artifact: functions/Ingredient/ListIngredients/ListIngredients.zip
    events:
      - http:
          path: "/ingredients"
          method: get
          cors: true
          integration: lambda

  ListOrders:
    handler: lambda_function.lambda_handler
    timeout: 30
    rumtime: python3.7
    memorySize: 128
    role:
      Fn::GetAtt:
        - LambdaTestEntitesDBInvokeRole
        - Arn
    layers:
      - {Ref: CallFunctionLambdaLayer}
    package:
      artifact: functions/Order/ListOrders/ListOrders.zip
    events:
      - http:
          path: "/orders"
          method: get
          cors: true
          integration: lambda

  CreateOrder:
    handler: lambda_function.lambda_handler
    timeout: 30
    rumtime: python3.7
    memorySize: 128
    role:
      Fn::GetAtt:
        - LambdaTestEntitesDBInvokeRole
        - Arn
    package:
      artifact: functions/Order/CreateOrder/CreateOrder.zip
    layers:
      - {Ref: CallFunctionLambdaLayer}
    events:
      - http:
          path: "/orders"
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{"body": $input.json(''$'')}'

  DeleteOrder:
    handler: lambda_function.lambda_handler
    timeout: 30
    rumtime: python3.7
    memorySize: 128
    role:
      Fn::GetAtt:
        - LambdaTestEntitesDBInvokeRole
        - Arn
    package:
      artifact: functions/Order/DeleteOrder/DeleteOrder.zip
    layers:
      - {Ref: CallFunctionLambdaLayer}
    events:
      - http:
          path: "/orders/{order_id}"
          method: delete
          cors: true
          integration: lambda
          request:
            paths:
              order_id: true
            template:
              application/json: '{"order_id": "$input.params(''order_id'')"}'


package:
  individually: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
   LambdaTestEntitesDBInvokeRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "LambdaDynamoDBPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "cloudwatch:*"
                    - "logs:*"
                    - "events:*"
                    - "lambda:*"
                    - "dynamodb:*"
                  Resource: "*"

   DataTable:
     Type: AWS::DynamoDB::Table
     Properties:
       AttributeDefinitions:
       - AttributeName: id
         AttributeType: S
       - AttributeName: sort_key
         AttributeType: S
       KeySchema:
       - AttributeName: id
         KeyType: HASH
       TableName: burger_table
       ProvisionedThroughput:
         ReadCapacityUnits:  '1'
         WriteCapacityUnits:  '1'
       GlobalSecondaryIndexes:
       - IndexName: EntityIndex
         KeySchema:
         - AttributeName: sort_key
           KeyType: HASH
         - AttributeName: id
           KeyType: RANGE
         Projection:
           ProjectionType: ALL
         ProvisionedThroughput:
           ReadCapacityUnits: '1'
           WriteCapacityUnits: '1'
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
