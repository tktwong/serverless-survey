
service: serdropbox 

provider:
  name: aws
  runtime: nodejs6.10

  stage: dev
  region: us-east-2

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-2:*:*"

    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "*"  


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  filestrack:
    handler: handler.filestrack
    events:
      - http:
          path: filestrack-endpoint
          method: GET
  postprocess:
    handler: handler.postprocess
    events:
      - s3:
          bucket: dropbox-bucket1
          event: s3:ObjectCreated:*
      - s3:
          bucket: dropbox-bucket1
          event: s3:ObjectRemoved:*    
  
      
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    DropboxBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: dropbox-bucket

    DropboxFileTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: dropbox-file-table1
        AttributeDefinitions:
          - AttributeName: fileName
            AttributeType: S
          
        KeySchema:
          - AttributeName: fileName
            KeyType: HASH
        
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
         
