service: aahawley-testapp

frameworkVersion: ">=1.8.0 <2.0.0"

provider:
  name: aws
  runtime: java8
  memorySize: 512
  environment:
    HANDS_TABLE_NAME:
      Ref: handsTable
    PLAYERS_TABLE_NAME:
      Ref: playersTable
    TABLES_TABLE_NAME:
      Ref: tablesTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        "Fn::Join":
          - ""
          -
            - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: handsTable
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        "Fn::Join":
          - ""
          -
            - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: playersTable
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        "Fn::Join":
          - ""
          -
            - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: tablesTable

package:
  artifact: bj21-lambda/target/bj21-lambda-0.1.0-SNAPSHOT-bin.jar

functions:
  addTable:
    handler: org.ninthfloor.bj21.lambda.v0.AddTable
    events:
      - http:
          path: /v0/tables
          method: post
  getTableById:
    handler: org.ninthfloor.bj21.lambda.v0.GetTableById
    events:
      - http:
          path: /v0/tables/{tableId}
          method: get
          parameters:
            paths:
              tableId: true
  updateTable:
    handler: org.ninthfloor.bj21.lambda.v0.UpdateTable
    events:
      - http:
          path: /v0/tables/{tableId}
          method: put
          parameters:
            paths:
              tableId: true
  deleteTable:
    handler: org.ninthfloor.bj21.lambda.v0.DeleteTable
    events:
      - http:
          path: /v0/tables/{tableId}
          method: delete
          parameters:
            paths:
              tableId: true
  addPlayer:
    handler: org.ninthfloor.bj21.lambda.v0.AddPlayer
    events:
      - http:
          path: /v0/tables/{tableId}/players
          method: post
          parameters:
            paths:
              tableId: true
  findPlayersByTable:
    handler: org.ninthfloor.bj21.lambda.v0.FindPlayersByTable
    events:
      - http:
          path: /v0/tables/{tableId}/players
          method: get
  getPlayerBySeat:
    handler: org.ninthfloor.bj21.lambda.v0.GetPlayerBySeat
    events:
      - http:
          path: /v0/tables/{tableId}/players/{seatId}
          method: get
          parameters:
            paths:
              tableId: true
              seatId: true
  updatePlayer:
    handler: org.ninthfloor.bj21.lambda.v0.UpdatePlayer
    events:
      - http:
          path: /v0/tables/{tableId}/players/{seatId}
          method: put
          parameters:
            paths:
              tableId: true
              seatId: true
  deletePlayer:
    handler: org.ninthfloor.bj21.lambda.v0.DeletePlayer
    events:
      - http:
          path: /v0/tables/{tableId}/players/{seatId}
          method: delete
          parameters:
            paths:
              tableId: true
              seatId: true
  addHand:
    handler: org.ninthfloor.bj21.lambda.v0.AddHand
    events:
      - http:
          path: /v0/tables/{tableId}/players/{seatId}/hands
          method: post
          parameters:
            paths:
              tableId: true
              seatId: true
  findHandsByHand:
    handler: org.ninthfloor.bj21.lambda.v0.FindHandsByHand
    events:
      - http:
          path: /v0/tables/{tableId}/players
          method: get
  getHandById:
    handler: org.ninthfloor.bj21.lambda.v0.GetHandById
    events:
      - http:
          path: /v0/tables/{tableId}/players/{seatId}/hands/{handId}
          method: get
          parameters:
            paths:
              tableId: true
              seatId: true
              handId: true
  updateHand:
    handler: org.ninthfloor.bj21.lambda.v0.UpdateHand
    events:
      - http:
          path: /v0/tables/{tableId}/players/{seatId}/hands/{handId}
          method: put
          parameters:
            paths:
              tableId: true
              seatId: true
              handId: true
  deleteHand:
    handler: org.ninthfloor.bj21.lambda.v0.DeleteHand
    events:
      - http:
          path: /v0/tables/{tableId}/players/{seatId}/hands/{handId}
          method: delete
          parameters:
            paths:
              tableId: true
              seatId: true
              handId: true
  addDealer:
    handler: org.ninthfloor.bj21.lambda.v0.AddDealer
    events:
      - http:
          path: /v0/tables/{tableId}/dealer
          method: post
          parameters:
            paths:
              tableId: true
          integration: mock
          request:
            template:
              application/json: '{"statusCode": 501}'
          response:
            template: $input.path('$')
            statusCodes:
              501:
                pattern: ''
  findDealerByTable:
    handler: org.ninthfloor.bj21.lambda.v0.FindDealerByTable
    events:
      - http:
          path: /v0/tables/{tableId}/dealer
          method: get
          parameters:
            paths:
              tableId: true
          integration: mock
          request:
            template:
              application/json: '{"statusCode": 501"}'
          response:
            template: $input.path('$')
            statusCodes:
              501:
                pattern: ''
  updateDealer:
    handler: org.ninthfloor.bj21.lambda.v0.UpdateDealer
    events:
      - http:
          path: /v0/tables/{tableId}/dealer
          method: put
          parameters:
            paths:
              tableId: true
          integration: mock
          request:
            template:
              application/json: '{"statusCode": 501"}'
          response:
            template: $input.path('$')
            statusCodes:
              501:
                pattern: ''
  deleteDealer:
    handler: org.ninthfloor.bj21.lambda.v0.DeleteDealer
    events:
      - http:
          path: /v0/tables/{tableId}/dealer
          method: delete
          parameters:
            paths:
              tableId: true
          integration: mock
          request:
            template:
              application/json: '{"statusCode": 501}'
          response:
            template: $input.path('$')
            statusCodes:
              501:
                pattern: ''
  addRules:
    handler: org.ninthfloor.bj21.lambda.v0.AddRules
    events:
      - http:
          path: /v0/tables/{tableId}/rules
          method: post
          parameters:
            paths:
              tableId: true
          integration: mock
          request:
            template:
              application/json: '{"statusCode": 501}'
          response:
            template: $input.path('$')
            statusCodes:
              501:
                pattern: ''
  findRulesByTable:
    handler: org.ninthfloor.bj21.lambda.v0.FindRulesByTable
    events:
      - http:
          path: /v0/tables/{tableId}/rules
          method: get
          parameters:
            paths:
              tableId: true
          integration: mock
          request:
            template:
              application/json: '{"statusCode": 501"}'
          response:
            template: $input.path('$')
            statusCodes:
              501:
                pattern: ''
  updateRules:
    handler: org.ninthfloor.bj21.lambda.v0.UpdateRules
    events:
      - http:
          path: /v0/tables/{tableId}/rules
          method: put
          parameters:
            paths:
              tableId: true
          integration: mock
          request:
            template:
              application/json: '{"statusCode": 501"}'
          response:
            template: $input.path('$')
            statusCodes:
              501:
                pattern: ''
  deleteRules:
    handler: org.ninthfloor.bj21.lambda.v0.DeleteRules
    events:
      - http:
          path: /v0/tables/{tableId}/rules
          method: delete
          parameters:
            paths:
              tableId: true
          integration: mock
          request:
            template:
              application/json: '{"statusCode": 501}'
          response:
            template: $input.path('$')
            statusCodes:
              501:
                pattern: ''
  notFound:
    handler: org.ninthfloor.bj21.lambda.v0.NotFound
    events:
      - http:
          path: /{proxy+}
          method: any

resources:
  Resources:
    handsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    playersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    tablesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
