# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: practicerepo-stack
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-2
  stage: dev

plugins:
  - serverless-iam-roles-per-function

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: jsLambda/handler.hello
    events:
      - http:
          path: hello
          method: post
  
  ddbPractice:
    handler: jsLambda/ddbFunction.send_and_receive_from_ddb
    events:
      - http:
          path: ddb
          method: post
          cors: true
    iamRoleStatementsName: "${self:service}-${self:provider.stage}-access-db-role"
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem    
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-table"
  
  s3Practice:
    handler: jsLambda/s3Function.receive_image_s3
    events:
      - http:
          path: s3
          method: post
          cors: true
    iamRoleStatementsName: "${self:service}-${self:provider.stage}-access-s3-for-image-role"
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - "s3:*"
        Resource:
          Fn::Join:
            - ""
            - - 'arn:aws:s3:::'
              - Ref: pracS3
              - '/*'
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
resources: # CloudFormation template syntax from here on.
  Resources:
    pracTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:service}-${self:provider.stage}-table"
        AttributeDefinitions:
          - AttributeName: inputText
            AttributeType: S
          - AttributeName: inputTime
            AttributeType: S
        KeySchema:
          - AttributeName: inputText
            KeyType: HASH
          - AttributeName: inputTime
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    3PracTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:service}-${self:provider.stage}-3Practable"
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: Time
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: Time
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    pracS3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:service}-${self:provider.stage}-image-bucket"
    
    3Repository:
      Type: AWS::ECR::Repository
      Properties:
        RepositoryName: "${self:service}-${self:provider.stage}-3repository"

    3BatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - batch.amazonaws.com
              Action:
                  - 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'

    3BatchInstaceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
    
    3BatchInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - !Ref 3BatchInstaceRole
        InstanceProfileName: "${self:service}-${self:provider.stage}-3instanceprofile"
    
    3Environment:
      Type: AWS::Batch::ComputeEnvironment
      Properties:
        ComputeEnvironmentName: "${self:service}-${self:provider.stage}-3-environmnet"
        ServiceRole: !Ref 3BatchRole
        Type: "UNMANAGED"
        ComputeResources:
          InstanceRole: !Ref 3BatchInstanceProfile
          InstanceTypes:
            - "t2.small"
          MaxvCpus: 4
          MinvCpus: 1
          Subnets:
            - subnet-63ac0018
          Type: SPOT
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
