# NOTE: update this with your service name
service: ${self:custom.SubdomainName}-${self:custom.ServiceName}-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  ServiceName: "price-estimation"
  StageName: ${opt:stage}
  StageNameCert: ${opt:stageCert}
  SubdomainName: "spacenow"
  FirstAttributeName: "priceEstimationId"
  # Set the table name here so we can use it while testing locally
  TableName: ${self:custom.StageName}-${self:custom.ServiceName}
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  TableThroughputs:
    nonprod: 1
    prod: 1
    default: 1
  TableThroughput: ${self:custom.TableThroughputs.${self:custom.StageName}, self:custom.TableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  domains:
    default: api-${self:custom.ServiceName}.${self:custom.StageName}.cloud.spacenow.com
    prod: api-${self:custom.ServiceName}.spacenow.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.StageName}, self:custom.domains.default}
    basePath: ''
    stage: ${self:custom.StageName}
    certificateArn: ${ssm:/${self:custom.StageNameCert}/ACM_CERTIFICATE}
    createRoute53Record: true
    endpointType: 'regional'

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.StageName}
  region: ${opt:region, 'ap-southeast-2'}
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.TableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ DynamoTable, Arn ]

functions:
  get:
    handler: core/get.main
    events:
      - http:
          path: price-estimation/{suburb}/{state}
          method: get
          cors: true
          # authorizer: aws_iam
  list:
    handler: core/list.main
    events:
      - http:
          path: price-estimation/list
          method: get
          cors: true
          # authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}