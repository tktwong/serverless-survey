service: stock-alerts

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    IOT_TOPIC: /${self:service}-${opt:stage, self:provider.stage}/alert
    IOT_ENDPOINT: a1kq7r55rfrhuj.iot.us-east-1.amazonaws.com
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: "Allow"
      Action:
        - 'iot:DescribeEndpoint'
        - "iot:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - 'sts:AssumeRole'
      Resource: "*"    

plugins:
  - serverless-finch

custom:
  client:
    bucketName: tradehalts.dharnitski.com

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  upload:
    handler: parser/upload/handler.handler
    events:
      - schedule: rate(1 minute)

  results:
    handler: parser/results/handler.handler
    events:
     - http:
         path: halts/list
         method: get
         cors: true

  auth:
    handler: parser/auth/handler.handler
    events:
      - http: GET iot/keys
    timeout: 10


resources:
  Resources:
    
    AlertsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "haltDate"
            AttributeType: "S"
          - 
            AttributeName: "sort"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "haltDate"
            KeyType: HASH
          - 
            AttributeName: "sort"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    ClientRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: stock-alerts-client
        Path: /
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement: 
            - 
              Effect: Allow
              Action: 
                - sts:AssumeRole
              Principal: 
                AWS: 
                  - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:iam:'
                        - Ref: 'AWS::AccountId'
                        - 'root'
        Policies: 
          - 
            PolicyName: "stock-alerts-client-iot"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - 
                  Effect: "Allow"
                  Action: 
                    - iot:Connect
                    - iot:Subscribe
                    - iot:Publish
                    - iot:Receive
                  Resource: "*"