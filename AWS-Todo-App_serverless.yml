service:
  name: capstone-doc-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    DOCS_TABLE: docs_table-${self:provider.stage}
    S3_BUCKET: doc-s3-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

#DOC: add custom configuration
custom:
  
  serverless-iam-roles-per-function:
    defaultInherit: true
  
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Docs 
        description: Nanodegree cloud developer project
    models:
      - name: CreateDoc
        contentType: application/json
        schema: ${file(models/create-doc-model.json)}
      - name: UpdateDoc
        contentType: application/json
        schema: ${file(models/update-doc-model.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # DOC: Configure this function
  GetDocs:
    handler: src/lambda/http/getDocs.handler
    events:
      - http:
          method: get
          path: docs
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}


  # DOC: Configure this function
  CreateDoc:
    handler: src/lambda/http/createDoc.handler
    events:
      - http:
          method: post
          path: docs
          cors: true
          authorizer: Auth
          reqValidatorName: RequestValidator
          documentation:
            requestModels:
              'application/json': CreateDoc
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}


  # DOC: Configure this function
  UpdateDoc:
    handler: src/lambda/http/updateDoc.handler
    events:
      - http:
          method: patch
          path: docs/{docId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestValidator
          documentation:
            requestModels:
              'application/json': UpdateDoc
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}

  # DOC: Configure this function
  DeleteDoc:
    handler: src/lambda/http/deleteDoc.handler
    events:
      - http:
          method: delete
          path: docs/{docId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}

  # DOC: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: docs/{docId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: GenerateUploadUrl-Role       
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DOCS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*  


resources:
  Resources:
    # DOC: Add api gateway resourses
    Gateway:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    # DOC: Add validator resourses
    RequestValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    # DOC: Add any necessary AWS resources
    DocsDyanmoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: docId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: docId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DOCS_TABLE} 
    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentBucket