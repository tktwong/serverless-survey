service:
  name: miner-stats

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-offline-scheduler
  - serverless-offline-sns
  - serverless-kms-secrets
  # - serverless-domain-manager

custom:
  common:
    dataUpdaterTopic: miner-stats-data-update-${self:provider.stage}
    dataUpdaterArn: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.common.dataUpdaterTopic}
  stage:
    local:
      sentryDSN: N/A
      snsEndpoint: http://localhost:${self:custom.serverless-offline-sns.port}
      scraperRate: rate(1 minute)
      corsOrigin: '*'
    dev:
      sentryDSN: N/A
      snsEndpoint: N/A
      scraperRate: rate(5 minutes)
      corsOrigin: '*'
  serverless-offline:
    location: ${opt:location, ''} # Fix serverless-offline-sns + Webpack.
  serverless-offline-sns:
    port: 4002
    debug: false
  serverless-kms-secrets:
    secretsFile: src/config/kms-secrets.${self:provider.stage}.yml
  kmsSecrets: ${file(${self:custom.serverless-kms-secrets.secretsFile})}

provider:
  name: aws
  runtime: nodejs6.10
  profile: default
  stage: ${opt:stage, 'local'}
  region: eu-west-1
  memorySize: 128
  timeout: 5
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - sns:Publish
      Resource: ${self:custom.common.dataUpdaterArn}
    - Effect: Allow
      Action:
      - KMS:Decrypt
      Resource: ${self:custom.kmsSecrets.keyArn}
  environment:
    REGION: ${self:provider.region}
    DATA_UPDATE_SNS_ARN: ${self:custom.common.dataUpdaterArn}
    SECRETS_FILE: ${self:custom.serverless-kms-secrets.secretsFile}
    FIREBASE_DATABASE_URL: https://miner-stats-${self:provider.stage}.firebaseio.com/
    SENTRY_DSN: ${self:custom.stage.${self:provider.stage}.sentryDSN}
    SERVERLESS_STAGE_NAME: ${self:provider.stage}
    SNS_ENDPOINT: ${self:custom.stage.${self:provider.stage}.snsEndpoint}
    CORS_ORIGIN: ${self:custom.stage.${self:provider.stage}.corsOrigin}

package:
  individually: true

functions:
  nicehashPayingScraper:
    handler: src/scraping/nicehash-paying-scraper.handler
    events:
      - schedule:
          rate: ${self:custom.stage.${self:provider.stage}.scraperRate}

  ahashpoolStatusScraper:
    handler: src/scraping/ahashpool-status-scraper.handler
    events:
      - schedule:
          rate: ${self:custom.stage.${self:provider.stage}.scraperRate}

  miningpoolhubStatsScraper:
    handler: src/scraping/miningpoolhub-stats-scraper.handler
    events:
      - schedule:
          rate: ${self:custom.stage.${self:provider.stage}.scraperRate}

  nanopoolApproximatedEarningsScraper:
    handler: src/scraping/nanopool-approximated-earning-scraper.handler
    events:
      - schedule:
          rate: ${self:custom.stage.${self:provider.stage}.scraperRate}

  dataUpdater:
    handler: src/data-updater/data-updater.handler
    events:
      - sns:
          arn: ${self:provider.environment.DATA_UPDATE_SNS_ARN}

  balanceEndpoint:
    handler: src/balance-endpoint/index.handler
    timeout: 10
    events:
      - http:
          path: balance/{pool}/{currency}
          cors: true
          method: get
          request:
            parameters:
              paths:
                pool: true
                currency: true

# See common overrides for defaults here:
# https://serverless.com/framework/docs/providers/aws/guide/resources/
resources:
  Resources:
    PriceEventTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.common.dataUpdaterTopic}

    AhashpoolStatusScraperLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 1

    MiningpoolhubStatsScraperLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 1

    NicehashPayingScraperLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 1

    NanopoolApproximatedEarningsScraperLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 1

    DataUpdaterLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 1

    BalanceEndpointLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 1
