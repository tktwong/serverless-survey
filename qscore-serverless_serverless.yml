service: qscore

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true
  excludeDevDependencies: false

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:*"
    - Effect: Allow
      Action:
        - cognito-idp:adminGetUser
        - cognito-idp:adminCreateUser
        - cognito-idp:adminAddUserToGroup
        - cognito-idp:adminSetUserPassword
      Resource: "arn:aws:cognito-idp:${opt:region, self:provider.region}:*:*"
  environment:
    GEOFENCE_EVENTS_TABLE_NAME: ${self:custom.geofenceEventsTableName}
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    MAIN_TABLE: ${self:custom.mainTableName}
    FIREBASE_DATABASE_URL: ${self:custom.secrets.FIREBASE_DATABASE_URL}
    SECRET_KEY: ${self:custom.secrets.SECRET_KEY}
    REDIS_HOST:
      "Fn::GetAtt": [ElasticacheCluster, RedisEndpoint.Address]

functions:
  graphql:
    handler: src/graphql/handler.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer:
            name: firebaseAuthorizer
      - http:
          path: graphql
          method: get
          cors: true
    vpc:
      securityGroupIds:
        - "Fn::GetAtt": SecurityGroup.GroupId
      subnetIds:
        - Ref: PrivateSubnetA

  firebaseAuthorizer:
    handler: src/auth/firebaseAuthorizer.handler
    cors: true

custom:
  secrets: ${file(./environment.json)}
  accountId: { Ref: AWS::AccountId }
  stage: ${opt:stage, self:provider.stage}
  geofenceEventsTableName: ${self:custom.stage}-GeofenceEvents
  usersTableName: ${self:custom.stage}-UsersTable
  mainTableName: ${self:custom.stage}-MainTable
  webpackIncludeModules: true
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    includeModules:
      forceExclude:
        - aws-sdk
  serverless-offline:
    useChildProcesses: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain: #name of seed
        sources:
          - table: ${self:custom.mainTableName}
            sources: [./test/seed/usersV2.json]

resources:
  Resources:
    MainTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.mainTableName}
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GS1PK
            AttributeType: S
          - AttributeName: GS1SK
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GS1
            KeySchema:
              - AttributeName: GS1PK
                KeyType: HASH
              - AttributeName: GS1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    PrivateSubnetA:
      DependsOn: VPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: VPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.1.0/24"
    ElasticacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "Cache Subnet Group"
        SubnetIds:
          - Ref: PrivateSubnetA
    SecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: VPC
    StorageSecurityGroup:
      DependsOn: VPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Redis Cluster
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '6379'
            ToPort: '6379'
            SourceSecurityGroupId:
              Ref: SecurityGroup
    ElasticacheCluster:
      DependsOn: StorageSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        AutoMinorVersionUpgrade: true
        Engine: redis
        CacheNodeType: cache.t2.micro
        NumCacheNodes: 1
        VpcSecurityGroupIds:
          - "Fn::GetAtt": StorageSecurityGroup.GroupId
        CacheSubnetGroupName:
          Ref: ElasticacheSubnetGroup
  
