# serverless.yml
service: ryanproject

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-central-1
  stage: ${opt:stage, "development"}

  environment:
    AQUARIUM_TABLE: ${self:provider.stage}-aquariumTable


  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.AQUARIUM_TABLE}"

#lambdas 
functions: 
  getTemperature:
    handler: source/getTemperature.handler
    events:
      - http:
          path: getTemperature/{aquariumId}
          method: post
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:eu-central-1:893617306237:userpool/eu-central-1_riYRWIf8j
            claims:
              - email

  getAquaFlag:
    handler: source/getAquaFlag.handler
    events:
      - http:
          path: getAquaFlag/{aquariumId}
          method: get
          cors: true
          authorizer: aws_iam


  getAllFlags:
    handler: source/getAllFlags.handler
    events:
      - http:
          path: getAllFlags/{aquariumId}
          method: get
          cors: true
          authorizer: aws_iam


#dynamos
resources:
  Resources:
    activeTournamentKeys:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AQUARIUM_TABLE}
        AttributeDefinitions:
          - AttributeName: aquariumId
            AttributeType: S
        KeySchema:
          - AttributeName: aquariumId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ApiGatewayAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        Name: nwx-authorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: 
          Ref: ApiGatewayRestApi
        ProviderARNs: 
          - Fn::GetAtt:
              - UserPool
              - Arn

    UserPool:
      Type: AWS::Cognito::UserPool