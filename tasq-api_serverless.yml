service: tasq-api # Must be the same name as your git repository
plugins:
  - ArtifactDirectoryNamePrefix
  - serverless-latest-layer-version
  # - serverless-python-requirements

custom:
  artifactDirectoryNamePrefix: ${{self:service}}
  pythonRequirements:
    dockerizePip: non-linux
  # scripts:
  #   hooks:
  #     'deploy:finalize': sls invoke -f UploadInitialFiles --stage=${{self:provider.stage}}


provider:
  name: aws
  stackName: "${{self:service}}-${{self:provider.stage}}"
  deploymentBucket:
    name: serverless-bucket-main
    serverSideEncryption: AES256
  runtime: python3.7
  region: us-east-2
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._@\\'\",\\-\\/\\(\\)]+?)}}"
  stage: ${{opt:stage, 'dev'}}
  containerTag: ${{opt:containerTag, dev}}
  versionFunctions: false
  logRetentionInDays: 14
  stackTags:
    Environment: ${{self:provider.stage}}
    VersionTag: ${{opt:versiontag,'v0.0-0-000000'}}
  tags:
    Environment: ${{self:provider.stage}}
    VersionTag: ${{opt:versiontag,'v0.0-0-000000'}}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "*"
      Resource: "*"
  environment:
    IamNetworkStackName: "tasq-aws-iam-networking-${{self:provider.stage}}"
    MetaDataStoreStackName: "tasq-meta-datastore-${{self:provider.stage}}"
    WellStateS3BucketName: "tasq-well-state-worker-${{self:provider.stage}}"
    PredictionsTableStackName: "tasq-detect-state-change-${{self:provider.stage}}"
    FailureTableStackName: "tasq-failure-prediction-${{self:provider.stage}}"
    PushNotificationTableStackName: "tasq-notification-server-${{self:provider.stage}}"
    RawScadaIngestStackName: "tasq-raw-scada-ingest-enerplus-${{self:provider.stage}}"
    CleanScadaIngestStackName: "tasq-clean-scada-ingest-enerplus-${{self:provider.stage}}"
    StackMainUserId: "711589413744"
    EcrAddress: "711589413744.dkr.ecr.us-east-2.amazonaws.com"
    InboundStackName: "tasq-feature-extract-${{self:provider.stage}}"
    LambdaLayerStack: "arn:aws:lambda:${{self:provider.region}}:${{self:provider.environment.StackMainUserId}}:layer"
    stackName: "${{self:service}}-${{self:provider.stage}}"

    # /reponses Lambda Functions
    DetectStateChangeStackName: "tasq-detect-state-change-${{self:provider.stage}}"
      # get_user_responses_lambda_handler "${{self:provider.environment.DetectStateChangeStackName}}:"
      # delete_user_response_lambda_handler 
      # update_user_response_lambda_handler
      # get_user_response_lambda_handler
      # get_tasq_list
      # post_new_tasq
      # get_prediction_by_id
      # delete_prediction_by_id
      # update_tasq

    TasqAnalyticsStackName: "tasq-analytics-${{self:provider.stage}}"
      # get_tracked_issues  "${{self:provider.environment.TasqAnalyticsStackName}}:"
      # submit_ticket
      # get_ticket

    AssignUserTasqStackName: "tasq-assign-user-tasks-${{self:provider.stage}}"
      # sign_up_user
      # get_all_users
      # update_user_profile
      # get_user_details
      # post_workflow
      # get_all_workflows
      # delete_workflow
      # get_workflow
      # update_workflow



functions:
  - ${{file(./src/functions/appsync_resolver/auth_appsync_source.yml)}}
    
resources:
  - ${{file(./src/resources/IAM/IAM.yml)}}
  - ${{file(./src/resources/api_gateway/api_gateway.yml)}}
  - ${{file(./src/resources/api_gateway/tasqs_resource.yml)}}
  - ${{file(./src/resources/api_gateway/tickets_resource.yml)}}
  - ${{file(./src/resources/api_gateway/users_resource.yml)}}
  - ${{file(./src/resources/api_gateway/workflows_resource.yml)}}
  - ${{file(./src/resources/api_gateway/responses_resource.yml)}}
  - ${{file(./src/resources/api_gateway/push_notification_resource.yml)}}
  - ${{file(./src/resources/api_gateway/client_data_ingest_resource.yml)}}
  - ${{file(./src/resources/dynamodb/dynamodb.yml)}}
  - ${{file(./src/resources/appsync/appsync.yml)}}
  