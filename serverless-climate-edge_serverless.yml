
service: serverless-climate-edge

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 2048
  timeout: 30
  stage: dev
  region: eu-west-1
  versionFunctions: false
  logRetentionInDays: 7
  environment:
    REGION: ${self:custom.REGION}
    STAGE: ${self:custom.STAGE}
    STATION_TABLE: ${self:custom.STATION_TABLE}
    SENSOR_TABLE: ${self:custom.SENSOR_TABLE}
    PLOT_TABLE: ${self:custom.PLOT_TABLE}
    USER_TABLE: ${self:custom.USER_TABLE}
    VARIETY_TABLE: ${self:custom.VARIETY_TABLE}
    CHILD_TABLE: ${self:custom.CHILD_TABLE}
    AGE_TABLE: ${self:custom.AGE_TABLE}
    BASE_URL: ${self:custom.ENV_VARS.BASE_URL, file(./env.json):BASE_URL}
    DYNAMODB_LOCAL_STAGE: ${self:custom.ENV_VARS.DYNAMODB_LOCAL_STAGE, file(./env.json):DYNAMODB_LOCAL_STAGE}
    DYNAMODB_LOCAL_ENDPOINT: ${self:custom.ENV_VARS.DYNAMODB_LOCAL_ENDPOINT, file(./env.json):DYNAMODB_LOCAL_ENDPOINT}
    DYNAMODB_LOCAL_ACCESS_KEY_ID: ${self:custom.ENV_VARS.DYNAMODB_LOCAL_ACCESS_KEY_ID, file(./env.json):DYNAMODB_LOCAL_ACCESS_KEY_ID}
    DYNAMODB_LOCAL_SECRET_ACCESS_KEY: ${self:custom.ENV_VARS.DYNAMODB_LOCAL_SECRET_ACCESS_KEY, file(./env.json):DYNAMODB_LOCAL_SECRET_ACCESS_KEY}
    INTERNAL_ACCESS_KEY: ${self:custom.ENV_VARS.INTERNAL_ACCESS_KEY, file(./env.json):INTERNAL_ACCESS_KEY}
    AUTH0_CLIENT_ID: ${self:custom.ENV_VARS.AUTH0_CLIENT_ID, file(./env.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY_URL: ${self:custom.ENV_VARS.AUTH0_CLIENT_PUBLIC_KEY_URL, file(./env.json):AUTH0_CLIENT_PUBLIC_KEY_URL}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ StationTable, Arn ]
        - "Fn::GetAtt": [ PlotTable, Arn ]
        - "Fn::GetAtt": [ UserTable, Arn ]
        - "Fn::GetAtt": [ VarietyTable, Arn ]
        - "Fn::GetAtt": [ ChildTable, Arn ]
        - "Fn::GetAtt": [ AgeTable, Arn ]

    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - Fn::Join:
           - ""
           - - "arn:aws:lambda:"
             - Ref: AWS::Region
             - ":"
             - Ref: AWS::AccountId
             - ":function:"
             - ${self:custom.PREFIX}
             - "-station"
        - Fn::Join:
           - ""
           - - "arn:aws:lambda:"
             - Ref: AWS::Region
             - ":"
             - Ref: AWS::AccountId
             - ":function:"
             - ${self:custom.PREFIX}
             - "-get_station"

functions:
  status:
    handler: handler.STATUS
    memorySize: 1024
    events:
      - http:
          path: status
          method: get
          cors: true

  station:
    handler: handler.STATION_SUBMIT
    events:
      - http:
          path: data/{stationId}
          method: post
          cors: true

      - http:
          path: data
          method: post
          cors: true

  get_station:
    handler: handler.STATION_GET
    events:
      - http:
          path: data/{stationId}
          method: get
          cors: true
      - http:
          path: data
          method: get
          cors: true

  get_chart:
    handler: handler.STATION_GET_CHART
    events:
      - http:
          path: chart/{stationId}
          method: get
          cors: true

      - http:
          path: chart
          method: get
          cors: true

  get_ages:
    handler: handler.GET_AGES
    events:
      - http:
          path: ages
          method: get
          cors: true

  get_children:
    handler: handler.GET_CHILDREN
    events:
      - http:
          path: children
          method: get
          cors: true

  get_plots:
    handler: handler.GET_PLOTS
    events:
      - http:
          path: plots
          method: get
          cors: true

  get_users:
    handler: handler.GET_USERS
    events:
      - http:
          path: users
          method: get
          cors: true

  get_varieties:
    handler: handler.GET_VARIETIES
    events:
    - http:
        path: varieties
        method: get
        cors: true

  upload_file:
    handler: handler.FILE_UPLOAD
    events:
      - http:
          path: upload
          method: post
          cors: true

plugins:
  - serverless-mocha-plugin
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline


custom:
  REGION: ${opt:region, self:provider.region}
  STAGE: ${opt:stage, self:provider.stage}
  PREFIX: ${self:service}-${self:custom.STAGE}
  ENV_VARS: ${file(./env.js):getEnvVars}
  STATION_TABLE: ${self:service}-stations-${opt:stage, self:provider.stage}
  SENSOR_TABLE: ${self:service}-sensors-${opt:stage, self:provider.stage}
  PLOT_TABLE: ${self:service}-plots-table-${opt:stage, self:provider.stage}
  USER_TABLE: ${self:service}-users-table-${opt:stage, self:provider.stage}
  VARIETY_TABLE: ${self:service}-variety-table-${opt:stage, self:provider.stage}
  CHILD_TABLE: ${self:service}-child-table-${opt:stage, self:provider.stage}
  AGE_TABLE: ${self:service}-age-${opt:stage, self:provider.stage}
  TABLE_THROUGHPUTS:
    prod: 5
    default: 1
  TABLE_THROUGHPUT: ${self:custom.TABLE_THROUGHPUTS.${self:custom.STAGE}, self:custom.TABLE_THROUGHPUTS.default}
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8005
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

  serverless-offline:
    httpPort: 3010
    babelOptions:
      presets: ["env"]

  serverlessOfflineLocalstack:
    host: http://localhost
    endpoints:
      SQS: http://localhost:4576

  webpackIncludeModules:
    packagePath: './package.json'


resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
