service: MyOnlineBookStore
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: eu-central-1
  memorySize: 128 # optional, in MB, default is 1024
  logs:
    httpApi: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:*'
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

package:
  individually: true
  exclude:
    - '**'
  include:
    - order/handler.py
    - book/display/handler.py
    - book/add/handler.py

functions:
  order:
    handler: order/handler.order
    layers:
      - { Ref: AwsXraySdkLambdaLayer }
    description: Validate credit score and put order in database.
    timeout: 2
    tracing: true
    events:
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - order.fifo
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - order-dlq.fifo
    tags:
      App: MyOnlineBookStore
      Environment: dev
      Runtime: python3.8

  book-add:
    handler: book/add/handler.add_book
    layers:
      - { Ref: AwsXraySdkLambdaLayer }
    description: Add book in database
    timeout: 2
    tracing: true
    events:
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - book
    tags:
      App: MyOnlineBookStore
      Environment: dev
      Runtime: python3.8
    environment:
      AWS_REGION_NAME: ${self:provider.region}
      DYNAMODB_TABLE_NAME: Book

  book-display:
    handler: book/display/handler.display_book
    layers:
      - { Ref: AwsXraySdkLambdaLayer }
    description: Display books available in database
    timeout: 2
    tracing: true
    events:
      - httpApi:
          method: GET
          path: /book/display
          authorizer: serviceAuthorizer
    tags:
      App: MyOnlineBookStore
      Environment: dev
      Runtime: python3.8
    environment:
      AWS_REGION_NAME: ${self:provider.region}
      DYNAMODB_TABLE_NAME: Book

layers:
  awsXraySdk:
    package:
      artifact: ../layers/aws-xray-sdk.zip
    name: aws-xray-sdk # optional, Deployed Lambda layer name
    description: SDK to send segments to AWS xray.
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - python3.8
    licenseInfo: GPLv3
    retain: false # optional, false by default. If true, layer versions are not deleted as new ones are created

resources:
  Resources:
    HttpApi:
      DependsOn: serviceUserPool
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: myOnlineBookStore-${opt:stage, self:provider.stage}UserPool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: myOnlineBookStore-${opt:stage, self:provider.stage}PoolClient
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - https://localhost:8080
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: myonlinebookstoredomain-${opt:stage, self:provider.stage}
    lambdaInvokeRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: lambdaInvokeRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
