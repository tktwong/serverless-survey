service:
  name: serverless-kinesis-aws-example

plugins:
  - serverless-webpack
  - serverless-offline-kinesis
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-east-1'}
  environment:
    KINESIS_STREAM_NAME: ${self:service}-Kinesis-${self:provider.stage}
    KINESIS_ARN: ${file(./config/${self:provider.stage}.yml):KINESIS_ARN}/${self:provider.environment.KINESIS_STREAM_NAME}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "kinesis:GetRecords"
        - "kinesis:PutRecord"
        - "kinesis:PutRecords"
      Resource:
        Fn::GetAtt: [KinesisStream, Arn]

custom:
  serverless-offline-kinesis:
    apiVersion: '2013-12-02'
    endpoint: http://0.0.0.0:4567
    region: ap-east-1
    arn: ${self:provider.environment.KINESIS_ARN}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
    readInterval: 500

functions:
  read-record-from-stream:
    handler: src/handler.readRecord
    timeout: 5
    memorySize: 128
    events:
      - stream:
          enabled: true
          type: kinesis
          arn: ${self:provider.environment.KINESIS_ARN}
          batchSize: 10
          maximumRetryAttempts: 3
          parallelizationFactor: 2
          startingPosition: LATEST
      # - stream:
      #     type: kinesis
      #     arn:
      #       Fn::GetAtt:
      #         - KinesisStream
      #         - Arn
  put-record-to-stream:
    handler: src/handler.putRecord
    timeout: 5
    memorySize: 128
    environment:
      STREAM_NAME: !Ref KinesisStream
    events:
      - http:
          method: post
          path: records

resources:
  Resources:
    KinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:provider.environment.KINESIS_STREAM_NAME} 
        RetentionPeriodHours: 48 
        ShardCount: 1
        Tags: 
            - Key: Stage
              Value: ${opt:stage}