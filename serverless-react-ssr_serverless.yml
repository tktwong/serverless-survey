service: serverless-react-ssr

frameworkVersion: '>=1.9.0 <2.0.0'

custom:
  stage: ${opt:stage, self:provider.stage}
  client:
    bucketName: ${env:APP_DOMAIN_NAME}
    distributionFolder: dist
  webpack:
    includeModules:
      forceInclude:
        - react-dom # required through react-apollo (renderToStringWithData)
    packager: yarn
    webpackConfig: ./config/webpack/webpack.config.server.js

package:
  individually: true

plugins:
  - serverless-finch
  - serverless-webpack # https://github.com/serverless-heaven/serverless-webpack#usage-with-serverless-offline
  - serverless-offline
  - serverless-patches

provider:
  name: aws
  region: us-east-1
  runtime: nodejs8.10
  deploymentBucket: ${env:ARTIFACTS_BUCKET}
  environment:
    API_DOMAIN_NAME: ${env:API_DOMAIN_NAME}
    STAGE: ${self:custom.stage}

functions:
  website:
    name: serverless-react-${self:custom.stage}
    handler: handler.website
    events:
      - http:
          cors: true
          integration: lambda-proxy
          method: get
          path: /
      - http:
          cors: true
          integration: lambda-proxy
          method: get
          path: /{proxy+}

resources:
  Resources:
    ApiGatewayBasePathMapping:
      DependsOn: ApiGatewayDomainName
      Type: AWS::ApiGateway::BasePathMapping
      Properties:
        BasePath: ''
        DomainName: ${env:APP_DOMAIN_NAME}
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage: ${self:custom.stage}

    ApiGatewayDomainName:
      Type: AWS::ApiGateway::DomainName
      Properties:
        CertificateArn:	${env:APP_SSL_CERT_ARN}
        DomainName: ${env:APP_DOMAIN_NAME}

    ApiGatewayDNSRecords:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${env:APP_HOSTED_ZONE}.
        RecordSets:
          - Name: ${env:APP_DOMAIN_NAME}.
            Type: A
            AliasTarget:
              DNSName: {'Fn::GetAtt': ApiGatewayDomainName.DistributionDomainName}
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: ${env:APP_DOMAIN_NAME}.
            Type: AAAA
            AliasTarget:
              DNSName: {'Fn::GetAtt': ApiGatewayDomainName.DistributionDomainName}
              HostedZoneId: Z2FDTNDATAQYW2

    ApiGatewayStaticBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:APP_DOMAIN_NAME}

    ApiGatewayResourceStatic:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: {'Fn::GetAtt': [ApiGatewayRestApi, RootResourceId]}
        PathPart: 'static'
        RestApiId: {Ref: ApiGatewayRestApi}

    ApiGatewayResourceStaticProxyVar:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: {Ref: ApiGatewayResourceStatic}
        PathPart: '{proxy+}'
        RestApiId: {Ref: ApiGatewayRestApi}

    ApiGatewayIamRoleExecution:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            Effect: Allow
            Principal:
              Service: [apigateway.amazonaws.com]
            Action: [sts:AssumeRole]
        Path: '/'
        Policies:
          - PolicyName: AllowApiGatewayS3Access
            PolicyDocument:
              Statement:
                Effect: Allow
                Resource: {'Fn::Join': ['', ['arn:aws:s3:::', {Ref: ApiGatewayStaticBucket}, '/*']]}
                Action:
                  - s3:Get*
                  - s3:List*

    ApiGatewayMethodStaticProxyVarGet:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: GET
        Integration:
          CacheKeyParameters:
            - method.request.path.proxy
          CacheNamespace: ApiGatewayMethodStaticProxyVarGetCacheNS
          Credentials: {'Fn::Join': ['', ['arn:aws:iam::', {Ref: AWS::AccountId}, ':role/', {Ref: ApiGatewayIamRoleExecution}]]}
          IntegrationHttpMethod: GET
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Timestamp: integration.response.header.Date
                method.response.header.Content-Length: integration.response.header.Content-Length
                method.response.header.Content-Type: integration.response.header.Content-Type
            - StatusCode: 400
              SelectionPattern: '4\d{2}'
              ResponseParameters:
                method.response.header.Content-Length: integration.response.header.Content-Length
                method.response.header.Content-Type: integration.response.header.Content-Type
            - StatusCode: 500
              SelectionPattern: '5\d{2}'
              ResponseParameters:
                method.response.header.Content-Length: integration.response.header.Content-Length
                method.response.header.Content-Type: integration.response.header.Content-Type
          PassthroughBehavior: WHEN_NO_MATCH
          RequestParameters:
            integration.request.path.proxy: method.request.path.proxy
          Type: AWS
          Uri: {'Fn::Join': ['', ['arn:aws:apigateway:', {Ref: AWS::Region}, ':s3:path/${env:APP_DOMAIN_NAME}', '/{proxy}']]}
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Timestamp: integration.response.header.Date
              method.response.header.Content-Length: integration.response.header.Content-Length
              method.response.header.Content-Type: integration.response.header.Content-Type
          - StatusCode: 400
            ResponseParameters:
              method.response.header.Content-Length: integration.response.header.Content-Length
              method.response.header.Content-Type: integration.response.header.Content-Type
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Content-Length: integration.response.header.Content-Length
              method.response.header.Content-Type: integration.response.header.Content-Type
        RequestParameters:
          method.request.path.proxy: true
        ResourceId: {Ref: ApiGatewayResourceStaticProxyVar}
        RestApiId: {Ref: ApiGatewayRestApi}
