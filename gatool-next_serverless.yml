# This file is the main config file for the service.
#
# For full config options, check the docs:
#    docs.serverless.com

service: GAToolBackend

provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1
  role: arn:aws:iam::336977810532:role/service-role/GAToolRole
  stage: production
  timeout: 30
  environment: # Environment variables available to the whole service
    SERVICE_AWS_REGION: ${self:provider.region}
    FRC_API_KEY: ${ssm:frc-api-key~true}
    TBA_API_HEADER: ${ssm:tba-api-header~true}
    TBA_API_KEY: ${ssm:tba-api-token~true}
    FRC_CURRENT_SEASON: 2021
    HIGH_SCORES_TABLE_NAME: HighScoresTable
    TEAM_UPDATES_TABLE_NAME: TeamUpdatesTable
    WEBSITE_BUCKET: gatoolwebsite

functions:
  Authorize:
    handler: handler.Authorize
  GetEvents:
    handler: handler.GetEvents
    description: Get events for a specific year
    events:
      - http:
          path: api/{year}/events
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                year: true
  GetEventTeams:
    handler: handler.GetEventTeams
    description: Get teams for a specific event for a specific year
    events:
      - http:
          path: api/{year}/teams/{eventCode}/{page}
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                year: true
                eventCode: true
                page: true
  GetDistrictTeams:
    handler: handler.GetDistrictTeams
    description: Get teams for a specified district in a specified year
    events:
      - http:
          path: api/{year}/district/teams/{districtCode}/{page}
          method: get
          cors: true
          authorizer: Authorize
          request:
            params:
              paths:
                year: true
                districtCode: true
                page: true
  GetTeams:
    handler: handler.GetTeams
    description: Get teams matching a specific set of queries
    events:
      - http:
          path: api/{year}/teams
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              querystrings:
                eventCode: false
                districtCode: false
                teamNumber: false
  GetEventAvatars:
    handler: handler.GetEventAvatars
    description: Get avatars for a specific event for a specific year
    events:
      - http:
          path: api/{year}/avatars/{eventCode}
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                year: true
                eventCode: true
  GetTeamAvatar:
    handler: handler.GetTeamAvatar
    description: Get avatars for a specific team for a specific event/year
    events:
      - http:
          path: api/{year}/avatars/team/{teamNumber}/avatar.png
          method: get
          cors: true
          contentHandling: CONVERT_TO_BINARY
          request:
            parameters:
              paths:
                year: true
                teamNumber: true
  GetTeamUpdates:
    handler: handler.GetTeamUpdates
    description: Get updates stored for a particular team.
    events:
      - http:
          path: api/team/{teamNumber}/updates
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                teamNumber: true
  PutTeamUpdates:
    handler: handler.PutTeamUpdates
    description: Store updates for a particular team.
    events:
      - http:
          path: api/team/{teamNumber}/updates
          method: put
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                teamNumber: true
  GetHighScores:
    handler: handler.GetHighScores
    description: Get high scores for a specific year
    events:
      - http:
          path: api/{year}/highscores
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                year: true
  GetTeamAwards:
    handler: handler.GetTeamAwards
    description: Get awards for a specific team in a specific year
    events:
      - http:
          path: api/{year}/awards/{teamNumber}
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                year: true
                teamNumber: true
  GetHistoricTeamAwards:
    handler: handler.GetHistoricTeamAwards
    description: Get the last 3 years of awards for a team
    events:
      - http:
          path: api/awards/{teamNumber}
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                teamNumber: true
  GetEventScores:
    handler: handler.GetEventScores
    description: Get scores for a specific event with a year, competition level, and a start/end (match number)
    events:
      - http:
          path: api/{year}/scores/{eventCode}/{tournamentLevel}/{start}/{end}
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                year: true
                eventCode: true
                tournamentLevel: true
                start: true
                end: true
  GetEventHighScores:
    handler: handler.GetEventHighScores
    description: Get high scores for a specific event and year
    events:
      - http:
          path: api/{year}/highscores/{eventCode}
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              paths:
                year: true
                eventCode: true
  GetEventSchedule:
    handler: handler.GetEventSchedule
    description: Get the event schedule for a specific event, year, and competition level
    events:
      - http:
          path: api/{year}/schedule/{eventCode}/{tournamentLevel}
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              year: true
              eventCode: true
              tournamentLevel: true
  GetEventAlliances:
    handler: handler.GetEventAlliances
    description: Get alliance details for an event
    events:
      - http:
          path: api/{year}/alliances/{eventCode}
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              year: true
              eventCode: true
  GetEventRankings:
    handler: handler.GetEventRankings
    description: Get alliance details for an event
    events:
    - http:
        path: api/{year}/rankings/{eventCode}
        method: get
        cors: true
        authorizer: Authorize
        request:
          parameters:
            year: true
            eventCode: true
  GetDistrictRankings:
    handler: handler.GetDistrictRankings
    description: Get district rankings
    events:
      - http:
          path: api/{year}/district/rankings/{districtCode}
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              year: true
              districtCode: true
            querystrings:
              top: false
  GetTeamAppearances:
    handler: handler.GetTeamAppearances
    description: Get all appearances at events a team has ever had
    events:
      - http:
          path: api/team/{teamNumber}/appearances
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              teamNumber: true
  GetAllTeamAwards:
    handler: handler.GetAllTeamAwards
    description: Get all awards a team has ever won
    events:
      - http:
          path: api/team/{teamNumber}/awards
          method: get
          cors: true
          authorizer: Authorize
          request:
            parameters:
              teamNumber: true
  GetUserPreferences:
    handler: handler.GetUserPreferences
    description: Get the stored preferences for a particular user.
    events:
      - http:
          path: api/user/preferences
          method: get
          cors: true
          authorizer: Authorize
  PutUserPreferences:
    handler: handler.PutUserPreferences
    description: Store user preferences.
    events:
      - http:
          path: api/user/preferences
          method: put
          cors: true
          authorizer: Authorize
  GetOffseasonTeamsV2:
    handler: handler.GetOffseasonTeams
    description: Get offseason teams for an event
    events:
      - http:
          path: api/{year}/offseasonteamsv2/{eventCode}/{page}
          method: get
          cors: true
          authorizer: Authorize
  GetOffseasonEventsV2:
    handler: handler.GetOffseasonEvents
    description: Get offseason events
    events:
      - http:
          path: api/{year}/offseasoneventsv2
          method: get
          cors: true
          authorizer: Authorize
  UpdateHighScores:
    handler: handler.UpdateHighScores
    description: Update the event high scores at a regular interval
    timeout: 60
    events:
      - schedule:
          rate: rate(10 minutes)
          enabled: true

resources:
  Resources:
    HighScoresTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: HighScoresTable
        AttributeDefinitions:
          - AttributeName: yearType
            AttributeType: S
        KeySchema:
          - AttributeName: yearType
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    TeamUpdatesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TeamUpdatesTable
        AttributeDefinitions:
          - AttributeName: teamNumber
            AttributeType: S
        KeySchema:
          - AttributeName: teamNumber
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    UserPreferencesBucket:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: gatooluserpreferences

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-finch
  - serverless-apigw-binary

custom:
  client:
    bucketName: gatoolwebsite
    distributionFolder: ui
    indexDocument: index.html
    errorDocument: error.html
  apigwBinary:
    types:
      - 'image/png'
      - 'image/jpeg'
      - 'image/*'
      - 'image/apng'
      - 'image/webp'
