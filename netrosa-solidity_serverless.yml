# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: netrosa-ethereum # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'us-east-1'}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1
  timeout: 300 
  environment: # Service wide environment variables
    IO_PIPE_TOKEN: ${env:IO_PIPE_TOKEN}
  vpc: 
    securityGroupIds:
      - sg-025c7ecbc08c65d3f
    subnetIds:
      - subnet-04cdd439355044a87
      - subnet-0bbbcd37ebe7aa338
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"
    - Effect: Allow
      Action:
        - kms:Decrypt
        - kms:Encrypt
      Resource: "arn:aws:kms:us-east-1:891335278704:key/5880ec39-30e8-4995-b75a-e3abee2dbba0"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/formKeys"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/forms"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/networks"
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/nonces"
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:us-east-1:891335278704:table/formSubmissions"
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: arn:aws:secretsmanager:us-east-1:891335278704:secret:election/ethereum/mnemonic-o3QBP6
    - Effect: Allow
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource: "arn:aws:s3:::netvote-ipfs/*"     
      
functions:
  create-form:
    handler: form-create.createForm

  form-set-status:
    handler: form-set-status.setStatus

  form-add-entry:
    handler: form-submit.addEntry

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
