service:
  name: ${opt:cfg}-name-default

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-git-variables

custom:
  webpack:
    packager: 'yarn'
  secrets: ${ssm:/aws/reference/secretsmanager/${opt:cfg}-febracis-microservice-config~true}
  gitVariablesEnvWhitelist: []
  gitVariablesTagsWhitelist: ['GIT_REPOSITORY', 'GIT_COMMIT_LONG', 'GIT_BRANCH', 'GIT_IS_DIRTY']
  pathPattern: 'path-default'
  layerFile: layer.node_modules.zip

package:
  individually: true 

provider:
  name: aws
  apiKeys:
    - name: ${self:service}-api-key
      value: ${self:custom.secrets.API_KEY_DEFAULT}
  runtime: nodejs12.x
  stage: v2
  memorySize: 256
  timeout: 30
  # deploymentBucket:
  #   name: scisapp-${opt:cfg}-serverless-deployment-bucket
  # deploymentPrefix: ${self:service.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
  environment:
    STAGE: ${opt:cfg}
    DEBUG: ${self:custom.secrets.DEBUG}
    BASE_API_URL: ${self:custom.secrets.REACT_APP_API_V2_BASE_URL}
      
resources:
  Resources:
    CloudFrontApiRoute:
      Type: Custom::CloudFrontApiRoute
      DependsOn: ApiGatewayRestApi
      Properties:
        ServiceToken: !ImportValue FebracisCustomResources
        Distribution: !ImportValue FebracisApiDistribution
        Id: ${self:service.name}
        DomainName: !Join ['', [!Ref ApiGatewayRestApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com']]
        PathPattern: '${self:provider.stage}/${self:custom.pathPattern}*'
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseUnauthorized:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseTemplates:
          'application/json': '{ "error": "unauthorized", "error_description": "Invalid token" }'
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED        
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseInvalidApiKey:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseTemplates:
          'application/json': '{ "error": "unauthorized", "error_description": "Invalid credentials" }'
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: INVALID_API_KEY
        StatusCode: "401"    
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    AuthorizerPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::Join:
            - ""
            - - "arn:aws:lambda:"
              - !Ref "AWS::Region"
              - ":"
              - !Ref "AWS::AccountId"
              - ":function:febracis-login-v2-authorizerFunction"
        Action: lambda:InvokeFunction
        Principal:
          Fn::Join: ["",["apigateway.", { Ref: "AWS::URLSuffix"}]]
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        AuthorizerUri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - !Ref "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "arn:aws:lambda:"
              - !Ref "AWS::Region"
              - ":"
              - !Ref "AWS::AccountId"
              - ":function:febracis-login-v2-authorizerFunction"
              - "/invocations"
        IdentitySource: method.request.header.Authorization
        IdentityValidationExpression: "^Bearer \\S+$"
        Name: FebracisAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: TOKEN
  Outputs:
    ServiceEndpointExport:
      Value:
          Fn::Join:
              [
                  "",
                  [
                      !Ref ApiGatewayRestApi,
                      ".execute-api.",
                      !Ref "AWS::Region",
                      ".amazonaws.com/",
                      "${self:provider.stage}",
                  ],
              ]
      Export:
          Name: "${self:service}-endpoint"

functions:
  rota-default:
    handler: src/api/bin/index.handler
    events:
      - http:
          path: ${self:custom.pathPattern}/{proxy+}
          method: ANY
          cors: true
          private: true
      - http:
          path: ${self:custom.pathPattern}
          method: ANY
          cors: true
          private: true
    layers:
      - { Ref: NameDefaultCommonLibsLambdaLayer }
  migrate:
    handler: src/lambda/migrate.handler
    layers:
      - { Ref: NameDefaultCommonLibsLambdaLayer }
layers:
  nameDefaultCommonLibs:
    package:
        artifact: ${self:custom.layerFile}
    compatibleRuntimes:
      - nodejs12.x
