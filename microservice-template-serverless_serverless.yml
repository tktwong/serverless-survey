# Esse arquivo gera um micro serviço para ser adicionado a uma API ja definida
# Criação: serverless deploy --stage=dev --aws-profile <Usuário  AWS> -v

service: ${self:provider.apiName}-${self:provider.moduloName}-${self:provider.stackName}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'} # Define o stage utilizado
  region: us-east-1 # Define a região em que seja criado
  memorySize: 128
  timeout: 30

  deploymentBucket:
    name: ${file(./serverless-env.yml):deploymentBucket} # Nome do bucket S3 utilizado para armazenar os arquivos de deploy
  role: ${file(./serverless-env.yml):role} # Define qual usuário IAM utilizado para permissões
  vpc: ${file(./serverless-env.yml):${self:provider.stage}.vpc} # Define uma rede virtual para execução, é opcional mas quando definida necessita das informções contidas no arquivo serverless-env
  endpointType: EDGE

  #O nome da API eh um Atributo obrigatório para o funcionamento da estrutura
  apiName: api-name
  moduloName: moduloName # Nome do modulo em que esse micro serviço sera adicionado
  stackName: hello # Esse nome deve ser único para deploys no mesmo modulo, pois eh ele que define o nome da stack criada na AWS, Sugestão utilizar o nome da primeira função criada

  environment:
    NODE_PATH: './:/opt/node_modules'
    VALIDATOR_PATH: './:/opt/validator'

custom:
  logRetentionInDays: 7

  # Para utilizacao do plugin para nomeação dos recursos
  serverless-aws-resource-names:
    source: ./configserverless/mapping.json
    variables: #Variaveis para serem usadas dentro do mapping.json
      apiNameMapping: ${self:provider.apiName}
      stackNameMapping: ${self:provider.stackName}
      moduloNameMapping: ${self:provider.moduloName}

  customDomain:
    domainName: ${self:provider.apiName}.${file(./serverless-env.yml):domain}
    domain: ${file(./serverless-env.yml):domain}
    stage:  ${self:provider.stage}
    basePath:  ${self:provider.stage}
    certificateName: ${file(./serverless-env.yml):certificate}
    endpointType: EDGE
    createRoute53Record: true

  documentation:
    apiDescription: descricao da api utilizada na documentacao
    moduloDescription: descricao do modulo utilizada na documentacao
    models: ${file(./configserverless/swagger/models.yml):models}
    docPath: doc

  # # Bloco de código para a criação do authorizer para API, método de verificação de autenticação
  # # eh necessário a criação de um lambda que será utilizado para a autenticação da API
  # # O padrão do nome {nome da api}-authorizer
  # authorizerConfig:
  #   name: ${self:provider.apiName}-authorizer
  #   arn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.apiName}-authorizer
  #   type: REQUEST
  #   #identitySource: method.request.header.key, method.request.header.srckey

functions:
  hello:
    handler: src/handlers/handler.hello
    description: descrição da função.
    # layers:
    #   - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:layer:MiddyDependenciesNodeModule-${self:provider.stage}:latest
    #   - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:layer:MiddyDependenciesValidator-${self:provider.stage}:latest
    events:
      - http:
          path: ${self:provider.moduloName}/hello
          method: POST
          integration: lambda
          request:
            passThrough: WHEN_NO_TEMPLATES
            template:
              application/json: ${file(./configserverless/apigateway/templates/aws_default.txt)}
          response: ${file(./configserverless/apigateway/templates/integration_response/integration_response.yml):integrationResponse}
          documentation:
            summary: Resumo do endpoint
            tags:
              - ${self:provider.moduloName}
            description: Descrição detalhada dessa funcionalidade
            requestBody:
              description: "Descrição detalhada da estrutura e campos que devem serem enviada no corpo da requisição"
            requestModels:
              "application/json": HelloPost
            methodResponses:
              - ${file(./configserverless/swagger/models.yml):commonModelSchemaFragments.MethodResponse200}
              - ${file(./configserverless/swagger/models.yml):commonModelSchemaFragments.MethodResponse400Json}
      - http:
          path: ${self:provider.moduloName}/hello
          method: GET
          integration: lambda
          request:
            passThrough: WHEN_NO_TEMPLATES
            template:
              application/json: ${file(./configserverless/apigateway/templates/aws_default.txt)}
          response: ${file(./configserverless/apigateway/templates/integration_response/integration_response.yml):integrationResponse}
          documentation:
            summary: Resumo do endpoint
            tags:
              - ${self:provider.moduloName}
            description: Descrição detalhada dessa funcionalidade
            queryParams:
              -
                name: Param1
                description: Descrição do Param1, esse é um parâmetro requerido.
                required: true
              -
                name: Param2
                description: Descrição do Param2, esse é um parâmetro opcional.

            methodResponses:
              - ${file(./configserverless/swagger/models.yml):commonModelSchemaFragments.MethodResponse200}
              - ${file(./configserverless/swagger/models.yml):commonModelSchemaFragments.MethodResponse400Json}

plugins:
  - 'serverless-plugin-log-retention'
  - 'serverless-pseudo-parameters'
  - 'serverless-latest-layer-version'
  - 'serverless-aws-resource-names'
  - 'serverless-aws-alias'
  - '@richard_gabriel/serverless-aws-documentation'
  - '@richard_gabriel/engine-serverless'

package:
  exclude:
    - .git/**
