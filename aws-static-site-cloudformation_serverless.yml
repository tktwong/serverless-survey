service: my-service-name

provider:
  stage: dev
  name: aws
  region: us-east-1

custom:
  stage: ${opt:stage, self:provider.stage}
  bucketName: ${self:custom.stage}-${file(./env.yml):${self:custom.stage}.BUCKET_NAME}
  ACMCertificateArn: ${file(./env.yml):${self:custom.stage}.ACM_CERTIFICATE_ARN}
  s3-sync:
    - folder: dist
      bucket: ${self:custom.bucketName}

plugins:
  - serverless-s3bucket-sync

resources:
  Resources:
    CloudFrontOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "a comment"

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn:
        - CloudFrontOAI
        - S3Bucket
      Bucket: ${self:custom.bucketName}
      PolicyDocument:
        Statement:
          - Action: "S3:GetObject"
            Effect: "Allow"
            Resource: arn:aws:s3:::${self.custom.bucketName}/*
            Principal:
              CanonicalUser:
                Fn::GetAtt: [ CloudFrontOAI , S3CanonicalUserId ]

    CloudFrontDist:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - CloudFrontOAI
        - S3Bucket
      Properties:
        DistributionConfig:
          Comment: "a comment"
          DefaultRootObject: index.html
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.ACMCertificateArn}
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: true
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
          Enabled: true
          Origins:
            - DomainName: ${self:custom.bucketName}.s3.amazonaws.com
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref CloudFrontOAI ] ]

