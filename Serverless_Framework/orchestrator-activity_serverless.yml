#
# Copyright 2017-2017 Mutual of Enumclaw. All Rights Reserved.
# License: Public
#
service: ${opt:prefix, 'orchestrator'}-${opt:activity, 'activity'}

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-plugin-generic-stack

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  versionFunctions: false
  environment:
    epsagonToken:
      Ref: EpsagonToken
    epsagonAppName:
      Ref: EpsagonAppName
    epsagonMetadata:
      Ref: EpsagonMetadata
    statusTable: ${self:custom.core.tables.status.name}
    pluginTable: ${self:custom.core.tables.plugin.name}
    activity:
      Fn::Select:
        - Ref: ActivityNameOffset
        - Fn::Split:
            - "-"
            - Ref: AWS::StackName
  stackParameters:
    - ParameterKey: "OrchestratorBaseStack"
      ParameterValue: ${opt:core-stack, 'orchestrator'}-${self:provider.stage}
    - ParameterKey: "ActivityNameOffset"
      ParameterValue: ${opt:nameOffset, '1'}
    - ParameterKey: "Environment"
      ParameterValue: ${self:provider.stage}
    - ParameterKey: EpsagonToken
      ParameterValue: ${opt:epsagon-token, ''}
    - ParameterKey: EpsagonAppName
      ParameterValue: ${opt:epsagon-app-name, ''}
    - ParameterKey: EpsagonMetadata
      ParameterValue: ${opt:epsagon-meta, ''}
  stackTags: ${file(./${opt:tagConfig, 'default-tags.yml'})}
  deploymentBucket: ${opt:deploymentBucket, '${opt:config, ''}'}
  
custom:
  core:
    tables:
      status:
        name:
          Fn::ImportValue: "#{OrchestratorBaseStack}-status-name"
        arn:
          Fn::ImportValue: "#{OrchestratorBaseStack}-status-arn"
        stream:
          Fn::ImportValue: "#{OrchestratorBaseStack}-status-stream-arn"
      plugin:
        name:
          Fn::ImportValue: "#{OrchestratorBaseStack}-plugin-name"
        arn:
          Fn::ImportValue: "#{OrchestratorBaseStack}-plugin-arn"

  webpack:
    includeModules:
      forceExclude:
  
  ParameterTypes:
    current: ${self:custom.ParameterTypes.${opt:config, 'default'}}
    serverless: 
      yml: AWS::SSM::Parameter::Value<String>
    default: String
functions:
  asyncStart:
    handler: src/functions/asyncStage.fanOut
    timeout: 60
    environment:
      snsTopic:
        Ref: snsTopic
    iamRoleStatementsName: "#{AWS::StackName}-as-${self:provider.region}-IAM"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - sns:Publish
          - sns:ListSubscriptionsByTopic
          - dynamodb:GetItem
        Resource:
          - ${self:custom.core.tables.status.arn}
          - Ref: snsTopic
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - ${self:custom.core.tables.plugin.arn}
      - Effect: Allow
        Action:
          - states:SendTaskSuccess
        Resource: '*'

  sncPreProc:
    handler: src/functions/syncStage.start
    timeout: 900
    environment:
      stage: pre
    iamRoleStatementsName: "#{AWS::StackName}-pre-${self:provider.region}-IAM"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource:
          - ${self:custom.core.tables.status.arn}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource:
          - ${self:custom.core.tables.plugin.arn}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:/aws/lambda/#{AWS::StackName}-*
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
          - sns:ListSubscriptionsByTopic
        Resource: "*"

  sncPostProc:
    handler: src/functions/syncStage.start
    timeout: 900
    environment:
      stage: post
    iamRoleStatementsName: "#{AWS::StackName}-post-${self:provider.region}-IAM"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource:
          - ${self:custom.core.tables.status.arn}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource:
          - ${self:custom.core.tables.plugin.arn}
      - Effect: Allow
        Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:/aws/lambda/#{AWS::StackName}-syncPost*
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: "*"

  syncPrePluginAdd:
    handler: src/functions/pluginAdd.handler
    environment:
      stage: pre
    role:
      Fn::GetAtt: 
        - SncPreProcIamRoleLambdaExecution
        - Arn
    events:
      - cloudwatchEvent:
          event:
            source:
              - "aws.sns"
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - sns.amazonaws.com
              eventName:
                - Subscribe
              requestParameters:
                topicArn:
                  - Ref: preTopic
                protocol: 
                  - lambda

  refreshAllRegistrations:
    handler: src/functions/refreshAllRegistrations.handler
    environment:
      preTopicArn:
        Ref: preTopic
      postTopicArn:
        Ref: postTopic
      parallelTopicArn:
        Ref: snsTopic
    role:
      Fn::GetAtt: 
        - SncPreProcIamRoleLambdaExecution
        - Arn

  syncPrePluginUpdate:
    handler: src/functions/pluginUpdate.handler
    environment:
      stage: pre
    role:
      Fn::GetAtt: 
        - SncPreProcIamRoleLambdaExecution
        - Arn
    events:
      - cloudwatchEvent:
          event:
            source:
              - aws.lambda
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - lambda.amazonaws.com
              eventName: 
                - UpdateFunctionCode20150331v2

  syncPostPluginUpdate:
    handler: src/functions/pluginUpdate.handler
    environment:
      stage: post
    role:
      Fn::GetAtt: 
        - SncPreProcIamRoleLambdaExecution
        - Arn
    events:
      - cloudwatchEvent:
          event:
            source:
              - aws.lambda
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - lambda.amazonaws.com
              eventName: 
                - UpdateFunctionCode20150331v2

  parallelPluginUpdate:
    handler: src/functions/pluginUpdate.handler
    environment:
      stage: async
    role:
      Fn::GetAtt: 
        - SncPreProcIamRoleLambdaExecution
        - Arn
    events:
      - cloudwatchEvent:
          event:
            source:
              - aws.lambda
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - lambda.amazonaws.com
              eventName: 
                - UpdateFunctionCode20150331v2

  syncPrePluginRemove:
    handler: src/functions/pluginRemove.handler
    environment:
      stage: pre
      snsArn:
        Ref: preTopic
    role:
      Fn::GetAtt: 
        - SncPreProcIamRoleLambdaExecution
        - Arn
    events:
      - cloudwatchEvent:
          event:
            source:
              - "aws.sns"
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - sns.amazonaws.com
              eventName:
                - Unsubscribe

  syncPostPluginAdd:
    handler: src/functions/pluginAdd.handler
    environment:
      stage: post
    role:
      Fn::GetAtt: 
        - SncPostProcIamRoleLambdaExecution
        - Arn
    events:
      - cloudwatchEvent:
          event:
            source:
              - "aws.sns"
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - sns.amazonaws.com
              eventName:
                - Subscribe
              requestParameters:
                topicArn:
                  - Ref: postTopic
                protocol: 
                  - lambda

  syncPostPluginRemove:
    handler: src/functions/pluginRemove.handler
    environment:
      stage: post
      snsArn:
        Ref: postTopic
    role:
      Fn::GetAtt: 
        - SncPostProcIamRoleLambdaExecution
        - Arn
    events:
      - cloudwatchEvent:
          event:
            source:
              - "aws.sns"
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - sns.amazonaws.com
              eventName:
                - Unsubscribe

  parallelPluginAdd:
    handler: src/functions/pluginAdd.handler
    environment:
      stage: parallel
    role:
      Fn::GetAtt: 
        - SncPostProcIamRoleLambdaExecution
        - Arn
    events:
      - cloudwatchEvent:
          event:
            source:
              - "aws.sns"
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - sns.amazonaws.com
              eventName:
                - Subscribe
              requestParameters:
                topicArn:
                  - Ref: snsTopic
                protocol: 
                  - lambda

  parallelPluginRemove:
    handler: src/functions/pluginRemove.handler
    environment:
      stage: parallel
      snsArn:
        Ref: snsTopic
    role:
      Fn::GetAtt: 
        - SncPostProcIamRoleLambdaExecution
        - Arn
    events:
      - cloudwatchEvent:
          event:
            source:
              - "aws.sns"
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventSource:
                - sns.amazonaws.com
              eventName:
                - Unsubscribe

resources:
  Parameters:
    OrchestratorBaseStack:
      Type: ${self:custom.ParameterTypes.current}
      Default: /<EnvironmentName>/orchestrator/base
    ActivityNameOffset:
      Type: ${self:custom.ParameterTypes.current}
      Default: /<EnvironmentName>/orchestrator/activity/nameOffset
    Environment:
      Type: ${self:custom.ParameterTypes.current}
      Default: /<EnvironmentName>/name
    FailureMetric:
      Type: ${self:custom.ParameterTypes.current}
      Default: /<EnvironmentName>/orchestrator/metric
    EpsagonToken:
      Type: ${self:custom.ParameterTypes.current}
      Default: /<EnvironmentName>/epsagon/token
    EpsagonAppName:
      Type: ${self:custom.ParameterTypes.current}
      Default: /<EnvironmentName>/epsagon/app-name
    EpsagonMetadata:
      Type: ${self:custom.ParameterTypes.current}
      Default: /<EnvironmentName>/epsagon/metadata
  Resources:
    snsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "#{AWS::StackName}-async"
        TopicName: "#{AWS::StackName}-async"

    preTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "#{AWS::StackName}-pre-sync"
        TopicName: "#{AWS::StackName}-pre-sync"
    postTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "#{AWS::StackName}-post-sync"
        TopicName: "#{AWS::StackName}-post-sync"

  Outputs:
    preProcessing:
      Value:
        Ref: preTopic
      Export:
        Name: "#{AWS::StackName}-pre-processing"

    parallelProcessing:
      Value:
        Ref: snsTopic
      Export:
        Name: "#{AWS::StackName}-parallel-processing"

    parallelProcessingName:
      Value:
        Fn::GetAtt:
          - snsTopic
          - TopicName
      Export:
        Name: "#{AWS::StackName}-parallel-processing-name"

    postProcessing:
      Value:
        Ref: postTopic
      Export:
        Name: "#{AWS::StackName}-post-processing"

    asyncStart:
      Value: 
        Fn::GetAtt: 
          - AsyncStartLambdaFunction
          - Arn
      Export:
        Name: "#{AWS::StackName}-async"

    asyncStartName:
      Value: 
        Ref: AsyncStartLambdaFunction
      Export:
        Name: "#{AWS::StackName}-async-name"
    
    syncPreProcessing:
      Value: 
        Fn::GetAtt: 
          - SncPreProcLambdaFunction
          - Arn
      Export:
        Name: "#{AWS::StackName}-pre-sync"

    syncPostProcessing:
      Value: 
        Fn::GetAtt: 
          - SncPostProcLambdaFunction
          - Arn
      Export:
        Name: "#{AWS::StackName}-post-sync"

    syncPreProcessingRole:
      Value: 
        Fn::GetAtt: 
          - SncPreProcIamRoleLambdaExecution
          - Arn
      Export:
        Name: "#{AWS::StackName}-pre-process-arn"
        
    syncPreProcessingRoleName:
      Value: 
        Ref: SncPreProcIamRoleLambdaExecution
      Export:
        Name: "#{AWS::StackName}-pre-process-name"
    syncPostProcessingRole:
      Value: 
        Fn::GetAtt: 
          - SncPostProcIamRoleLambdaExecution
          - Arn
      Export:
        Name: "#{AWS::StackName}-post-process-arn"
    syncPostProcessingRoleName:
      Value: 
        Ref: SncPostProcIamRoleLambdaExecution
      Export:
        Name: "#{AWS::StackName}-post-process-name"

