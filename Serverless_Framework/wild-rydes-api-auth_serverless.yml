# Wild Rydes API Auth Management
service: wild-rydes-api-auth

plugins:
  - serverless-python-requirements

custom:
  stage: "${opt:stage, env:SLS_STAGE, 'dev'}"
  region: "${opt:region, 'us-east-2'}"
  log_level: "${env:LOG_LEVEL, 'INFO'}"

  pythonRequirements:
    dockerizePip: false

  url_base_path: /key
  auth_id_source: "method.request.header.x-api-key"
  ddb_hash_key: "Id"
  ddb_range_key: "DateTime"


provider:
  name: aws
  runtime: python3.6
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  cfnRole: "arn:aws:iam::${env:AWS_ACCOUNT}:role/CloudFormationDeployRole"
  environment:
    LOG_LEVEL: ${self:custom.log_level}
    DDB_TABLE_NAME:
      Ref: KeyTable
    DDB_HASH_KEY: "${self:custom.ddb_hash_key}"
    DDB_RANGE_KEY: "${self:custom.ddb_range_key}"
  stackTags:
    x-service: wild-rydes-api-auth
    x-stack: ${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Query
      Resource:
        - Fn::GetAtt:
            - KeyTable
            - Arn
    - Effect: "Allow"
      Action:
        - apigateway:GET
      Resource: '*'

functions:
  Authorizer:
    handler: handlers/authorizer.handler
    description: "Custom authorizer function"
    memorySize: 128
    timeout: 5

  CreateKey:
    handler: handlers/create_api_key.handler
    description: "Create an API key"
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: "${self:custom.url_base_path}"
          method: post
      - http:
          path: "${self:custom.url_base_path}/{id}"
          method: put

  GetKey:
    handler: handlers/get_api_key.handler
    description: "Get an API key or keys"
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: "${self:custom.url_base_path}/{id}"
          method: get
      - http:
          path: "${self:custom.url_base_path}/{id}/{timestamp}"
          method: get

  UpdateKey:
    handler: handlers/update_api_key.handler
    description: "Update an API key or keys"
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: "${self:custom.url_base_path}/{id}/{timestamp}"
          method: put
      - http:
          path: "${self:custom.url_base_path}/{id}/{timestamp}/active"
          method: put
      - http:
          path: "${self:custom.url_base_path}/{id}/{timestamp}/inactive"
          method: put
      - http:
          path: "${self:custom.url_base_path}/{id}/{timestamp}/ttl"
          method: put



  DeleteKey:
    handler: handlers/delete_api_key.handler
    description: "Disable an API key or keys"
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: "${self:custom.url_base_path}/{id}"
          method: delete
      - http:
          path: "${self:custom.url_base_path}/{id}/{timestamp}"
          method: delete

resources:
  Resources:
    KeyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        KeySchema:
          - AttributeName: "${self:custom.ddb_hash_key}"
            KeyType: "HASH"
          - AttributeName: "${self:custom.ddb_range_key}"
            KeyType: "RANGE"
        AttributeDefinitions:
          - AttributeName: "${self:custom.ddb_hash_key}"
            AttributeType: "S"
          - AttributeName: "${self:custom.ddb_range_key}"
            AttributeType: "N"
        BillingMode: PAY_PER_REQUEST

    AuthorizerArnSsmParam:
      Type: "AWS::SSM::Parameter"
      Properties:
        Name: "/${self:service}/${self:provider.stage}/Arn"
        Type: String
        Value:
          Fn::GetAtt:
            - AuthorizerLambdaFunction
            - Arn

