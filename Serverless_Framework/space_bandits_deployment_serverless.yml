# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: neural-bandit
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
    layer: true  #Put dependencies into a Lambda Layer.
  dataSourceTableName: 'datasource-table-${self:provider.stage}'
  modelTableName: 'model-table-${self:provider.stage}'
  s3bucketName: '${self:provider.stage}-s3databucket'

package:
  exclude:
    - bin/**
    - lib/**


provider:
  name: aws
  runtime: python3.7

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  profile: default

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "s3:*"
     Resource: "*"
   - Effect: "Allow"
     Action:
      - "logs:CreateLogGroup"
      - "logs:CreateLogStream"
      - "logs:PutLogEvents"
     Resource: "*"
   - Effect: "Allow"
     Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
     Resource:
        - { "Fn::GetAtt": ["DataSourceTable", "Arn" ] }
        - {"Fn::GetAtt": ["ModelTable", "Arn"]}
   - Effect: "Allow"
     Action:
        - "sagemaker:*"
     Resource: "*"
            
   - Effect: "Allow"
     Action:
      - "iam:PassRole"
     Resource: "arn:aws:iam::*:role/*"
     Condition: 
      StringEquals: 
        iam:PassedToService: 
         - "sagemaker.amazonaws.com"
         - "glue.amazonaws.com"
         - "robomaker.amazonaws.com"
         - "states.amazonaws.com"


        
              
            



# you can define service wide environment variables here
  environment:
    DATASOURCE_TABLE: ${self:custom.dataSourceTableName}
    MODEL_TABLE: ${self:custom.modelTableName}
    S3_BUCKET: ${self:custom.s3bucketName}
    CONTAINER_URI: "763104351884.dkr.ecr.us-west-2.amazonaws.com/pytorch-training:1.3.1-cpu-py3"
    


functions:
  update_data:
    handler: lambda_functions/updateData.handler
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
  create_s3_datasource:
    handler: lambda_functions/createDataSource.handler
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
  predict:
    handler: lambda_functions/predict.handler
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
  create_model:
    handler: lambda_functions/createModel.handler
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    environment:
      LAMBDA_ROLE: "arn:aws:iam::351033349862:role/service-role/AmazonSageMaker-ExecutionRole-20200227T101932"


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
    # environment:
    #   MODEL_ENDPOINT: value2

# you can add CloudFormation resource templates here
resources:
 # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
 # S3 bucket
  - ${file(resources/s3-bucket.yml)}
 # Api Gateway
  #- ${file(resources/apigateway.yml)}
