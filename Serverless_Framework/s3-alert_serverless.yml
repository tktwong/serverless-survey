service:
  name: mr-voicemail

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs10.x
  region: ${opt:region, 'us-east-1'} # Transcribe isn't in ap-southeast-2
  memorySize: 128
  timeout: 300
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  tags:
    Owner: bret.waldow@mechanicalrock.io
    Purpose: MR Connect voicemailBucket
    Stack: ${self:custom.profiles.${self:provider.stage}}

custom:
  defaultStage: dev

  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk
      #    - '@aws-cdk/cdk'
      #  forceInclude:
      #    - jasmine-core
      #    - request
    packager: npm
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk

  package:
    excludeDevDependencies: true
    individually: true

  profiles:
    dev: sandbox-bretwaldow-admin

  common:
    notificationTopic: ${self:service}-Notifications
    notificationTopicArn: "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.common.notificationTopic}"
    voicemailBucket:  ${self:service}-recordings

  pseudoParameters:
    allowReferences: true
    skipRegionReplace: true

functions:
  s3alert:
    handler: handler.s3alert
    events:
      - s3:
        bucket: ${self:custom.common.voicemailBucket}
        event: s3:ObjectCreated:*
    environment:
      NOTIFICATION_TOPIC: ${self:custom.common.notificationTopicArn}
      NOTIFICATION_TIMEZONE: Australia/Perth
    onError: ${self:custom.common.notificationTopicArn}
    iamRoleStatementsName: ${self:custom.common.notificationTopic}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:custom.common.voicemailBucket}/*"
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - ${self:custom.common.notificationTopicArn}

resources:
  Resources:
    SNSTopicMrNotify:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.common.notificationTopic}
    S3VoicemailBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.common.voicemailBucket}
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: "#{S3alertLambdaFunction.Arn}"
    S3alertLambdaPermissionContainerS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: "#{S3alertLambdaFunction.Arn}"
        # FunctionArn:
        #   "Fn::GetAtt":
        #     # - ${self:service}-${self:provider.stage}-s3alert
        #     - S3alertLambdaFunction
        #     - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:custom.common.voicemailBucket}"
