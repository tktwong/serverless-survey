# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: testSls
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.config.appStage}
  region: ${self:custom.config.appRegion}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:*:*:*"

    # - Effect: "Allow"
    #   Action:
    #     - "s3:ListBucket"
    #     - "s3:Put*"
    #     - "s3:GetObject"
    #   Resource:
    #     - "arn:aws:s3:::${self:custom.config.bucketName}"
    #     - "arn:aws:s3:::${self:custom.config.bucketName}/*"

    - Effect: Allow
      Action: ["lambda:InvokeFunction"]
      Resource: ["*"]

  environment: 
    FUNCTION_PREFIX: ${self:service}-${self:provider.stage}
    USER_TABLE: ${self:service}User${self:custom.config.appStage}
    EXAM_TABLE: ${self:service}Exam${self:custom.config.appStage}
    QUESTION_TABLE: ${self:service}Question${self:custom.config.appStage}
    RESPONSE_TABLE: ${self:service}Response${self:custom.config.appStage}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  - ${file(api/api.yml)}

resources:
  Resources: 
    Candidate: ${file(database/Candidate.yml)}
    Exam: ${file(database/Exam.yml)}
    Question: ${file(database/Question.yml)}
    User: ${file(database/User.yml)}

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  config: ${file(config/${opt:runFor, 'dev'}.yml)}
  serverless-offline:
    port: 3000
  dynamodb:
    start:
      port: 8000
      dbPath: ${self:custom.config.appDBPath}
      migrate: true
    stages:
      - ${opt:runFor, 'dev'}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
