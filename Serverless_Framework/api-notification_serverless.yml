service: api-notification

dotenv:
  path: ./.env
  basePath: ./
  include:
    - DATABASE_SCHEMA
    - DATABASE_HOST
    - DATABASE_USERNAME
    - DATABASE_PASSWORD

custom:
  domains:
    default: ${self:service}.${opt:stage, 'sandpit'}.cloud.spacenow.com
    prod: ${self:service}.spacenow.com
  subnet:
    sandpit:
      privateA: subnet-0c75bbd1ea60481d4
      privateB: subnet-070ac699acd775765
      privateC: subnet-0eca793083726120c
    prod:
      privateA: subnet-04d5af2458ebdabbf
      privateB: subnet-010ee1d571a9ca82c
      privateC: subnet-069abf1da82eb3acc
  securityGroup:
    sandpit: sg-0dbf2b9d996f4c91e
    prod: sg-00b4a2172f7e29276
  customDomain:
    domainName: ${self:custom.domains.${opt:stage, 'sandpit'}, self:custom.domains.default}
    basePath: ""
    stage: ${opt:stage, 'sandpit'}
    certificateArn: ${ssm:/${opt:stageCert, 'SANDPIT'}/ACM_CERTIFICATE}
    createRoute53Record: true
    endpointType: "regional"
  prune:
    automatic: true
    number: 3

provider:
  name: aws
  runtime: nodejs10.x
  timeout: 120
  versionFunctions: false
  stage: ${opt:stage, 'sandpit'}
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource: "*"
  vpc:
    securityGroupIds:
      - ${self:custom.securityGroup.${opt:stage, 'sandpit'}}
    subnetIds:
      - ${self:custom.subnet.${opt:stage, 'sandpit'}.privateA}
      - ${self:custom.subnet.${opt:stage, 'sandpit'}.privateB}
      - ${self:custom.subnet.${opt:stage, 'sandpit'}.privateC}
  environment:
    DATABASE_SCHEMA: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_SCHEMA~true}
    DATABASE_HOST: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_HOST~true}
    DATABASE_USERNAME: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_USER~true}
    DATABASE_PASSWORD: ${ssm:/${opt:stageCert, 'SANDPIT'}/SPACENOW/DATABASE_PASSWORD~true}

functions:
  - ${file(src/functions/sns/sms.yml)}
  - ${file(src/functions/notification/notification.yml)}

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-prune-plugin
  - serverless-dotenv-plugin

resources:
  - ${file(resources/api-gateway-errors.yml)}
