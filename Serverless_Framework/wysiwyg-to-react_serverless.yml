service: tiny-cms-frontend

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  deploymentBucket:
    name: tiny-cms  # MANUAL ACTION REQUIRED - use same region
                        # aws s3api create-bucket --bucket tiny-cms

plugins:
  - serverless-plugin-cloudfront-lambda-edge
  - serverless-s3-cloudfront-plugin

custom:
  s3Bucket: ${self:service}-${self:provider.stage}
  distFolder: ./build
  distroId: ${self:service}-distro-id

package:
  exclude:
    - ./**
  include:
    - ./handler.js

functions:
  basicAuth:
    name: '${self:custom.s3Bucket}-viewer-request'
    handler: handler.basicAuth
    memorySize: 128
    timeout: 1
    lambdaAtEdge:
      distribution: WebsiteDistribution
      eventType: 'viewer-request'
  directoryRootOriginRequestRewriter:
    name: '${self:custom.s3Bucket}-origin-request'
    handler: handler.directoryRootOriginRequestRewriter
    memorySize: 128
    timeout: 1
    lambdaAtEdge:
      distribution: 'WebsiteDistribution'
      eventType: 'origin-request'

resources:
  Resources:
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { Ref: WebsiteBucket }
        PolicyDocument:
          Statement:
            -
              Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { Ref : WebsiteBucket }, "/*" ] ]  }
              Principal:
                AWS: { "Fn::Join" : [" ", ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity", { Ref: WebsiteOriginAccessIdentity } ] ] }
    WebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "CloudFrontOriginAccessIdentity for ${self:service}-${self:provider.stage}"
    WebsiteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          DefaultCacheBehavior:
            AllowedMethods: [ "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT" ]
            CachedMethods:  [ "GET", "HEAD", "OPTIONS" ]
            TargetOriginId: ${self:custom.distroId}
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: 'all'
          CustomErrorResponses:
            -
              ErrorCode: '403'
              ErrorCachingMinTTL: 1
            -
              ErrorCode: '404'
              ErrorCachingMinTTL: 1
            -
              ErrorCode: '500'
              ErrorCachingMinTTL: 1
            -
              ErrorCode: '502'
              ErrorCachingMinTTL: 1
            -
              ErrorCode: '503'
              ErrorCachingMinTTL: 1
            -
              ErrorCode: '504'
              ErrorCachingMinTTL: 1
          DefaultRootObject: 'index.html'
          Enabled: true
          PriceClass: 'PriceClass_100'
          HttpVersion: 'http2'
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          Origins:
            -
              Id: '${self:custom.distroId}'
              DomainName: { 'Fn::GetAtt': [ WebsiteBucket, DomainName ] }
              S3OriginConfig:
                OriginAccessIdentity: { "Fn::Join" : ["", ["origin-access-identity/cloudfront/", { Ref: WebsiteOriginAccessIdentity } ] ]  }
  Outputs:
    WebsiteDistribution:
      Value:
        'Fn::GetAtt': [ WebsiteDistribution, DomainName ]
      Description: "URL for website via CloudFront"