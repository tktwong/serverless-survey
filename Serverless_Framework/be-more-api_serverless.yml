service: be-more-app-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: eu-west-1
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  # environment: ${file(env.yml):${self:provider.stage}}

  # 'iamRoleStatements' defines the permission policy for the Lambda  function.
  # In this case Lambda functions are granted with permissions to  access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-1:*:*"

functions:
  # USER RELATED FUNCTIONS
  create-user:
    handler: user/create-user.main
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam

  get-self:
    handler: user/get-self.main
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer: aws_iam

  get-user:
    handler: user/get-user.main
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list-users:
    handler: user/list-users.main
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: aws_iam

  # this should be much like updating self
  update-user:
    handler: user/update-user.main
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete-user:
    handler: user/delete-user.main
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  assign-badge:
    handler: user/assign-badge.main
    events:
      - http:
          path: users/{id}/assign-badge
          method: put
          cors: true
          authorizer: aws_iam

  remove-badge:
    handler: user/remove-badge.main
    events:
      - http:
          path: users/{id}/remove-badge
          method: put
          cors: true
          authorizer: aws_iam

  confirm-requirement:
    handler: user/confirm-requirement.main
    events:
      - http:
          path: users/{id}/confirm-requirement
          method: put
          cors: true
          authorizer: aws_iam

  unconfirm-requirement:
    handler: user/unconfirm-requirement.main
    events:
      - http:
          path: users/{id}/unconfirm-requirement
          method: put
          cors: true
          authorizer: aws_iam

  update-title:
    handler: user/update-title.main
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
          authorizer: aws_iam

  # BADGES
  create-badge:
    handler: badge/create-badge.main
    events:
      - http:
          path: badges
          method: post
          cors: true
          authorizer: aws_iam

  get-badge:
    handler: badge/get-badge.main
    events:
      - http:
          path: badges/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list-badges:
    handler: badge/list-badges.main
    events:
      - http:
          path: badges
          method: get
          cors: true
          authorizer: aws_iam

  update-badge:
    handler: badge/update-badge.main
    events:
      - http:
          path: badges/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete-badge:
    handler: badge/delete-badge.main
    events:
      - http:
          path: badges/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  # LADDERS
  create-ladder:
    handler: ladder/create-ladder.main
    events:
      - http:
          path: ladders
          method: post
          cors: true
          authorizer: aws_iam

  get-ladder:
    handler: ladder/get-ladder.main
    events:
      - http:
          path: ladders/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list-ladders:
    handler: ladder/list-ladders.main
    events:
      - http:
          path: ladders
          method: get
          cors: true
          authorizer: aws_iam

  delete-ladder:
    handler: ladder/delete-ladder.main
    events:
      - http:
          path: ladders/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  get-step:
    handler: ladder/get-step.main
    events:
      - http:
          path: step/{ladder}/{step}
          method: get
          cors: true
          authorizer: aws_iam

  # FRAMES
  create-frame:
    handler: frame/create-frame.main
    events:
      - http:
          path: frames
          method: post
          cors: true
          authorizer: aws_iam

  list-frames:
    handler: frame/list-frames.main
    events:
      - http:
          path: frames
          method: get
          cors: true
          authorizer: aws_iam

  delete-frame:
    handler: frame/delete-frame.main
    events:
      - http:
          path: frames/{id}
          method: delete
          cors: true
          authorizer: aws_iam
