org: alphabird

app: codechallenge

service: ${self:app}-vpc

provider:
  name: aws
  profile: ${opt:profile, "default"}
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "us-east-1"}
  deploymentBucket:
    name: ${self:custom.sharedBucketName}

custom:
  basename: ${self:service}-${self:provider.stage}
  sharedBucketName: ${output:${self:app}-shared-bucket.S3SharedBucketArtifactsName}

resources:
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
    SubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-east-1a
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
    SubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-east-1b
        VpcId: !Ref VPC
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: false
    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
    RouteTableForNATG:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
    InternetRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttachment
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
        RouteTableId: !Ref RouteTable
    SubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref SubnetA
    SubnetBRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTableForNATG
        SubnetId: !Ref SubnetB
    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: "Internet Group"
        GroupDescription: "SSH traffic in, all traffic out."
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
    EIP:
      Type: 'AWS::EC2::EIP'
      Properties:
        Domain: vpc
      DependsOn: VPCGatewayAttachment
    NatGateway:
      Type: 'AWS::EC2::NatGateway'
      Properties:
        AllocationId: !GetAtt 'EIP.AllocationId'
        SubnetId: !Ref SubnetA
    Route:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref RouteTableForNATG
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NatGateway
    DatabaseSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: CloudFormation managed DB subnet group.
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
outputs:
  DatabaseSubnetGroupName:
    Ref: DatabaseSubnetGroup
  SecurityGroupName:
    Ref: SecurityGroup