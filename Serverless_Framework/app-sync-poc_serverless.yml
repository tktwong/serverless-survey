service: boiler-plate-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline


# serverless-webpack configuration
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${{opt:stage, self:provider.stage}}
  # Set the table name here so we can use it while testing locally
  tableName: ${{self:custom.stage}}-notes
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${{self:custom.tableThroughputs.${{self:custom.stage}}, self:custom.tableThroughputs.default}}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true


# Create our resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${{file(resources/dynamodb-note-table.yml)}}
  # S3
  - ${{file(resources/s3-bucket.yml)}}
  # Cognito
  - ${{file(resources/cognito-user-pool.yml)}}
  - ${{file(resources/cognito-identity-pool.yml)}}
  # AppSync
  - ${{file(resources/app-sync.yml)}}


provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}" # notice the double quotes for yaml to ignore the escape characters!
#  variableSyntax: "\\${((?!AWS)[ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}" # Use this for allowing CloudFormation Pseudo-Parameters in your serverless.yml -- e.g. ${{AWS::Region}}. All other Serverless variables work as usual.


  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${{self:custom.tableName}}

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]

functions:
  - ${{file(resources/notes.yml)}}
