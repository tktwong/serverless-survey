service: ExampleMicroService-api-user-order

frameworkVersion: ">=1.0.0 <2.0.0"

custom:
  prod:
    Stack: ExampleSite
    LogLevel: info
  dev:
    Stack: ExampleSite
    LogLevel: debug

package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 128
  timeout: 10
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-restApiId-${self:provider.stage}
    restApiResources:
      /user/{userid}:
        'Fn::ImportValue': ${self:custom.${self:provider.stage}.Stack}-ApiRootUserUseridVar-${self:provider.stage}
  logRetentionInDays: 14
  environment:
    logLevel: ${self:custom.${self:provider.stage}.LogLevel}

functions:
  UserOrder:
    handler: index.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}
    environment:
      ordersTable: ${self:custom.${self:provider.stage}.Stack}-Orders-${self:provider.stage}
    events:
      - http:
          path: /user/{userid}/orders
          method: get
          cors: true

plugins:
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-plugin-reducer
