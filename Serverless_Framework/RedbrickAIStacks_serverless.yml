service: redbrickai-tasks

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  client: ${opt:client, self:provider.client}
  stack: ${self:provider.stack}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.client}-${self:custom.stage}-tasks

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  client: a2d
  stack: task
  tags:
    client: ${self:custom.client}

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    client: ${self:custom.client}

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  submit:
    handler: create.main
    events:
      - http:
          path: tasks
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: tasks/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: tasks
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: tasks/{id}
          method: put
          cors: true
          authorizer: aws_iam

  cancel:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: tasks/{id}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(../resources/api-gateway-errors.yml)}
  # Cognito
  - ${file(../resources/cognito-user-pool.yml)}
  - ${file(../resources/cognito-identity-pool.yml)}
    # S3
  - ${file(../resources/s3-bucket.yml)}

