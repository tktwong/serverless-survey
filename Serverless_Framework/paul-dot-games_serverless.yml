service: paul-dot-games

provider:
  name: aws
  runtime: python3.6
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    S3_BUCKET: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:${opt:region, self:provider.region}:*:bucket/${self:provider.environment.S3_BUCKET}"

functions:
  list:
    handler: posts/list.list
    events:
      - http:
          path: api/posts
          method: get
          cors: true

  get:
    handler: posts/get.get
    events:
      - http:
          path: api/posts/{id}
          method: get
          cors: true

  create:
    handler: posts/create.create
    events:
      - http:
          path: api/posts
          method: post
          cors: true

  update:
    handler: posts/update.update
    events:
      - http:
          path: api/posts/{id}
          method: put
          cors: true

  delete:
    handler: posts/delete.delete
    events:
      - http:
          path: api/posts/{id}
          method: delete
          cors: true

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
