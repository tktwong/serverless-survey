service: starbucks-app-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  cardstableName: ${self:custom.stage}-cards
  carttableName: ${self:custom.stage}-cart
  menutableName: ${self:custom.stage}-menu
  transactiontableName: ${self:custom.stage}-transaction
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stage: dev
    cardstableName: ${self:custom.cardstableName}
    carttableName: ${self:custom.carttableName}
    menutableName: ${self:custom.menutableName}
    transactiontableName: ${self:custom.transactiontableName}
    stripeSecretKey: ${self:custom.environment.stripeSecretKey}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ CardsTable, Arn ]
        - "Fn::GetAtt": [ CartTable, Arn ]
        - "Fn::GetAtt": [ MenuTable, Arn ]
        - "Fn::GetAtt": [ TransactionTable, Arn ]
functions:
  listMenu:
    handler: api/menuHandler.list
    events:
      - http:
          path: menu
          method: get
          cors: true
          authorizer: aws_iam

  getCart:
    handler: api/cartHandler.retrieveCart
    events:
      - http:
          path: cart
          method: get
          cors: true
          authorizer: aws_iam

  addItemToCart:
    handler: api/cartHandler.addItem
    events:
      - http:
          path: cart
          method: patch
          cors: true
          authorizer: aws_iam

  removeItemFromCart:
    handler: api/cartHandler.removeItem
    events:
      - http:
          path: cart/{item}
          method: delete
          cors: true
          authorizer: aws_iam

  clearCart:
    handler: api/cartHandler.clearCart
    events:
      - http:
          path: cart
          method: delete
          cors: true
          authorizer: aws_iam

  cardCreate:
    handler: api/cardsHandler.createCard
    events:
      - http:
          path: card
          method: post
          cors: true
          authorizer: aws_iam

  cardGet:
    handler: api/cardsHandler.retrieveCard
    events:
      - http:
          path: card
          method: get
          cors: true
          authorizer: aws_iam

  cardUpdate:
    handler: api/cardsHandler.updateCard
    events:
      - http:
          path: card
          method: put
          cors: true
          authorizer: aws_iam

  cardDelete:
    handler: api/cardsHandler.removeCard
    events:
      - http:
          path: card
          method: delete
          cors: true
          authorizer: aws_iam

  addToTransactions:
    handler: api/transactionsHandler.addTransaction
    events:
      - http:
          path: transactions
          method: post
          cors: true
          authorizer: aws_iam

  getTransactions:
    handler: api/transactionsHandler.getTransactions
    events:
      - http:
          path: transactions
          method: get
          cors: true
          authorizer: aws_iam

  clearTransactions:
    handler: api/transactionsHandler.clearTransactions
    events:
      - http:
          path: transactions
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
