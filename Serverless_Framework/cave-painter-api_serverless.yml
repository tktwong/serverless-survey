service: cave-painter-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# Custom variables outside scope of provider
custom:
  serverless-offline:
    port: 4000
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true # Enable auto-packing of external modules
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  environment: ${file(env.yml):${self:provider.stage}}

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  dynamodb:
    # Set our table throughputs for prod and all other non-prod stages.
    throughputs:
      prod: 5
      default: 1
    throughput: ${self:provider.dynamodb.throughputs.${self:custom.stage}, self:provider.dynamodb.throughputs.default}
  # Variables here are available from process.env
  environment:
    # Set the table name here so we can use it while testing locally
    tableName: ${self:custom.stage}-orders

  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:DescribeTable
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     # Restrict our IAM role permissions to
  #     # the specific table for the stage
  #     Resource:
  #       - "Fn::GetAtt": [ OrdersTable, Arn ]
  # stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)
  #   - Effect: Allow
  #     Principal: "*"
  #     Action: "Update:*"
  #     Resource: "*"

# Create and wire up Lambda functions
functions:
  graphql:
    handler: graphql/handler.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
  # playground:
  #   handler: graphql/handler.playgroundHandler
  #   events:
  #     - http:
  #         path: playground
  #         method: get
  #         cors: true
  orderCreatedHook:
    role: ServiceRole
    handler: functions/orders/hooks/created.hook
    events:
      - http:
          path: stripe/order-created
          method: post
          cors:
            origin: "api.stripe.com"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

# Create our resources with separate CloudFormation templates
resources:
  # RDS
  # - ${file(resources/postgres-table-coffee.yml)}
  # - ${file(resources/postgres-table-orders.yml)}
  - ${file(resources/dynamodb-table-orders.yml)}
  # - ${file(resources/dynamodb-table-coffee.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  # IAM
  - ${file(resources/iam-dynamo-roles.yml)}
