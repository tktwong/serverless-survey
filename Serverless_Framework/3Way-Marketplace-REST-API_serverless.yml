# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: BoilerPlate # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

Vendor:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, ‘dev’} # v1 is stage name
  region: us-east-1
  iamRoleStatements:
 
    [ 
      { 
        Effect: "Allow",
        Action: [
           "lambda:InvokeFunction"
        ],
        Resource: "*"
      },

      {
        Effect: "Allow",
        Action: [
           "dynamodb:Query",
          "dynamodb:Scan",
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem"
        ],
         Resource: "*"
  },

    {
      Effect: "Allow",
      Action: [
        "SNS:Publish"
      ],
      Resource: "*"
    }
 ]
  environment:
    JWT_SECRET: "1C0BFDBBCB72E8E22D7AA3F9DA7DD714E5CBF3826DD7C022AD80C2CD86663561"
    apiArn: 'arn:aws:execute-api:us-east-1:ynwn559cx5:13w0xoyggi/*/*/'
    CRYPTO_BYTE_SIZE: 128
  
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:

  login:
    handler: authentication/login.handler
    events:
      - http:
         path: /login
         method: post
         cors: true
  authHelpher:
    handler: /authentication/authHelper.js

  getTransaction:
    handler: Transactions/getTransaction.handler
    events:
      - http:
         path: Transactions/{key}
         method: get
         cors: true

  changeStatus:
    handler: Transactions/changeStatus.handler
    events:
      - http:
         path: Transactions/{key}
         method: post
         cors: true

  notification: 
    handler: notification.handler
  
  addItem:
    handler: Transactions/addItem.handler
    events:
      - http:
         path: Transactions/items/{id}
         method: post
         cors: true
  
  deleteItem:
    handler: Transactions/deleteItem.handler
    events:
      - http:
         path: Transactions/items/{id}
         method: delete
         cors: true

  newTransaction:
    handler: Transactions/newTransaction.handler
    events:
      - http:
         path: Transactions
         method: post
         cors: true
  
  mostRecentTransaction:
    handler: Transactions/mostRecentTransaction.handler
    events: 
      - http:
         path: Transactions/recent
         method: get
         cors: true
   
  recall:
    handler: Transactions/recall.handler
    events:
      - http:
         path: Transactions/recalls/{id}
         method: post
         cors: true
   
  getHistory:
    handler: Transactions/getHistory.handler
    events:
      - http:
         path: Transactions/history/{email}
         method: get
         cors: true
  
  getAllCustomers:
    handler: Customer/getAllCustomers.handler
    events:
      - http:
         path:lCustomer
         method: get
         cors: true
 
  newCustomer:
    handler: Customer/newCustomer.handler
    events:
      - http:
         path:lCustomer
         method: post
         cors: true

  deleteCustomer:
    handler:lCustomer/deleteCustomer.handler
    events:
      - http:
         path:lCustomer/{email}
         method: delete
         cors: true

  getCustomer:
    handler:lCustomer/getCustomer.handler
    events:
      - http:
         path:lCustomer/{email}
         method: get
         cors: true

  getAllVendors:
    handler: Vendors/getAllVendors.handler
    events:
      - http:
         path: Vendors
         method: get
         cors: true

  newVendor:
    handler: Vendors/newVendor.handler
    events:
      - http:
         path: Vendors
         method: post
         cors: true

  metrics:
    handler: Vendors/metrics.handler
    events:
      - http:
         path: Vendors/metrics/{email}
         method: get
         cors: true

  getVendor:
    handler: Vendors/getVendor.handler
    events:
      - http:
         path: Vendors/{email}
         method: get
         cors: true

  deleteVendor:
    handler: Vendors/deleteVendor.handler
    events:
      - http:
         path: Vendors/{email}
         method: delete
         cors: true

  getAllRunners:
    handler: Runners/getAllRunners.handler
    events:
      - http:
         path: Runners
         method: get
         cors: true

  newRunner:
    handler: Runners/newRunner.handler
    events:
      - http:
         path: Runners
         method: post
         cors: true 
  
  deleteRunner:
    handler: Runners/deleteRunner.handler
    events:
      - http:
         path: Runners/{email}
         method: delete
         cors: true 
  
  getRunner:
    handler: Runners/getRunner.handler
    events:
      - http:
         path: Runners/{email}
         method: get
         cors: true 

  



  
  
  


        
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
  #  events:
  #    - http:
  #        path: users/create
  #        method: get
  #    - websocket: $connect
  #    - s3: ${env:BUCKET}
  #    - schedule: rate(10 minutes)
  #    - sns: greeter-topic
  #    - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
  #    - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
  #    - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
