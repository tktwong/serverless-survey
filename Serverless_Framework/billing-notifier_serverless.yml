service: billing-notifier
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-1
  deploymentBucket: serverless-upload-ap-northeast-1
  versionFunctions: false
  variableSyntax: "\\${{([\\s\\S]+?)}}"
  iamRoleStatements:
    - Effect: Allow
      Action: ["s3:List*", s3:GetObject]
      Resource: "arn:aws:s3:::${{self:service}}"
    - Effect: Allow
      Action: ["s3:Get*", s3:PutObject]
      Resource: "arn:aws:s3:::${{self:service}}/*"
    - Effect: Allow
      Action: [ssm:GetParameter]
      Resource:
        - Fn::Join: [ ":", ["arn:aws:ssm", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "parameter/webservice/viewcard/*"]]
        - Fn::Join: [ ":", ["arn:aws:ssm", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "parameter/webservice/etc_meisai/*"]]
        - Fn::Join: [ ":", ["arn:aws:ssm", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "parameter/webservice/etc_mile/*"]]

functions:
  everyday:
    handler: handler.runner
    description: notify sites everyday
    memorySize: 3008
    timeout: 300
    environment:
      SLACK_WEBHOOK_URL: "${{ssm:/slack/webhook/sensitive~true}}"
      TARGETS: EtcMeisaiPageParser,EtcMilePageParser,ViewCardMeisaiPageParser
    layers:
      - Fn::Join: [ ":", [ "arn:aws:lambda", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "layer:puppeteer:3" ] ]
      - Fn::Join: [ ":", [ "arn:aws:lambda", { Ref: AWS::Region }, { Ref: AWS::AccountId }, "layer:japanese_font:1" ] ]
    events:
      - schedule: cron(0 14 * * ? *)

resources:
  Description: Parse credit card's billing site and post to slack
  Resources:
    ## override
    IamRoleLambdaExecution:
      Properties:
        RoleName: "${{self:service}}-exec"

    EverydayLogGroup:
      Properties:
        RetentionInDays: 7

    ResultStoreBucket:
      Type: AWS::S3::Bucket
      Properties:
       BucketName: "${{self:service}}"
