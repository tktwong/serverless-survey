# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: instatour
# app and org for use with dashboard.serverless.com
app: instatour
org: runaticmoon

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:STAGE}
  region: ap-northeast-2
  timeout: 30
  tracing: true
  iamRoleStatements:
    - Effect: 'Allow' # xray permissions (required)
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
    # for S3
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        - 'arn:aws:s3:::instatour-image'
        - 'arn:aws:s3:::instatour-image/*'
  deploymentBucket:
    name: instatour-${env:STAGE}-serverlessdeploymentbucket
    serverSideEncryption: AES256

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

plugins:
  - serverless-deployment-bucket
  - serverless-aws-documentation
  - serverless-dotenv-plugin
  - serverless-plugin-typescript
  - serverless-apigw-binary
  - serverless-plugin-tracing
  - serverless-plugin-optimize
  - serverless-domain-manager
  - serverless-offline

custom:
  myAuthorizer:
    type: COGNITO_USER_POOLS
    authorizerId:
      Ref: ApiGatewayAuthorizer
  apigwBinary:
    types: #list of mime-types
      - 'image/jpeg'
      - 'text/html'
  customDomain:
    domainName: api.instatour.tech
    stage: ${env:STAGE}
    basePath: ${env:API_VERSION}
    certificateName: '*.instatour.tech'
    createRoute53Record: true
  documentation:
    api:
      info:
        version: '2' # see note above about this being ignored
        title: 'InstaTour API' # see note above about this being ignored
        description: 'Inha Univ. Capstone InstaTour Backend API'
        termsOfService: 'http://www.example.com/terms-of-service' # 사용자 약관
        contact:
          name: 'Juho Moon'
          url: 'https//soybean.me/'
          email: 'mwngh3@gmail.com'
        license:
          name: 'Licensing'
          url: 'http://www.example.com/licensing' # 라이센스 설명
    tags:
      - name: Test
        description: 테스트용 API
      - name: Users
        description: 유저 관련 API
      - name: Posts
        description: 게시물 관련 API
      - name: Auth
        description: Cognito 관련 API
      - name: Search
        description: 검색 관련 API
      - name: Stats
        description: 통계 관련 API
    authorizers:
      - name: MyCognitoAuthorizer
        description: 'AWS Cognito의 인증 토큰'
    # resources:
    #   - path: 'some/path'
    #     description: 'This is the description for some/path'
    #   - path: 'some/other/path'
    #     description: 'This is the description for some/other/path'
    models:
      # Request
      #Auth
      - name: AuthPostRequest
        contentType: 'application/json'
        schema: ${file(models/request/auth/post.json)}
        # Posts
      - name: PostsPostRequest
        contentType: 'application/json'
        schema: ${file(models/request/posts/post.json)}
        # Posts/{pid}
      - name: PostsPidRatesPutRequest
        contentType: 'application/json'
        schema: ${file(models/request/posts/pid/rates/put.json)}

      # Response
      # Test
      - name: HelloGetResponse
        contentType: 'application/json'
        schema: ${file(models/response/hello/get.json)}
        # Auth
      - name: AuthPostResponse
        contentType: 'application/json'
        schema: ${file(models/response/auth/post.json)}
        # Users
      - name: UsersGetResponse
        contentType: 'application/json'
        schema: ${file(models/response/users/get.json)}
        # Users/heart
      - name: UsersHeartGetResponse
        contentType: 'application/json'
        schema: ${file(models/response/users/heart/get.json)}
        # Users/posting
      - name: UsersPostingGetResponse
        contentType: 'application/json'
        schema: ${file(models/response/users/posting/get.json)}
        # Posts
      - name: PostsGetResponse
        contentType: 'application/json'
        schema: ${file(models/response/posts/get.json)}
      - name: PostsPostResponse
        contentType: 'application/json'
        schema: ${file(models/response/posts/post.json)}
        # Posts/{pid}
      - name: PostsPidGetResponse
        contentType: 'application/json'
        schema: ${file(models/response/posts/pid/get.json)}
        # Search
      - name: SearchGetResponse
        contentType: 'application/json'
        schema: ${file(models/response/search/get.json)}
      - name: StatsClickGetResponse
        contentType: 'application/json'
        schema: ${file(models/response/stats/click/get.json)}
      - name: StatsPostingGetResponse
        contentType: 'application/json'
        schema: ${file(models/response/stats/posting/get.json)}
        # Error
      - name: ErrorResponse
        description: 'This is an error'
        contentType: 'application/json'
        schema: ${file(models/error.json)}
        # Default
      - name: ProcessingSuccessResponse
        description: 'Success and response is null'
        contentType: 'application/json'
        schema: ${file(models/204.json)}
      # - name: 'CreateRequest'
      #   description: 'Model for creating something'
      #   contentType: 'application/json'
      #   schema: ${file(models/create_request.json)}
      # - name: 'Address'
      #   description: 'This is an address'
      #   contentType: 'application/json'
      #   schema:
      #     type: 'object'
      #     properties:
      #       street:
      #         type: 'string'
      # - name: 'Customer'
      #   description: 'This is a customer'
      #   contentType: 'application/json'
      #   schema:
      #     type: 'object'
      #     properties:
      #       name:
      #         type: 'string'
      #       address:
      #         $ref: '{{model: Address}}'

# you can add packaging information here
package:
  individually: true
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # 기본 테스트
  hello:
    handler: handler.hello
    events:
      - http:
          path: /hello
          method: get
          cors: true
          documentation:
            summary: '테스트용 기본 메세지'
            description: 'AWS Lambda의 기본 Response'
            tags:
              - Test
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': HelloGetResponse
            # requestBody:
            #   description: 'Request body description'
            # requestHeaders:
            #   - name: 'x-header'
            #     description: 'Header description'
            #   - name: 'Authorization'
            #     description: 'Auth Header description'
            # queryParams:
            #   - name: 'sid'
            #     description: 'Session ID'
            #   - name: 'theme'
            #     description: 'Theme for for the website'
            # pathParams:
            #   - name: 'id'
            #     description: 'ID of the thing you want to create'
            # requestModels:
            #   'application/json': 'CreateRequest'
            #   'application/xml': 'CreateRequestXml'
            # methodResponses:
            #   - statusCode: '200'
            #     responseBody:
            #       description: 'Response body description'
            #     responseHeaders:
            #       - name: 'x-superheader'
            #         description: 'this is a super header'
            #     responseModels:
            #       'application/json': 'CreateResponse'
            #   - statusCode: '400'
            #     responseModels:
            #       'application/json': 'ErrorResponse'
  # 로그인
  auth:
    handler: src/auth.handler
    events:
      - http:
          path: /auth
          method: post
          cors: true
          documentation:
            summary: 'Cognito 로그인'
            description: 'Cognito 회원풀에 로그인하고 그 결과로 토큰을 반환'
            tags:
              - Auth
            requestBody:
              description: >
                username: 로그인할 유저 아이디 <br>
                password: 로그인할 유저 비밀번호
            requestModels:
              'application/json': AuthPostRequest
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': AuthPostResponse
  # Search
  search:
    handler: src/search.handler
    events:
      - http:
          path: /search
          method: get
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: '해시태그로 검색'
            description: '해시태그로 검색하여 그 결과를 반환한다'
            tags:
              - Search
            queryParams:
              - name: 'location'
                description: '검색할 장소(해시태그)'
                required: true
              - name: 'section'
                description: '장소를 구분짓는 그룹 (default: SEC_ALL)'
              - name: 'skip'
                description: '게시글 결과를 앞에서 부터 생략할 갯수 (default: 0)'
              - name: 'limit'
                description: '게시글 결과를 받아올 갯수 (default: 5)'
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': SearchGetResponse
  # User
  users:
    handler: src/users.handler
    events:
      - http:
          path: /users
          method: get
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 유저 정보 가져오기
            description: 'DB에 저장된 유저의 정보를 가져온다'
            tags:
              - Users
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': UsersGetResponse
      - http:
          path: /users
          method: delete
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 유저 삭제
            description: 'DB에 저장된 유저의 정보를 삭제한다'
            tags:
              - Users
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': ProcessingSuccessResponse
      - http:
          path: /users/heart
          method: get
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 유저의 찜목록 가져오기
            description: '유저가 찜한 게시글들을 가져온다.'
            tags:
              - Users
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': UsersHeartGetResponse
      - http:
          path: /users/posting
          method: get
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 유저의 작성 게시글 목록 가져오기
            description: '유저가 작성한 게시글들을 가져온다.'
            tags:
              - Users
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': UsersPostingGetResponse
  # Post
  posts:
    handler: src/posts.handler
    events:
      - http:
          path: /posts
          method: get
          cors: true
          # authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 테스트용 이미지 받기
            description: '테스트용 5개의 이미지를 받아온다.'
            tags:
              - Test
              - Posts
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': PostsGetResponse
      - http:
          path: /posts
          method: post
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 게시글 업로드
            description: '게시글을 업로드한다.'
            tags:
              - Posts
            requestBody:
              description: >
                *location: 검색할 장소(해시태그) <br>
                section: 장소를 구분짓는 그룹 (default: SEC_ALL) <br>
                img_url: 게시글 이미지 URL (default: https://s3.instatour.tech/blank.jpg) <br>
                content: 게시글 내용 (default: '')
            requestModels:
              'application/json': PostsPostRequest
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': PostsPostResponse
      - http:
          path: /posts/{pid}
          method: get
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 게시글 가져오기
            description: '게시글을 가져오고 CLICKED 관계를 연결한다.'
            tags:
              - Posts
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': PostsPidGetResponse
      - http:
          path: /posts/{pid}/heart
          method: post
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 게시글 찜하기
            description: '게시글을 찜한다.'
            tags:
              - Posts
            methodResponses:
              - statusCode: '204'
                responseModels:
                  'application/json': ProcessingSuccessResponse
      - http:
          path: /posts/{pid}/heart
          method: delete
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 게시글 찜해제
            description: '게시글을 찜을 해제한다.'
            tags:
              - Posts
            methodResponses:
              - statusCode: '204'
                responseModels:
                  'application/json': ProcessingSuccessResponse
      - http:
          path: /posts/{pid}/rates
          method: put
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 게시글에 별점주기
            description: '게시글에 별점을 준다.'
            tags:
              - Posts
            requestBody:
              description: >
                *rates: 게시글에 부여할 별점 (범위 제한 없음)
            requestModels:
              'application/json': PostsPidRatesPutRequest
            methodResponses:
              - statusCode: '204'
                responseModels:
                  'application/json': ProcessingSuccessResponse
      - http:
          path: /posts/{pid}/rates
          method: delete
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: 게시글에 별점삭제
            description: '게시글에 별점을 삭제한다.'
            tags:
              - Posts
            methodResponses:
              - statusCode: '204'
                responseModels:
                  'application/json': ProcessingSuccessResponse
  # Stats
  stats:
    handler: src/stats.handler
    events:
      - http:
          path: /stats/click
          method: get
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: '탑 클릭 통계'
            description: 'n일간의 클릭수가 많은 게시글들을 찾는다.'
            tags:
              - Stats
            queryParams:
              - name: 'date'
                description: 'n일전~오늘까지의 통계 (default: 0, 양수)'
              - name: 'skip'
                description: '게시글 결과를 앞에서 부터 생략할 갯수 (default: 0)'
              - name: 'limit'
                description: '게시글 결과를 받아올 갯수 (default: 5)'
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': StatsClickGetResponse
      - http:
          path: /stats/posting
          method: get
          cors: true
          authorizer: ${self:custom.myAuthorizer}
          documentation:
            summary: '탑 포스팅 통계'
            description: '전체기간동안 포스팅수가 많은 유저들을 찾는다.'
            tags:
              - Stats
            queryParams:
              - name: 'skip'
                description: '게시글 결과를 앞에서 부터 생략할 갯수 (default: 0)'
              - name: 'limit'
                description: '게시글 결과를 받아올 갯수 (default: 5)'
            methodResponses:
              - statusCode: '200'
                responseModels:
                  'application/json': StatsPostingGetResponse
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  - ${file(resources/swagger-bucket.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  - ${file(resources/api-gateway.yml)}
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
