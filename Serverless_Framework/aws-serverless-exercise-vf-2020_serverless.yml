service: aws-exercise
frameworkVersion: "1"
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - comprehend:DetectSentiment
      Resource: "*"
    - Effect: Allow
      Action:
        - transcribe:*
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - transcriptionTable
          - Arn
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::GetAtt:
          - sentimentTable
          - Arn
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:PutObjectAcl
      Resource: arn:aws:s3:::${self:custom.audioOutputBucket}/*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:PutObjectAcl
      Resource: arn:aws:s3:::${self:custom.audioInputBucket}/*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:PutObjectAcl
      Resource: arn:aws:s3:::${self:custom.jsonBucket}/*
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:DeleteObject
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:custom.jsonBucket}
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:DeleteObject
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:custom.audioInputBucket}
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:DeleteObject
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:custom.audioOutputBucket}
  environment:
    jsonBucket: ${self:custom.jsonBucket}
    audioInputBucket: ${self:custom.audioInputBucket}
    audioOutputBucket: ${self:custom.audioOutputBucket}
    sentimentTable: ${self:custom.sentimentTable}
    transcriptionTable: ${self:custom.transcriptionTable}
    audioFile: audio-sample.m4a
    jsonFile: sample-data.json
    transcriptionJobName: ${self:service}-transcriptionjob-${sls:instanceId}
    analyzeAudioLambda: ${self:custom.analyzeDataLambda }

  s3:
    outputAudioBucket:
      name: ${self:custom.audioOutputBucket}
      accessControl: PublicRead
      publicAccessBlockConfiguration: false

functions:
  analyzeData:
    name: ${self:custom.analyzeDataLambda}
    handler: handler.analyzeData
  transcribeAudio:
    name: ${self:custom.transcribeAudioLambda}
    handler: handler.analyzeAudio
  saveAudio:
    name: ${self:custom.saveAudioLambda}
    handler: handler.saveAudio
    events:
      - s3:
          bucket: ${self:custom.audioOutputBucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .json
resources:
  Resources:
    sentimentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.sentimentTable}
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    transcriptionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.transcriptionTable}
        AttributeDefinitions:
          - AttributeName: guid
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: guid
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    JSONDataSource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.jsonBucket}
    AudioDataSource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.audioInputBucket}

plugins:
  - serverless-s3-remover
  - refactor-s3-deploy
custom:
  remover:
    prompt: true
    buckets:
      - ${self:custom.jsonBucket}
      - ${self:custom.audioInputBucket}
      - ${self:custom.audioOutputBucket}
  globalPrefix: "voice-foundry-"
  stage: ${opt:stage, 'dev'}
  lambdaPrefix: ${self:custom.globalPrefix}${self:service}
  analyzeDataLambda: ${self:custom.lambdaPrefix}_analyzeData_${self:custom.stage}
  transcribeAudioLambda: ${self:custom.lambdaPrefix}_transcribeAudio_${self:custom.stage}
  saveAudioLambda: ${self:custom.lambdaPrefix}_saveAudio_${self:custom.stage}
  jsonBucket: data-json-${self:custom.stage}-${sls:instanceId}
  audioInputBucket: data-audio-${self:custom.stage}-${sls:instanceId}
  audioOutputBucket: transcribed-audio-output-${self:custom.stage}-${sls:instanceId}
  sentimentTable: ChatSentimentTable_${self:service}-${self:custom.stage}
  transcriptionTable: TranscriptionTable_${self:service}-${self:custom.stage}
  assets:
    verbose: true
    auto: true
    targets:
      - bucket:
          Ref: JSONDataSource
        acl: public-read
        files:
          - source: ./data/
            defaultContentType: application/json
            globs: "sample-data.json"
      - bucket:
          Ref: AudioDataSource
        acl: public-read
        files:
          - source: ./data/
            defaultContentType: audio/mpeg
            globs: "audio-sample.m4a"
