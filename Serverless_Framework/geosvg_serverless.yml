service: geosvg

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}

plugins:
  - serverless-s3-deploy
  - serverless-plugin-scripts
  - serverless-cloudfront-invalidate

custom:
  hostedZoneId: ${env:HOSTED_ZONE_ID}
  siteName: ${env:SITE_DOMAIN}
  acmCertificateArn: ${env:ACM_CERTIFICATE_ARN}

  scripts:
    hooks:
      "package:createDeploymentArtifacts": yarn download-geojson && yarn generate-units && yarn build

  cloudfrontInvalidate:
    distributionIdKey: "CloudFrontDistributionId"
    items:
      - "/*"

  assets:
    uploadConcurrency: 10
    auto: true
    targets:
      - bucket: ${self:custom.siteName}
        files:
          - source: ./build/
            globs:
              - "**/*.html"
              - "**/*.txt"
            headers:
              CacheControl: max-age=86400

      - bucket: ${self:custom.siteName}
        prefix: data
        files:
          - source: ./build/data/
            globs:
              - "**/*.json"
            headers:
              CacheControl: max-age=604800

      - bucket: ${self:custom.siteName}
        prefix: static
        files:
          - source: ./build/static/
            globs:
              - "**/*.css"
              - "**/*.js"
              - "**/*.LICENSE.txt"

            headers:
              CacheControl: max-age=604800

resources:
  Resources:
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html # TODO

    StaticSiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource:
                Fn::Join: ["", ["arn:aws:s3:::", { "Ref": "StaticSite" }, "/*"]]

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          PriceClass: PriceClass_100
          Origins:
            - DomainName: ${self:custom.siteName}.s3-website.eu-central-1.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: StaticSiteOrigin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: "true"

          Aliases:
            - ${self:custom.siteName}

          DefaultRootObject: index.html

          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: /index.html

          HttpVersion: http2

          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS

            ## The origin id defined above
            TargetOriginId: StaticSiteOrigin
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: "false"
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https

            Compress: true

          ViewerCertificate:
            AcmCertificateArn: ${self:custom.acmCertificateArn}
            SslSupportMethod: sni-only

    DNSRecords:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.hostedZoneId}
        RecordSets:
          - Name: ${self:custom.siteName}
            Type: A
            AliasTarget:
              # For CloudFront, HostedZoneId is always Z2FDTNDATAQYW2, see:
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName:
                "Fn::GetAtt": [CloudFrontDistribution, DomainName]

  Outputs:
    CloudFrontDistributionId:
      Description: Static site CloudFront distribution id
      Value:
        Ref: CloudFrontDistribution
