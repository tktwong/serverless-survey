service: qauction

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "=1.11.0"

provider:
  name: aws
  runtime: nodejs6.10
  versionFunctions: false
# you can overwrite defaults here
#  stage: dev
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
   - Effect: "Allow"
     Action:
         - "dynamodb:Query"
         - "dynamodb:Scan"
         - "dynamodb:GetItem"
         - "dynamodb:PutItem"
         - "dynamodb:UpdateItem"
         - "dynamodb:DeleteItem"
         - "dynamodb:BatchGetItem"
     Resource: "arn:aws:dynamodb:*:*:table/*"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  create:
    handler: create.create
    events:
      - http:
          path: qauctions
          method: post
          cors: true
  get:
    handler: get.get
    events:
      - http:
          path: qauctions/{id}
          method: get
          cors: true
  update:
    handler: update.update
    events:
      - http:
          path: qauctions/{id}
          method: put
          cors: true
  delete:
    handler: delete.index
    events:
      - http:
          path: qauctions/{id}
          method: delete
          cors: true
  listByUserId:
    handler: list.listByUserId
    events:
      - http:
          path: qauctions/user/{userId}
          method: get
          cors: true
  listLive:
    handler: list.listLive
    events:
      - http:
          path: qauctions/live
          method: get
          cors: true
  bid:
    handler: bid.create
    descriptio: Whe user place bid for lot
    events:
      - http:
          path: qauctions/bid/{id}
          method: post
          cors: true
  favlist:
    handler: favlist.favlist
    events:
      - http:
          path: qauctions/favlist
          method: post
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
 Resources:
     qauctionTable:
      Type: AWS::DynamoDB::Table
      Properties:
  #name: string,
  #auctionId?: string,
  #description: string,
  #state: States,
  #lots?: Array<IQAuctionLot>,
  #user?: User,
  #id?: string
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: qauctionTable
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
