service: okta-domains

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-jest-plugin
  - serverless-domain-manager

custom:
  env: ${file(./${self:provider.stage}.env.json)}
  customDomain:
    #domainName: api-${self:provider.stage}.idp.rocks
    domainName: ${self:provider.stage}.api.idp.rocks
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: false
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
    stages:
      - dev
      - test
  okta:
    issuer: ${self:custom.env.ISSUER}
    clientId: ${self:custom.env.CLIENT_ID}
    audience: ${self:custom.env.AUDIENCE}
  jest:
    # You can pass jest options here
    # See details here: https://facebook.github.io/jest/docs/configuration.html
    # For instance, uncomment next line to enable code coverage
    collectCoverage: true

provider:
  name: aws
  runtime: nodejs12.x
  profile: udp-admin
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'dev'}
  memorySize: 128
  timeout: 5
  environment:
    DNS_VERIFY_PREFIX: _oktadac.verification
    DOMAINS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    VERIFICATIONS_TABLE: ${self:service}-verify-${opt:stage, self:provider.stage}
    OKTA_ISSUER: ${self:custom.env.ISSUER}
    OKTA_AUDIENCE: ${self:custom.env.AUDIENCE}
    OKTA_CLIENT_ID: ${self:custom.env.CLIENT_ID}
    OKTA_GROUP_CLAIM_ADMINS: ${self:custom.env.ADMIN_GROUP}
    ALLOW_ORIGIN: ${self:custom.env.ALLOW_ORIGIN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DOMAINS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DOMAINS_TABLE}/index/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.VERIFICATIONS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.VERIFICATIONS_TABLE}/index/*"

functions:
  oktaAuth:
    handler: authorizer/handler.auth
    cors: true

  addDomain:
    handler: domains/create.handler
    okta:
      expr: "'SUPERUSERS' in groups"
    events:
      - http:
          path: domains
          method: post
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0

  getDomain:
    handler: domains/get.handler
    okta: true
    events:
      - http:
          path: domains/{domain}
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0

  removeDomain:
    handler: domains/delete.handler
    okta:
      expr: "'SUPERUSERS' in groups"
    events:
      - http:
          path: domains/{domain}
          method: delete
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0

  listDomains:
    handler: domains/list.handler
    okta: true
    events:
      - http:
          path: domains
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0

  webfinger:
    handler: domains/webfinger.handler
    events:
      - http:
          path: .well-known/webfinger
          method: get
          cors: true

  createVerification:
    handler: verifications/create.handler
    okta: true
    events:
      - http:
          path: verifications
          method: post
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0

  checkVerification:
    handler: verifications/verify.handler
    okta: true
    events:
      - http:
          path: verifications/{domain}
          method: put
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0

  getVerification:
    handler: verifications/get.handler
    okta: true
    events:
      - http:
          path: verifications/{domain}
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0

  deleteVerification:
    handler: verifications/delete.handler
    okta: true
    events:
      - http:
          path: verifications/{domain}
          method: delete
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0

  listVerifications:
    handler: verifications/list.handler
    okta: true
    events:
      - http:
          path: verifications
          method: get
          cors: true
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0

resources:
  Resources:
    DomainsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DOMAINS_TABLE}
        AttributeDefinitions:
          - AttributeName: domain
            AttributeType: S
          - AttributeName: idp
            AttributeType: S
        KeySchema:
          - AttributeName: idp
            KeyType: HASH
          - AttributeName: domain
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: idps-${self:provider.environment.DOMAINS_TABLE}
            KeySchema:
              - AttributeName: idp
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - domain
                - created
                - createdBy
                - verified
              ProjectionType: INCLUDE
          - IndexName: domains-${self:provider.environment.DOMAINS_TABLE}
            KeySchema:
              - AttributeName: domain
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - idp
                - created
                - createdBy
                - verified
              ProjectionType: INCLUDE
        BillingMode: PAY_PER_REQUEST
    VerificationsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.VERIFICATIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: domain
            AttributeType: S
          - AttributeName: idp
            AttributeType: S
        KeySchema:
          - AttributeName: idp
            KeyType: HASH
          - AttributeName: domain
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: idps-${self:provider.environment.VERIFICATIONS_TABLE}
            KeySchema:
              - AttributeName: idp
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - domain
                - tenant
                - created
                - createdBy
                - updated
                - updatedBy
                - verified
                - dnsVerificationString
              ProjectionType: INCLUDE
          - IndexName: domains-${self:provider.environment.VERIFICATIONS_TABLE}
            KeySchema:
              - AttributeName: domain
                KeyType: HASH
            Projection:
              NonKeyAttributes:
                - idp
                - tenant
                - created
                - createdBy
                - updated
                - updatedBy
                - verified
                - dnsVerificationString
              ProjectionType: INCLUDE
        BillingMode: PAY_PER_REQUEST
