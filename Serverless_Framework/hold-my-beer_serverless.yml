service: hmb-api

# Note: some extra manual config is necessary in AWS
# - lambda execution role needs more policies (S3, AWSLambdaVPCAccessExecutionRole, AWSLambdaBasicExecutionRole)
# - lambdas needing db access need to be put in the same VPC, subnets and SG than the RDS
# - RDS SG needs to allow inbound traffic from that same SG

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  frameworkVersion: '>=1.43.0'
  stage: ${opt:stage,'dev'}
  profile: serverless
  apiKeys:
    - ${opt:stage}-admin
    - ${opt:stage}-embedded
    - ${opt:stage}-backend
  environment:
    logsBucketName: raspi-chill
    projectsFileName: projects
    logsPath: logs
    DATABASE_USERNAME: ${self:custom.dbUsername.${self:provider.stage}}
    DATABASE_PASSWORD: ${self:custom.dbPassword.${self:provider.stage}}
    DATABASE_HOST: ${self:custom.dbHost.${self:provider.stage}}
    DATABASE_PORT: ${self:custom.dbPort.${self:provider.stage}}
    DATABASE_NAME: ${self:custom.dbName.${self:provider.stage}}

plugins:
  - serverless-stage-manager
  - serverless-webpack
  - serverless-offline

custom:
  stages:
    - dev
    - test
    - prod
  dbHost:
    dev: ${ssm:/TEST_HMB_DATABASE_HOST~true}
    test: ${ssm:/TEST_HMB_DATABASE_HOST~true}
    prod: ${ssm:/PROD_HMB_DATABASE_HOST~true}
  dbPort:
    dev: ${ssm:/TEST_HMB_DATABASE_PORT~true}
    test: ${ssm:/TEST_HMB_DATABASE_PORT~true}
    prod: ${ssm:/PROD_HMB_DATABASE_PORT~true}
  dbName:
    dev: ${ssm:/TEST_HMB_DATABASE_DB_NAME~true}
    test: ${ssm:/TEST_HMB_DATABASE_DB_NAME~true}
    prod: ${ssm:/PROD_HMB_DATABASE_DB_NAME~true}
  dbPassword:
    dev: ${ssm:/TEST_HMB_DATABASE_PASSWORD~true}
    test: ${ssm:/TEST_HMB_DATABASE_PASSWORD~true}
    prod: ${ssm:/PROD_HMB_DATABASE_PASSWORD~true}
  dbUsername:
    dev: ${ssm:/TEST_HMB_DATABASE_USERNAME~true}
    test: ${ssm:/TEST_HMB_DATABASE_USERNAME~true}
    prod: ${ssm:/PROD_HMB_DATABASE_USERNAME~true}

functions:
  hello:
    handler: src/endpoints/hello.default
    events:
      - http:
          method: get
          cors: true
          path: hello

  getReadings:
    handler: src/endpoints/readings/getReadings.default
    events:
      - http:
          method: get
          cors: true
          path: readings

  getProjects:
    handler: src/endpoints/projects/getProjects.default
    events:
      - http:
          method: get
          cors: true
          path: projects

  getProject:
    handler: src/endpoints/projects/getProject.default
    events:
      - http:
          method: get
          cors: true
          path: projects/{projectName}

  getProjectReadings:
    handler: src/endpoints/projects/getProjectSensorData.default
    events:
      - http:
          method: get
          cors: true
          path: projects/{projectName}/readings

  createProject:
    handler: src/endpoints/projects/createProject.default
    events:
      - http:
          method: post
          cors: true
          path: projects
          private: true

  getSensors:
    handler: src/endpoints/admin/getSensors.default
    events:
      - http:
          method: get
          cors: true
          path: admin/sensors
          # private: true # TODO: make this admin

  syncSchemas:
    handler: src/endpoints/admin/syncSchemas.default
    events:
      - http:
          method: post
          cors: true
          path: admin/sync-schemas
          private: true

  postSpindelData:
    handler: src/endpoints/embedded/postSpindelData.default
    events:
      - http:
          method: post
          cors: true
          path: embedded/push-spindel
          private: true

  listLogFiles:
    handler: src/endpoints/listLogs.listLogFiles
    events:
      - http:
          method: get
          cors: true
          path: logFiles/{type}

  recentTemperatureLogs:
    handler: src/endpoints/recentTemperatureLogs.recentTemperatureLogs
    events:
      - http:
          method: get
          cors: true
          path: recentTemperatureLogs/{logFile}
          request:
            parameters:
              paths:
                logFile: true

  getMetadata:
    handler: src/endpoints/getMetadata.getMetadata
    events:
      - http:
          method: get
          cors: true
          path: getMetadata/{logFile}
          request:
            parameters:
              paths:
                logFile: true

  temperature:
    handler: src/endpoints/downsampledTemperatureLogs.downsample
    events:
      - http:
          method: get
          cors: true
          path: temperature/{logFile}
          request:
            parameters:
              paths:
                logFile: true
              querystrings:
                pointsCount: false
                downsamplingMethod: false

  gravity:
    handler: src/endpoints/gravityLogs.getGravityLog
    events:
      - http:
          method: get
          cors: true
          path: gravity/{logFile}
          request:
            parameters:
              paths:
                logFile: true
              querystrings:
                last: false
