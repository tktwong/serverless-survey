# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ks-db-backend

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true
  exclude:
    - package.json
    - package-lock.json

functions:
  init:
    handler: src/functions/filesystem/init.init
    role: arn:aws:iam::782867332842:role/LambdaDynamoAccess
    events:
      - http:
          path: init
          method: get
          integration: lambda-proxy
  hello:
    handler: src/functions/filesystem/create.create
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    role: arn:aws:iam::782867332842:role/LambdaDynamoAccess
    events:
      - http:
          path: files/create
          method: post
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:782867332842:userpool/us-east-1_lgelfQeHN
  list:
    handler: src/functions/filesystem/list.list
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    role: arn:aws:iam::782867332842:role/LambdaDynamoAccess
    events:
      - http:
          path: files/list
          method: post
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:782867332842:userpool/us-east-1_lgelfQeHN
  content:
    handler: src/functions/filesystem/get_document.get_document
    role: arn:aws:iam::782867332842:role/LambdaDynamoAccess
    events:
      - http:
          path: files/content
          method: post
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:782867332842:userpool/us-east-1_lgelfQeHN
  update:
    handler: src/functions/filesystem/update_document.update_document
    role: arn:aws:iam::782867332842:role/LambdaDynamoAccess
    events:
      - http:
          path: files/update
          method: post
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:782867332842:userpool/us-east-1_lgelfQeHN
  delete:
    handler: src/functions/filesystem/delete.delete_doc
    role: arn:aws:iam::782867332842:role/LambdaDynamoAccess
    events:
      - http:
          path: files/delete
          method: post
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:782867332842:userpool/us-east-1_lgelfQeHN
  init-sso:
    handler: src/functions/sso/init.init
    role: arn:aws:iam::782867332842:role/LambdaDynamoAccess
    events:
      - http:
          path: sso/init
          method: get
          integration: lambda-proxy
  get-sso-accounts:
    handler: src/functions/sso/accounts.get_accounts
    role: arn:aws:iam::782867332842:role/LambdaDynamoAccess
    events:
      - http:
          path: sso/accounts
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:us-east-1:782867332842:userpool/us-east-1_lgelfQeHN

resources: # CloudFormation template syntax
  Resources:
    documents:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ks-db-documents
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    sso:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ks-db-sso
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    aws-accounts:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ks-db-aws-accounts
        AttributeDefinitions:
          - AttributeName: account
            AttributeType: N
        KeySchema:
          - AttributeName: account
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    includeModules: true
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
