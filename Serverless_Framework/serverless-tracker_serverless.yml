service: serverless-schema-registry
useDotenv: true

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    includeModules: true
  dev:
    deletionPolicy: Delete
  production:
    deletionPolicy: Retain

  prune:
    automatic: true
    number: 3

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-prune-plugin

provider:
  name: aws
  stage: dev
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    schemaRegistryTable: ${self:custom.stage}-SchemaRegistryTable
    federationName: ${env:FEDERATION_NAME}
  region: ap-southeast-2
  httpApi:
    cors: true
  # apiKeys:
  #   - SCHEMA_REGISTRY_API_KEY_${self:custom.stage}

functions:
  # graphql-gateway:
  #   memorySize: 1024
  #   handler: graphql-gateway/gateway.handler
  #   events:
  #     - httpApi:
  #         method: post
  #         path: /graphql
  #   iamRoleStatementsName: gateway-${self:custom.stage}-role
  #   iamRoleStatements:
  #     - Effect: 'Allow'
  #       Action:
  #         - dynamodb:Query
  #       Resource:
  #         - 'Fn::GetAtt': [SchemaRegistryTable, Arn]

resources:
  Resources:
    # SchemaRegistryTable:
    #   Type: AWS::DynamoDB::Table
    #   DeletionPolicy: ${self:custom.${self:custom.stage}.deletionPolicy}
    #   Properties:
    #     TableName: ${self:provider.environment.schemaRegistryTable}
    #     AttributeDefinitions:
    #       - AttributeName: PK
    #         AttributeType: S
    #       - AttributeName: SK
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: PK
    #         KeyType: HASH
    #       - AttributeName: SK
    #         KeyType: RANGE
    #     BillingMode: PAY_PER_REQUEST
