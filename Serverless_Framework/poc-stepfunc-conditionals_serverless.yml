

service: poc-stepfunc-conditionals

frameworkVersion: '2'

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - Fn::Join:
          - ":"
          - - "arn"
            - Ref: "AWS::Partition"
            - "logs"
            - Ref: "AWS::Region"
            - Ref: "AWS::AccountId"
            - "log-group"
            - "/aws/lambda/"
            - "*"
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - "*"

functions:
  startStepFunc:
    handler: src/startStepFunc.handler
    name: startStepFunc
    environment:
      STATE_MACHINE: 
        'Fn::Join':
          - ":"
          - - "arn"
            - Ref: "AWS::Partition"
            - "states"
            - Ref: "AWS::Region"
            - Ref: "AWS::AccountId"
            - "stateMachine:orchestrate-fdr"

  cancelIoTJob:
    handler: src/cancelIoTJob.handler
    name: cancelIotJob

  deleteIoTJob:
    handler: src/deleteIoTJob.handler
    name: deleteIoTJob

  jobOrchestration:
    handler: src/jobOrchestration.handler
    name: jobOrchestration

  removeFirmwareDistributionFromDB:
    handler: src/removeFirmwareDistributionFromDB.handler
    name: removeFirmwareDistributionFromDB

  removeJobDocumentsFromDB:
    handler: src/removeJobDocumentsFromDB.handler
    name: removeJobDocumentsFromDB

  storeUnprocessedItems:
    handler: src/storeUnprocessedItems.handler
    name: storeUnprocessedItems

stepFunctions:
  stateMachines:
    orchestrateFDRMachine:
      name: "orchestrate-fdr"
      definition:
        Comment: "A state machine to orchestrate Firmware Distribution Request"
        StartAt: "choice-db-operation"
        States:
          choice-db-operation:
            Comment: "Decide the execution branch in the workflow based on the DB operation: INSERT/MODIFY or DELETE"
            Type: "Choice"
            Choices:
              - Or:
                - Variable: "$.action"
                  StringEquals: "INSERT"
                - Variable: "$.action"
                  StringEquals: "MODIFY"
                Next: "job-orchestrator"
              - Variable: "$.action"
                StringEquals: "DELETE"
                Next: "choice-delete-orchestrationMode"
          job-orchestrator:
            Comment: "Lambda responsible for execute the Job Orchestration"
            Type: "Task"
            Resource: {
              "Fn::GetAtt": [ "jobOrchestration", "Arn" ]
            }
            Next: "choice-insertOrModify-orchestrationMode"
            Catch:
              - ErrorEquals: [ "States.ALL" ]
                Next: "store-unprocessedItems"                
          choice-insertOrModify-orchestrationMode:
            Comment: "Based on the orchestration mode we redirect the execution to cancel the IoT Job"
            Type: "Choice"
            Choices:
            - Variable: "$.orchestrationMode"
              StringEquals: "none"
              Next: "done"
            - Not:
                Variable: "$.orchestrationMode"
                StringEquals: "none"
              Next: "choice-cancelIoTJob-status"
          choice-cancelIoTJob-status:
            Comment: "Based on the orchestration mode we redirect the execution to cancel the IoT Job"
            Type: "Choice"
            Choices:
            - Not:
                Variable: "$.status"
                StringEquals: "CANCEL"
              Next: "done"
            - Variable: "$.status"
              StringEquals: "CANCEL"
              Next: "cancel-iotJob"
          cancel-iotJob:
            Comment: "Cancel the IoT Job"
            Type: "Task"
            Resource: {
              "Fn::GetAtt": [ "cancelIoTJob", "Arn" ]
            }
            Next: "done"
            Catch:
              - ErrorEquals: [ "States.ALL" ]
                Next: "store-unprocessedItems"                
          choice-delete-orchestrationMode:
            Comment: "Based on the orchestration mode, decides if it is necessary to remove the iot job"
            Type: "Choice"
            Choices:
            - Variable: "$.orchestrationMode"
              StringEquals: "none"
              Next: "remove-firmwareDistribution-from-db"
            - Not:
                Variable: "$.orchestrationMode"
                StringEquals: "none"
              Next: "delete-iotJob"
          delete-iotJob:
            Comment: "Removes the IoT Job"
            Type: "Task"
            Resource: {
              "Fn::GetAtt": [ "deleteIoTJob", "Arn" ]
            }
            Next: "remove-firmwareDistribution-from-db"
            Catch:
              - ErrorEquals: [ "States.ALL" ]
                Next: "store-unprocessedItems"                
          remove-firmwareDistribution-from-db:
            Comment: "Removes the Firmware Distribution Request from database"
            Type: "Task"
            Resource: {
              "Fn::GetAtt": [ "removeFirmwareDistributionFromDB", "Arn" ]
            }
            Next: "remove-jobDocuments-from-db"
            Catch:
              - ErrorEquals: [ "States.ALL" ]
                Next: "store-unprocessedItems"                
          remove-jobDocuments-from-db:
            Comment: "Removes the Firmware Job Documents from database"
            Type: "Task"
            Resource: {
              "Fn::GetAtt": [ "removeJobDocumentsFromDB", "Arn" ]
            }
            Next: "done"
            Catch:
              - ErrorEquals: [ "States.ALL" ]
                Next: "store-unprocessedItems"                
          store-unprocessedItems:
            Comment: "Store the unprocessed item"
            Type: "Task"
            Resource: {
              "Fn::GetAtt": [ "storeUnprocessedItems", "Arn" ]
            }
            Next: "fail"
          done:
            Type: Pass
            End: true
          fail:
            Type: Fail
            Error: "$.error"

         
                      