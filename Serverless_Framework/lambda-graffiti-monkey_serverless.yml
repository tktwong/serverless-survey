# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-graffiti-monkey
app: lambda-graffiti-monkey
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  stage: prod
  region: eu-west-1
  memorySize: 128
  timeout: 60

  # deploymentBucket:
  #   name: my-cfn-deployment

  iamRoleStatements:
    - Sid: GraffitiMonkeyTaggingPermissions
      Effect: Allow
      Action:
        - ec2:DescribeInstances
        - ec2:DescribeVolumes
        - ec2:DescribeSnapshots
        - ec2:DescribeTags
        - ec2:DeleteTags
        - ec2:CreateTags
      Resource: "*"

# you can define service wide environment variables here
  environment:
    REGION: eu-west-1
    INSTANCE_TAGS_TO_PROPAGATE: "Name,Application,Team,ApplicationName,TeamName"
    VOLUME_TAGS_TO_PROPAGATE: "Name,Application,Team,ApplicationName,TeamName"
    VOLUME_TAGS_TO_BE_SET: ""
    SNAPSHOT_TAGS_TO_BE_SET: ""
    INSTANCE_FILTER: ""
    # SNS_ARN is optional
    # SNS_ARN: "arn:aws:sns:eu-west-1:123456654321:lambda-graffiti-monkey"

functions:
  lambda_graffiti_monkey:
    handler: service.handler
    events:
    - cloudwatchEvent:
        event:
          source:
            - "aws.ec2"
          detail-type:
            - "EC2 Instance State-change Notification"
          detail:
            state:
              - pending

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
