service: earthdata-search

provider:
  name: aws
  runtime: nodejs12.x
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  endpointType: PRIVATE
  memorySize: 128
  environment:
    dbEndpoint:
      Fn::ImportValue: ${self:provider.stage}-DatabaseEndpoint
    dbPort:
      Fn::ImportValue: ${self:provider.stage}-DatabasePort
    dbUsername: edsc
    dbName: edsc_${self:provider.stage}

    colorMapQueueUrl:
      Ref: ColorMapsProcessingQueue
    tagQueueUrl:
      Ref: TagProcessingQueue
    legacyServicesQueueUrl:
      Ref: LegacyServicesOrderQueue
    catalogRestQueueUrl:
      Ref: CatalogRestOrderQueue
    harmonyQueueUrl:
      Ref: HarmonyOrderQueue
    optionDefinitionQueueUrl:
      Ref: OptionDefinitionsQueue
    userDataQueueUrl:
      Ref: UserDataQueue

    obfuscationSpin: ${self:custom.variables.obfuscationSpin}
    obfuscationSpinShapefiles: ${self:custom.variables.obfuscationSpinShapefiles}

    configSecretId:
      Fn::ImportValue: ${self:provider.stage}-DbPasswordSecret

    collectionCapabilitiesLambda: ${self:custom.siteName}-generateCollectionCapabilityTags

    geocodingService: ${self:custom.variables.geocodingService}
    geocodingIncludePolygons: ${self:custom.variables.geocodingIncludePolygons}

  vpc:
    securityGroupIds:
      - Fn::ImportValue: ${self:provider.stage}-LambdaSecurityGroup
    subnetIds:
      - ${env:SUBNET_ID_A}
      - ${env:SUBNET_ID_B}

  role:
    Fn::ImportValue: ${self:provider.stage}-EDSCServerlessAppRole

  # Prevent Serverless from attempting to modify the deployment bucket policy as NGAP does not allow it
  deploymentBucket:
    skipPolicySetup: true

  # Deprecation warning: Starting with next major version, API Gateway naming will be changed from "{stage}-{service}" to "{service}-{stage}".
  # Set "provider.apiGateway.shouldStartNameWithService" to "true" to adapt to the new behavior now.
  # More Info: https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
  apiGateway:
    shouldStartNameWithService: true

plugins:
  - serverless-finch
  - serverless-offline
  - serverless-webpack
  - serverless-step-functions
  - serverless-plugin-split-stacks
  - serverless-plugin-log-subscription

#
# Lambda Functions
#
functions: ${file(./serverless-configs/${self:provider.name}-functions.yml)}

#
# Additional AWS Resources
#
resources: ${file(./serverless-configs/${self:provider.name}-resources.yml)}

#
# Step functions to manage order status jobs
#
stepFunctions: ${file(./serverless-configs/${self:provider.name}-step-functions.yml)}

# Package each lambda into individual zip files. This reduces the size of
# each lambda but increases the complexity of the compilation process slightly
package:
  individually: true

custom:
  siteName: earthdata-search-${self:provider.stage}

  infrastructureStackName: earthdata-search-infrastructure-${self:provider.stage}

  variables:
    # Default values for environment variables used to set environment variables
    obfuscationSpin: ${env:OBFUSCATION_SPIN, ''}
    obfuscationSpinShapefiles: ${env:OBFUSCATION_SPIN_SHAPEFILES, ''}
    geocodingService: ${env:GEOCODING_SERVICE, 'nominatim'}
    geocodingIncludePolygons: ${env:GEOCODING_INCLUDE_POLYGONS, 'false'}

  # Finch (S3 sync plugin)
  client:
    bucketName: ${self:custom.siteName}
    distributionFolder: static/dist
    objectHeaders:
      index.html:
        - name: Cache-Control
          value: no-store
      '*.css':
        - name: Cache-Control
          value: 'max-age=31536000'
      '*.js':
        - name: Cache-Control
          value: 'max-age=31536000'
      assets/:
        - name: Cache-Control
          value: 'max-age=31536000'

    # Prevent the plugin from attempting to change the bucket policy
    manageResources: false

  # Default is 3000 so to avoid conflicts with rails applications we'll define a new port
  serverless-offline:
    httpPort: 3001
    allowCache: true

  # Serverless Webpack configurations
  webpack:
    webpackConfig: 'serverless.webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk
    packager: 'npm'
    excludeFiles: src/**/*.test.js

  # Manage resource count (Maximum of 200) by splitting up the cloudformation templates
  splitStacks:
    perFunction: true

  logSubscription:
    enabled: true
    destinationArn: ${env:LOG_DESTINATION_ARN}
