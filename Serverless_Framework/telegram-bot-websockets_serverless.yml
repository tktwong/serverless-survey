service: telegram-websockets

provider:
  name: aws
  stage: prod
  region: eu-central-1
  memorySize: 512
  timeout: 30
  runtime: nodejs14.x
  tracing:
    lambda: true
  environment:
    IS_LOCAL: ${env:IS_LOCAL}
    IMAGES_BUCKET_NAME: ${self:custom.imagesBucketName}
    CHAT_DATA_BUCKET_NAME: ${self:custom.chatDataBucketName}
    BOT_TOKEN: ${env:BOT_TOKEN, file(./config.json):BOT_TOKEN}
    region: ${self:provider.region}
  iamRoleStatements:
    ${file(roleStatements.yml)}

functions:
  connect:
    handler: src/handlers.connect
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: src/handlers.disconnect
    events:
      - websocket:
          route: $disconnect
  stats:
    handler: src/handlers.stats
    events:
      - websocket:
          route: stats

  broadcastStats:
    handler: src/handlers.broadcastStats

  updateChatData:
    handler: src/handlers.updateChatData

  getChatByName:
    handler: src/handlers.getChatByName
    events:
      - http:
          path: /search
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin

custom:
  imagesBucketName: chat-profile-images
  chatDataBucketName: chat-profile-data
  serverless-offline:
    port: 4000
  webpack:
    packager: 'yarn'

plugins:
  - serverless-webpack
  - serverless-offline

resources:
  ${file(resources.yml)}
