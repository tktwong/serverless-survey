service: wifactoryiot-accountmgt-swagger

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-1
  role: arn:aws:iam::168124947308:role/iot-common-platform-builder-api-dev-ap-northeast-1-lambdaRole
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-openapi-documentation

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation: ${file(ymls/swagger/documentation.yml):Documentation}
  commonModelSchemaFragments:
    # defining common fragments means you can reference them with a single line
    MethodResponse200Json:
      statusCode: '200'
      responseModels:
        "application/json": 200JsonResponse
    MethodResponse400Json:
      statusCode: '400'
      responseModels:
        "application/json": 400JsonResponse
    MethodResponse502Json:
      statusCode: '502'
      responseModels:
        "application/json": 502JsonResponse

functions:
  UserLogin:
    handler: userAction.login
    events:
      - http:
          path: accounts/login
          method: post
          cors: true
          documentation:
            ${file(ymls/swagger/UserLogin.yml):Documentation}
  UserLogout:  
    handler: userAction.logout
    events:
      - http:
          path: accounts/logout
          method: post
          cors: true
          documentation:
            ${file(ymls/swagger/UserLogout.yml):Documentation}
  
  ListRoles:  
    handler: accountRole.listRole
    events:
      - http:
          path: roles
          method: get
          cors: true
          documentation:
            ${file(ymls/swagger/RoleList.yml):Documentation}
  FindRole:  
    handler: accountRole.findRole
    events:
      - http:
          path: roles/{role_id}
          method: get
          cors: true
          documentation:
            ${file(ymls/swagger/RoleFind.yml):Documentation}
  ListAccount:  
    handler: accountMgt.listAccount
    events:
      - http:
          path: accounts
          method: get
          cors: true
          documentation:
            ${file(ymls/swagger/AccountList.yml):Documentation}
  FindAccountByRoleId:  
    handler: accountMgt.findRoleAccount
    events:
      - http:
          path: accounts/byRole/{role_id}
          method: get
          cors: true
          documentation:
            ${file(ymls/swagger/AccountFindByRoleId.yml):Documentation}
  FindAccountById:
    handler: accountMgt.findUserAccount
    events:
      - http:
          path: accounts/{user_id}
          method: get
          cors: true
          documentation:
            ${file(ymls/swagger/AccountFindById.yml):Documentation}
  
  CreateAccount:  
    handler: accountMgt.createAccount
    events:
      - http:
          path: accounts
          method: post
          cors: true
          documentation:
            ${file(ymls/swagger/AccountCreate.yml):Documentation}
  UpdateAccount:  
    handler: accountMgt.updateAccount
    events:
      - http:
          path: accounts/{user_id}
          method: put
          cors: true
          documentation:
            ${file(ymls/swagger/AccountUpdate.yml):Documentation}
  DeleteAccount:  
    handler: accountMgt.deleteAccount
    events:
      - http:
          path: accounts/{user_id}
          method: delete
          cors: true
          documentation:
            ${file(ymls/swagger/AccountDelete.yml):Documentation}
  