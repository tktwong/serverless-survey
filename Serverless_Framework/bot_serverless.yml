# serverless.yml

service: ${opt:customer}-bot

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: ${opt:region}
  apiKeys:
    - bot-apikey

functions:
  users:
    handler: index.users
    environment:
      TOKEN: ${opt:token}
      SLACK_TOKEN: ${opt:slack}
      MONGO_DB_URL: ${opt:mongodb}
    events:
      - http:
          method: any
          path: /users
          cors: true
          private: false
      - http:
          method: any
          path: 'users/{proxy+}'
          cors: true
          private: false
  articles:
    handler: index.articles
    environment:
      TOKEN: ${opt:token}
      SLACK_TOKEN: ${opt:slack}
      MONGO_DB_URL: ${opt:mongodb}
    events:
      - http:
          method: any
          path: /articles
          cors: true
          private: false
      - http:
          method: any
          path: 'articles/{proxy+}'
          cors: true
          private: false
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  Outputs:
    UserPoolAuthorizerId:
      Value:
        Ref: UserPoolAuthorizer

plugins:
  - serverless-offline
