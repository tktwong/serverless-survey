# NOTE: update this with your service name
service: notes-app-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    tableName: ${env:tableName}

# Defines permission policies for the Lambda function
# Here, Lambda functions are able to access DynamoDB
iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dyanmodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:us-east-2:731279721400:table/notes"

functions:

  # Defines an HTTP API endpoint that calls main function in create.js
  # - path: url route is /notes
  # - method: POST request
  # - cors: enabled for browser cross domain api calls
  # - authorizer: authenticate using AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  # Defines an HTTP API endpount that calls main function in get.js
  # - path: url route is /notes/{id}
  # - method: GET request
  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  # Defines an HTTP API endpoint that calls main function in list.js
  # - path: url route is /notes
  # - method: GET request
  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  
  # Defines an HTTP API endpoint that calls main function in update.js
  # - path: url route is /notes/{id}
  # - method: PUT request
  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  
  # Defines an HTTP API endpoint that calls main function in delete.js
  # - path: url route is /notes/{id}
  # - method: DELETE request
  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  
# Create our resources with separate CloudFormation templates
resources:
  - ${file(resources/api-gateway-errors.yml)}