service: millie-exams-web

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  tracing: true
  stage: ${opt:stage, 'stage'}
  region: us-east-1
  environment:
    NODE_ENV: production
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

# package:
#   individually: true
#   exclude:
#     - ./*
#   include:
#     - .nuxt/dist/server/**
#     - index.js

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-plugin-tracing
  - serverless-apigw-binary
  - serverless-s3-sync

custom:
  warmup:
    enabled: true
    prewarm: true
    events:
      - schedule: rate(2 minutes)
    concurrency: 5
  apigwBinary:
    types:
      - '*/*'
  buckets:
    ASSETS_BUCKET_NAME: ${self:service}-${self:provider.stage}-static
  s3Sync:
    - bucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}
      localDir: .nuxt/dist/client
      bucketPrefix: nuxt/
    - bucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}
      localDir: src/static/static
      bucketPrefix: static/
  # customDomain:
  #   domainName: stageweb.ensembleeducation.org
  #   stage: stage
  #   certificateName: 'ensembleeducation.org'
  #   endpointType: regional
  #   apiType: rest

functions:
  server:
    handler: index.server
    events:
      - http: ANY /
      - http: 'ANY /{proxy+}'
      - http:
          path: /_nuxt/{proxy+}
          method: any
          integration: http-proxy
          request:
            uri: ${env:CDN_URL}/nuxt/{proxy}
            parameters:
              paths:
                proxy: true
      - http:
          path: /static/{proxy+}
          method: any
          integration: http-proxy
          request:
            uri: ${env:CDN_URL}/static/{proxy}
            parameters:
              paths:
                proxy: true 

resources:
  Resources:
    ClientAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
              ExposedHeaders:
                - x-amz-server-side-encryption
                - x-amz-request-id
                - x-amz-id-2
    ClientAssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ClientAssetsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement: [
            {
              Action: ['s3:GetObject'],
              Effect: 'Allow',
              Resource: {
                Fn::Join: ['', ['arn:aws:s3:::', { Ref: 'ClientAssetsBucket' }, '/*']],
              },
              Principal: '*'
            },
          ]