service:
  name: udacity-serverless-final-api

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:

  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    LEAGUES_TABLE: kirby-udacity-final-leagues-${self:provider.stage}
    REGISTRATIONS_TABLE: kirby-udacity-final-registrations-${self:provider.stage}
    AUTH_0_SECRET: JW_JkE6fonqFk-PrQeSLeTQXLBtK7HaY3pQRkdf9W564Rn8GjXLjtaqmwzvTXHuy    

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetLeagues:
    handler: src/lambda/http/getLeagues.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LEAGUES_TABLE}
    events:
      - http:
          method: get               
          path: leagues
          cors: true

  CreateLeague:
    handler: src/lambda/http/createLeague.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LEAGUES_TABLE}
    events:
      - http:
          method: post
          path: leagues
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/league-create-model.json)}

  GetLeague:
    handler: src/lambda/http/getLeague.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LEAGUES_TABLE}
    events:
      - http:
          method: get               
          path: leagues/{leagueId}
          cors: true

  UpdateLeague:
    handler: src/lambda/http/updateLeague.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LEAGUES_TABLE}
    events:
      - http:
          method: patch
          path: leagues/{leagueId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/league-update-model.json)}

  DeleteLeague:
    handler: src/lambda/http/deleteLeague.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LEAGUES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATIONS_TABLE}/index/leagueIndex
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATIONS_TABLE}
    events:
      - http:
          method: delete
          path: leagues/{leagueId}
          cors: true
          authorizer: Auth
          
  GetLeagueReg:
    handler: src/lambda/http/getLeagueRegistrations.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LEAGUES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query          
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATIONS_TABLE}/index/leagueIndex
    events:
      - http:
          method: get               
          path: leagues/{leagueId}/registrations
          cors: true

  CreateLeagueReg:
    handler: src/lambda/http/createLeagueRegistration.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LEAGUES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem       
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATIONS_TABLE}
    events:
      - http:
          method: post
          path: leagues/{leagueId}/registrations
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/reg-create-model.json)}

  DeleteRegistration:
    handler: src/lambda/http/deleteRegistration.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATIONS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REGISTRATIONS_TABLE}
    events:
      - http:
          method: delete
          path: registrations/{registrationId}
          cors: true
          authorizer: Auth

resources:
  Resources:
    LeaguesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: leagueId
            AttributeType: S
        KeySchema:
          - AttributeName: leagueId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.LEAGUES_TABLE}        
    RegistrationsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: registrationId
            AttributeType: S
          - AttributeName: leagueId
            AttributeType: S
        KeySchema:
          - AttributeName: registrationId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: leagueIndex
            KeySchema:
              - AttributeName: leagueId
                KeyType: HASH
              - AttributeName: registrationId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL 
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.REGISTRATIONS_TABLE}
    