service: 'TeamSync'
frameworkVersion: ">=1.32.0 < 2.0.0"
plugins:
  - 'serverless-pseudo-parameters'
  - 'serverless-plugin-optimize'
  - 'serverless-webpack'
  - 'serverless-export-env'

custom:
  roleId: !Ref IAMLambdaRole
  slackApp:
    token: ${ssm:TeamSync-slackAppToken}
    channelId: 'GL8PG0K34'
    appId: ${ssm:TeamSync-slackAppId}
  usersFeedbackTableName: TeamSync-${self:provider.stage}-UsersFeedback
  teamsTableName: TeamSync-${self:provider.stage}-Teams
  questionsTableName: TeamSync-${self:provider.stage}-Questions
  profilesTableName: TeamSync-${self:provider.stage}-Profiles
  userFeedbackCompleteTopicName: UserFeedbackCompleteTopic-${self:provider.stage}
  newSessionStartedTopicName: NewSessionStartedTopic-${self:provider.stage}

provider:
  name: 'aws'
  runtime: 'nodejs10.x'
  region: ${opt:region, 'eu-west-2'}
  memorySize: '128'
  stage: ${opt:stage, 'dev'}

package:
  individually: 'true'
  exclude:
    - 'package.json'
    - 'package-lock.json'

functions:
  botChannel:
    handler: 'handlers/botChannel/botChannel.lambda'
    description: 'TO DEFINE'
    role:
      Fn::GetAtt:
        - IAMLambdaRole
        - Arn
    events:
      - http:
          path: /botChannel
          method: get
          response:
            headers:
              Content-Type: "'application/json'"
    environment:
      SLACK_APP_TOKEN: ${self:custom.slackApp.token}
      APP_ID: ${self:custom.slackApp.appId}
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  onAnswer:
    handler: 'handlers/onAnswer/onAnswer.lambda'
    description: 'Executed whenever user message the bot'
    role:
      Fn::GetAtt:
        - IAMLambdaRole
        - Arn
    events:
      - http:
          path: /answer
          method: post

    environment:
      SLACK_APP_TOKEN: ${self:custom.slackApp.token}
      USERS_FEEDBACK_TABLE: ${self:custom.usersFeedbackTableName}
      TEAMS_TABLE: ${self:custom.teamsTableName}
      QUESTIONS_TABLE: ${self:custom.questionsTableName}
      USER_FEEDBACK_COMPLETE_TOPIC: !Ref UserFeedbackCompleteTopic
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  messageUser:
    handler: 'handlers/messageUser/messageUser.lambda'
    description: 'TO DEFINE'
    role:
      Fn::GetAtt:
        - IAMLambdaRole
        - Arn
    events:
      - sns:
          arn: !Ref NewSessionStartedTopic
          topicName: ${self:custom.newSessionStartedTopicName}
    environment:
      SLACK_APP_TOKEN: ${self:custom.slackApp.token}
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  messageChannel:
    handler: 'handlers/messageChannel/messageChannel.lambda'
    description: 'Sends the message to a predefined slack channel'
    role:
      Fn::GetAtt:
        - IAMLambdaRole
        - Arn
    events:
      - sns:
          arn: !Ref UserFeedbackCompleteTopic
          topicName: ${self:custom.userFeedbackCompleteTopicName}
    environment:
      SLACK_APP_TOKEN: ${self:custom.slackApp.token}
      CHANNEL_ID: ${self:custom.slackApp.channelId}
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  startNewSession:
    handler: 'handlers/startNewSession/startNewSession.lambda'
    description: 'Starts new team session and send first question to its users'
    role:
      Fn::GetAtt:
        - IAMLambdaRole
        - Arn
    environment:
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
      USERS_FEEDBACK_TABLE: ${self:custom.usersFeedbackTableName}
      NEW_SESSION_STARTED_TOPIC: !Ref NewSessionStartedTopic
      TEAMS_TABLE: ${self:custom.teamsTableName}
      QUESTIONS_TABLE: ${self:custom.questionsTableName}

  #  Seeding
  seedQuestions:
    handler: 'seed/seedQuestions.lambda'
    description: 'Seeding questions to the table'
    role:
      Fn::GetAtt:
        - IAMLambdaRole
        - Arn
    environment:
      QUESTIONS_TABLE: ${self:custom.questionsTableName}
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

  seedTeam:
    handler: 'seed/seedTeam.lambda'
    description: 'Seeding first team to the table'
    role:
      Fn::GetAtt:
        - IAMLambdaRole
        - Arn
    environment:
      TEAMS_TABLE: ${self:custom.teamsTableName}
      REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

resources:
  Resources:
### SNS ###
    UserFeedbackCompleteTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: Notify whenever new user feedback is completed
        TopicName: ${self:custom.userFeedbackCompleteTopicName}

    NewSessionStartedTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: Notify whenever new user feedback is completed
        TopicName: ${self:custom.newSessionStartedTopicName}

### IAM ###
    IAMLambdaRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: 'Allow'
              Principal:
                Service:
                  - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        RoleName: TeamSync_${self:provider.stage}_LambdaRole

### DynamoDB ###
    UsersFeedbackTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.usersFeedbackTableName}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'sessionId'
            AttributeType: 'S'
          - AttributeName: 'userId'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        GlobalSecondaryIndexes:
          - IndexName: 'gsi_session'
            KeySchema:
              - AttributeName: 'sessionId'
                KeyType: 'HASH'
            Projection:
              ProjectionType: 'ALL'
          - IndexName: 'gsi_user'
            KeySchema:
              - AttributeName: 'userId'
                KeyType: 'HASH'
            Projection:
              ProjectionType: 'ALL'
        BillingMode: 'PAY_PER_REQUEST'
    TeamsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.teamsTableName}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        BillingMode: 'PAY_PER_REQUEST'
    QuestionsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.questionsTableName}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        BillingMode: 'PAY_PER_REQUEST'
    ProfilesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.profilesTableName}
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
        BillingMode: 'PAY_PER_REQUEST'
