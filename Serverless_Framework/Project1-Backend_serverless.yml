# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-project1 # NOTE: update this with your service name
package:
  exclude:
    - node_modules/aws-sdk/**

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  accountId: 450494188345
  stage: ${opt:stage, self:provider.stage}
  settings:
    dev:
      USERS_DYNAMODB_TABLE: project1-users-dev
      POSTS_DYNAMODB_TABLE: project1-rest-dev
      POSTER_IMAGES_BUCKET: project1-posters-dev
    prod:
      USERS_DYNAMODB_TABLE: project1-users-prod
      POSTS_DYNAMODB_TABLE: project1-rest-prod
      POSTER_IMAGES_BUCKET: project1-posters-dev

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  profile: default
  region: us-east-1
  environment: ${self:custom.settings.${self:custom.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.${self:custom.stage}.USERS_DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.${self:custom.stage}.POSTS_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: "*"
    - Effect: Allow
      Action:
        - 's3:PutObject'
        - 's3:GetObject'
        - 's3:DeleteObject'
        - 's3:PutObjectAcl'
      Resource:
        - 'arn:aws:s3:::${self:custom.settings.${self:custom.stage}.POSTER_IMAGES_BUCKET}'
        - 'arn:aws:s3:::${self:custom.settings.${self:custom.stage}.POSTER_IMAGES_BUCKET}/*'

functions:
  hello:
    handler: handler.hello
  signIn:
    handler: functions/signIn.handler
    events:
      - http:
          path: auth/signIn
          method: post
  signInAdmin:
    handler: functions/signInAdmin.handler
    events:
      - http:
          path: auth/signInAdmin
          method: post
  signUp:
    handler: functions/signUp.handler
    events:
      - http:
          path: auth/signUp
          method: post
  sendCode:
    handler: functions/sendCode.handler
    events:
      - http:
          path: auth/sendCode
          method: post
  userList:
    handler: functions/userList.handler
    events:
      - http:
          path: auth/userList
          method: get
  getSession:
    handler: functions/getSession.handler
    events:
      - http:
          path: auth/getSession
          method: get
          authorizer:
            name: authorize
            identitySource: method.request.header.Cookie
            type: request
  signOut:
    handler: functions/signOut.handler
    events:
      - http:
          path: auth/signOut
          method: get
          authorizer:
            name: authorize
            identitySource: method.request.header.Cookie
            type: request
  authorize:
    handler: functions/authorize.handler
  addRest:
    handler: functions/addRest.handler
    events:
      - http:
          path: rest/addRest
          method: post
  restList:
    handler: functions/restList.handler
    events:
      - http:
          path: rest/restList
          method: get
  delRest:
    handler: functions/delRest.handler
    events:
      - http:
          path: rest/delRest
          method: post
  addImg:
    handler: functions/addImg.handler
    events:
      - http:
          path: rest/addImg
          method: post
  changePass:
    handler: functions/changePass.handler
    events:
      - http:
          path: auth/changePass
          method: post
  addComm:
    handler: functions/addComm.handler
    events:
      - http:
          path: rest/addComm
          method: post
  addScore:
    handler: functions/addScore.handler
    events:
      - http:
          path: rest/addScore
          method: post
  addImgrest:
    handler: functions/imageRest.handler
    events:
      - http:
          path: rest/addImgrest
          method: post
  updateRest:
    handler: functions/updateRest.handler
    events:
      - http:
          path: rest/updateRest
          method: post
          
resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Cookie: "method.request.header.Cookie"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: 'ApiGatewayRestApi'

    UsersTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
          TableName: ${self:custom.settings.${self:custom.stage}.USERS_DYNAMODB_TABLE}
          AttributeDefinitions:
            - AttributeName: "email"
              AttributeType: "S"
          KeySchema:
            - AttributeName: "email"
              KeyType: "HASH"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    PostsTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
          TableName: ${self:custom.settings.${self:custom.stage}.POSTS_DYNAMODB_TABLE}
          AttributeDefinitions:
            - AttributeName: "id"
              AttributeType: "S"
          KeySchema:
            - AttributeName: "id"
              KeyType: "HASH"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    S3BucketPhotos:
        Type: 'AWS::S3::Bucket'
        Properties:
            BucketName: '${self:custom.settings.${self:custom.stage}.POSTER_IMAGES_BUCKET}'
            AccessControl: PublicRead
            CorsConfiguration:
                CorsRules:
                - AllowedOrigins:
                    - "*"
                  AllowedHeaders:
                    - "*"
                  AllowedMethods:
                    - PUT
                    - GET
                    - HEAD
                    - POST
                    - DELETE

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
