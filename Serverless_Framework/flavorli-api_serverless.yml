service: flavorli

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-2

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 4000
  dynamodb: # Setup dynamodb to run locally
    stages:
      - dev
      - prod
      - staging
    start:
      port: 8000
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: ${self:custom.tableNames.recipes}
            sources: [src/seed-data/Recipes.json]
          - table: ${self:custom.tableNames.users}
            sources: [src/seed-data/Users.json]

  prefix: ${self:service}-${self:provider.region}-${self:provider.stage}
  tableNames:
    recipes: ${self:custom.prefix}-Recipes
    users: ${self:custom.prefix}-Users

functions:
  graphql:
    handler: dist/index.graphqlHandler
    role: FlavorliLambdaRole
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true
    environment:
      DYNAMODB_PORT: ${self:custom.dynamodb.start.port}
      STAGE: ${self:provider.stage}
      RECIPE_TABLE: ${self:custom.tableNames.recipes}
      USERS_TABLE: ${self:custom.tableNames.users}

resources:
  Resources:
    RecipeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNames.recipes}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableNames.users}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    FlavorliLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-lambda
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: 'Dynamo-ServiceRole-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'dynamodb:Query'
                    - 'dynamodb:BatchWriteItem'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:BatchGetItem'
                    - 'dynamodb:DeleteItem'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:Scan'
                    - 'dynamodb:UpdateItem'
                  Resource:
                    - !GetAtt RecipeTable.Arn
                    - !GetAtt UserTable.Arn
