org: kylec32
app: wishlistsharer
service:
  name: wishListSharer

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-split-stacks

provider:
  name: aws
  runtime: nodejs10.x
  timeout: 10
  region: us-west-2
  memorySize: 512
  environment: 
    CAPTCHA_SECRET: ${env:CAPTCHA_SECRET}
    MAILGUN_API_KEY: ${env:MAILGUN_API_KEY}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID}
    THUNDRA_API_KEY: ${env:THUNDRA_API_KEY}
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "dynamodb:Scan"
         - "dynamodb:PutItem"
         - "dynamodb:UpdateItem"
         - "dynamodb:GetItem"
         - "dynamodb:DescribeStream"
         - "dynamodb:GetRecords"
         - "dynamodb:GetShardIterator"
         - "dynamodb:ListStreams"
       Resource:
        - Fn::Join:
            - ""
            - - "arn:aws:dynamodb:"
              - Ref: "AWS::Region"
              - ":"
              - Ref: "AWS::AccountId"
              - ":table/eventsTable"
        - Fn::Join:
            - ""
            - - "arn:aws:dynamodb:"
              - Ref: "AWS::Region"
              - ":"
              - Ref: "AWS::AccountId"
              - ":table/userTable"
    -  Effect: "Allow"
       Action:
         - "SNS:Publish"
       Resource:
        Fn::Join:
          - ""
          - - "arn:aws:sns:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":eventsTopic"


functions:
  authorizer:
    handler: handlers/user-management.authorizer
  presistEvent:
    handler: handlers/eventHandler.persistEvent
    events:
      - sns:
          arn:
            Fn::Join:
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":eventsTopic"
          topicName: eventsTopic
  signUp:
    handler: handlers/user-management.signUp
    events:
      - http:
          method: post
          path: sign-up
          cors:
            origin: '*'
            maxAge: 86400
  handleSignUpEmail:
    handler: handlers/email-handler.handleNewUser
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  signIn:
    handler: handlers/user-management.signIn
    events:
      - http:
          method: post
          path: sign-in
          cors:
            origin: '*'
            maxAge: 86400
  forgottenPassword:
    handler: handlers/user-management.forgottenPassword
    events:
      - http:
          method: post
          path: reset/{email}
          cors:
            origin: '*'
            maxAge: 86400
          request:
            parameters:
              paths:
                email: true
  handleForgottenPassword:
    handler: handlers/email-handler.handleForgottenPassword
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  resetPassword:
    handler: handlers/user-management.resetPassword
    events:
      - http:
          method: post
          path: /reset
          cors:
            origin: '*'
            maxAge: 86400
  handleResetPassword:
    handler: handlers/user-management.handleResetPassword
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  followNew:
    handler: handlers/connectionHandler.addNew
    events:
      - http:
          method: post
          path: /connections/{identifier}
          request:
            parameters:
              paths:
                identifier: true
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  handleConnectUsers:
    handler: handlers/connectionHandler.handleConnectUsers
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  eventProcess:
    handler: services/EventProcessor.verify
    events:
      - http:
          method: post
          path: /event-processor
          cors:
            origin: '*'
            maxAge: 86400
  getFollowers:
    handler: handlers/connectionHandler.getConnections
    events:
      - http:
          method: get
          path: /connections
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  searchUsers:
    handler: handlers/user-management.searchUsers
    events:
      - http:
          method: get
          path: /users/{name}
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  deleteConnection:
    handler: handlers/connectionHandler.deleteConnection
    events:
      - http:
          method: delete
          path: /connections/{identifier}
          request:
            parameters:
              paths:
                identifier: true
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  handleDisconnectUser:
    handler: handlers/connectionHandler.handleDisconnectUser
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  verify:
    handler: handlers/user-management.verify
    events:
      - http:
          method: post
          path: verify
  handleSignUpEvent:
    handler: handlers/user-management.handleSignUpEvent
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  addPresent:
    handler: handlers/presentHandler.addNew
    events:
      - http:
          method: post
          path: /my/presents
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  handlePresentNotifications:
    handler: handlers/presentHandler.handlePresentNotifications
    timeout: 30
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  handleAddPresent:
    handler: handlers/presentHandler.handleAddNew
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  getUserPresents:
    handler: handlers/presentHandler.getUserPresents
    events:
      - http:
          method: get
          path: /my/presents
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  updatePresent:
    handler: handlers/presentHandler.update
    events:
      - http:
          method: put
          path: /my/presents/{presentId}
          request:
            parameters:
              paths:
                presentId: true
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  handleUpdatePresent:
    handler: handlers/presentHandler.handleUpdate
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  deletePresent:
    handler: handlers/presentHandler.deletePresent
    events:
      - http:
          method: delete
          path: /my/presents/{presentId}
          request:
            parameters:
              paths:
                presentId: true
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  markPresentAsPurchased:
    handler: handlers/presentHandler.markAsPurchased
    events:
      - http:
          method: put
          path: /presents/{userId}/{presentId}/purchased
          request:
            parameters:
              paths:
                userId: true
                presentId: true
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  handleMarkPresentAsPurchased:
    handler: handlers/presentHandler.handleMarkAsPurchased
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  unmarkPresentAsPurchased:
    handler: handlers/presentHandler.unmarkAsPurchased
    events:
      - http:
          method: delete
          path: /presents/{userId}/{presentId}/purchased
          request:
            parameters:
              paths:
                userId: true
                presentId: true
          cors: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600
  handleUnmarkPresentAsPurchased:
    handler: handlers/presentHandler.handleUnmarkAsPurchased
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  handleDeletePresent:
    handler: handlers/presentHandler.handleDeletePresent
    events:
      - stream:
          type: dynamodb
          arn: arn:aws:dynamodb:us-west-2:927245588110:table/eventsTable/stream/2018-09-23T03:49:08.215
  getFollowedPresents:
    handler: handlers/followedPresentHandler.getPresents
    events:
      - http:
          method: get
          path: /presents
          cors:
            origin: '*'
            maxAge: 86400
          authorizer:
            name: authorizer
            resultTtlInSeconds: 600


custom:
  stage: "${opt:stage, self:provider.stage}"
  splitStacks:
    perFunction: false
    perType: true
    perGroupFunction: false

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:custom.stage}
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    eventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: eventsTable
        AttributeDefinitions:
          - AttributeName: event_id
            AttributeType: N
        KeySchema:
          - AttributeName: event_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 15
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: userTable
        AttributeDefinitions:
          - AttributeName: user_name
            AttributeType: S
        KeySchema:
          - AttributeName: user_name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
    eventTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "eventsTopic"
