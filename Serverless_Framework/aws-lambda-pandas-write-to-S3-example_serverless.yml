
service: writefile # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.6
  profile: ${file(../config.${self:provider.stage}.json):writefile.profile}
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 's3:PutObject'
        # - 'S3:DeleteObject'
      Resource:
        - Fn::Join:
          - ''
          - - ${self:custom.writetobucketArn}
            - '/*'

  environment:
    WRITETO_BUCKET_NAME: ${file(../config.${self:provider.stage}.json):writefile.bucketfordata}

functions:
  write_file_to_s3:
    handler: writefiletos3.write_file_to_s3
    description: lambda function that writes to temp directory then to s3
    name: ${self:service}-${self:provider.stage}-write_file_to_s3
  download_and_write_file_to_s3:
    handler: writefiletos3.download_and_write_file_to_s3
    description: lambda function that downloads an image from url then writes to temp directory then to s3
    name: ${self:service}-${self:provider.stage}-download_and_write_file_to_s3
  decode_base64_from_web_and_write_file_to_s3:
    handler: writefiletos3.decode_base64_from_web_and_write_file_to_s3
    description: lambda function that downloads a base64 imagestring, decodes, then writes to s3
    name: ${self:service}-${self:provider.stage}-decode_base64_from_web_and_write_file_to_s3

custom:
  # arn:aws:s3:::bucketnamehere
  writetobucketArn:
    Fn::Join:
      - ':'
      - - arn
        - aws
        - s3
        - ''
        - ''
        - ${file(../config.${self:provider.stage}.json):writefile.bucketfordata}
  pythonRequirements:
    pythonBin: /usr/local/bin/python3.6m

plugins:
  - serverless-python-requirements
