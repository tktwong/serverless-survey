service: serverless-dynamo-basic-operations # NOTE: update this with your service name

plugins:
- serverless-dynamodb-local

custom:
  # myStage: ${opt:stage, self:provider.stage}
  settings:
    #dev:
    ITEMS_DYNAMODB_TABLE: sls-basic-operations-items-table
    #prod:
      #ITEMS_DYNAMODB_TABLE: sls-basic-operations-items-prod

provider:
  name: aws
  runtime: nodejs8.10
  profile: default
  environment: ${self:custom.settings}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:ListStreams"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.ITEMS_DYNAMODB_TABLE}"

functions:
  saveItem:
    handler: handler.saveItem
    events:
      - http:
          path: item
          method: post
  getItem:
    handler: handler.getItem
    events:
      - http:
          path: item/{itemId}
          method: get
  deleteItem:
    handler: handler.deleteItem
    events:
        - http:
            path: item/{itemId}
            method: delete
  updateItem:
    handler: handler.updateItem
    events:
      - http:
          path: item/{itemId}
          method: put
  triggerStream:
    handler: handler.triggerStream
    events:
       - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - ImagesTable
              - StreamArn

resources:
  Resources:
    ImagesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "itemId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "itemId"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.ITEMS_DYNAMODB_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE