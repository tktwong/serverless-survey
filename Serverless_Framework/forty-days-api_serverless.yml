# NOTE: update this with your service name
service: serverless-notes-2-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-notes
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-2

  # Provide enviorment variables to our handlers
  environment:
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  # Configure the permissions for an IAM roles, for the Lambda function
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [NotesTable, Arn]

# Define HTTP API endpoints than invoke main functions
functions:
  # Create Note Endpoint
  # Path: url is /notes
  # Method: Post request
  # Cors: Enable CORS for browser cross domain api call
  # Authorizer: Authenticate using the aws iam role
  update:
    handler: api/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  billing:
    handler: api/billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

  create:
    handler: api/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  comment:
    handler: api/comment.main
    events:
      - http:
          path: notes/{id}/comment
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: api/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  get:
    handler: api/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  fetch:
    handler: api/fetch.main
    events:
      - http:
          path: notes/all
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: api/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
# Created a resource using CloudFormation template
resources:
  # API Gateway Errors
  - ${file(./resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(./resources/dynamodb-table.yml)}
  # Cognito
  - ${file(./resources/cognito-user-pool.yml)}
  - ${file(./resources/cognito-identity-pool.yml)}
