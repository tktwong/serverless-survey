service: serverless-crawler-animation
# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_ANIMATION_TABLE: ${file(./config/envVars.js):getEnvVars.DYNAMODB_ANIMATION_TABLE}
    DYNAMODB_COMIC_TABLE: ${file(./config/envVars.js):getEnvVars.DYNAMODB_COMIC_TABLE}
    SLACK_WEBHOOK_URL: ${file(./config/envVars.js):getEnvVars.SLACK_WEBHOOK_URL}
    SLASH_TOKEN_SECRETARY: ${file(./config/envVars.js):getEnvVars.SLASH_TOKEN_SECRETARY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:*"
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1
custom:
  defaultStage: dev

# The `functions` block defines what code to deploy
functions:
  helloWorld:
    handler: handler.helloWorld
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: hello-world
          method: get
          cors: true
  crawler:
    handler: handler.publishNotificationFromAnime1
    events:
      - schedule:
        rate: rate(5 minutes)
        enabled: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_ANIMATION_TABLE}
