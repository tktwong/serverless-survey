# NOTE: update this with your service name
service: ${self:custom.service}

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-stage-variables
  - serverless-plugin-tracing
  - serverless-domain-manager

# serverless-webpack configuration
# Enable auto-packing of external modules

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-southeast-2
  # enable tracing
  tracing: true

  environment:
    OPTUS_SPORTS_API: https://${self:custom.domain.${self:provider.stage}}
    COGNITO_USER_POOL_ID: ${self:custom.cognito.userPoolId}
    COGNITO_CLIENT_ID: ${self:custom.cognito.appClientId}
    KEY_ID: ${self:custom.kms.${self:provider.stage}}
    GLOBAL_DR_MODE: false
    ENABLE_KMS: true
    TOKEN_ENCRYPTION_SECRET: ${ssm:/msisdn/cognito/encryptionsecret~true}
    TOKEN_ENCRYPTION_IV: ${ssm:/msisdn/cognito/encryptioniv~true}
    STAGE: ${self:provider.stage}
    BASE_API_URL: https://${self:custom.baseApiUrl.${self:provider.stage}}/api

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  s3BucketName: ${self:service}-${self:provider.stage}-s3
  userauthFetchKey:
    active: userauth-fetchtv-${self:provider.stage}
    standby: userauth-fetchtv-${self:provider.stage}}
  serverless-offline:
    port: 3001
  service: fe-ml-user-msisdn
  domain:
    dev: ''
    pp: ''
    prd: ''
  cognito:
    userPoolId:
      Fn::ImportValue: CognitoUserPoolId
    appClientId:
      Fn::ImportValue: CognitoUserPoolClientId
  kms:
    dev:
      Ref: kmsKey
    pp:
      Ref: kmsKey
    prd:
      Ref: kmsKey
  baseApiUrl:
    dev: ''
    pp: ''
    prd: ''

  customDomain:
    domainName: ${self:custom.domain.${self:provider.stage}}
    basePath: 'msisdn'
    stage: ${self:provider.stage}
    createRoute53Record: true

functions:
  # Auth functions
  authStartSession:
    handler: src/auth/authStartSession.main
    role: defaultPlusAccessCognitoAdminRole
    events:
      - http:
          path: startSession
          method: post
          cors: true
    tags:
      PROJECT: os
      CATEGORY: backend
      FUNCTIONALITY: msisdn
      GL: 672270
      OPEXCC: 5087

  authCreateValidateUser:
    handler: src/auth/authCreateValidateUser.main
    role: defaultPlusAccessCognitoAdminRole
    events:
      - http:
          path: verifyMobile
          method: post
          cors: true
    tags:
      PROJECT: os
      CATEGORY: backend
      FUNCTIONALITY: msisdn
      GL: 672270
      OPEXCC: 5087

  authConfirmSignUp:
    handler: src/auth/authConfirmSignUp.main
    role: defaultPlusAccessCognitoAdminRole
    events:
      - http:
          path: confirmCode
          method: post
          cors: true
    tags:
      PROJECT: os
      CATEGORY: backend
      FUNCTIONALITY: msisdn
      GL: 672270
      OPEXCC: 5087

  resendConfirmationCode:
    handler: src/auth/authResendConfirmationCode.main
    role: defaultPlusAccessCognitoAdminRole
    events:
      - http:
          path: resendConfirmCode
          method: post
          cors: true
    tags:
      PROJECT: os
      CATEGORY: backend
      FUNCTIONALITY: msisdn
      GL: 672270
      OPEXCC: 5087

  createAccount:
    handler: src/auth/authCreateAccount.main
    role: defaultPlusAccessCognitoAdminRole
    events:
      - http:
          path: createAccount
          method: post
          cors: true
    tags:
      PROJECT: os
      CATEGORY: backend
      FUNCTIONALITY: msisdn
      GL: 672270
      OPEXCC: 5087

resources:
  Resources:
    defaultPlusAccessCognitoAdminRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: defaultPlusAccessCognitoAdminRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: defaultPlusCognitoAdmin
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: 'Allow'
                  Action:
                    - 's3:PutObject'
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - 'Ref': 'ServerlessDeploymentBucket'
                - Effect: Allow
                  Action:
                    - cognito-idp:AdminGetUser
                    - cognito-idp:AdminInitiateAuth
                    - cognito-idp:AdminRespondToAuthChallenge
                    - cognito-idp:AdminDeleteUser
                    - cognito-idp:AdminCreateUser
                    - cognito-idp:AdminConfirmSignUp
                    - cognito-idp:AdminUpdateUserAttributes
                    - cognito-idp:ChangePassword
                    - cognito-idp:AdminSetUserPassword
                  Resource:
                    - Fn::ImportValue: CognitoCreateUserPoolArn
                - Effect: 'Allow' # xray permissions (required)
                  Action:
                    - 'xray:PutTraceSegments'
                    - 'xray:PutTelemetryRecords'
                  Resource:
                    - '*'
                - Effect: 'Allow'
                  Action:
                    - kms:Decrypt
                    - kms:Encrypt
                  Resource: !GetAtt kmsKey.Arn
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: 'arn:aws:lambda:ap-southeast-2:*:*'

    kmsKey:
      Type: AWS::KMS::Key
      Properties:
        Description: 'kms key for encrypt and decrypt'
        Enabled: true
        KeyPolicy:
          Statement:
            - Sid: Enable IAM User Permissions
              Effect: Allow
              Principal:
                AWS: !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
              Action: 'kms:*'
              Resource: '*'
        Tags:
          - Key: 'Name'
            Value: ${self:custom.service}-kms

    # Cognito user pool authorizer
    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        IdentitySource: method.request.header.Authorization
        Name: cognito-authorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::ImportValue: CognitoCreateUserPoolArn

    # List of compiled functions that require the CognitoAuthorizer
    # Note these names are taken from .serverless/cloudformation-template-(create|update)-stack.json

    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        TracingEnabled: true
        MethodSettings:
          - HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: '/*'
            MetricsEnabled: true
