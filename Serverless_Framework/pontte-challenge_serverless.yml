org: rodming
app: ponttechallenge
service: api-pontte

# Create an optimized package for our functions
package:
  individually: true
  excludeDevDependencies: true

plugins:
  - serverless-webpack # Minify and zip each lambda to deploy them separately
  - serverless-offline # Allow local development
  - serverless-plugin-split-stacks # To migrates cloudFormation resources in to nested stacks
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-vpc-plugin

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev
  memorySize: 256
  endpointType: regional
  deploymentBucket:
    blockPublicAccess: true
  timeout: 10
  apiGateway:
    shouldStartNameWithService: true

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  projectName: pontte
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
  splitStacks: #Default Configuration
    nestedStackCount: 5 # Controls the number of created nested stacks
    perFunction: false
    perType: false
    perGroupFunction: true
  webpack:
    webpackConfig: "webpack.config.js" # Name of webpack configuration file
    includeModules:
      forceExclude:
        - aws-sdk
    packager: "npm" # Packager that will be used to package your external modules
  vpcConfig:
    createNatGateway: false
    createDbSubnet: true
    createParameters: true
    subnetGroups:
      - rds


resources:
  Resources:
    onlyPath:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: "only-path"
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: false
        ValidateRequestParameters: true


functions:
  postContract:
    handler: functions/contract/handler.post
    timeout: 120
    events:
      - http:
          path: contract
          method: post
          cors: true
    vpc:
      securityGroupIds:
        - ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSecurityGroup}
      subnetIds: ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSubnets~split}
    environment:
      DB_HOST: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-host}
      DB_PORT: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-port}
      DB_USERNAME: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-user}
      DB_PASSWORD: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-password}
      DB_NAME: ${self:custom.stage}_${self:custom.projectName}
  getContract:
    handler: functions/contract/handler.get
    timeout: 120
    events:
      - http:
          path: contract/{id}
          method: get
          cors: true
    vpc:
      securityGroupIds:
        - ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSecurityGroup}
      subnetIds: ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSubnets~split}
    environment:
      DB_HOST: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-host}
      DB_PORT: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-port}
      DB_USERNAME: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-user}
      DB_PASSWORD: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-password}
      DB_NAME: ${self:custom.stage}_${self:custom.projectName}
  sendImage:
    handler: functions/contract/handler.sendImage
    timeout: 120
    events:
      - http:
          path: contract/{id}/image
          method: post
          cors: true
    vpc:
      securityGroupIds:
        - ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSecurityGroup}
      subnetIds: ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSubnets~split}
    environment:
      DB_HOST: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-host}
      DB_PORT: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-port}
      DB_USERNAME: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-user}
      DB_PASSWORD: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-password}
      DB_NAME: ${self:custom.stage}_${self:custom.projectName}
  migration:
    handler: functions/migration/handler.get
    timeout: 120
    events:
      - http:
          path: migrate
          method: get
          cors: true
    vpc:
      securityGroupIds:
        - ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSecurityGroup}
      subnetIds: ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSubnets~split}
    environment:
      DB_HOST: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-host}
      DB_PORT: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-port}
      DB_USERNAME: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-user}
      DB_PASSWORD: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-password}
      DB_NAME: ${self:custom.stage}_${self:custom.projectName}
  updateContract:
    handler: functions/contract/handler.update
    timeout: 120
    events:
      - http:
          path: contract/{id}
          method: patch
          cors: true
    vpc:
      securityGroupIds:
        - ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSecurityGroup}
      subnetIds: ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSubnets~split}
    environment:
      DB_HOST: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-host}
      DB_PORT: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-port}
      DB_USERNAME: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-user}
      DB_PASSWORD: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-password}
      DB_NAME: ${self:custom.stage}_${self:custom.projectName}
  approval:
    handler: functions/contract/handler.approval
    timeout: 120
    events:
      - http:
          path: contract/{id}/approval
          method: post
          cors: true
    vpc:
      securityGroupIds:
        - ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSecurityGroup}
      subnetIds: ${ssm:/SLS/api-${self:custom.projectName}-${self:custom.stage}/AppSubnets~split}
    environment:
      DB_HOST: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-host}
      DB_PORT: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-port}
      DB_USERNAME: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-user}
      DB_PASSWORD: ${ssm:${self:custom.stage}-${self:custom.projectName}-db-password}
      DB_NAME: ${self:custom.stage}_${self:custom.projectName}