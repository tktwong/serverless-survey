service: movie-rating-challenge

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  tableName: 'movie-users'
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  searchMovies:
    handler: src/handlers.searchMovies
    events:
      - http:
          path: /v1.0/movies
          method: get
          cors: true
  getMovieDetails:
    handler: src/handlers.getMovieDetails
    events:
      - http:
          path: /v1.0/movies/{movieId}
          method: get
          cors: true
  createMovieUser:
    handler: src/handlers.createMovieUser
    events:
      - http:
          path: /v1.0/users
          method: post
          cors: true
  getMovieUser:
    handler: src/handlers.getMovieUser
    events:
      - http:
          path: /v1.0/users
          method: get
          cors: true
  rateMovie:
    handler: src/handlers.rateMovie
    events:
      - http:
          path: /v1.0/movies/{movieId}
          method: post
          cors: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}