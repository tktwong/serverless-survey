service: release-bot-service

plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-typescript
  - serverless-local-schedule
custom:
  dynamoDBUserTableName: ${self:service}-users-${self:provider.stage}
  dynamoDBQueueTableName: ${self:service}-queues-${self:provider.stage}
  commandTopic: "${self:service}-${self:provider.stage}-command"
  commandTopicArn:
    {
      "Fn::Join":
        [
          "",
          [
            "arn:aws:sns:${self:provider.region}:",
            { "Ref": "AWS::AccountId" },
            ":${self:custom.commandTopic}",
          ],
        ],
    }

  githubTopic: "${self:service}-${self:provider.stage}-github"
  githubTopicArn:
    {
      "Fn::Join":
        [
          "",
          [
            "arn:aws:sns:${self:provider.region}:",
            { "Ref": "AWS::AccountId" },
            ":${self:custom.githubTopic}",
          ],
        ],
    }

  queueTopic: "${self:service}-${self:provider.stage}-queue"
  queueTopicArn:
    {
      "Fn::Join":
        [
          "",
          [
            "arn:aws:sns:${self:provider.region}:",
            { "Ref": "AWS::AccountId" },
            ":${self:custom.queueTopic}",
          ],
        ],
    }

  ciTopic: "${self:service}-${self:provider.stage}-ci"
  ciTopicArn:
    {
      "Fn::Join":
        [
          "",
          [
            "arn:aws:sns:${self:provider.region}:",
            { "Ref": "AWS::AccountId" },
            ":${self:custom.ciTopic}",
          ],
        ],
    }
  env:
    ciStatusUpdateUrl:
      {
        "Fn::Join":
          [
            "",
            [
              " https://",
              { "Ref": "ApiGatewayRestApi" },
              ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/ci/statusUpdate",
            ],
          ],
      }
    ciTopicArn: ${self:custom.ciTopicArn}
    commandTopicArn: ${self:custom.commandTopicArn}
    dynamoDBQueueTableName: ${self:custom.dynamoDBQueueTableName}
    dynamoDBUserTableName: ${self:custom.dynamoDBUserTableName}
    githubTopicArn: ${self:custom.githubTopicArn}
    myRegion: ${opt:region, 'us-east-1'}
    queueTopicArn: ${self:custom.queueTopicArn}

provider:
  profile: release-bot
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
        - "cloudwatch:*"
        - "dynamodb:*"
      Resource: "*"

resources: # CloudFormation template syntax
  Resources:
    commandTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.commandTopic}
    queueTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.queueTopic}
    githubTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.githubTopic}
    ciTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.ciTopic}
    userEventsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.dynamoDBUserTableName}"
    queuesDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: channel
            AttributeType: S
        KeySchema:
          - AttributeName: channel
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:custom.dynamoDBQueueTableName}"

functions:
  dispatcher:
    handler: handler.dispatcher
    events:
      - http:
          path: slack/dispatcher
          method: post
          integration: lambda
    environment: ${self:custom.env}
  server:
    handler: handler.server
    events:
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.commandTopic}
    environment: ${self:custom.env}
  github:
    handler: handler.github
    events:
      - http:
          path: releasebot/github
          method: post
          integration: lambda
    environment: ${self:custom.env}
  slackNotifications:
    handler: handler.slackNotifications
    events:
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.queueTopic}
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.githubTopic}
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.ciTopic}
    environment: ${self:custom.env}
  jenkinsTrigger:
    handler: handler.jenkinsTrigger
    events:
      - sns: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.queueTopic}
    environment: ${self:custom.env}
  ciStatusUpdate:
    handler: handler.ciStatusUpdate
    events:
      - http:
          path: ci/statusUpdate
          method: post
          integration: lambda
    environment: ${self:custom.env}
  releaseWindowOpenClose:
    handler: handler.releaseWindowOpenClose
    events:
      - schedule:
          rate: cron(0 * * * ? *)
          timezone: Europe/London
    environment: ${self:custom.env}
