# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#

frameworkVersion: ">=1.2.0 <2.0.0"
service: devops-lambda-test

provider:
  name: aws
  runtime: python3.7
  stage: 'dev' # Set the default stage used. Default is dev
  region: eu-west-1
  stackName: devops-lambda-test-stack # Use a custom name for the CloudFormation stack
  apiName: devops-lambda-test-api # Use a custom name for the API Gateway API
  # profile: production # The default profile to use with this service
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  reservedConcurrency: 5 # optional, Overwrite the default reserved concurrency limit. By default, AWS uses account concurrency limit
  # timeout: 10 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  # logRetentionInDays: 14 # Set the default RetentionInDays for a CloudWatch LogGroup
  # deploymentBucket:
  #   name: com.serverless.${self:provider.region}.deploys # Deployment bucket name. Default is generated by the framework
  #   blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
  #   serverSideEncryption: true # to use server-side encryption
  #   sseKMSKeyId: arn:aws:kms:us-east-1:xxxxxxxxxxxx:key/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa # when using server-side encryption
  #   sseCustomerAlgorithim: AES256 # when using server-side encryption and custom keys
  #   sseCustomerKey: string # when using server-side encryption and custom keys
  #   sseCustomerKeyMD5: md5sum # when using server-side encryption and custom keys


# you can overwrite defaults here
# stage: dev


package:
  individually: true
  exclude: 
    - ./**
  include:
    - Start.py

# functions:
#   Start:
#     handler: Start.handler_func
#   index:
#     handler: Start.handler_func
#     events:
#     - http:
#         path: /Start/
#         method: GET
#         cors: true

apiGateway: # Optional API Gateway global config
    restApiId: TestAPI # REST API resource ID. Default is generated by the framework
    # restApiRootResourceId: xxxxxxxxxx # Root resource ID, represent as / path
    restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted
      '/v1/Start': Start
      '/users/create': xxxxxxxxxx
    description: APIgateway for lambda # Optional description for the API Gateway stage deployment

# Functions
functions:
  devops-lambda-test:
    name: ${self:service}-${self:provider.stage}-func
    handler: Start.handler_func
    api keys: none
    events:
      - http:
          path: '/v1/Start'
          method: GET

# functions:
#   devops-lambda-test:
#   name: devops-lambda-test
#   handler: Start.handler_func
#   events:
#     - http:
#         path: 'v1/Start'
#         method: get
 


plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
