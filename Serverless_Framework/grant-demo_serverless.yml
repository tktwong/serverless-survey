service: grant-demo-api

custom:
  dynamodb:
    start:
      migrate: true
    stages:
      - dev
  s3:
    host: localhost
    directory: /tmp

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    USER_TABLE: ${self:service}-${self:opt, self:provider.stage}-users
    GRANT_BUCKET: ${self:service}-${self:opt, self:provider.stage}-grant
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-s3-local

functions:
  sayHello:
    handler: src/lambdas/hello-world/hello.handler
    events:
      - http:
          method: GET
          path: /grant/hello

  createUser:
    handler: src/lambdas/Users/create.handler
    events:
      - http:
          method: POST
          path: /grant/api/user

  # deleteJob:
  #   handler: src/jobs/deleteOne.handler
  #   events:
  #     - http:
  #         method: DELETE
  #         path: /jobs/{id}
  #         request:
  #           parameters:
  #             id: true
resources:
  Resources:
    UsersDynamoDBTable: #creating and defining a DB table
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    GrantS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.GRANT_BUCKET}