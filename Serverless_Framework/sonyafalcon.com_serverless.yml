service: sonyafalcon-post

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  memorySize: 128
  timeout: 6
  environment:
    DYNAMODB_TABLE: sf-posts
    CLOUDFRONT_DOMAIN: ${file(../../credentials.json):cloudFrontDistribution}
    CDN_BUCKET: ${file(../../credentials.json):s3Upload.bucketName}
    CDN_ACCESS_KEY: ${file(../../credentials.json):s3Upload.accessKeyId}
    CDN_SECRET_ACCESS_KEY: ${file(../../credentials.json):s3Upload.secretAccessKey}
    CDN_REGION: ${file(../../credentials.json):region}
    ADMIN_EMAIL: ${file(../../credentials.json):adminEmail}
    USER_API: https://api.sonyafalcon.com/user
    SENDGRID_API_KEY: ${file(../../credentials.json):sendgridAPIKey}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

    - Effect: "Allow"
      Action:
        - s3:putObject
        - s3:getObject
      Resource: "*"

    - Effect: "Allow"
      Action:
        - cloudfront:*
      Resource: "*"

functions:
  getPost:
    handler: handler.getPost
    events:
      - http:
          path: /{id}
          method: get
          integration: lambda
          cors: true
  getPosts:
    handler: handler.getPosts
    events:
      - http:
          path: /
          method: get
          integration: lambda
          cors: true
  getMediaLibrary:
    handler: handler.getMediaLibrary
    events:
      - http:
          path: /media
          method: get
          integration: lambda
          cors: true
  createPost:
    handler: handler.createPost
    events:
      - http:
          path: /
          method: post
          integration: lambda
          cors: true
  updatePost:
    handler: handler.updatePost
    events:
      - http:
          path: /
          method: put
          integration: lambda
          cors: true
  deletePost:
    handler: handler.deletePost
    events:
      - http:
          path: /
          method: delete
          integration: lambda
          cors: true
  publish:
    handler: handler.publish
    events:
      - http:
          path: /publish
          method: post
          integration: lambda
          cors: true
  publishScheduled:
    handler: handler.publishScheduled
    events:
      - schedule: rate(6 hours)
      - http:
          path: /publishScheduled
          method: post
          integration: lambda
          cors: true
  prerender:
    handler: handler.prerender
    events:
      - http:
          path: /prerender
          method: post
          integration: lambda
          cors: true
  getS3UploadCredentials:
    handler: handler.getS3UploadCredentials
    events:
      - http:
          path: /getUploadCredentials
          method: get
          integration: lambda
          cors: true
  getS3DeleteCredentials:
    handler: handler.getS3DeleteCredentials
    events:
      - http:
          path: /getDeleteCredentials
          method: get
          integration: lambda
          cors: true

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: sf-posts
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: author
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: posts_id_index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: posts_index
            KeySchema:
              - AttributeName: author
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:BatchGetItem
              Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:BatchGetItem
              Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"
        Roles:
          - Ref: IamRoleLambdaExecution
