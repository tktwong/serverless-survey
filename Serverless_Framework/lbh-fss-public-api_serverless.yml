service: fss-public-api
provider:
  name: aws
  runtime: dotnetcore3.1
  timeout: 15
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2

package:
  artifact: ./bin/release/netcoreapp3.1/fss-public-api.zip

functions:
  fssPublicApi:
    name: ${self:service}-${self:provider.stage}
    handler: LBHFSSPublicAPI::LBHFSSPublicAPI.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Host=${ssm:/fss-public-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/fss-public-api/${self:provider.stage}/postgres-port};Database=${ssm:/fss-public-api/${self:provider.stage}/postgres-database};Username=${ssm:/fss-public-api/${self:provider.stage}/postgres-username};Password=${ssm:/fss-public-api/${self:provider.stage}/postgres-password}
      ADDRESSES_API_BASE_URL: ${ssm:/fss-public-api/${self:provider.stage}/addresses-api-base-url}
      ADDRESSES_API_KEY: ${ssm:/fss-public-api/${self:provider.stage}/addresses-api-key}
      ADDRESSES_API_TOKEN: ${ssm:/fss-common-api/${self:provider.stage}/addresses-api-token}
      PLACEHOLDER_IMAGE: ${ssm:/fss-common-api/${self:provider.stage}/placeholder-image}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          private: true
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
custom:
  vpc:
    development:
      securityGroupIds:
        - sg-07aa5b4bfe5431d73
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      securityGroupIds:
        - sg-00be85a006bff97e8
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      securityGroupIds:
        - sg-038eb450496ec5548
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
