# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ghcdemoService

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
#  stage: dev
  region: ap-south-1



# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ReadBucket"
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::${self:custom.s3_bucket}"
    - Effect: "Allow"
      Action:
      - "SNS:Publish"
      Resource: "${self:custom.topic_arn}"
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Resource: [
          "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/Course",
          "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/Teacher"
        ]

custom:                                                                             
  region: ${opt:region, self:provider.region}                                       
  
  #Topic to publish notifications
  topic_name: "sns-assignments"                          
  topic_arn:
      { "Fn::Join" : ["", ["arn:aws:sns:${self:custom.region}:", { "Ref" : "AWS::AccountId" }, ":${self:custom.topic_name}"] ]  }            

  s3_bucket: "ghcdemo-manisha"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

#  - notifier:
#     events:
#      - sns:
#	arn:
#            Fn::Join:
#              - ""
#              - - "arn:aws:sns:"
#                - Ref: "AWS::${self:custom.region}"
#                - ":"
#                - Ref: "AWS::965888838112"
#                - ":${self:custom.topic_name}"
#
#    handler: handler.notify

functions:

  demoassignment:
     handler: handler.s3assignment
     environment:
       sns_topic_arn: ${self:custom.topic_arn}
     events:
      - s3:
         bucket: ${self:custom.s3_bucket}
         event: s3:ObjectCreated:*
         rules:
          - suffix: .py


  notifier:
    handler: handler.notifier
    events:
     - sns:
         arn:
           Fn::Join:
             - ""
             - - "arn:aws:sns:"
               - Ref: "AWS::Region"
               - ":"
               - Ref: "AWS::AccountId"
               - ":${self:custom.topic_name}"
         topicName: ${self:custom.topic_name}

  updatedb:
    handler: handler.updatedb
    events:
     - sns:
         arn:
           Fn::Join:
             - ""
             - - "arn:aws:sns:"
               - Ref: "AWS::Region"
               - ":"
               - Ref: "AWS::AccountId"
               - ":${self:custom.topic_name}"
         topicName: ${self:custom.topic_name}

  list_teacher_todos:
    handler: handler.list_teacher_todos
    events:
        - http: GET list_teacher_todos

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    NewResource:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: sns-assignments
        TopicName: sns-assignments
    CourseTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: Course
            AttributeDefinitions:
                - AttributeName: CourseId
                  AttributeType: S
            KeySchema:
                - AttributeName: CourseId
                  KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
    TeacherTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: Teacher
            AttributeDefinitions:
                - AttributeName: Id
                  AttributeType: N
            KeySchema:
                - AttributeName: Id
                  KeyType: HASH
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
