service: mtgml-global-data

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-offline

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true
  exclude:
    - tests/**
    - mocks/**
  include:
    - ../../libs/**

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  tracing:
    lambda: true

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ApiGatewayRestApiRootResourceId

  environment:
    stage: ${self:custom.stage}
    resources_stage: ${self:custom.resources_stage}
    GLOBAL_DECKS_TABLE: ${self:custom.globalDecksTable}
    GLOBAL_CARDS_TABLE: ${self:custom.globalCardsTable}
    PRICES_BUCKET: ${self:custom.dailyPricesBucket}
    CARDS_URL: 'https://api.scryfall.com/cards?page={}'
    CARDS_PER_PAGE: 175
    PAGES_PER_WORKER: 100
    DYNAMO_BATCH_LIMIT: 10

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        # Dynamo Table Actions
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        # Dynamo Stream Actions
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
        # Lambda Actions (for master to call worker)
        - lambda:InvokeFunction
        # S3 Actions
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - s3:ListBucket
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'Fn::ImportValue': ${self:custom.stage}-GlobalDecksTableArn
        - 'Fn::ImportValue': ${self:custom.stage}-GlobalCardsTableArn
        - 'Fn::ImportValue': ${self:custom.stage}-PricesBucketArn
        - "*"

functions:
  cards_master:
    handler: update_global_cards.master
    memorySize: 256
    timeout: 900
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - schedule:
        rate: cron(0 6 ? * FRI *)
        enabled: ${self:custom.cron_enabled.${self:custom.stage}}
      - http:
          path: global_cards_master
          method: get
          cors: true
          authorizer: aws_iam
  cards_worker:
    handler: update_global_cards.worker
    memorySize: 512
    timeout: 900
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: global_cards_worker
          method: post
          cors: true
          authorizer: aws_iam
  prices_master:
    handler: record_daily_prices.master
    memorySize: 256
    timeout: 900
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - schedule:
        rate: cron(0 18 * * ? *)
        enabled: ${self:custom.cron_enabled.${self:custom.stage}}
      - http:
          path: daily_prices_master
          method: get
          cors: true
          authorizer: aws_iam
  prices_worker:
    handler: record_daily_prices.worker
    memorySize: 512
    timeout: 900
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: daily_prices_worker
          method: post
          cors: true
          authorizer: aws_iam
  prices_cleanup:
    handler: record_daily_prices.cleanup
    memorySize: 512
    timeout: 900
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - schedule:
        rate: cron(10 18 * * ? *)
        enabled: ${self:custom.cron_enabled.${self:custom.stage}}
      - http:
          path: daily_prices_cleanup
          method: get
          cors: true
          authorizer: aws_iam
  decks_master:
    handler: update_global_decks.main
    memorySize: 512
    timeout: 900
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - schedule: cron(0 6 ? * FRI *)
      - http:
          path: update_global_decks
          method: get
          cors: true
          authorizer: aws_iam
