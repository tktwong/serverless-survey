service: strolo-service

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-plugin-warmup
  - serverless-offline

custom:    
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceInclude:
        - pg
        - pg-hstore
    packager: 'npm'

  customDomain:
    certificateName: ${file(./serverless.env.yml):${self:provider.stage}.CERTIFICATE_NAME}
    domainName: ${file(./serverless.env.yml):${self:provider.stage}.DOMAIN_NAME}
    basePath: 'v1'
    stage: ${self:provider.stage}
    createRoute53Record: true

  warmup:
    default: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${file(./serverless.env.yml):${self:provider.stage}.AWS_REGION}
  profile: ${file(./serverless.env.yml):${self:provider.stage}.SERVERLESS_ADMIN}
  timeout: 30
  environment:
    API_URL: ${file(./serverless.env.yml):${self:provider.stage}.API_URL}
    DASHBOARD_URL: ${file(./serverless.env.yml):${self:provider.stage}.DASHBOARD_URL}
    JWT_SECRET: ${file(./serverless.env.yml):${self:provider.stage}.JWT_SECRET}
    POSTGRES_DB_HOST: ${file(./serverless.env.yml):${self:provider.stage}.POSTGRES_DB_HOST}
    POSTGRES_DB_NAME: ${file(./serverless.env.yml):${self:provider.stage}.POSTGRES_DB_NAME}
    POSTGRES_DB_PASSWORD: ${file(./serverless.env.yml):${self:provider.stage}.POSTGRES_DB_PASSWORD}
    POSTGRES_DB_USERNAME: ${file(./serverless.env.yml):${self:provider.stage}.POSTGRES_DB_USERNAME}
    REGION: ${self:provider.region}
    SENDGRID_API_KEY: ${file(./serverless.env.yml):${self:provider.stage}.SENDGRID_API_KEY}
    STROLO_SERVICE_API_KEY: ${file(./serverless.env.yml):${self:provider.stage}.STROLO_SERVICE_API_KEY}
    STAGE: ${self:provider.stage}
    STRIPE_SECRET_KEY: ${file(./serverless.env.yml):${self:provider.stage}.STRIPE_SECRET_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${self:provider.stage}-*
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: "arn:aws:sns:${self:provider.region}:*:*-${self:provider.stage}"

functions:
  # emails
  sendEmail:
    handler: functions/emails/sendEmail.main
    events:
      - sns: send-email-${self:provider.stage}
    warmup: false
    timeout: 300

  sendHTTPEmail:
    handler: functions/emails/sendHTTPEmail.main
    events:
      - http:
          path: /emails
          method: post
          cors: true
    warmup: false
    timeout: 300

  # # activities
  # createActivity:
  #   handler: app/functions/activities/createActivity.main
  #   events:
  #     - http:
  #         path: /activities
  #         method: post
  #         cors: true

  # getAthleteActivities:
  #   handler: app/functions/activities/getAthleteActivities.main
  #   events:
  #     - http:
  #         path: /activities/athlete/{athleteId}
  #         method: get
  #         cors: true

  # # activityTypes
  # createActivityType:
  #   handler: app/functions/activityTypes/createActivityType.main
  #   events:
  #     - http:
  #         path: /activity-types
  #         method: post
  #         cors: true

  # getActivityTypes:
  #   handler: app/functions/activityTypes/getActivityTypes.main
  #   events:
  #     - http:
  #         path: /activity-types
  #         method: get
  #         cors: true

  # # athletes
  # createAthlete:
  #   handler: app/functions/athletes/createAthlete.main
  #   events:
  #     - http:
  #         path: /athletes
  #         method: post
  #         cors: true
  
  # getAthlete:
  #   handler: app/functions/athletes/getAthlete.main
  #   events:
  #     - http:
  #         path: /athletes/athlete
  #         method: get
  #         cors: true

  # loginAthlete:
  #   handler: app/functions/athletes/loginAthlete.main
  #   events:
  #     - http:
  #         path: /athletes/login
  #         method: post
  #         cors: true

  # resetAthletePassword:
  #   handler: app/functions/athletes/resetAthletePassword.main
  #   events:
  #     - http:
  #         path: /athletes/password/reset
  #         method: put
  #         cors: true

  # updateAthlete:
  #   handler: app/functions/athletes/updateAthlete.main
  #   events:
  #     - http:
  #         path: /athletes/{athleteId}
  #         method: put
  #         cors: true

  # # sponsors
  # createSponsor:
  #   handler: app/functions/sponsors/createSponsor.main
  #   events:
  #     - http:
  #         path: /sponsors
  #         method: post
  #         cors: true

  # # sponsorActivities
  # createSponsorActivity:
  #   handler: app/functions/sponsorActivities/createSponsorActivity.main
  #   events:
  #     - sns: newActivity-${self:provider.stage}
  #   warmup: false
  #   timeout: 300

  # # sponsorships
  # createSponsorship:
  #   handler: app/functions/sponsorships/createSponsorship.main
  #   events:
  #     - http:
  #         path: /sponsorships
  #         method: post
  #         cors: true

  # # stroloClasses
  # createStroloClass:
  #   handler: app/functions/stroloClasses/createStroloClass.main
  #   events:
  #     - http:
  #         path: /strolo-classes
  #         method: post
  #         cors: true

  # getStroloClassesByActivityType:
  #   handler: app/functions/stroloClasses/getStroloClassesByActivityType.main
  #   events:
  #     - http:
  #         path: /strolo-classes/activity-type/{activityTypeId}
  #         method: get
  #         cors: true
