# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ExpTracker
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-south-1

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
package:
  exclude:
    - data.json
    - registerUser.json
    - tokenValidation.json
    - node_modules/**

functions:
  NewTransaction:
    handler: newTransaction.NewTransaction
    role: ExpenseTrackerPutDBLambda
  UserIncome:
    handler: userIncome.UserIncome
    role: ExpenseTrackerReadDBLambda
  AddUserIncome:
    handler: addUserIncome.AddUserIncome
    role: ExpenseTrackerPutDBLambda
  AddCategory:
    handler: addCategory.AddCategory
    role: ExpenseTrackerPutDBLambda
  GetCategories:
    handler: getCategories.GetCategories
    role: ExpenseTrackerPutDBLambda
  GetIncomeExpense:
    handler: getIncomeExpense.GetIncomeExpense
    role: ExpenseTrackerPutDBLambda
  GetTransaction:
    handler: getTransaction.GetTransaction
    role: ExpenseTrackerPutDBLambda
  #RegisterUser:
  #  handler: registerUser.RegisterUser
  #  role: ExpenseTrackerPutDBLambda
  #TokenValidation:
  #  handler: tokenValidation.TokenValidation
  #  role: ExpenseTrackerUpdateDBLambda
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
resources:
  Resources:
    # ExpenseTrackerReadDBLambda:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     Path: "/"
    #     RoleName: ExpenseTracker-READ-DB-Lambda-Role 
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Principal: 
    #             Service:
    #               - lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: ExpenseTracker-READ-ONLY-POLICY
    #         PolicyDocument:
    #           Version: '2012-10-17'
    #           Statement: 
    #             - Effect: Allow
    #               Action:
    #                 - dynamodb:GetItem
    #                 - dynamodb:Scan
    #                 - dynamodb:Query
    #                 - logs:Create*
    #                 - logs:PutLogEvents
    #               Resource: 
    #                 - arn:aws:dynamodb:ap-south-1:970358752854:table/UserDetails
    #                 - arn:aws:logs:*:*:*
    ExpenseTrackerPutDBLambda:
        Type: AWS::IAM::Role
        Properties:
          Path: "/"
          RoleName: ExpenseTracker-PUT-DB-Lambda-Role
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal: 
                  Service:
                    - lambda.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: ExpenseTracker-PUT-ONLY-POLICY
              PolicyDocument:
                Version: '2012-10-17'
                Statement: 
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:GetItem
                      - dynamodb:Scan
#                      - dynamodb:Query
                      - logs:Create*
                      - logs:PutLogEvents
                    Resource: 
                      - arn:aws:dynamodb:ap-south-1:970358752854:table/Transaction
                      - arn:aws:dynamodb:ap-south-1:970358752854:table/Income
                      - arn:aws:dynamodb:ap-south-1:970358752854:table/Category
                      - arn:aws:logs:*:*:*
    ExpenseTrackerReadDBLambda:
        Type: AWS::IAM::Role
        Properties:
          Path: "/"
          RoleName: ExpenseTracker-READ-DB-Lambda-Role
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal: 
                  Service:
                    - lambda.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: ExpenseTracker-READ-ONLY-POLICY
              PolicyDocument:
                Version: '2012-10-17'
                Statement: 
                  - Effect: Allow
                    Action:
                      - dynamodb:GetItem
                      - dynamodb:Scan
                      - dynamodb:Query
                      - logs:Create*
                      - logs:PutLogEvents
                    Resource: 
                      - arn:aws:dynamodb:ap-south-1:970358752854:table/Income
                      - arn:aws:logs:*:*:*
    # ExpenseTrackerUpdateDBLambda:
    #     Type: AWS::IAM::Role
    #     Properties:
    #       Path: "/"
    #       RoleName: ExpenseTracker-UPDATE-DB-Lambda-Role
    #       AssumeRolePolicyDocument:
    #         Version: '2012-10-17'
    #         Statement:
    #           - Effect: Allow
    #             Principal: 
    #               Service:
    #                 - lambda.amazonaws.com
    #             Action: sts:AssumeRole
    #       Policies:
    #         - PolicyName: ExpenseTracker-UPDATE-ONLY-POLICY
    #           PolicyDocument:
    #             Version: '2012-10-17'
    #             Statement: 
    #               - Effect: Allow
    #                 Action:
    #                   - dynamodb:UpdateItem
    #                   - logs:Create*
    #                   - logs:PutLogEvents
    #                 Resource:
    #                   - arn:aws:dynamodb:ap-south-1:970358752854:table/UserDetails
    #                   - arn:aws:logs:*:*:*


#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
