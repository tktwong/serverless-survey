service: sls-cognito-backend2
custom:
  UserPoolId: arn:aws:cognito-idp:eu-central-1:891511646143:userpool/eu-central-1_DWU7RfBAQ
provider:
  name: aws
  runtime: nodejs8.10
  # profile: student1
  # vpc:
  # securityGroupIds:
  #   - sg-0c5bd9bba5b76fc87
  # subnetIds:
  #   - subnet-7e346a33
  #   - subnet-1644587d
  #   - subnet-4c440f31
  # # you can overwrite defaults here
  stage: dev
  region: eu-central-1
  # apiGateway:
  #   restApiId: 8whyqdqlkd # REST API resource ID. Default is generated by the framework
  #   restApiRootResourceId: mxtvd5rqqd # Root resource, represent as / path

functions:
  hello2:
    handler: handler.hello
    events:
      - http:
          path: test
          cors: true
          integration: lambda
          method: get
          authorizer:
            arn: ${self:custom.UserPoolId}
  ohne2:
    handler: handler.hello
    events:
      - http:
          path: hello2
          method: get
          cors: true
  iam2:
    handler: handler.hello
    events:
      - http:
          path: iamhello
          method: get
          cors: true
          authorizer: aws_iam
          # integration: lambda
          # authorizer:
          #   arn: arn:aws:cognito-idp:eu-central-1:891511646143:userpool/eu-central-1_za0Pd79ZH
          #   claims:
          #     - email
          #     - nickname
        # resources:
        #   Resources:
        #     GatewayResponse:
        #       Type: "AWS::ApiGateway::GatewayResponse"
        #       Properties:
        #         ResponseParameters:
        #           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#         #           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#         #         ResponseType: EXPIRED_TOKEN
#         #         RestApiId:
#         #           Ref: "ApiGatewayRestApi"
#         StatusCode: "401"
# resources:
#   Resources:
#     # Cognito - User pool
#     CognitoUserPool:
#       Type: AWS::Cognito::UserPool
#       Properties:
#         UserPoolName: cognito_sls_backend_user_pool
#     # Cognito - Client
#     CognitoUserPoolClient:
#       Type: AWS::Cognito::UserPoolClient
#       Properties:
#         ClientName: cognito_sls_backend_client
#         UserPoolId:
#           Ref: CognitoUserPool
#     # Cognito - Identity
#     CognitoIdentityPool:
#       Type: AWS::Cognito::IdentityPool
#       Properties:
#         IdentityPoolName: cognito_sls_backend_identity_pool
#         AllowUnauthenticatedIdentities: false
#         CognitoIdentityProviders:
#           - ClientId:
#               Ref: CognitoUserPoolClient
#             ProviderName:
#               Fn::GetAtt: [CognitoUserPool, ProviderName]
#     # Cognito roles
#     CognitoIdentityPoolRoles:
#       Type: AWS::Cognito::IdentityPoolRoleAttachment
#       Properties:
#         IdentityPoolId:
#           Ref: CognitoIdentityPool
#         Roles:
#           authenticated:
#             Fn::GetAtt: [CognitoAuthRole, Arn]
#           unauthenticated:
#             Fn::GetAtt: [CognitoUnauthRole, Arn]
#
#
# Erstellt Rolen
#
#
#
# CognitoAuthRole:
#   Type: AWS::IAM::Role
#   Properties:
#     RoleName: appAuthRole
#     Path: /
#     AssumeRolePolicyDocument:
#       Version: "2012-10-17"
#       Statement:
#         - Effect: "Allow"
#           Principal:
#             Federated: "cognito-identity.amazonaws.com"
#           Action:
#             - "sts:AssumeRoleWithWebIdentity"
#           Condition:
#             StringEquals:
#               "cognito-identity.amazonaws.com:aud":
#                 Ref: CognitoIdentityPool
#             "ForAnyValue:StringLike":
#               "cognito-identity.amazonaws.com:amr": authenticated
#     Policies:
#       - PolicyName: "CognitoAuthorizedPolicy"
#         PolicyDocument:
#           Version: "2012-10-17"
#           Statement:
#             - Effect: "Allow"
#               Action:
#                 - "mobileanalytics:PutEvents"
#                 - "cognito-sync:*"
#                 - "cognito-identity:*"
#               Resource: "*"
#             - Effect: "Allow"
#               Action:
#                 - "execute-api:Invoke"
#               Resource: "*"
# # Braucht man nur beim ersten Mal erstellt die Role
# CognitoUnauthRole:
#   Type: AWS::IAM::Role
#   Properties:
#     RoleName: appUnauthRole
#     Path: /
#     AssumeRolePolicyDocument:
#       Version: "2012-10-17"
#       Statement:
#         - Effect: "Allow"
#           Principal:
#             Federated: "cognito-identity.amazonaws.com"
#           Action:
#             - "sts:AssumeRoleWithWebIdentity"
#           Condition:
#             StringEquals:
#               "cognito-identity.amazonaws.com:aud":
#                 Ref: CognitoIdentityPool
#             "ForAnyValue:StringLike":
#               "cognito-identity.amazonaws.com:amr": unauthenticated
#     Policies:
#       - PolicyName: "CognitoUnauthorizedPolicy"
#         PolicyDocument:
#           Version: "2012-10-17"
#           Statement:
#             - Effect: "Allow"
#               Action:
#                 - "mobileanalytics:PutEvents"
#                 - "cognito-sync:*"
#                 - "cognito-identity:*"
#               Resource: "*"
