service:
  name: memories-app

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x

  # stage: ${opt:stage, 'dev'}
  # region: ${opt:region, 'us-east-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    REGION: ${self:provider.region}
    MEMORIES_TABLE: Memories-${self:provider.stage}
    MEMORIES_ID_INDEX: userId
    MEMORIES_SECONDARY_INDEX: timeStamp 
    IMAGES_S3_BUCKET: memories-images2020-${self:provider.stage}
    IMAGE_URL_EXPIRATION: 300

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Memories API
        description: Serverless application for storing your memories
    models:
      - name: CreateMemoryRequest
        contentType: application/json
        schema: ${file(models/createMemoryRequest.json)}
      - name: UpdateMemoryRequest
        contentType: application/json
        schema: ${file(models/updateMemoryRequest.json)}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  getMemories:
    handler: src/lambda/http/getMemories.handler
    events:
      - http:
          authorizer: Auth
          method: get
          path: memories
          cors: true
          documentation:
            summary: Get all memories for a given user
            description: Get all memories for a given user
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}

  createMemory:
    handler: src/lambda/http/createMemory.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: new
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new memory
            description: Create a new memory
            requestModels:
              'application/json': CreateMemoryRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}

  updateMemory:
    handler: src/lambda/http/updateMemory.handler
    events:
      - http:
          authorizer: Auth
          method: patch
          path: update/{timeStamp}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an existing memory
            description: Update an existing memory
            requestModels:
              'application/json': UpdateMemoryRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}

  deleteMemory:
    handler: src/lambda/http/deleteMemory.handler
    events:
      - http:
          authorizer: Auth
          method: delete
          path: delete/{timeStamp}
          cors: true
          documentation:
            summary: Remove a memory
            description: Remove a memory
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MEMORIES_TABLE}

  generateUploadUrl:
    handler: src/lambda/http/generateUploadURL.handler
    events:
      - http:
          authorizer: Auth
          method: post
          path: image/{timeStamp}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'

resources:
  Resources:

    GatewayResponseDefault4xx:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false

    MemoriesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.MEMORIES_ID_INDEX}
            AttributeType: S
          - AttributeName: ${self:provider.environment.MEMORIES_SECONDARY_INDEX}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:provider.environment.MEMORIES_ID_INDEX}
            KeyType: HASH
          - AttributeName: ${self:provider.environment.MEMORIES_SECONDARY_INDEX}
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.MEMORIES_TABLE}

    MemoriesImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Memories-app-S3-Policy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref MemoriesImagesBucket