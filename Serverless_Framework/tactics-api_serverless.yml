# NOTE: update this with your service name
service: tactics-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  # here to set dynamo db name
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}


  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-northeast-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role

#  create:
#    handler: sample/create.main
#    events:
#      - http:
#          path: notes
#          method: post
#          cors: true
#          authorizer: aws_iam
#
#  hello:
#    handler: handler.hello
#    events:
#      - http:
#          path: hello
#          method: get
#
#  championpool:
#    handler: handler.hello
#    events:
#      - http:
#          path: championpool
#          method: get

  getLatestPatchVersionNumber:
    handler: collector/getLatestPatchVersionNumber.main
    events:
      - http:
          path: latest-patch-version
          method: get
#          cors: true this enabled options request
#          authorizer: aws_iam enable this to use auth key to get response

  getLatestPatchJsonData:
    handler: collector/getLatestPatchJsonData.main
#    events:
#      - http:
#          path: latest-patch-json-data
#          method: get


  getLatestPatchChange:
    handler: collector/getLatestPatchChange.main
    events:
      - http:
          path: latest-patch-change-data
          method: get

  putChampionItemToDB:
    handler: collector/putChampionItemToDB.main

  createTable:
    handler: utility/createTable.main

  getTacticsServiceStatus:
    handler: verification/getTacticsServiceStatus.main
    events:
      - http:
          path: tactics-service-status
          method: get

  localTest:
    handler: sample/localTest.main
  getLatestComposition:
    handler: collector/getLatestComposition.main

  updateTacticsServiceStatus:
    handler: verification/updateTacticsServiceStatus.main

  writeToS3Dist:
    handler: dist/writeToS3Dist.main

#  below is api
#  getTacticsDistJson:
#    handler: api/getTacticsDistJson.main
#    events:
#      - http:
#          path: get-tactics-dist-json
#          method: get

  getDistChampionsJson:
    handler: api/getDistChampionsJson.main
    events:
      - http:
          path: get-dist-champions-json
          method: get

  getDistCompJson:
    handler: api/getDistCompJson.main
    events:
      - http:
          path: get-dist-comp-json
          method: get

  getDistItemsJson:
    handler: api/getDistItemsJson.main
    events:
      - http:
          path: get-dist-items-json
          method: get

  getDistTraitsJson:
    handler: api/getDistTraitsJson.main
    events:
      - http:
          path: get-dist-traits-json
          method: get

#  localTest.js:
#    sample: sample/localTest.main

#  testListS3Object:
#    handler: sample/listS3Objects.main
#
#  testGetS3Objects:
#    handler: sample/getS3Objects.main
#
#  testUploadFileToS3:
#    handler: sample/uploadFileToS3.main

#  uploadFileToS3:
#    handler: sample/uploadFileToS3.main
#    events:
#      - http:
#          path: upload-file-to-s3
#          method: get

#service: notes-app-api
#
## Create an optimized package for our functions
#package:
#  individually: true
#
#plugins:
#  - serverless-bundle # Package our functions with Webpack
#  - serverless-offline
#  - serverless-dotenv-plugin # Load .env as environment variables
#
#provider:
#  name: aws
#  runtime: nodejs12.x
#  stage: prod
#  region: us-east-1
