service:
  name: taskboard-backend

provider:
  name: aws
  region: ap-northeast-1
  stage: dev
  profile: handson0001
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

custom:
  stages:
    dev:
      userPoolId: ap-northeast-1_R7FtWWQ8g
    stg:
      userPoolId: ap-northeast-1_R7FtWWQ8g
    prod:
      userPoolId: ap-northeast-1_XXXXXXXXX

  appsync-simulator:
    location: ".webpack/service"

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodb:
    stages:
      - dev
      - stg
      - prod
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      dev:
        sources:
          - table: ${opt:stage, self:provider.stage}_task
            sources: [./migrations/tasks.json]
  appSync:
    name: ${opt:stage, self:provider.stage}_taskboard_backend
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ap-northeast-1
      userPoolId: ${self:custom.stages.${opt:stage, self:provider.stage}.userPoolId}
      defaultAction: ALLOW
    schema: schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: ${opt:stage, self:provider.stage}_task
        description: "タスク管理テーブル"
        config:
          tableName: { Ref: Table }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
          region: ap-northeast-1
      # serverless-appsync-simulator では ローカルの Lambda 実行をサポートしていない？
      - type: AWS_LAMBDA
        name: ${opt:stage, self:provider.stage}_appInfo
        description: "Lambda DataSource for appInfo"
        config:
          functionName: appInfo # The function name in your serverless.yml. Ignored if lambdaFunctionArn is provided.
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "lambda:invokeFunction"
              Resource:
                - "*"
    mappingTemplatesLocation: mapping-templates
    mappingTemplates:
      - dataSource: ${opt:stage, self:provider.stage}_appInfo
        type: Query
        field: appInfo
        request: Query.appInfo.request.vtl
        response: Query.appInfo.response.vtl
      - type: Query
        field: getTask
        kind: PIPELINE
        request: "start.vtl"
        response: "end.vtl"
        functions:
          - getTask # 本当は使わなくて良いけど、関数の練習として書いてみる
      - dataSource: ${opt:stage, self:provider.stage}_task
        type: Query
        field: listTasks
        request: "Query.listTasks.request.vtl"
        response: "Query.listTasks.response.vtl"
      - dataSource: ${opt:stage, self:provider.stage}_task
        type: Mutation
        field: createTask
        request: "Mutation.createTask.request.vtl"
        response: "end.vtl"
      - dataSource: ${opt:stage, self:provider.stage}_task
        type: Mutation
        field: updateTask
        request: "Mutation.updateTask.request.vtl"
        response: "end.vtl"
      - dataSource: ${opt:stage, self:provider.stage}_task
        type: Mutation
        field: deleteTask
        request: "Mutation.deleteTask.request.vtl"
        response: "end.vtl"
    functionConfigurations:
      - dataSource: ${opt:stage, self:provider.stage}_task
        name: "getTask"
        request: "getTask.request.vtl"
        response: "getTask.response.vtl"

plugins:
  - serverless-webpack
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-appsync-simulator # must go before serverless-offline
  - serverless-offline

functions:
  appInfo:
    handler: src/functions/handler.appInfo
    name: ${opt:stage, self:provider.stage}_appInfo
    events:
      - http: GET appInfo

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, self:provider.stage}_task
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: status
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    AppSyncDynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${opt:stage, self:provider.stage}-appsync-dynamodb-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "dynamo-policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "*"
    # CognitoUserPool:
    #   Type: AWS::Cognito::UserPool
    #   Properties:
    #     AutoVerifiedAttributes:
    #       - email
    #     SmsConfiguration:
    #       ExternalId: ${opt:stage, self:provider.stage}-CognitoUserPool-external
    #       SnsCallerArn: !GetAtt CognitoUserPoolSNSRole.Arn
    #     MfaConfiguration: "OFF"
    #     UserPoolName: ${opt:stage, self:provider.stage}-CognitoUserPool
    #     UsernameAttributes:
    #       - email
    # CognitoUserPoolClient:
    #   Type: AWS::Cognito::UserPoolClient
    #   Properties:
    #     ClientName: ${opt:stage, self:provider.stage}-CognitoUserPoolClient
    #     ExplicitAuthFlows:
    #       - ALLOW_ADMIN_USER_PASSWORD_AUTH
    #       - ALLOW_REFRESH_TOKEN_AUTH
    #       - ALLOW_USER_SRP_AUTH # これが必要
    #     GenerateSecret: false
    #     UserPoolId:
    #       Ref: CognitoUserPool
    # CognitoUserPoolSNSRole:
    #   Type: "AWS::IAM::Role"
    #   Properties:
    #     RoleName: ${opt:stage, self:provider.stage}-cognito-user-pool-sns-role
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service: cognito-idp.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: "dynamo-policy"
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Action:
    #                 - sns:Publish
    #               Resource: "*"
    #               Effect: Allow
