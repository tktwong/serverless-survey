# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: mail-photo-frame
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: !Sub
        - "#{Arn}/*"
        - { Arn: !GetAtt S3Bucket.Arn }
    - Effect: "Allow"
      Action:
        - "cloudfront:CreateInvalidation"
      Resource: !Sub
        - arn:aws:cloudfront::#{Account}:distribution/#{Distribution}
        - Account: !Ref AWS::AccountId
          Distribution: !Ref CloudFront

custom:
  paremetersFile: ${env:PARAMETERS_FILE, './parameters.yml'}
  parameters: ${file(${self:custom.paremetersFile})}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  #  auth:
  #    handler: handler.auth
  updater:
    handler: handler.updater
    timeout: 900
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - schedule:
          rate: rate(60 minutes)
          enabled: ${self:custom.parameters.schedule_enabled}

    #      - http:
    #          path: users/create
    #          method: get
    #      - websocket: $connect
    #      - s3: ${env:BUCKET}
    #      - sns: greeter-topic
    #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
    #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
    #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
    #      - iot:
    #          sql: "SELECT * FROM 'some_topic'"
    #      - cloudwatchEvent:
    #          event:
    #            source:
    #              - "aws.ec2"
    #            detail-type:
    #              - "EC2 Instance State-change Notification"
    #            detail:
    #              state:
    #                - pending
    #      - cloudwatchLog: '/aws/lambda/hello'
    #      - cognitoUserPool:
    #          pool: MyUserPool
    #          trigger: PreSignUp
    #      - alb:
    #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
    #          priority: 1
    #          conditions:
    #            host: example.com
    #            path: /hello

    #    Define function environment variables here
    environment:
      bucket: ${self:resources.Outputs.Bucket.Value}
      username: ${self:custom.parameters.mail_username}
      password: ${self:custom.parameters.mail_password}
      address: ${self:custom.parameters.imap_address}
      ga: ${self:custom.parameters.ga_id}
      distribution: ${self:resources.Outputs.Distribution.Value}

# you can add CloudFormation resource templates here
resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: mail-photo-frame-frontend-${opt:stage}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 90
              Prefix: images/
              Status: Enabled
              Id: DeleteImagesOlderThan90Days
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: !Sub
                - "#{Arn}/*"
                - { Arn: !GetAtt S3Bucket.Arn }
    CloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt S3Bucket.DomainName
              Id: !Sub
                - S3-#{Bucket}
                - { Bucket: !Ref S3Bucket }
              S3OriginConfig:
                OriginAccessIdentity: ""
          DefaultRootObject: index.html
          Enabled: true
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: false
            TargetOriginId: !Sub
              - S3-#{Bucket}
              - { Bucket: !Ref S3Bucket }
            ViewerProtocolPolicy: "redirect-to-https"
            LambdaFunctionAssociations:
              - EventType: viewer-request
                LambdaFunctionARN: ${self:custom.parameters.auth_lambda_arn}
  Outputs:
    Bucket:
      Value:
        Ref: S3Bucket
    Distribution:
      Value:
        Ref: CloudFront
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-cf-vars
