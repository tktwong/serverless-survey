# To install, invoke giving a service name. e.g.:
# sls deploy --service=my-transcriber
# Note, that the combination of service name and stage is used
# to generate the names of S3 buckets which the deployment uses,
# which have to be globally unique.
service: ${opt:service}

plugins:
  - serverless-python-requirements
  - serverless-wsgi

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

resources: # CloudFormation template syntax
  Resources:
    recordingStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-content
    awsTranscriptionStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-aws-transcriptions
        # AccessControl: PublicReadWrite

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  # FIXME: Don't hard-code the region
  region: ${opt:region, 'eu-west-2'}
  iamRoleStatements:
    - Effect: "Allow"
      Action: [
                "s3:ListBucket",
                "logs:CreateLogStream",
                "s3:AbortMultipartUpload",
                "s3:DeleteObject",
                "s3:PutObject",
                "s3:GetObject"
            ]
      Resource: [
        Fn::GetAtt: [ "recordingStorage", "Arn" ],
        Fn::Join: [
          "/",
          [
            Fn::GetAtt: [ "recordingStorage", "Arn" ],
            "*"
          ]
        ],
        Fn::GetAtt: [ "awsTranscriptionStorage", "Arn" ],
        Fn::Join: [
          "/",
          [
            Fn::GetAtt: [ "awsTranscriptionStorage", "Arn" ],
            "*"
          ]
        ]
      ]
    - Effect: "Allow"
      Action: [
                "transcribe:*"
              ]
      Resource: "*"

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    environment:
      APP_NAME: ${self:service}
      SLOT: ${self:provider.stage}
