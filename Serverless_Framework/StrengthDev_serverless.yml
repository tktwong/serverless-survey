# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: StrengthDev # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  environment: 
    DYNAMODB_TABLE: 'SDusers'
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-2:*:*"
      
# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  create:
    handler: api/create.create
    description: This creates an item in the dynamodb table SDusers
    events:
      - http:
          path: create
          method: post
          cors: true
  list:
    handler: api/list.list
    description: This lists the item(s) in the dynamodb table SDusers
    events:
      - http:
          path: list
          method: get
          cors: true
  get:
    handler: api/get.get
    description: This retrieves an item in the dynamodb table SDusers
    events:
      - http:
          path: get/{id}
          method: get
          cors: true
  update:
    handler: api/update.update
    description: This updates an item in the dynamodb table SDusers
    events:
      - http:
          path: update/{id}
          method: put
          cors: true
  delete:
    handler: api/delete.delete
    description: This deletes an item in the dynamodb table SDusers
    events:
      - http:
          path: delete/{id}
          method: delete
          cors: true


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    #The DynamoDb Profile Table
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'SDusers'
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
