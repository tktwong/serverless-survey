service: jwt.verify

provider:
  name: aws
  runtime: go1.x
  timeout: 10
  vpc:
    securityGroupIds:
      - ${file(config-${opt:stage}.json):VPC.SecurityGroup}
    subnetIds:
      - ${file(config-${opt:stage}.json):VPC.SubNet1}
      - ${file(config-${opt:stage}.json):VPC.SubNet2}
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:*"
      Resource: 
        - "arn:aws:s3:::${file(config-${opt:stage}.json):RSABucketName}/*"
  environment:
    RSABucket: ${file(config-${opt:stage}.json):RSABucketName}
    PRIVKeyName: ${file(config-${opt:stage}.json):RSAPrivateKeyName}
    PUBKeyName: ${file(config-${opt:stage}.json):RSAPublicKeyName}

package:
 artifact: bin/pt.pltf.aws.jwt.validate.zip
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  verify-token:
    handler: verify
    cors: true
    # events:
    #  - http:
    #      path: hb/promotion/{id}
    #      method: get
    #      request:
    #         parameters:
    #           paths:
    #             id: true

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'