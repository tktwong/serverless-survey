
service: cognition-disaster-data
provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1

custom:
  secrets: ${file(secrets.json)}

resources:
  Resources:

    BatchComputeEnvironment:
      DependsOn:
        - BatchInstanceRole
        - SecurityGroup
        - AWSBatchServiceRole
      Type: AWS::Batch::ComputeEnvironment
      Properties:
        ComputeEnvironmentName: cdd-ec2
        ComputeResources:
          InstanceRole:
            Fn::GetAtt:
              - BatchInstanceProfile
              - Arn
          InstanceTypes:
            - c4.2xlarge
          LaunchTemplate:
            LaunchTemplateId:
              Ref: SpecialComputeLaunchTemplate
            Version:
              Fn::GetAtt:
                - SpecialComputeLaunchTemplate
                - LatestVersionNumber
          MaxvCpus: 32
          MinvCpus: 0
          SecurityGroupIds:
            - Fn::GetAtt:
                - SecurityGroup
                - GroupId
          Subnets:
            - ${self:custom.secrets.SUBNET1_ID}
            - ${self:custom.secrets.SUBNET2_ID}
            - ${self:custom.secrets.SUBNET3_ID}
            - ${self:custom.secrets.SUBNET4_ID}
            - ${self:custom.secrets.SUBNET5_ID}
            - ${self:custom.secrets.SUBNET6_ID}
          Type: EC2
        ServiceRole:
          Fn::GetAtt:
            - AWSBatchServiceRole
            - Arn
        State: ENABLED
        Type: MANAGED

    SpecialComputeLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: "Special-inc-volume-encrypt"
        LaunchTemplateData:
          BlockDeviceMappings:
            - DeviceName:  '/dev/sdb'  # Amazon ECS-Optimized Amazon Linux 2 ami accepts EDS vol /dev/sd[b-l]
              Ebs:
                DeleteOnTermination: true
                Encrypted: true
                VolumeSize: 250
                VolumeType: "gp2"
          UserData:
           "Fn::Base64": !Sub |
              MIME-Version: 1.0
              Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

              --==MYBOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"

              #!/bin/bash
              mkfs.ext4  /dev/sdb
              (
              echo n # Add a new partition
              echo p # Primary partition
              echo 1 # Partition number
              echo   # First sector (Accept default: 1)
              echo   # Last sector (Accept default: varies)
              echo w # Write changes
              ) | fdisk  /dev/sdb
              mkfs.ext4  /dev/xvdb1
              mkdir /data
              echo " /dev/xvdb1       /data  ext4    defaults        0       2" >> /etc/fstab
              mount -a
              service docker restart

              --==MYBOUNDARY==

    BatchJobQueue:
      Type: AWS::Batch::JobQueue
      Properties:
        ComputeEnvironmentOrder:
          - Order: 1
            ComputeEnvironment:
              Ref: BatchComputeEnvironment
        State: ENABLED
        Priority: 1
        JobQueueName: cddJobQueue

    NoaaStormJobDefinition:
      Type: AWS::Batch::JobDefinition
      Properties:
        Type: container
        JobDefinitionName: index-noaa-storm
        RetryStrategy:
          Attempts: 1
        ContainerProperties:
          Command:
            - cognition-disaster-data
            - index-noaa-storm
            - Ref::id
          Memory: 8000
          Privileged: true
          JobRoleArn:
            Fn::GetAtt:
              - AWSBatchJobRole
              - Arn
          ReadonlyRootFilesystem: false
          Vcpus: 4
          Image: geospatialjeff/cognition-disaster-data:latest
          MountPoints:
            - ContainerPath: "/data"
              ReadOnly: false
              SourceVolume: data
          Volumes:
            - Name: data
              Host:
                SourcePath: "/data"

    AWSBatchJobRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: cdd-policy
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::*
        Path: /

    AWSBatchServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: batch.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: cdd-service-policy
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::*
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole
        Path: /service-role/

    BatchInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        Path: /

    AmazonEC2SpotFleetRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: spotfleet.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
        Path: /

    BatchInstanceProfile:
      DependsOn:
        - BatchInstanceRole
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - Ref: BatchInstanceRole
        Path: /

    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: ${self:service}-sg
        GroupDescription: Security group for ${self:service}
        VpcId: ${self:custom.secrets.VPC_ID}
        SecurityGroupEgress:
          CidrIp: 0.0.0.0/0
          IpProtocol: -1
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 443
            ToPort: 443
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 8000
            ToPort: 8000