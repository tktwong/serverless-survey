service: ${env:PROJECT_NAME}

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  environment:
    DB_NAME: ${self:custom.env.${self:provider.stage}.DB_NAME}
    DB_TABLE: ${self:custom.env.${self:provider.stage}.DB_TABLE}
    DB_USER: ${self:custom.env.${self:provider.stage}.DB_USER}
    DB_PASS: ${self:custom.env.${self:provider.stage}.DB_PASS}
    DATABASE_URL: ${self:custom.env.${self:provider.stage}.DATABASE_URL}
    BASEURL: ${self:custom.env.${self:provider.stage}.BASEURL}
    BUCKET_NAME: ${self:service}-${self:provider.stage}-swaggerui
  apiKeys:
    - ${self:service}-${self:provider.stage}-key

functions:
  migrate:
    handler: dist/handler.migrate
    timeout: 30
  api:
    handler: dist/handler.api
    events:
      - http:
          path: swagger.json
          method: get
          cors: true
          timeout: 30
      - http:
          path: pets
          method: get
          private: true
          cors: true
          timeout: 30
      - http:
          path: pets/{id}
          method: get
          private: true
          cors: true
          timeout: 30
      - http:
          path: pets
          method: post
          private: true
          cors: true
          timeout: 30
      - http:
          path: pets/{id}
          method: patch
          private: true
          cors: true
          timeout: 30
      - http:
          path: pets/{id}
          method: delete
          private: true
          cors: true
          timeout: 30

package:
  exclude:
    - './**' # exclude everything but dist and deps
    - '!node_modules/**' # can't use include or otherwise dev deps will be bundled
    - '!dist/**'

plugins:
  - serverless-offline
  - serverless-stack-output
  - serverless-openapi-joi

resources:
  Resources:
    ServerlessRDSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: RDS
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '5432'
            ToPort: '5432'
            CidrIp: 0.0.0.0/0
    Database:
      DependsOn: ServerlessRDSSecurityGroup
      Type: 'AWS::RDS::DBInstance'
      DeletionPolicy: Retain
      Properties:
        Engine: postgres
        DBInstanceClass: db.t2.micro
        AllocatedStorage: 5
        DBInstanceIdentifier: ${self:service}-${self:provider.stage}
        DBName: ${self:provider.environment.DB_NAME}
        MasterUsername: ${self:provider.environment.DB_USER}
        MasterUserPassword: ${self:provider.environment.DB_PASS}
        PubliclyAccessible: true
        VPCSecurityGroups:
          - Fn::GetAtt:
            - ServerlessRDSSecurityGroup
            - GroupId
    SwaggerUIBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:provider.environment.BUCKET_NAME}
        WebsiteConfiguration:
          IndexDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000
    SwaggerUIBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: SwaggerUIBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "SwaggerUIBucket"
                    },
                    "/*"
                  ]
                ]

  Outputs:
    SwaggerUIBucketName:
      Value:
        Ref: SwaggerUIBucket

custom:
  output:
    handler: scripts/build-swaggerui.handler

  serverless-offline:
    port: ${env:PORT}
    apiKey: ${env:API_KEY}

  env:
    local:
      DB_NAME: ${env:DB_NAME}
      DB_TABLE: ${env:DB_TABLE}
      DB_USER: ${env:DB_USER}
      DB_PASS: ${env:DB_PASS}
      DATABASE_URL: ${env:DATABASE_URL}
      BASEURL: http://localhost:${env:PORT}

    dev:
      DB_NAME: ${env:DB_NAME_DEV}
      DB_TABLE: ${env:DB_TABLE_DEV}
      DB_USER: ${env:DB_USER_DEV}
      DB_PASS: ${env:DB_PASS_DEV}
      DATABASE_URL:
        "Fn::Join": ["", [
          "postgres://${env:DB_USER_DEV}:${env:DB_PASS_DEV}@",
          "Fn::GetAtt": [Database, Endpoint.Address],
          ":",
          "Fn::GetAtt": [Database, Endpoint.Port],
          "/${env:DB_NAME_DEV}"
        ]]
      BASEURL:
        "Fn::Join": ["", [
          "https://",
          { "Ref" : "ApiGatewayRestApi" },
          ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
        ]]
