service: processor-api
# package:
#   individually: true
#   exclude:
#     - "**/*"

plugins:
#  - serverless-prune-plugin
#  - serverless-aws-alias
  - serverless-dynamodb-local
  - serverless-offline
  
# frameworkVersion: "=X.X.X"
custom:
  stageNames:
    dev: dev
    sit: sit
    uat: uat
    preprod: preprod
    prod: prod


provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.stageNames.dev}
  region: eu-west-1
  stackName: sls-${self:service}-${opt:stage, self:provider.stage}-stack
  apiName: Processor-api
  role: arn:aws:iam::820643439592:role/LambdaS3Execute
#  deploymentBucket:
#    name: sls-${self:service}-${opt:stage, self:provider.stage}
#    serverSideEncryption: AES256

  environment:
    ${file(./configs/providers/${self:provider.name}/${opt:stage, self:provider.stage}/env.yml)}

  # you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  #   - ${file(./configs/providers/${self:provider.name}/${opt:stage, self:provider.stage}/roles.yml)}

functions:
  
  - ${file(./configs/functions/data.yml)}

# you can add CloudFormation resource templates here
resources:
  Resources:
    myDefaultRoleDataProcessor:
      Type: AWS::IAM::Role
      Properties:
        RoleName: myDefaultRoleDataProcessor # required if you want to use 'serverless deploy --function' later on
        PermissionsBoundary: "arn:aws:iam::820643439592:policy/MiddlewareDevBoundaries"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3FullAccess
          - arn:aws:iam::aws:policy/CloudWatchFullAccess


