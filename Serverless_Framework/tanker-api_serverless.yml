service: tanker

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 256
  stage: dev
  region: "us-west-2"
  deploymentBucket: ${cf:tanker-dev.TankerPipelineArtifactsBucket}
  domain: ${cf:tanker-dev.TankerHostedZone}
  mediaTableArn: ${cf:tanker-dev.MediaTableArn}
  environment:
    MEDIA_TABLE_NAME: ${cf:tanker-dev.MediaTableName}
    WEB_APP_URL: https://${self:provider.domain}

plugins:
  - serverless-domain-manager
  - serverless-iam-roles-per-function

custom:
  stage: ${opt:stage, self:provider.stage}
  certificateArn: ${cf:tanker-dev.TankerCertificateArn}
#  mediaTable: ${cf:tanker-us-west-2-dev.MediaTableArn}

  # Important: The Route53 A and AAAA domain records created by serverless-domain-manager are managed by the API,
  # not Cloudformation.  They do not appear as Resources in the Cloudformation stack for this service.  Do not manage
  # them manually via Route53.
  #
  # When deleting this stack, do 'sls delete_domain', then 'sls remove'.  Failure to do this may result in lost, hidden
  # custom domains which will cause certificates to be un-removable.  See:
  # https://forum.serverless.com/t/solved-cannot-delete-certificate-cloudfront-distribution-not-showing/3792/4
  #
  # TL;DR: if this happens, create a temporary API gateway so you can see the Custom Domain Names and delete it manually.
  #
  # TODO: create a pipeline action to automate this cleanup

  customDomain:
    stage: ${self:custom.stage}
    basePath: ${self:custom.stage}
    domainName: api.${self:provider.domain}
    certificateArn: ${self:custom.certificateArn}
    endpointType: REGIONAL
    createRoute53Record: true

functions:
  post:
    handler: tanker/post.post
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: ${self:provider.mediaTableArn}
    events:
      - http:
          path: filmstock/{filmstockId}/{filmFormat}
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: tanker/get.get
    iamRoleStatementsInherit: false
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: ${self:provider.mediaTableArn}
    events:
      - http:
          path: filmstock
          method: get
          cors: true
          authorizer: aws_iam

resources:
  Outputs:
    URL:
      Value: https://${self:custom.customDomain.domainName}/${self:custom.stage}
      Export:
        Name: TankerApiUrl
