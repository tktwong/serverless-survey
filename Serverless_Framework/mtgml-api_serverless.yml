service: mtgml-decks

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-python-requirements

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true
  exclude:
    - data/**
    - notebooks/**
  include:
    - ../../libs/**

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  tracing:
    apiGateway: true
    lambda: true

  environment:
    USERS_TABLE: ${self:custom.usersTable}
    SUBSCRIPTIONS_TABLE: ${self:custom.subscriptionsTable}
    GLOBAL_DECKS_TABLE: ${self:custom.globalDecksTable}
    GLOBAL_CARDS_TABLE: ${self:custom.globalCardsTable}
    USER_DECKS_TABLE: ${self:custom.userDecksTable}
    USER_CARDS_TABLE: ${self:custom.userCardsTable}
    STRIPE_PUBLIC_KEY: ${self:custom.stripe_public_keys.${self:custom.stage}, self:custom.stripe_public_keys.dev}
    STRIPE_SECRET_KEY: ${self:custom.stripe_secret_keys.${self:custom.stage}, self:custom.stripe_secret_keys.dev}
    STRIPE_SIGNING_SECRET: ${env:STRIPE_SIGNING_SECRET}
    stage: ${self:custom.stage}
    resources_stage: ${self:custom.resources_stage}

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource: "*"

functions:
  create:
    handler: create.main
    memorySize: 512
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    memorySize: 512
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    memorySize: 512
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    memorySize: 512
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    memorySize: 512
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    events:
      - http:
          path: decks/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}

  - Outputs:
      ApiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:custom.stage}-ApiGatewayRestApiId

      ApiGatewayRestApiRootResourceId:
        Value:
           Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        Export:
          Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId
