service: knocker

# enable required plugins, in order to make what we want
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-pseudo-parameters
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  #stage: dev
  environment:
    KNOCKER_TABLE: ${self:custom.settings.${self:custom.myStage}.KNOCKER_TABLE}
    DB_URL: ${self:custom.endpoints.dynamodb-url}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "*"
# here we describe our lambda function
functions:
  knocker-graphql-api: # function name  ##this will be eventually changed
    handler: src/functions/apollo-server.main
    #handler: src/index.grapqlHandler # where the actual code is located
    # to call our function from outside, we need to expose it to the outer world
    # in order to do so, we create a REST endpoint
    events:
      - http:
          path: api # path for the endpoint
          method: any # HTTP method for the endpoint
          cors: true
          #integration: lambda-proxy
          #Add the custom authorizer
          #authorizer:
          #type: COGNITO_USER_POOLS
          #authorizerId:
          #Ref: ApiGatewayAuthorizer
  confirm-user:
    handler: src/functions/user-confirm.main
    events:
      - http:
          path: confirm-user
          method: post
custom:
  webpack:
    webpackConfig: "webpack.config.js" # name of webpack configuration file
    includeModules: true # add excluded modules to the bundle
    packager: "npm" # Packager that will be used to package your external modules
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed: #Seeds local data after test are created
      domain:
        sources:
          - table: ${self:custom.settings.${self:custom.myStage}.KNOCKER_TABLE}
            sources: [./src/db/data/knocker.json]
    stages:
      - ${self:provider.stage}
  myStage: ${opt:stage, self:provider.stage}
  settings:
    local:
      KNOCKER_TABLE: ${self:service}-local
    dev:
      KNOCKER_TABLE: ${self:service}-dev
  endpoints:
    dynamodb-url: "http://localhost:8000"

resources:
  Resources:
    PlayerDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      # DeletionPolicy: Retain # Retains table after stack delete
      Properties:
        AttributeDefinitions:
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
          - AttributeName: "Data"
            AttributeType: "S"
          - AttributeName: "Date"
            AttributeType: "S"
          - AttributeName: "LocationMachineXrefId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: "DataGSI"
            KeySchema:
              - AttributeName: "Data"
                KeyType: "HASH"
              - AttributeName: "SK"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: "DateGSI"
            KeySchema:
              - AttributeName: "Date"
                KeyType: "HASH"
              - AttributeName: "SK"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: "LocationMachineXrefIdGSI"
            KeySchema:
              - AttributeName: "LocationMachineXrefId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "INCLUDE"
              NonKeyAttributes: ["Date", "Score", "Data"]
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: "SKGSI"
            KeySchema:
              - AttributeName: "SK"
                KeyType: "HASH"
            Projection:
              ProjectionType: "INCLUDE"
              NonKeyAttributes: ["Date", "Score", "Data"]
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:custom.settings.${self:custom.myStage}.KNOCKER_TABLE}
    # Cognito - User Pool (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html)
    # https://stackoverflow.com/questions/46973302/how-to-require-email-validation-in-cognito-through-cloudformation
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: knocker_lambda_api_user_pool
        Schema:
          - Name: email
            Required: true
            Mutable: false
          - Name: preferred_username
            Required: true
            Mutable: false
            AttributeDataType: String
          - Name: name
            Required: true
            Mutable: true
            AttributeDataType: String
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
          EmailMessage: Please verify your email address by clicking the following link - {####}
          EmailSubject: Knckr Verification Link!!!!
        EmailVerificationMessage: Please click the link below to verify your email address. {####}
        EmailVerificationSubject: Your Verification Link!!!!
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        LambdaConfig:
          PostConfirmation: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-confirm-user
    # Cognito - Client ( Used to cakk  )
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: knocker_lambda_api_client
        UserPoolId:
          Ref: CognitoUserPool #Pointing to the Cognito User Pool
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref CognitoUserPool
        Domain: "knckr"
    # Cognito - Identity (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypool.html)
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: knocker_lambda_api_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    # IAM Roles
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: sam_cognito_auth_appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"

    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: sam_cognito_auth_appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
    UserPoolLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn: ConfirmDashuserLambdaFunction
      Properties:
        Action: lambda:invokeFunction
        Principal: cognito-idp.amazonaws.com
        FunctionName: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-confirm-user
        SourceArn: arn:aws:cognito-idp:us-east-1:170172180887:userpool/*
