# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: buzzer

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '>=1.0.0 <2.0.0'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, self:custom.defaultStage}
  region: eu-west-2
  memorySize: 256
  apiGateway:
    binaryMediaTypes:
      - 'image/png'

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:Scan'
        # New permissions needed for stream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: { Fn::GetAtt: [buzzTable, Arn] }

package:
  exclude:
    - client/**
    - flow-typed/**
    - __mocks__/**
    - .circleci/**

functions:
  buzz:
    handler: handler.buzz
    events:
      - http:
          path: api/buzz
          method: post
    environment:
      BUZZ_TABLE:
        Ref: buzzTable
  buzzes:
    handler: handler.buzzes
    events:
      - http:
          path: api/buzzes
          method: get
    environment:
      BUZZ_TABLE:
        Ref: buzzTable
  reset:
    handler: handler.reset
    events:
      - http:
          path: api/reset
          method: post
    environment:
      BUZZ_TABLE:
        Ref: buzzTable

resources:
  Resources:
    IPv4HostAliasRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: ${self:custom.domainName.${opt:stage, 'dev'}}.
        Name: ${self:custom.alias.${opt:stage, 'dev'}}.${self:custom.domainName.${opt:stage, 'dev'}}.
        Type: A
        AliasTarget:
          DNSName:
            Fn::GetAtt: [ApiDistribution, DomainName]
          HostedZoneId: Z2FDTNDATAQYW2
    IPv6HostAliasRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: ${self:custom.domainName.${opt:stage, 'dev'}}.
        Name: ${self:custom.alias.${opt:stage, 'dev'}}.${self:custom.domainName.${opt:stage, 'dev'}}.
        Type: AAAA
        AliasTarget:
          DNSName:
            Fn::GetAtt: [ApiDistribution, DomainName]
          HostedZoneId: Z2FDTNDATAQYW2
    buzzTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${opt:stage, 'dev'}BuzzTable"
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
          - AttributeName: uuid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
  Outputs:
    ApiDistributionId:
      Description: Api Distirbution Id
      Value:
        Ref: ApiDistribution

plugins:
  - serverless-webpack
  - fullstack-serverless
  - serverless-offline
  - serverless-api-compression
  - serverless-print-dots
  - serverless-cloudfront-invalidate

custom:
  defaultStage: dev
  contentCompression: 1024
  bucketName:
    dev: buzzer-dev
    prod: buzzer-prod

  alias:
    dev: buzzer
    prod: buzzer2
  domainName:
    dev: patrickandgrace.com
    prod: patrickandgrace.com
  certificate:
    dev: arn:aws:acm:us-east-1:963777545862:certificate/ee3a5994-e3e5-41a5-8a25-1e3f5f883ae4
    prod: arn:aws:acm:us-east-1:963777545862:certificate/ee3a5994-e3e5-41a5-8a25-1e3f5f883ae4
  fullstack:
    apiPath: api
    bucketName: ${self:custom.bucketName.${self:provider.stage}}
    certificate: ${self:custom.certificate.${opt:stage, 'dev'}}
    clientCommand: npm run build:client
    domain:
      - ${self:custom.alias.${opt:stage, 'dev'}}.${self:custom.domainName.${opt:stage, 'dev'}}
    distributionFolder: client/build
    indexDocument: index.html
    singlePageApp: true
  serverless-offline:
    port: 7070
  cloudfrontInvalidate:
    distributionIdKey: ApiDistributionId
    items:
      - '/*'
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
