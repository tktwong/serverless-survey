service: stampsafe-2-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-include-dependencies

package:
  excludeDevDependencies: false
  exclude:
    - node_modules/** # no need to add this yourself, this plugin does it for you
  individually: true

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-stampsafe-reports    
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    accurateSecretKey: ${self:custom.environment.accurateSecretKey}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ ReportsTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: 
       # this is building the following format: arn:aws:dynamodb:us-west-2:AWS::AccountId:table/dev-stampsafe-reports/index/*
        Fn::Join:
          - ''
          -
            - 'arn:aws:dynamodb:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':table/'
            - ${self:custom.tableName}/
            - 'index/*'
            
functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create-report:
    handler: create-report.default
    events:
      - http:
          path: report
          method: post
          cors: true
          authorizer: aws_iam
  authorize-report:
      # Defines an HTTP API endpoint that calls the main function in get.js
      # - path: url path is /notes/{id}
      # - method: GET request
      handler: authorize-report.default
      events:
        - http:
            path: authorize/{id}
            method: get
            cors: true
            authorizer: aws_iam
  criminal-record-check:
    handler: criminal-record-check.default
    events:
      - http:
          path: backgroundcheck
          method: post
          cors: true
          authorizer: aws_iam
  get-stolen-records:
    handler: get-stolen-records.default
    events:
      - http:
          path: stolen
          method: post
          cors: true
          authorizer: aws_iam
  get-report:
      # Defines an HTTP API endpoint that calls the main function in get.js
      # - path: url path is /notes/{id}
      # - method: GET request
      handler: get-report.default
      events:
        - http:
            path: report/{id}
            method: get
            cors: true
            authorizer: aws_iam
  update-report:
      # Defines an HTTP API endpoint that calls the main function in update.js
      # - path: url path is /notes/{id}
      # - method: PUT request
      handler: update-report.default
      events:
        - http:
            path: report/{id}
            method: put
            cors: true
            authorizer: aws_iam
  delete-report:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete-report.default
    events:
      - http:
          path: report/{id}
          method: delete
          cors: true
          authorizer: aws_iam          
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/cognito-identity-pool.yml)}