service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
  region: eu-west-1

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true
          documentation: ${file(documentation/create.yaml)}
  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true
          documentation: ${file(documentation/list.yaml)}

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true
          documentation: ${file(documentation/get.yaml)}

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true
          documentation: ${file(documentation/update.yaml)}

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true
          documentation: ${file(documentation/delete.yaml)}

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

custom:
  documentation:
    version: '6'
    summary: 'Todo API'
    description: 'A todo API documented with OpenAPI specification'
    resources:
      -
        path: "todos"
        description: "Path used for creating and listing todos"
      -
        path: "todos/{id}"
        description: "Path used for getting, updating, and deleting todos"
    models:
      -
        name: "todo"
        description: "a todo object"
        contentType: "application/json"
        schema:
          type: object
          properties:
            id:
              type: string
              format: uuid
            text:
              type: string
              format: string
            checked:
              type: boolean
            createdAt:
              type: number
            updatedAt:
              type: number
          required:
            - id
            - checked
            - text
            - createdAt
            - updatedAt
      -
        name: "todoCreateRequest"
        description: "a todo create request model"
        contentType: "application/json"
        schema:
          type: object
          properties:
            text:
              type: string
              format: string
          required:
            - text
      -
        name: "todoUpdateRequest"
        description: "a todo update request model"
        contentType: "application/json"
        schema:
          type: object
          properties:
            text:
              type: string
              format: string
            checked:
              type: boolean
          required:
            - text
            - checked
      -
        name: "todoList"
        description: "a list of todo objects"
        contentType: "application/json"
        schema:
          type: array
          items:
            $ref: "{{model: todo}}"
      -
          name: "awsError"
          description: "an aws internal server error, usually with status code 502 (bad gateway)"
          contentType: "application/json"
          schema:
            type: object
            properties:
              message:
                type: string
            required:
              - message

plugins:
  - serverless-aws-documentation
