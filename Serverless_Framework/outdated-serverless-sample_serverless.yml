service: candidateService
plugins:
  - serverless-webpack
  - serverless-domain-manager
custom:
  webpackIncludeModules: true   
  customDomain:
    domainName: ${file(../../devops/configs/${opt:stage, 'development'}.config.json):RootApiUrl}
    basePath: 'candidates'
    stage: ${opt:stage, 'development'}
    createRoute53Record: true
    endpointType: 'regional'
provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 256
  stage: ${opt:stage, 'development'}
  endpointType: regional
  region: ap-southeast-2
  iamRoleStatements: ${file(../../devops/dynamoIamRole.yaml)}
  environment: ${file(../../devops/environmentVariables.yaml)}
  
functions:
  getCandidate:
    handler: handlers/getCandidate.handler
    events:
      - http:
          path: /{id}
          method: get
          cors: true
          integration: lambda
          response: ${file(../../devops/eventResponse.yaml)}
          authorizer: ${file(../../devops/eventAuthorizer.yaml)}
  createCandidate:
    handler: handlers/createCandidate.handler
    events:
      - http:
          path: /
          method: post
          cors: true
          integration: lambda
          response: ${file(../../devops/eventResponse.yaml)}
          authorizer: ${file(../../devops/eventAuthorizer.yaml)}      
  updateCandidate:
    handler: handlers/updateCandidate.handler
    events:
      - http:
          path: /{id}
          method: put
          cors: true   
          integration: lambda
          response: ${file(../../devops/eventResponse.yaml)}
          authorizer: ${file(../../devops/eventAuthorizer.yaml)}          
  listTenantCandidates:
    handler: handlers/listTenantCandidates.handler
    events:
      - http:
          path: /
          method: get
          cors: true
          integration: lambda
          response: ${file(../../devops/eventResponse.yaml)}
          authorizer: ${file(../../devops/eventAuthorizer.yaml)}
  listPositionCandidates:
    handler: handlers/listPositionCandidates.handler
    events:
      - http:
          path: /position/{id}
          method: get
          cors: true   
          integration: lambda
          response: ${file(../../devops/eventResponse.yaml)}
          authorizer: ${file(../../devops/eventAuthorizer.yaml)}       
  deleteCandidate:
    handler: handlers/deleteCandidate.handler
    events:
      - http:
          path: /{id}
          method: delete
          cors: true
          integration: lambda
          response: ${file(../../devops/eventResponse.yaml)}
          authorizer: ${file(../../devops/eventAuthorizer.yaml)}       
resources:
  Resources:
    DDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${file(../../devops/configs/${opt:stage, 'development'}.config.json):CandidatesTable}
        AttributeDefinitions:
          -
            AttributeName: "candidateId"
            AttributeType: "S"
          -
            AttributeName: "tenantId"
            AttributeType: "S"
          - 
            AttributeName: "positionId"
            AttributeType: "S"
          - 
            AttributeName: "companyId"
            AttributeType: "S"            
        KeySchema:
          -
            AttributeName: "tenantId"
            KeyType: "HASH"
          -
            AttributeName: "candidateId"
            KeyType: "RANGE"
        LocalSecondaryIndexes:
          - IndexName: "PositionIndex"
            KeySchema:
              -
                AttributeName: "tenantId"
                KeyType: "HASH"
              - 
                AttributeName: "positionId"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "KEYS_ONLY"
          - IndexName: "CompanyIndex"
            KeySchema:
              -
                AttributeName: "tenantId"
                KeyType: "HASH"
              - 
                AttributeName: "companyId"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "KEYS_ONLY"              
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
