# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

plugins:
  - serverless-domain-manager
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline



service: jobsearch-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

  # you can overwrite defaults here
  stage: dev
  region: us-east-1

  # api-keys
  apiKeys:
    - myFirstKey
    - ${opt:stage, self:provider.stage}-myFirstKey
    # - ${env:MY_API_KEY} # you can hide it in a serverless variable

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ LeadsTable, Arn ]  
        - "Fn::GetAtt": [ JobSearchTable, Arn ]  

# you can define service wide environment variables here
  environment:
    leadsTableName: ${self:custom.leadsTableName}
    jobSearchTableName: ${self:custom.jobSearchTableName}
    AUTH0_CLIENT_ID: ${file(api/auth/secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(api/auth/public_key)}
    


# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  auth:
    handler: api/auth/auth.auth
    cors: true

  createLead:
    handler: api/leads/create.create
    events:
      - http:
          path: leads
          method: post
          # See custom authorizer docs here: http://bit.ly/2gXw9pO
          authorizer: auth
          cors: true
          private: true # will require api-key

  listLeads:
    handler: api/leads/list.list
    events:
      - http:
          path: leads
          method: get
          # See custom authorizer docs here: http://bit.ly/2gXw9pO
          authorizer: auth
          cors: true
          private: true # will require api-key    

  hello:
    handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


resources:
  # DynamoDB
  - ${file(infrastructure/resources/dynamodb-table.yml)}

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  leadsTableName: ${self:custom.stage}-leads
  jobSearchTableName: ${self:custom.stage}-jobSearch
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

  customDomain:
    domainName: api.caryeer.com
    certificateName: '*.caryeer.com' 
    basePath: ''
    stage: '' #${self:custom.stage}
    createRoute53Record: false
    endpointType: 'regional'
  
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

  serverless-offline:
    port: 4000
    corsAllowOrigin: '*' 
    corsAllowHeaders: 'accept,content-type,x-api-key'
    corsExposedHeaders: 'WWW-Authenticate,Server-Authorization'
    corsDisallowCredentials: true
  
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
