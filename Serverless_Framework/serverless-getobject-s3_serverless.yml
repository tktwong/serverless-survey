service: ChocoApi  

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  region: ap-southeast-2

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
      Resource:
      - arn:aws:s3:::${self:custom.BUCKET}
      - arn:aws:s3:::${self:custom.BUCKET}/*      

    - Effect: Allow #VPC access
      Action: 
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"  


custom:
  BUCKET: ${opt:stage}-choco-api

package:
  include:
    - node_modules/
  exclude:
    - .gitignore
    - package.json
    - developmentServer.js
    - .git
    - .vscode/
    - node_modules/.bin/**
    

functions:
  chocolates:
    handler: functions/handler.chocolates
    events:
      - http:
          path: v1/chocolates/{chocotype}
          method: get         
          integration: lambda
          cors: true
          request:
            paramters:
            paths: 
               chocotype: false # make the parameter optional
            headers:
              X-Client-Id: false
                     

# you can add CloudFormation resource templates here
resources:
 Resources:
   S3BucketChocoApi:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: ${opt:stage}-choco-api
 
 
 # vpc:
  #   securityGroupIds:
  #     - Ref: ChocoSecurityGroup
  #   subnetIds:
  #     Fn::Split: ["," ,"${opt:subnetId}" ]

  # ChocoSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Security group which allows access on ports 80 but only to machines of this security group.
  #     VpcId: ${opt:vpcId}
  #     SecurityGroupIngress:
  #       -
  #         IpProtocol: TCP
  #         CidrIp: 0.0.0.0/0
  #         FromPort: 0
  #         ToPort: 80
  # - cloudwatchLog: '/aws/lambda/hello'
 