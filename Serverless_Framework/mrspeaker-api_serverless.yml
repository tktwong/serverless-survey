service: mrSpeaker-app-api

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-docs
  mp3FileMappingTableName: ${self:custom.stage}-mp3FilenameMapping
  tmpMp3Dir: tmpMp3
  
# Create an optimized package for functions
package:
  individually: true

plugins:
  - serverless-bundle # Package functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables


  
provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to lambda functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
    tmpMp3Tablename: ${self:custom.mp3FileMappingTableName}
    tmpMp3Dir: ${self:custom.tmpMp3Dir}

  # 'iamRoleStatements' define permission policy for the Lambda function.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ DocsTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ TmpMp3Table, Arn ]
    - Effect: Allow
      Action:
        - s3:*
      Resource: 
        - Fn::Join:
          - ''
          -
            - 'arn:aws:s3:::'
            - ${env:BUCKET}
            - '/'
            - ${self:custom.tmpMp3Dir}
            - '/*'
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
    - Effect: Allow
      Action:
        - polly:*
      Resource: "*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  create:
    handler: create.main
    events:
      - http:
          path: docs
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: docs/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    events:
      - http:
          path: docs
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: update.main
    events:
      - http:
          path: docs/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: docs/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

  convert:
    handler: convert.handler
    events:
      - s3:
          bucket: ${env:BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .txt
            - prefix: "private/"
          existing: true

  fix-colon-problem:
    handler: fix-colon-problem.main
    events:
      - s3:
          bucket: ${env:BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .mp3
            - prefix: 
                Fn::Join:
                - ''
                - - ${self:custom.tmpMp3Dir}
                  - "/"
          existing: true

# Create resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}