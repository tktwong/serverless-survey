service: service-gamecheck

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    # dockerizePip: non-linux
    usePipenv: true

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1

functions:
  gamecheck:
    handler: handler.process_game_check
    environment:
      GIANT_BOMB_API_KEY: ${env:GIANT_BOMB_API_KEY}
      PASTEBIN_API_KEY: ${env:PASTEBIN_API_KEY}
      TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${env:TWILIO_PHONE_NUMBER}
      TARGET_PHONE_NUMBERS: ${env:TARGET_PHONE_NUMBERS}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
