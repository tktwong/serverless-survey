service: the-labz-cognito

plugins:
  - serverless-webpack

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: '../../webpack.config.js'   # Name of webpack configuration file
    includeModules: false   # Node modules configuration for packaging
    packager: 'yarn'   # Packager that will be used to package your external modules
  package:
    individually: true
provider:
  name: aws
  runtime: nodejs12.x
  environment:
    usersTable: ${self:custom.stage}-Users
    projectsTable: ${self:custom.stage}-Projects
    segmentsTable: ${self:custom.stage}-Segments
    invitesTable: ${self:custom.stage}-Invites
    audiosTable: ${self:custom.stage}-Audios
    chatsTable: ${self:custom.stage}-Chats
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - lambda:InvokeFunction
        - cognito-idp:AdminLinkProviderForUser
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:ListUsers
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminRespondToAuthChallenge
      Resource: "*"
functions:
  preSignUp:
    handler: handler.preSignUp
  postConfirmation:
    handler: handler.postConfirmation
  preAuthentication:
    handler: handler.preAuthentication
  userMigration:
    handler: handler.userMigration
  postAuthentication:
    handler: handler.postAuthentication
resources:
  Resources:
    # Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.stage}-labz-user-pool
        # Also allow login with email
        AliasAttributes:
          - email
        LambdaConfig:
          PreSignUp: { "Fn::GetAtt": ["PreSignUpLambdaFunction", "Arn"] }
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
    # Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.stage}-labz-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
    # Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.stage}LabzIdentityPool
        AllowUnauthenticatedIdentities: false
        SupportedLoginProviders:
          "accounts.google.com": "276233728051-2u4ro0b73q400iapmmvoj9jetf9q55co.apps.googleusercontent.com"
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.stage}-appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
    PreSignUpLambdaFunctionInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt: [PreSignUpLambdaFunction, Arn]
        Principal: cognito-idp.amazonaws.com
        SourceArn:
          Fn::GetAtt: [CognitoUserPool, Arn]
