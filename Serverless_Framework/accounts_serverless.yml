service:
  name: ${opt:appName, 'accounts'}
  publish: false

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'local'}
  stackName: ${self:custom.prefix}-infrastructure

custom:
  prefix: ${self:service}-${self:provider.stage}
  domainName: ${opt:domain-name}
  hostedZoneId: ${opt:hosted-zone-id}

resources:
  Resources:
    # App hosting
    AppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.prefix}-app

    AppBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AppBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Principal:
                CanonicalUser: !GetAtt AppCloudFrontOriginAccessIdentity.S3CanonicalUserId
              Resource:
                - !Join
                  - ''
                  - - !GetAtt AppBucket.Arn
                    - '/*'

    AppCloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref AppBucket

    AppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domainName}
          ViewerCertificate:
            AcmCertificateArn: !Ref AppCertificate
            SslSupportMethod: sni-only
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 404
              ResponsePagePath: /index.html
          DefaultRootObject: /index.html
          Enabled: true
          HttpVersion: http2
          Origins:
            - DomainName: !GetAtt AppBucket.DomainName
              Id: ${self:custom.prefix}-app
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - origin-access-identity/cloudfront/
                      - Ref: AppCloudFrontOriginAccessIdentity
          PriceClass: PriceClass_100
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ${self:custom.prefix}-app
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          # TODO: Logging
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: ''
          #   Prefix: ''

    # Certificates
    AppCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.domainName}
        ValidationMethod: DNS

    # Route53
    AppRoute53Record:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${self:custom.hostedZoneId}
        Name: ${self:custom.domainName}
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt AppCloudFrontDistribution.DomainName

  Outputs:
    AppBucket:
      Description: Application S3 bucket
      Value: !Ref AppBucket
