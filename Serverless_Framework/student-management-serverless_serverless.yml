service:
  name: student-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  ##profile: serverless
  region: ${opt:region, 'us-east-1'}

  environment:
    STUDENT_TABLE: Students-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    STUDENT_S3_BUCKET: serverless-student-management-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  topicName: studentTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Students API
        description: Serverless application for Managing Students in a College
    models:
      - name: StudentRequest
        contentType: application/json
        schema: ${file(models/create-student-request.json)}
      - name: StudentUpdateRequest
        contentType: application/json
        schema: ${file(models/update-student-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetStudents:
    handler: src/lambda/http/getStudents.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STUDENT_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
    events:
      - http:
          method: get
          path: students
          cors: true
          authorizer: Auth

  # TODO: Configure this function
  CreateStudent:
    handler: src/lambda/http/createStudent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STUDENT_TABLE}
    events:
      - http:
          method: post
          path: students
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Student record
            description: Create a new Student record
            requestModels:
              'application/json': StudentRequest

  # TODO: Configure this function
  UpdateStudent:
    handler: src/lambda/http/updateStudent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STUDENT_TABLE}
    events:
      - http:
          method: patch
          path: students/{studentId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update student record
            description: Update student record
            requestModels:
              'application/json': StudentUpdateRequest


  # Delete Student Configure this function
  DeleteStudent:
    handler: src/lambda/http/deleteStudent.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STUDENT_TABLE}
    events:
      - http:
          method: delete
          path: students/{studentId}
          cors: true
          authorizer: Auth

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.STUDENT_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: students/{studentId}/attachment
          cors: true
          authorizer: Auth

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    StudentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: studentId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH          
          - AttributeName: studentId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.STUDENT_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.STUDENT_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref StudentTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.STUDENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref StudentTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.STUDENT_S3_BUCKET}
        Topics:
          - !Ref StudentTopic

    StudentTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}
          

    # TODO: Add any necessary AWS resources
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false