
service: your-new-service

custom:
  stage: ${opt:stage, 'dev'}
  myTableName: my-table-name

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 512
  profile: your_profile
  stage: ${self:custom.stage}
  region: ap-southeast-2

functions:
  firstFunc:
    handler: index.handler
    events:
      - http:
          path: /firstFunc
          method: ANY
      - http:
          path: /firstFunc/{any+}
          method: ANY
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Resource: 
          Fn::GetAtt: 
            - secondFuncLambdaFunction
            - Arn
        Action:
          - lambda:InvokeFunction
        Effect: 'Allow'
            
      - Resource:
          Fn::GetAtt:
            - MyTable
            - Arn
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem 
          - dynamodb:UpdateItem
        Effect: Allow
    environment:
      SYNC_LOCATION_LAMBDA:
        Fn::GetAtt: 
            - secondFuncLambdaFunction
            - Arn
      MY_TABLE_NAME: ${self:custom.myTableName}
  secondFunc:
    handler: index.handler

resources:
  Resources:
    MyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.myTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

