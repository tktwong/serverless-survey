service: metraf-firehose

plugins:
- serverless-plugin-git-variables
- serverless-pseudo-parameters
provider:
  name: aws
  runtime: go1.x
  region: eu-central-1
  profile: artem
  stage: dev
  deploymentBucket:
    name: learning-serverless
  stackTags:
    Env: ${self:provider.stage}
  iamRoleStatements:
  - Effect: Allow
    Resource: "*"
    Action:
    - sts:AssumeRole
    - s3:*
    - lambda:*
    - ecs:*
    - iam:*
    - cloudformation:*
custom:
  serviceId: ${self:service}-${self:provider.stage}
  queueName: ${self:custom.serviceId}-test-queue
  bucketName: ${self:custom.serviceId}-bucket
  deliveryStreamName: ${self:custom.serviceId}-stream


package:
 exclude:
   - ../**
 include:
   - ../bin/**

functions:
  hello:
    handler: /bin/hello
    events:
    - s3:
        bucket: ${self:custom.bucketName}
        event: s3:ObjectCreated:*
resources:
  Resources:
    TestingQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}
    QueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: QueuePolicy
          Version: '2012-10-17'
          Statement:
          - Action:
            - sqs:*
            Condition:
              ArnLike:
                aws:SourceArn: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.queueName}
            Effect: Allow
            Principal: '*'
            Resource: '*'
            Sid: Allow-SendMessage-To-Queues
        Queues:
        - Ref: TestingQueue
    ServerlessKinesisFirehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:custom.deliveryStreamName}
        S3DestinationConfiguration:
          BucketARN:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: HelloLambdaFunction
          BufferingHints:
            IntervalInSeconds: "60"
            SizeInMBs: "1"
          CompressionFormat: "GZIP"
          Prefix: "raw/"
          RoleARN:
            Fn::GetAtt: [ FirehoseToS3Role, Arn ]
    FirefoseS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.serviceId}-hello
    FirehoseToS3Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: FirehoseToS3Role
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - firehose.amazonaws.com
            Action:
            - sts:AssumeRole
        Policies:
        - PolicyName: FirehoseToS3Policy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
              Resource: '*'
