service:
  name: "fridge-dda"

fraameworkVersion: "^1.38.0"

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  timeout: 1
  stage: ${opt:stage, self:custom.env.stage}
  region: ${self:custom.env.parameters.aws.region}

  environment:
    STAGE: ${self:provider.stage}
    NODE_ENV: ${self:custom.env.parameters.node_env}
    DYNAMO_DB_ENDPOINT: ${self:custom.env.parameters.aws.dynamoDb.endpoint}
    DEPLOYMENTS_TABLE_NAME: ${self:custom.table.deployment}

  apiKeys:
    - ${self:service}-${self:provider.stage}-apiKey
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchGet*"
        - "dynamodb:Get*"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:PutItem"
      Resource:
        - Fn::Join:
            - ""
            - - "arn:aws:dynamodb:${self:provider.region}:"
              - "Ref" : "AWS::AccountId"
              - ":table/"
              - "Ref" : "DeploymentTable"
              - "*"
package:
  exclude:
    - .git/**
    - tests/**
    - src/**

custom:
  env: ${file(${opt:environment, self:custom.defaultEnv})}
  table:
    deployment: ${self:provider.stage}-${self:service}-deployment

  defaultEnv: "./environments/local.yml"
  serverless-offline:
    port: 4000

functions:
  addDeployment:
    handler: httpHandler.handle
    events:
      - http:
          path: /v1/deployments
          method: post
          cors: true
  getEnvironments:
    handler: httpHandler.handle
    events:
      - http:
          path: /v1/deployments/{teamName}
          method: get
          cors: true
  getDeployments:
    handler: httpHandler.handle
    events:
      - http:
          path: /v1/deployments/{teamName}/{environmentName}
          method: get
          cors: true

resources:
  Resources:
    DeploymentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "PK"
            AttributeType: "S"
          -
            AttributeName: "SK"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "PK"
            KeyType: "HASH"
          -
            AttributeName: "SK"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST
        TableName: "${self:custom.table.deployment}"
