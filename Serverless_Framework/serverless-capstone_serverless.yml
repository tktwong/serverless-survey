service:
  name: serverless-cap-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  
custom:
  topicName: imagesTopic-Todo-${self:provider.stage}
  serverless-offline:
    httpPort: 8080
    useChildProcesses: true

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - ${self:provider.stage}

  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless cap
        description: Serverless application for creating todos
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(src/requests/schema/create-todo.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(src/requests/schema/update-todo.json)}    

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  iamRoleStatements:
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
        
  environment:
    AUTH0_JSON_KEY_URL: https://dev-1nt0v2c1.auth0.com/.well-known/jwks.json
    TODOS_TABLE: Cap-Todo-${self:provider.stage}
    TODO_INDEX_NAME: TodoIdIndex
    CONNECTIONS_TABLE: Connections-Todo-${self:provider.stage}
    TODOS_S3_BUCKET: serverless-cap-bucket-5hv3az69bh-${self:provider.stage}
    THUMBNAILS_S3_BUCKET: serverless-cap-thumbnail-5hv3az69bh-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt TodoDynamoDBTable.Arn

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt TodoDynamoDBTable.Arn

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update todo
            description: Update todo
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodoDynamoDBTable.Arn

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt TodoDynamoDBTable.Arn

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:PutObject
        Resource: !Join [ '/', [ !GetAtt AttachmentsBucket.Arn, '*' ] ]
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodoDynamoDBTable.Arn
        
  SendNotifications:
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt WebSocketConnectionsDynamoDBTable.Arn
      - Effect: Allow
        Action:
          - execute-api:*
        Resource: arn:aws:execute-api:${self:provider.region}:274225709315:*/${self:provider.stage}/POST/@connections/*

  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: !Join [ '/', [ !GetAtt AttachmentsBucket.Arn, '*' ] ]
      - Effect: "Allow"
        Action:
          - s3:PutObject
        Resource: !Join [ '/', [ !GetAtt ThumbnailsBucket.Arn, '*' ] ]
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodoDynamoDBTable.Arn

  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt WebSocketConnectionsDynamoDBTable.Arn

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt WebSocketConnectionsDynamoDBTable.Arn
      
resources:
  - ${file(./resources/dynamo_db.yml)}
  - ${file(./resources/api_gateway.yml)}
  - ${file(./resources/s3.yml)}
  - ${file(./resources/sns.yml)}