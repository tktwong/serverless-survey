# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: rio
# app and org for use with dashboard.serverless.com
app: rio
org: faibarazi

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:DeleteObject
        - s3:GetObject
      Resource:
        - 'arn:aws:s3:::${self:custom.src_bucket}/*'
        - 'arn:aws:s3:::${self:custom.dst_bucket}/*'

  environment:
    S3_SRC_BUCKET: ${self:custom.src_bucket}
    S3_DST_BUCKET: ${self:custom.dst_bucket}
    DB_Name: ${self:custom.db_name}
    DB_User: <db_name>
    DB_Pass: <db_pass>


# Events handler function. Define which events will trigger which functions from the handler.py
functions:
  extract:
    handler: handlers/extract.extract
    events:
      - s3:
        bucket: ${self:provider.environment.S3_SRC_BUCKET}
        event: s3:ObjectCreated:Put
        rules:
          - suffix: .csv

  transform_load:
    handler: handlers/transform.transform_load
    events:
      - s3:
        bucket: ${self:provider.environment.S3_DST_BUCKET}
        event: s3:ObjectCreated:Put
        rules:
          - prefix: raw/input/
          - suffix: .csv


custom:
  src_bucket: ${self:service}-${self:provider.stage}-uploads
  dst_bucket: ${self:service}-${self:provider.stage}-data
  deletion_policy: Delete
  db_name: ${self:service}_${self:provider.stage}
  db_id: rio-postgres

  # Zip the python requirements as lambda can handle a specific code size.
  pythonRequirements:
    dockerizePip: non-linux
    zip: true


# AWS resources including
resources:
 Resources:
    uploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.src_bucket}

    dataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.dst_bucket}

    postgresTable:
      Type: AWS::RDS::DBInstance
      DeletionPolicy: ${self:custom.deletion_policy}
      Properties:
        DBName: ${self:custom.db_name}
        DBInstanceIdentifier: ${self:custom.db_id}
        # for info about DB size based on engine : https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html
        AllocatedStorage: 5
        DBInstanceClass: db.t2.micro
        Engine: postgres
        MasterUsername: ${self:provider.environment.DB_User}
        MasterUserPassword: ${self:provider.environment.DB_Pass}


plugins:
  - serverless-python-requirements
