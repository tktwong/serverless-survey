service: fga
#app: hr-backend
#org: fedev  # services@jetbridge.com has access

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-wsgi
  - serverless-stack-termination-protection

custom:
  serverlessTerminationProtection:
    stages:
      - prod
  stackName: ${self:service}-${self:provider.stage}
  xray: 'Active'  # AWS Xray tracing of requests, queries
  db:
    dbname: "fga"
    minCapacity: 2
    maxCapacity: 16
    secondsUntilAutoPause: 7200  # if not stage=='prod'
  bastion:  # EC2 host to access database
#    sshKeyPairName: 'hrt-ire-mar-2020'  # set this to enable bastion ec2 instance
    sshKeyPairName: ''
    alertEmails: 'dmytro@jetbridge.com'  # get SNS notifications of alarms at this address
    banner: https://ops.jetbridge.com/public/banner.txt
    bootstrap: https://ops.jetbridge.com/public/bastion_bootstrap.sh
    instanceType: t3a.nano
    tenancy: default
    bannerEnabled: 'true'
    tcpForwardingEnabled: 'true'
    x11ForwardingEnabled: 'false'
    logRetentionInDays: 731
  layers:
    psycopg: "arn:aws:lambda:${self:provider.region}:898466741470:layer:psycopg2-py38:1"
    jkbase: "arn:aws:lambda:${self:provider.region}:898466741470:layer:jetkit-py38:3"
    default:
      - ${self:custom.layers.psycopg}
      - ${self:custom.layers.jkbase}
  secrets:
    prefix: "${self:service}/${self:provider.stage}"
    rds: "${self:custom.secrets.prefix}/rds/credentials"
  s3:
    bucketName: ${self:service}-${self:provider.stage}-devs
    # devResourcesBucketName bucket is used to store avatars and maybe other things connected with developer in the future
    devResourcesBucketName: ${self:service}-${self:provider.stage}-devs-resources
    corsAllowedOrigins:
      - '*'
  vpc:
    securityGroupIds:
      - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
    subnetIds:
      - Ref: ServerlessSubnetA
      - Ref: ServerlessSubnetB
      - Ref: ServerlessSubnetC
  # plugins:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    useDownloadCache: true
    useStaticCache: true
    noDeploy:
      # provided by runtime
      - boto3
      - botocore
      - s3transfer
      - docutils

      # provided by layers
      - psycopg2
      - psycopg2-binary
      - werkzeug
      - flask
      - sqlalchemy
      - faker
      - pytest
      - future
      - pytz
      - alembic
      - jinja2
      - beautifulsoup4
      - bs4
      - text_unidecode
      - requests
      - marshmallow
      - python_dateutil
      - soupsieve
      - chardet
      - attrs
      - mako
      - certifi
      - idna
      - urllib3
      - pyparsing
      - packaging
      - more_itertools
      - dateutil
      - click
    slim: true
    slimPatternsAppendDefaults: false  # need dist-info for sqlalchemy plugin
    slimPatterns:
      - '**/*.py[c|o]'
      - '**/__pycache__*'
      - 'Crypto/SelfTest'

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  profile: ${env:AWS_PROFILE, 'hrt'}

  # add logs for api gateway
  logs:
    restApi: true

  # x-ray
  tracing:
    lambda: ${self:custom.xray}

  environment:
    SECRET_PREFIX: ${self:custom.secrets.prefix}
    RDS_SECRET_NAME: ${self:custom.secrets.rds}
    LOAD_RDS_SECRET: 'true'
    STAGE: ${self:provider.stage}
    FUNCTION_PREFIX: "${self:custom.stackName}-"
    XRAY: ${self:custom.xray}
    AWS_BUCKET_NAME: ${self:custom.s3.bucketName}
    AWS_RESOURCES_BUCKET_NAME: ${self:custom.s3.devResourcesBucketName}
    # LOAD_APP_SECRETS: true  # enable to load user-defined secrets
    # SQL_ECHO: true  # enable to print all SQL queries

    # aurora database credentials
    # AURORA_SECRET_ARN: !Ref RDSInstanceSecret
    # AURORA_CLUSTER_ARN: !Join [':', ["arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster", !Ref DBCluster]]
    # SQLALCHEMY_DATABASE_URI: !Join ['/', ["postgresql+auroradataapi://:@", !Ref DBCluster]]
    # AURORA_DATA_API_ENABLED: 'true'
    # DATABASE_NAME: ${self:custom.db.dbname}

  iamRoleStatements:
    - Effect: Allow
      Action: secretsmanager:GetSecretValue
      Resource:
        - "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:service}/dev*"
        - "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:${self:custom.secrets.prefix}*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
      Resource:
        - 'arn:aws:s3:::${self:custom.s3.bucketName}/*'
        - 'arn:aws:s3:::${self:custom.s3.devResourcesBucketName}/*'
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.stackName}-processTask"
    - Effect: Allow # allow dispatcher to invoke job parsing from rss feeds
      Action:
        - lambda:InvokeFunction
      Resource:
        - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.stackName}-parseRssJobFeed"
    - Effect: Allow # allow dispatcher to invoke job parsing from json feeds
      Action:
        - lambda:InvokeFunction
      Resource:
        - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.stackName}-parseJsonJobs"
    # aurora data-api
    - Effect: Allow
      Action:
        - rds-data:ExecuteStatement
        - rds-data:BatchExecuteStatement
        - rds-data:BeginTransaction
        - rds-data:RollbackTransaction
        - rds-data:CommitTransaction
        - rds-data:BeginTransaction
      Resource: "arn:aws:rds:#{AWS::Region}:#{AWS::AccountId}:cluster:${self:custom.stackName}"

package:
  exclude:
    - node_modules/**
    - venv/**
    - fga/instance.cfg
    - instance.cfg
    - doc/**
    - '**/__pycache__/**'
    - '**/__pycache__'
    - ".#*"
    - "layer/**"

functions:
  - ${file(cloudformation/serverless_functions/app.yml)}
  - ${file(cloudformation/serverless_functions/database.yml)}

resources:
  - ${file(cloudformation/vpc.yml)}
  - ${file(cloudformation/db/aurora-serverless.yml)}
  - ${file(cloudformation/bastion.yml)}
