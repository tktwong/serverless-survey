custom: ${file(./serverless.vars.yml)}

service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-plugin-include-dependencies

provider:
  name: aws
  runtime: nodejs8.10
  timeout: ${self:custom.Timeout}
  memorySize: ${self:custom.MemorySize}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: { Fn::GetAtt: [ TodosDynamoDbTable, Arn ] }

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

  saveLogS3:
    handler: dynamoDbS3/saveToS3.saveS3
    timeout: "${self:custom.Timeout2}"
    role: { Fn::GetAtt: [ SaveLogS3LambdaRole, Arn ] } 
    events:
      - schedule: cron(0 * * * ? *)
    tags:
      FUNCTION: saveLogsTXT
    environment:
      BUCKET_NAME: "${self:custom.Bucket_Name}"

resources: ${file(./serverless.resources.yml)}
