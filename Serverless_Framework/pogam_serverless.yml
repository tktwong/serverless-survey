app: pogam

service: pogam-scrapes-api

custom: ${file(../serverless.common.yml):custom}

package: ${file(../serverless.common.yml):package}

provider:
  name: aws
  runtime: python3.8
  memorySize: 192
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        Fn::Join:
          - ""
          - - Fn::ImportValue: "${self:custom.stage}PhotosBucketArn"
            - "/*"
    - Sid: SecretsManagerAuroraCredentialsAccess
      Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
        - secretsmanager:PutResourcePolicy
        - secretsmanager:PutSecretValue
        - secretsmanager:DeleteSecret
        - secretsmanager:DescribeSecret
        - secretsmanager:TagResource
      Resource:
        Fn::ImportValue: "${self:custom.stage}AuroraSecretArn"
    - Sid: AuroraDataAPIAccess
      Effect: Allow
      Action:
        - secretsmanager:CreateSecret
        - secretsmanager:ListSecrets
        - secretsmanager:GetRandomPassword
        - tag:GetResources
        - rds-data:BatchExecuteStatement
        - rds-data:BeginTransaction
        - rds-data:CommitTransaction
        - rds-data:ExecuteStatement
        - rds-data:RollbackTransaction
      Resource: "*"
    - Effect: Allow
      Action: "sns:*"
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
  apiGateway:
    restApiId:
      Fn::ImportValue: "${self:custom.stage}ApiGatewayRestApiId"
    restApiRootResourceId:
      Fn::ImportValue: "${self:custom.stage}RestApiRootResource"
    restApiResources:
      /v1:
        Fn::ImportValue: "${self:custom.stage}RestApiVersion1Resource"

functions:
  run:
    handler: handlers.run
    timeout: 900
    environment:
      AURORA_CLUSTER_ARN:
        Fn::ImportValue: "${self:custom.stage}AuroraClusterArn"
      AURORA_SECRET_ARN:
        Fn::ImportValue: "${self:custom.stage}AuroraSecretArn"
      ADMINS_TOPIC_ARN:
        "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.stage}-admins-topic"
      BUCKET_NAME:
        Fn::ImportValue: "${self:custom.stage}PhotosBucketName"
      NEW_LISTINGS_TOPIC_ARN:
        "arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.stage}-new-listings-topic"
      POGAM_DATABASE_URL:
        Fn::Join:
          - ""
          - - "postgresql+auroradataapi://:@/"
            - Fn::ImportValue: "${self:custom.stage}AuroraDatabaseName"
      PROXY11_API_KEY: "${ssm:/pogam/proxy11/token~true}"
    events:
      - sns:
        Fn::Ref: ScrapeJobsTopic

  create:
    handler: handlers.create
    environment:
      JOBS_TOPIC_ARN: !Ref ScrapeJobsTopic
    events:
      - http:
          path: v1/scrapes
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Fn::ImportValue: "${self:custom.stage}ApiGatewayAuthorizerId"

resources:
  Description: "CloudFormation template for Pogam's scraping service."

  Resources:
    ScrapeJobsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "${self:custom.stage}-scrape-jobs-topic"
        DisplayName: "Scraping jobs to be processed."
        Subscription:
          - Protocol: lambda
            Endpoint:
              Fn::GetAtt:
                - RunLambdaFunction
                - Arn

    SnsRunPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
            - RunLambdaFunction
            - Arn
        Principal: sns.amazonaws.com
        SourceArn: !Ref ScrapeJobsTopic

  Outputs:
    ScrapeFunctionArn:
      Description: "The ARN for the core scrape lambda function."
      Value:
        Fn::GetAtt:
          - RunLambdaFunction
          - Arn
      Export:
        Name: "${self:custom.stage}ScrapeFunctionArn"

    ScrapeJobsTopicArn:
      Description: "The ARN for the SNS topic for new scrape jobs."
      Value: !Ref ScrapeJobsTopic
      Export:
        Name: "${self:custom.stage}ScrapeJobsTopicArn"

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
