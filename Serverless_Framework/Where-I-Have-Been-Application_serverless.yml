service:
  name: serverless-wihba

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    WIHBA_TABLE: wihba-table-${self:provider.stage}
    WIHBA_INDEX_NAME: placeIdIndex
    WIHBA_S3_BUCKET: serverless-wihba-flavioochoa-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 3000

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WIHBA_TABLE}/index/${self:provider.environment.WIHBA_INDEX_NAME}

custom:
  topicName: wihbaImagesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: WIHBA API
        description: Serverless application for Where I Have Been Applicatop? (wihba)
    models:
      - name: WihbaItem
        contentType: application/json
        schema: ${file(models/create-wihba-request.json)}
      - name: WihbaUpdatedItem
        contentType: application/json
        schema: ${file(models/update-wihba-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetWihbas:
    handler: src/lambda/http/getWihbas.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WIHBA_TABLE}
    events:
      - http:
          method: get
          path: wihba
          cors: true

  CreateWihba:
    handler: src/lambda/http/createWihba.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WIHBA_TABLE}
    events:
      - http:
          method: post
          path: wihba
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new WIHBA
            description: Create a new WIHBA
            requestModels:
              'application/json': WihbaItem

  UpdateWihba:
    handler: src/lambda/http/updateWihba.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WIHBA_TABLE}
    events:
      - http:
          method: patch
          path: wihba/{placeId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a WIHBA item
            description: Update a WIHBA item
            requestModels:
              'application/json': WihbaUpdatedItem

  DeleteWihba:
    handler: src/lambda/http/deleteWihba.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WIHBA_TABLE}
    events:
      - http:
          method: delete
          path: wihba/{placeId}
          cors: true

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.WIHBA_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.WIHBA_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: wihba/{placeId}/attachment
          cors: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    WihbaDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: placeId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: placeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.WIHBA_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.WIHBA_INDEX_NAME}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.WIHBA_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.WIHBA_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.WIHBA_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic
    
    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}