service: dryeye-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  profile: dryeyerescue

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    patients_table: dryeye-patients
    doctors_table: dryeye-doctors
    webhook_verify_hash: 42ab537de45b83b4f3d970d165104b32079d63f80f755ebbd9b482b058bceeaf
    my_doctors_table: dryeye-my-doctors

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: patients
          method: post
          cors: true
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: patients/{id}
          method: get
          cors: true
  search:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: search.main
    events:
      - http:
          path: patients/search
          method: get
          cors: true
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: patients
          method: get
          cors: true
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: patients/update
          method: put
          cors: true
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: patients/delete
          method: delete
          cors: true
  webhook-customers-create:
    handler: handlers/webhooks/createCustomer.main
    events:
      - http:
          path: webhooks/create-customer
          method: post
          cors: true
  webhook-customers-update:
    handler: handlers/webhooks/updateCustomer.main
    events:
      - http:
          path: webhooks/update-customer
          method: post
          cors: true
  webhook-customers-delete:
    handler: handlers/webhooks/deleteCustomer.main
    events:
      - http:
          path: webhooks/delete-customer
          method: post
          cors: true
  doctors-get:
    handler: handlers/doctors/getDoctor.main
    events:
      - http:
          path: doctors
          method: get
          cors: true
  doctors-get-practices:
    handler: handlers/doctors/getPractices.main
    events:
      - http:
          path: doctors-practices
          method: get
          cors: true
  doctors-create:
    handler: handlers/doctors/createDoctor.main
    events:
      - http:
          path: doctors
          method: post
          cors: true
  practices-get:
    handler: handlers/practices/get.main
    events:
      - http:
          path: practices
          method: get
          cors: true
  my-doctors-list:
    handler: handlers/myDoctors/list.main
    events:
      - http:
          path: my-doctors
          method: get
          cors: true
  my-doctors-create:
    handler: handlers/myDoctors/create.main
    events:
      - http:
          path: my-doctors
          method: post
          cors: true
  my-doctors-update:
    handler: handlers/myDoctors/update.main
    events:
      - http:
          path: my-doctors
          method: put
          cors: true
  my-doctors-delete:
    handler: handlers/myDoctors/delete.main
    events:
      - http:
          path: my-doctors
          method: delete
          cors: true
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
