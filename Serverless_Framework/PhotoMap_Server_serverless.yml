# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: photomap-server
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  package_individually:
    dev: false
    prod: true
  apigwBinary:
    types:
      - 'multipart/form-data'
      - 'image/png'
      - 'image/jpeg'
      - 'image/bmp'
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    includeModules:
      forceInclude:
        - serverless-http
      forceExclude:
        - canvas
    packager: 'npm' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    tableThroughputs:
      prod: 10
      default: 1
    tableThroughput: ${self:custom.dynamodb.tableThroughputs.${env:STAGE}, self:custom.dynamodb.tableThroughputs.default}
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
  customDomain:
    domainName: soybeans.tech
    basePath: ${env:BASE_PATH}
    stage: ${env:STAGE}
    certificateName: 'soybeans.tech'
    createRoute53Record: true
  layers:
    canvas: arn:aws:lambda:ap-northeast-2:383760702031:layer:canvas-library-layer:1
    node-canvas: arn:aws:lambda:ap-northeast-2:383760702031:layer:node-canvas-layer:1

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${env:STAGE}
  region: ap-northeast-2
  timeout: 30
  tracing:
    apiGateway: true
    lambda: true
  deploymentBucket:
    name: photomap-server-${env:STAGE}-serverlessdeploymentbucket
    serverSideEncryption: AES256
  iamRoleStatements:
    # for X-RAY
    - Effect: 'Allow'
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutelementryRecords'
      Resource:
        - '*'
    # for S3
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource:
        - 'arn:aws:s3:::photomap'
        - 'arn:aws:s3:::photomap/*'
    # for DynamoDB (Dynamoose)
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchGetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'arn:aws:dynamodb:ap-northeast-2:*:*'
    # for Invoke async lambda functions
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'arn:aws:lambda:ap-northeast-2:383760702031:function:photomap-server-${env:STAGE}-DrawMapImage'
    # for SQS
    - Effect: Allow
      Action:
        - sqs:*
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - 'arn:aws:sqs:ap-northeast-2:383760702031:photomap-${env:STAGE}-thumbnail.fifo'

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1
package:
  individually: true
  excludeDevDependencies: true

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # 기본 테스트용 함수
  hello:
    handler: index.handler
    tracing: true
    events:
      - http:
          path: /hello
          method: get
  # 인증 관련 함수
  authorize:
    handler: src/auth.verify
    tracing: true
  # 유저 관련 함수
  User:
    handler: src/users.handler
    tracing: true
    events:
      - http:
          path: /users
          method: ANY
          authorizer: authorize
          cors: true
      - http:
          path: /users/{ANY+}
          method: patch
          authorizer: authorize
          cors: true
  # 지도 관련 함수
  Map:
    handler: src/maps.handler
    tracing: true
    events:
      - http:
          path: /maps
          method: ANY
          authorizer: authorize
          cors: true
      - http:
          path: /maps/{any+}
          method: ANY
          authorizer: authorize
          cors: true
  # 스토리 관련 함수
  Story:
    handler: src/stories.handler
    tracing: true
    events:
      - http:
          path: /stories
          method: ANY
          authorizer: authorize
          cors: true
      - http:
          path: /stories/{any+}
          method: ANY
          authorizer: authorize
          cors: true
  # 공지 관련 함수
  Notice:
    handler: src/notice.handler
    tracing: true
    events:
      - http:
          path: /notice
          method: ANY
          cors: true
  # 캔버스 관련 함수
  DrawThumbnail:
    handler: src/drawThumbnail.handler
    tracing: true
    layers:
      - ${self:custom.layers.canvas}
      - ${self:custom.layers.node-canvas}
    events:
      - sqs: arn:aws:sqs:ap-northeast-2:383760702031:photomap-${env:STAGE}-thumbnail.fifo
  DrawMapImage:
    handler: src/drawMapImage.handler
    tracing: true
    layers:
      - ${self:custom.layers.canvas}
      - ${self:custom.layers.node-canvas}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

plugins:
  - serverless-deployment-bucket
  - serverless-dotenv-plugin
  - serverless-apigw-binary
  - serverless-plugin-tracing
  - serverless-domain-manager
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/api-gateway.yml)}
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
