# Welcome to Serverless!
#
# optional parameters
#   - region
#   - stage
#   - accountId
#

service: serverless-pict-api
frameworkVersion: "^1.30.3"

plugins:
  - serverless-python-requirements
  - serverless-wsgi

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'development'}
  region: ${opt:region, 'us-east-1'}
  apiName: ${self:service}
  memorySize: 256
  timeout: 25
  logRetentionInDays: 14
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:*"
        - "s3:*"
        - "rekognition:*"
      Resource: "*"
  environment:
      IMAGES_TABLE_NAME:
        Ref: ImagesTable
      PHOTOS_BUCKET:
        Ref: ImagesBucket
  deploymentBucket: serverless.artifacts.${opt:accountId}.${opt:region, 'us-east-1'}

custom:
  dynamoDBPrefix:
    idevelopment: "Development_"
    development: "Development_"
    production: ""

  wsgi:
    app: src/api.app

functions:
  api:
    handler: wsgi.handler
    events:
      - http:
          path: /version
          method: get
          cors: true
      - http:
          path: /images
          method: post
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz
      - http:
          path: /images
          method: get
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz
      - http:
          path: /images/{image_id}
          method: get
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz
      - http:
          path: /images
          method: put
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz
      - http:
          path: /images/{image_id}
          method: delete
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${opt:region}:${opt:accountId}:userpool/us-east-1_DICbxy8Oz

  recognize-image:
    handler: src/recognize_image.handler

resources:
  Resources:

    ImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDBPrefix.${opt:stage, 'dev'}, 'Development_'}Images
        AttributeDefinitions:
          - AttributeName: ImageID
            AttributeType: S
          - AttributeName: UserID
            AttributeType: S
        KeySchema:
          - AttributeName: ImageID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: UserID-index
            KeySchema:
              - AttributeName: UserID
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: stored-images-${opt:stage, 'development'}-${opt:region, 'us-east-1'}-${opt:accountId}
        WebsiteConfiguration:
          IndexDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
              AllowedOrigins:
                - "*"
              MaxAge: 3000
#        NotificationConfiguration:
#          LambdaConfigurations:
#            - Function:
#                Fn::GetAtt:
#                - RecognizeDashimageLambdaFunction
#                - Arn
#              Event: "s3:ObjectCreated:*"
#
#    RecognizeImageLambdaPermissionS3:
#      Type: AWS::Lambda::Permission
#      Properties:
#        FunctionName:
#          Fn::GetAtt:
#            - RecognizeDashimageLambdaFunction
#            - Arn
#        Principal: s3.amazonaws.com
#        Action: lambda:InvokeFunction
#        SourceAccount:
#          Ref: AWS::AccountId
#        SourceArn:
#          Fn::GetAtt:
#            - ImagesBucket
#            - Arn
