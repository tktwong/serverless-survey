# For full config options, check the docs:
#    docs.serverless.com

service: todo

provider:
  name: aws
  runtime: nodejs8.10
  region: ${env:AWS_REGION, 'eu-west-1'}
  stage: dev
  stackTags:
    STACK: "todo"
  # optional, in MB, default is 1024, min 128
  memorySize: 128
  # optional, in seconds, default is 6
  timeout: 6
  # optional, default is true
  versionFunctions: false
  # IAM custom roles
  iamRoleStatements:
    # Allow access to DynamoDB in role
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": [ "TodoDynamoDBTable", "Arn" ] }
    # Allow publishing message in our own queue
    - Effect: Allow
      Action:
        - sqs:GetQueueAttributes
        - sqs:SendMessage
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
        - sqs:GetQueueUrl
      Resource:
        - { "Fn::GetAtt": [ "TodoEventQueue", "Arn" ] }
        
  # Define additional env vars for deployment
  environment:
    TODO_TABLE: ${self:custom.todoTable}
    TODO_EVENT_QUEUE: ${self:custom.todoEventQueue}
    API_URL: ${self:custom.apiUrlByCustomDomain.${env:CUSTOM_DOMAIN_ENABLED, 'false'}}

custom:
  todoTable: 'todos'
  todoEventQueue: 'todos-events'
  # If set, CDN bucket will be created
  cdnBucketName: ${env:CDN_BUCKET, ''}
  # Set API_URL by custom domain here
  apiUrlByCustomDomain:
    true: https://${env:CUSTOM_DOMAIN, 'custom.domain.serverless.com'}/api
    false: 'http://localhost:3000/api'
  # Make special webpack transpiling for Serverless
  webpack:
    webpackConfig: ./webpack.serverless.js
    includeModules: true
    packager: 'npm'
  # Create custom domain and serve it using https://$CUSTOM_DOMAIN/* -> <api endpoint>/*
  customDomain:
    domainName: ${env:CUSTOM_DOMAIN, 'custom.domain.serverless.com'}
    createRoute53Record: true
    enabled: ${env:CUSTOM_DOMAIN_ENABLED, 'false'}
  # Add binary images as handled in API gateway
  apigwBinary:
    types:
      - 'image/*'
      - 'application/font*'
      - 'application/pdf'
  s3Sync:
    - bucketName: ${self:custom.cdnBucketName, 'undefined'}
      localDir: ./dist
      acl: public-read
      followSymlinks: true
      defaultContentType: application/octet-stream
      params:
        - "*.*":
            CacheControl: 'no-cache'

package:
  exclude:
    - tmp/**
    - node_modules/aws_sdk/**

functions:
  app:
    handler: server.serverless
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
      - http:
          # List all todos
          path: api/todo
          method: get
      - http:
          # Get all queue
          path: api/queue
          method: get
      - http:
          # Add new todo
          path: api/todo
          method: post
      - http:
          # Get one todo
          path: api/todo/{any+}
          method: get
      - http:
          # Update todo
          path: api/todo/{any+}
          method: post
      - http:
          # Update todo
          path: api/todo/{any+}
          method: delete
      - http:
          # Reinit todo db
          path: api/init
          method: post
  event:
    handler: server.receiveEvent
    events:
      - sqs:
          # Invoke function once for every message
          batchSize: 1
          arn:
            Fn::GetAtt:
              - TodoEventQueue
              - Arn
plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-apigw-binary
  - serverless-offline
  - serverless-s3-sync

resources:
  Conditions:
    CreateCdnBucket:
      Fn::Not:
        - Fn::Equals:
          - ${self:custom.cdnBucketName, ''}
          - ''
  Resources:
    TodoDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        TableName: ${self:custom.todoTable}
    TodoEventQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.todoEventQueue}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
    CdnBucket:
      Type: AWS::S3::Bucket
      Condition: CreateCdnBucket
      Properties:
        BucketName: ${self:custom.cdnBucketName, 'undefined'}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
