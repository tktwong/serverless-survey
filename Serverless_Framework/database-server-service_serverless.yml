service: Database


provider:
  name: aws
  region: us-east-2
  stage: DEV
  runtime: nodejs10.x
  role: arn:aws:iam::556332110707:role/LambdaBasicPrivileges
  environment: ${self:custom.environments.${opt:stage, 'DEV'}}
  deploymentBucket:
    tags:
      saas: ${self:custom.saasName}
      stage: ${opt:stage, 'DEV'}
      scope: global
      type: database


custom:
  saasName: 'Database'
  pathToHandler: "compiled/src"
  pathToJSFile: "src"
  accessKeyId: ${ssm:concise-accessKeyId~true}
  secretAccessKey: ${ssm:concise-secretAccessKey~true}
  region: ${ssm:concise-region~true}
  apiGatewayTags:
    saas: ${self:custom.saasName}
    stage: ${opt:stage, 'DEV'}
    scope: global
    type: database
  environments:
    DEV:
      saasName: ${self:custom.saasName}
      stage: 'DEV'
      accessKeyId: ${self:custom.accessKeyId}
      secretAccessKey: ${self:custom.secretAccessKey}
      region: ${self:custom.region}
    PROD:
      saasName: ${self:custom.saasName}
      stage: 'PROD'
      accessKeyId: ${self:custom.accessKeyId}
      secretAccessKey: ${self:custom.secretAccessKey}
      region: ${self:custom.region}


plugins:
  - serverless-plugin-include-dependencies


package:
  individually: true
  exclude:
    - "*.*"
    - "src/**"
    - "compiled/**"
    - "correctModuleNames.js"
  include:
    - "*.js"


functions:

  batch-read:
    handler: ${self:custom.pathToHandler}/batch-read.handler
    package:
      include:
      - "${self:custom.pathToJSFile}/batch-read.js"
    events:
      - http:
          path: batch-read
          method: post
          cors: true
    tags:
      saas: ${self:custom.saasName}
      stage: ${opt:stage, 'DEV'}
      scope: global
      type: database


  create:
    handler: ${self:custom.pathToHandler}/create.handler
    package:
      include:
      - "${self:custom.pathToJSFile}/create.js"
    events:
      - http:
          path: create
          method: post
          cors: true
    tags:
      saas: ${self:custom.saasName}
      stage: ${opt:stage, 'DEV'}
      scope: global
      type: database


  links-link:
    memorySize: 1256 # optional, in MB, default is 1024
    timeout: 60 # optional, in seconds, default is 6
    handler: ${self:custom.pathToHandler}/links-link.handler
    package:
      include:
      - "${self:custom.pathToJSFile}/links-link.js"
    events:
      - http:
          path: link
          method: post
          cors: true
    tags:
      saas: ${self:custom.saasName}
      stage: ${opt:stage, 'DEV'}
      scope: global
      type: database


  links-unlink:
    handler: ${self:custom.pathToHandler}/links-unlink.handler
    package:
      include:
      - "${self:custom.pathToJSFile}/links-unlink.js"
    events:
      - http:
          path: unlink
          method: post
          cors: true
    tags:
      saas: ${self:custom.saasName}
      stage: ${opt:stage, 'DEV'}
      scope: global
      type: database


  links-queue:
    memorySize: 1856 # optional, in MB, default is 1024
    timeout: 900 # optional, in seconds, default is 6
    handler: ${self:custom.pathToHandler}/links-queue.handler
    package:
      include:
      - "${self:custom.pathToJSFile}/links-queue.js"
    events:
      - http:
          path: queue
          method: post
          cors: true
    tags:
      saas: ${self:custom.saasName}
      stage: ${opt:stage, 'DEV'}
      scope: global
      type: database


  scale-update:
    handler: ${self:custom.pathToHandler}/scale-update.handler
    package:
      include:
      - "${self:custom.pathToJSFile}/scale-update.js"
    events:
      - http:
          path: scale-update
          method: post
          cors: true
    tags:
      saas: ${self:custom.saasName}
      stage: ${opt:stage, 'DEV'}
      scope: global
      type: database
