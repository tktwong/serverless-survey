service: yes-collab-aws

plugins:
  - serverless-python-requirements

custom:
  stage: ${opt:stage, self:provider.stage}
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: us-east-2

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  iamRoleStatements:  
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - lambda:InvokeFunction
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:DeleteObject
      Resource: 
        - arn:aws:dynamodb:us-east-2:*:*
        - arn:aws:lambda:us-east-2:*:* 
        - arn:aws:s3:::yes-internships-photos
        - arn:aws:s3:::yes-internships-photos/*
        - arn:aws:s3:::amplify-yescollabamplify-emailtemplates/*
  
  environment:
    MAIN_TABLE: ${self:custom.stage}_table
    TIMESERIES_TABLE: ${self:custom.stage}_timeseries_round_2
    PYTHONPATH: 'handlers'
    ROUND: 2
    
package:
  exclude:
    - node_modules/**
    - venv/**

functions:
  getCatalog:
    handler: handlers/catalog.main
    events:
      - http:
          path: api/catalog
          cors: true
          method: get

  getPartners:
    handler: handlers/partners.main
    events:
      - http:
          path: api/partners
          cors: true
          method: get

  refreshStartups:
    handler: handlers/refresh_startups.main
    timeout: 60
    events:
      - http:
          path: api/refresh
          cors: true
          method: get

  refreshPositions:
    handler: handlers/refresh_positions.main
    timeout: 60
    events:
      - http:
          path: api/refreshPositions
          cors: true
          method: get
        
  postFounder:
    handler: handlers/post_founder.main
    events:
      - http:
          path: api/founder
          cors: true
          method: post
          # authorizer: aws_iam
  deleteFounder:
    handler: handlers/delete_founder.main
    events:
      - http:
          path: api/founder
          cors: true
          method: delete
  updateFounder:
    handler: handlers/update_founder.main
    events:
      - http:
          path: api/founder
          cors: true
          method: put
          # authorizer: aws_iam

  postStartup:
    handler: handlers/post_startup.main
    events:
      - http:
          path: api/startup
          cors: true
          method: post
          # authorizer: aws_iam
  deleteStartup:
    handler: handlers/delete_startup.main
    events:
      - http:
          path: api/startup
          cors: true
          method: delete
  updateStartup:
    handler: handlers/update_startup.main
    events:
      - http:
          path: api/startup
          cors: true
          method: put
          # authorizer: aws_iam

  postPosition:
    handler: handlers/post_position.main
    events:
      - http:
          path: api/position
          cors: true
          method: post
          # authorizer: aws_iam
  updatePosition:
    handler: handlers/update_position.main
    events:
      - http:
          path: api/position
          cors: true
          method: put
          # authorizer: aws_iam
  deletePosition:
    handler: handlers/delete_position.main
    events:
      - http:
          path: api/position
          cors: true
          method: delete
          # authorizer: aws_iam

  postStudent:
    handler: handlers/post_student.main
    events:
      - http:
          path: api/student
          cors: true
          method: post
          authorizer: aws_iam
  getStudent:
    handler: handlers/get_student.main
    events:
      - http:
          path: api/student
          cors: true
          method: get
          authorizer: aws_iam

  postMetrics:
    handler: handlers/post_metrics.main
    events:
      - http:
          path: api/metrics
          cors: true
          method: post
          # authorizer: aws_iam
  postImpressions:
    handler: handlers/post_impressions.main
    events:
      - http:
          path: api/metrics/impression
          cors: true
          method: post
          # authorizer: aws_iam
  postClicks:
    handler: handlers/post_clicks.main
    events:
      - http:
          path: api/metrics/click
          cors: true
          method: post
          # authorizer: aws_iam
  updateNotes:
    handler: handlers/update_notes.main
    events:
      - http:
          path: api/notes
          cors: true
          method: put
  getEmail:
    handler: handlers/get_email.main
    events:
      - http:
          path: api/recruiter
          cors: true
          method: get
          authorizer: aws_iam
  
  emailStartupChanges:
    handler: handlers/email_startup_changes.main
    events:
      - schedule: rate(1 hour)

  emailPositionChanges:
    handler: handlers/email_position_changes.main
    events:
      - schedule: rate(1 hour)

# Resources coded with separate CloudFormation templates
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/main-table.yml)}
  - ${file(resources/timeseries-table.yml)}
