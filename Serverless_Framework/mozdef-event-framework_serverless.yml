# I suggest we should declare env variables in the build script, and make 
# serverless access them using the below notation during build/deploy time.
# This way we would not need a custom vars file for configuration

# Default values for env variables are not supported by serverless
# Giving example values for each as comment:
#
# SERVICE=zoom
# API_PATH=/zoom (or zoom)
# STAGE=dev
#
# With these sample values, the TOKEN value becomes:
# "/mozdef-event-framework/zoom/dev/auth_token"

service: ${env:SERVICE}
plugins:
  - serverless-prune-plugin
  - serverless-pseudo-parameters
  # Feel free to remove the below plugin if you plan to manage
  # 3rd party / custom libraries in a different way.
  - serverless-python-requirements
custom:
  authorizer:
    validate_token:
      name: customAuthorizer
      type: token
      identitySource: method.request.header.Authorization
      identityValidationExpression: '.*'
  cfg:
    # Taking some values from build script as environment
    # variables so they remain generic
    api_method: POST
    api_path: ${env:API_PATH}
    authToken: ${self:service}/${env:STAGE}/auth_token
    tokenArn: ${env:TOKEN_ARN}
    # Reading project name from an environment variable
    # assumed to come from buildspec as well. This will
    # be applied as a tag for resources created by serverless
    project: ${env:PROJECT}
    keep: 5
  # Keeping the last 5 versions of our Lambda functions
  prune:
    automatic: true
    number: ${self:custom.cfg.keep}
  # # Feel free to remove the below section if you plan to manage
  # 3rd party / custom libraries in a different way.
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.7
  stage: ${env:STAGE}
  region: ${opt:region, 'us-west-2'}
  endpointType: REGIONAL
  tracing:
    apiGateway: true
    lambda: true
  stackTags:
    Project: ${self:custom.cfg.project}-${self:provider.stage}
  stackName: ${self:service}-${self:provider.stage}
  apiName: ${self:custom.cfg.project}-${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueAttributes
        - sqs:ListQueues
        - sqs:DeleteQueue
        - sqs:TagQueue
      Resource: 
        - "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.cfg.project}-${self:service}-${self:provider.stage}"
    - Effect: Allow
      Action: 
        - ssm:GetParameter
        - ssm:GetParametersByPath
      Resource:
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.cfg.project}/${self:custom.cfg.authToken}"
    - Effect: Allow
      Action: kms:Decrypt
      Resource:
        # Using default AWS SSM key in KMS here, 
        # we can change if we want at the expense of more complexity
        - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/alias/aws/ssm"
      Condition:
        StringEquals:
          "kms:EncryptionContext:PARAMETER_ARN": ${self:custom.cfg.tokenArn}
  # We can define environment variables here 
  # so can refer to them from within code
  environment:
    REGION: '#{AWS::Region}'
    SERVICE: '${self:service}'
    STAGE: '${env:STAGE}'
    TOKEN: "/${self:custom.cfg.project}/${self:custom.cfg.authToken}"
    # Adding resource queue URL as global environment variable
    # We could also store this in SSM
    SQS_URL:
      Ref: ResourceQueue

package:
  # This is to keep the package to be uploaded as small as possible in size
  exclude:
    - .venv/**
    - .virtualenv/**
    - .git/**
    - __pycache__/**
    - node_modules/**
    - ./Makefile
    - .vscode
    - tests/**

functions:
  customAuthorizer: 
    handler: functions/authorizer.validate_token
  eventHandler:
    handler: functions/handler.lambda_handler
    description: Lambda for handling events from ${self:service} resource.
    events:
      - http:
          path: ${self:custom.cfg.api_path}
          method: ${self:custom.cfg.api_method}
          cors: true
          authorizer: ${self:custom.authorizer.validate_token}

resources:
  Resources:
    ResourceQueue:    
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.cfg.project}-${self:service}-${self:provider.stage}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
            - DeadLetterQueue
            - Arn
          maxReceiveCount: 10
        Tags:
        - Key: "Project"
          Value: ${self:custom.cfg.project}-${self:provider.stage}
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.cfg.project}-${self:service}-${self:provider.stage}-DLQ
        MessageRetentionPeriod: 1209600
        Tags:
        - Key: "Project"
          Value: ${self:custom.cfg.project}-${self:provider.stage}
