# Changing this effect the base path and how resources are displayed in the console.
service: covisecrets
package:
  exclude:
    - client/** # Saves a ton of space and expedites deployment time
    - .env

plugins:
  - serverless-offline
  - serverless-mocha-plugin
  - serverless-domain-manager

custom:
  # Uncomment if you wish to deploy a website.
  service: secrets # Used for domains.
  baseDomain: gocovi.com
  defaultStage: dev
  secretsBucket: ${self:service}-${self:provider.stage}

  # Basis for the APIs
  domains:
    prod: api.${self:custom.baseDomain}
    staging: api-staging.${self:custom.baseDomain}
    dev: api-dev.${self:custom.baseDomain}

  # Gives webDomain a basis for the website bucket, certs, etc.
  webDomains:
    prod: ${self:custom.service}.${self:custom.baseDomain}
    staging: ${self:custom.service}-staging.${self:custom.baseDomain}
    dev: ${self:custom.service}-dev.${self:custom.baseDomain}

  customDomain:
    basePath: ${self:custom.service}
    domainName: ${self:custom.domains.${self:provider.stage}}
    stage: ${self:provider.stage}
    createRoute53Record: true

  webDomain: ${self:custom.webDomains.${self:provider.stage}}

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, self:custom.defaultStage}
  profile: NetlinkInc
  memorySize: 512
  timeout: 15

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: ServerlessDeploymentBucket
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: S3BucketSecrets
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: ServerlessDeploymentBucket
            - "/*"
    - Effect: Allow # Allows writing, reading and deleting secrets
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: S3BucketSecrets
            - "/*"
  environment:
    # Uses params first, then the default stage.
    AWS_PROFILE: NetlinkInc
    STAGE: ${self:provider.stage}
    BUCKET: ${self:custom.secretsBucket}
    DECRYPT_URL: ${self:custom.webDomain}/decrypt

functions:
  EncryptContent:
    handler: functions/EncryptContent/index.handler
    events:
      - http:
          path: encrypt
          method: post
          cors: true
  DecryptContent:
    handler: functions/DecryptContent/index.handler
    events:
      - http:
          path: decrypt
          method: get
          cors: true
  TestEndpoint:
    handler: functions/TestEndpoint/index.handler
    events:
      - http:
          path: test
          method: post
          cors: true

resources:
  Resources:
    # Primary bucket for hosting the website.
    S3BucketSecrets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 1
              Status: Enabled

    # Primary bucket for hosting the website.
    S3BucketSPA:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.webDomain}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    ## Bucket Policies.

    # Allows bucket to function as a readable website.
    SPAPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketSPA
        PolicyDocument:
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: S3BucketSPA
                    - "/*"
              Principal: "*"
      DependsOn: S3BucketSPA

    ## Certificate Manager
    SPACertificate:
      Type: "AWS::CertificateManager::Certificate"
      Properties:
        DomainName: ${self:custom.webDomain}
        DomainValidationOptions:
          - DomainName: ${self:custom.webDomain}
            ValidationDomain: ${self:custom.baseDomain}

    ## CloudFront
    SPADistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.webDomain}
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: false
            TargetOriginId:
              Ref: S3BucketSPA
            ViewerProtocolPolicy: redirect-to-https
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultRootObject: index.html
          Enabled: true
          Origins:
            - DomainName:
                Fn::GetAtt: [S3BucketSPA, DomainName]
              Id:
                Ref: S3BucketSPA
              S3OriginConfig:
                OriginAccessIdentity: ""
          ViewerCertificate:
            AcmCertificateArn:
              Ref: SPACertificate
            SslSupportMethod: sni-only
      DependsOn: SPACertificate
