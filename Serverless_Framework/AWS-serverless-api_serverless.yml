service: notes-app-api

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: eu-west-2

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-2:*:*"

functions:
  createMur:
    handler: function/post-functions/createMur.main
    events:
      - http:
          path: mur
          method: post
          cors: true
          # authorizer: aws_iam
          authorizer: false

  getMur:
    handler: function/get-functions/getMur.main
    events:
      - http:
          path: mur/{murId}
          method: get
          cors: true
          # authorizer: aws_iam
          authorizer: false

  getSong:
    handler: function/get-functions/getSong.main
    events:
      - http:
          path: song/{songId}
          method: get
          cors: true
          # authorizer: aws_iam
          authorizer: false

  getLayer:
    handler: function/get-functions/getLayer.main
    events:
      - http:
          path: layer/{layerId}
          method: get
          cors: true
          # authorizer: aws_iam
          authorizer: false

  getShare:
    handler: function/get-functions/getShare.main
    events:
      - http:
          path: share/{shareId}
          method: get
          cors: true
          # authorizer: aws_iam
          authorizer: false


  getMurSongs:
    handler: function/get-functions/getMurSongs.main
    events:
      - http:
          path: mur/{murId}/songs
          method: get
          cors: true
          # authorizer: aws_iam
          authorizer: false

  getMurSongLayer:
    handler: function/get-functions/getMurSongLayers.main
    events:
      - http:
          path: song/{songId}/layer
          method: get
          cors: true
          # authorizer: aws_iam
          authorizer: false

  getMurSongShare:
    handler: function/get-functions/getMurSongShares.main
    events:
      - http:
          path: song/{songId}/shares
          method: get
          cors: true
          # authorizer: aws_iam
          authorizer: false

  getUserMurs:
    handler: function/get-functions/getUserMurs.main
    events:
      - http:
          path: user/{userId}/murs
          method: get
          cors: true
          # authorizer: aws_iam
          authorizer: false

  getMurs:
    handler: function/get-functions/getMurs.main
    events:
      - http:
          path: murs
          method: get
          cors: true
          # authorizer: aws_iam
          authorizer: false

  update:
    handler: function/update-functions/update.main
    events:
      - http:
          path: mur/{murId}
          method: put
          cors: true
          # authorizer: aws_iam
          authorizer: false

  deleteMur:
    handler: function/delete-functions/deleteMur.main
    events:
      - http:
          path: mur/{murId}
          method: delete
          cors: true
          # authorizer: aws_iam
          authorizer: false


  # POST
  # addSchemaToMur: AS A POST /mur/:id/schema
  # BuyShare: AS A PUT  mur/:id/schema/:id/share/:id | sellingSHare in part of buying share

  # UPDATE
  # Update share: AS A PATCH mur/:id

  # Add some prediction element to the mur stats
