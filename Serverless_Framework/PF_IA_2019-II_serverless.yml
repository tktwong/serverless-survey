service: format-face-recognition

exclude:
    - node_modules**
    - .idea
    - .serverless
    - .gitignore
    - .package.json
    - .README.md
    - requirements.txt

plugins:
  - serverless-offline-python
  - serverless-python-requirements
  - serverless-wsgi

provider:
  name: aws
  runtime: python3.7
  alias: python
  stage: ${opt:stage,'dev'}
  region: ${file(${opt:stage,self:provider.stage}.config.yml):AWS_REGION}
  environment:
    REGION_NAME: ${file(${opt:stage,self:provider.stage}.config.yml):AWS_REGION}
    BUCKET_NAME: ${file(${opt:stage,self:provider.stage}.config.yml):BUCKET_NAME}
    KEY_JSON: ${file(${opt:stage,self:provider.stage}.config.yml):KEY_JSON}
    STAGE: ${opt:stage,'dev'}

functions:
  test-access:
      handler: wsgi_handler.handler
      description: 'Prueba de acceso api'
      events:
      - http: GET /{version}/test-load
        request:
          parameters:
            paths:
              version: true
  struct:
      handler: wsgi_handler.handler
      description: 'interactive struct'
      events:
      - http:
          path: /{version}/struct
          method: POST
          cors: true
        request:
          parameters:
            paths:
              version: true
      - http:
          path: /{version}/struct
          method: GET
          cors: true
        request:
          parameters:
            paths:
              version: true
      - http:
          path: /{version}/struct
          method: PUT
          cors: true
        request:
          parameters:
            paths:
              version: true
  data:
      handler: wsgi_handler.handler
      description: 'interactive data'
      events:
      - http:
          path: /{version}/data
          method: POST
          cors: true
        request:
          parameters:
            paths:
              version: true
      - http:
          path: /{version}/data
          method: GET
          cors: true
        request:
          parameters:
            paths:
              version: true

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: False

