service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  # - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin 
  - serverless-aws-documentation 

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    GROUPS_TABLE: Groups-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    USER_ID_INDEX: userIdIndex
    IMAGE_S3_BUCKET: serverless-udagram-bucket
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET: gkKxp9b9JsNo6sb8v3uSO-FLyNQgdj_VR-Vt0aejvnrYCS4q30iG4JaZQqyetz3V
      

  
        

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API 
        description: Serverless application for images sharing 
    models: 
      - name: GroupRequest 
        contentType: application/json 
        schema: ${file(models/create-group-request.json)}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler



  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: groups
          cors: true 
    iamRoleStatements: 
    - Effect: Allow
      Action: 
        - dynamoDB:Query
        - dynamoDB:GetItem  
        
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    
       

    

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: groups
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new group
            description: Create a new group
            requestModels:
              'application/json': GroupRequest
    iamRoleStatements: 
    - Effect: Allow
      Action: 
        - dynamoDB:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
          
  

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: groups/{itemId}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: groups/{itemId}
    iamRoleStatements: 
    - Effect: Allow
      Action: 
        - dynamoDB:DeleteItem  
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
      

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment

resources:
  Resources:
    # TODO: Add any necessary AWS resources

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    


    GroupsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          -  AttributeName: id 
             KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}

    # ImagesDynamoDBTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: groupId
    #         AttributeType: S
    #       - AttributeName: imageId
    #         AttributeType: S  
    #       - AttributeName: timestamp
    #         AttributeType: S 
    #     KeySchema:
    #       -  AttributeName: groupId 
    #          KeyType: HASH
    #       -  AttributeName: timestamp 
    #          KeyType: RANGE   
    #     GlobalSecondaryIndexes:
    #       - IndexName: ${self:provider.environment.USER_ID_INDEX}
    #         KeySchema:     
    #         - AttributeName: imageId
    #           KeyType: HASH
    #         Projection:
    #           ProjectionType: ALL  
    #     BillingMode: PAY_PER_REQUEST
    #     TableName: ${self:provider.environment.IMAGES_TABLE}   
        
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false    

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGE_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders: 
                - '*'
              AllowedMethods:
                - GET
                - POST
                - PUT
                - DELETE
                - HEAD
              MaxAge: 3000   

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects 
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGE_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

  # KMSKEY: 
  #   Type: AWS::KMS::KEY
  #   Properties:
  #     Description: KMS key to encrypt Auth0 secret
  #     KeyPolicy:
  #       Version: '2012-10-17'
  #       Id: key-default-1
  #       Statement: 
  #         - Sid: Allow administration of the key 
  #           Effect: Allow 
  #           Principal: 
  #           AWS: 
  #             Fn::Join:
  #               - ':'
  #               - - 'arn:aws:iam:'
  #                 - Ref: AWS::AccountId
  #                 - 'root'
  #           Action:
  #             - 'kms:*'
  #           Resource: '*'

  # KMSKeyAlias:
  #   Type: AWS::KMS::Alias  
  #   Properties: 
  #     AlisName: alias/auth0Key-${self:provider.stage}
  #     TargetKeyId: !Ref KMSKey

  # Auth0Secret:
  #   Type: AWS::SecretsManager::Secret
  #   Properties: 
  #     Name: ${self:provider.environment.AUTH_0_SECRET}
  #     Description: Auth0 secret 
  #     KmsKeyId: KMSKey
