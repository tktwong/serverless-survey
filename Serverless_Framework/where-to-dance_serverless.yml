service: where-to-dance

frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function


provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true # Preparation for serverless framework v3.0.0
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    VENUES_TABLE: Venues-${self:provider.stage}
    VENUE_ID_INDEX: VenueIdIndex
    IMAGES_S3_BUCKET: serverless-venues-images-otter-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Where to Dance API
        description: Serverless application for Where to Dance API
    models:
      - name: CreateVenueRequest
        contentType: application/json
        schema: ${file(models/create-venue-request.json)}
      - name: "UpdateVenueRequest"
        contentType: application/json
        schema: ${file(models/update-venue-request.json)}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateVenue:
    handler: src/lambda/http/createVenue.handler
    events:
      - http:
          method: post
          path: venues
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Venue
            description: Creates a new venue by an authenticated user
            requestModels:
              application/json: CreateVenueRequest
    iamRoleStatementsName: Put-Into-DynamoDB-Venues-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VENUES_TABLE}

  DeleteVenue:
    handler: src/lambda/http/deleteVenue.handler
    events:
      - http:
          method: delete
          path: venues/{venueId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete an existing Venue
            description: Deletes an existing Venue by the owning authenticated user
    iamRoleStatementsName: Delete-From-DynamoDB-Venues-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VENUES_TABLE}
  
  GetUsersVenues:
    handler: src/lambda/http/getUsersVenues.handler
    events:
      - http:
          method: get
          path: venues
          cors: true
          authorizer: Auth
          documentation:
            summary: Gets a list of the user's Venues
            description: Get's a list of venues by the owning authenticated user
    iamRoleStatementsName: Get-From-DynamoDB-Venues-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VENUES_TABLE}

  UpdateVenue:
    handler: src/lambda/http/updateVenue.handler
    events:
      - http:
          method: patch
          path: venues/{venueId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a venue
            description: Update an existing venue, owned by an authenticated user
            requestModels:
              'application/json': UpdateVenueRequest
    iamRoleStatementsName: Update-DynamoDB-Venues-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VENUES_TABLE}
  
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: venues/{venueId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: Get-Put-S3-Images-Bucket-And-Update-Venues-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VENUES_TABLE}

resources:
  Resources:

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: request-body-validator
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    VenuesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: venueId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: venueId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.VENUE_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VENUES_TABLE}
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyImagesPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket