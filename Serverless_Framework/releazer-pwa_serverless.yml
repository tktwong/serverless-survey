service: releazer-dev

custom:
  releazerTableName: ${file(env.json):MAIN_TABLE}
  githubToken: ${file(env.json):GITHUB_TOKEN}
  githubApiUrl: ${file(env.json):GITHUB_API_URL}
  oneSignalApiUrl: ${file(env.json):ONESIGNAL_URL}
  oneSignalApiKey: ${file(env.json):ONESIGNAL_KEY}
  oneSignalAppId: ${file(env.json):ONESIGNAL_APP_ID}
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  profile: mark
  stage: dev
  region: us-east-2
  memorySize: 512
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:TransactWriteItems
        - dynamodb:BatchGetItem
      Resource: "arn:aws:dynamodb:us-east-2:*:*"
  environment:
    RELEAZER_TABLE: ${self:custom.releazerTableName}
    GITHUB_TOKEN: ${self:custom.githubToken}
    GITHUB_API_URL: ${self:custom.githubApiUrl}
    ONE_SIGNAL_API_URL: ${self:custom.oneSignalApiUrl}
    ONE_SIGNAL_API_KEY: ${self:custom.oneSignalApiKey}
    ONE_SIGNAL_APP_ID: ${self:custom.oneSignalAppId}

functions:
  library:
    handler: library.main
    events:
      - http:
          path: library
          method: get
          cors: true
          authorizer: aws_iam

  searchlibrary:
    handler: searchlibrary.main
    events:
      - http:
          path: searchlibrary
          method: get
          cors: true
          authorizer: aws_iam

  deletelibrary:
    handler: deletelibrary.main
    events:
      - http:
          path: deletelibrary
          method: get
          cors: true
          authorizer: aws_iam

  libraryid:
    handler: libraryid.main
    events:
      - http:
          path: libraryid
          method: get
          cors: true
          authorizer: aws_iam

  getlibrary:
    handler: getlibrary.main
    events:
      - http:
          path: getlibrary
          method: get
          cors: true
          authorizer: aws_iam

  createuser:
    handler: createuser.main
    events:
      - http:
          path: createuser
          method: post
          cors: true
          authorizer: aws_iam

  getuser:
    handler: getuser.main
    events:
      - http:
          path: getuser
          method: get
          cors: true
          authorizer: aws_iam

  watcher:
    handler: watcher.main
    events:
      - schedule: cron(0/30 * * * ? *)

resources:
# API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # S3
  # - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
