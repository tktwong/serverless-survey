# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: getaroom-${self:provider.infraStackName}

plugins:
  - serverless-finch
  - serverless-stack-output
  - serverless-webpack

frameworkVersion: '1'

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  infraStackName: ${opt:stack}
  iamRoleStatements:
    ${file(./config/iamRoleStatements.yml)}  
  environment:
    APPLICATION_TABLE:
      Ref: ApplicationDynamoDBTable
    API_REGION: "${self:provider.region}" 

  # optional
  websocketsApiName: websocket-chat-${self:service}

  # required for websocket apis
  # this selects from your payload what your "route" parameter is
  # from the websocket event types on your function
  websocketsApiRouteSelectionExpression: $request.body.action



# Variables
custom:

  # Webpack for lambda handlers
  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: false   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore

  # Exports to file config
  output:
    file: client/src/stack.json # toml, yaml, yml, and json format is available

  # Buckets
  # snippetBucket: ${self:service}-snippet-storage 
  clientBucket: ${self:service}-client

  # Client Frontend
  client: 
    bucketName: ${self:custom.clientBucket}
    indexDocument: index.html
    errorDocument: error.html
    distributionFolder: client/deploy

# CloudFormation resource templates here
resources:
  - ${file(./config/resources.yml)}    
  
functions:
  # manage connection and disconnection of clients
  connectionManager:
    handler: src/handler.connectionManager
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  # just in case we are getting weird / bad data
  # we can react to it with a sane response
  defaultMessages:
    handler: src/handler.defaultMessage
    events:
      - websocket:
          route: $default

  # handle chat app messages
  sendMessage:
    handler: src/handler.sendMessage
    events:
      - websocket:
          route: sendMessage

  # load chat history
  # loadHistory:
  #   handler: src/handler.loadHistory
  #   events:
  #     - websocket:
  #         route: loadHistory          

  # Channel Subscriptions
  channelManager:
    handler: src/handler.channelManager
    events:
      - websocket:
          route: subscribeChannel
      - websocket:
          route: unsubscribeChannel

  # handle broadcasting all events
  # we do this by listening the dynamodb table stream for messages or disconnects
  # could even be done by sub-systems directly to dynamodb
  broadcast:
    handler: src/handler.broadcast
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ApplicationDynamoDBTable, StreamArn]
