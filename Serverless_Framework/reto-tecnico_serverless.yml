service: reto-tecnico

frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-add-api-key
  - serverless-openapi-documentation

custom:
  serverless-offline:
    httpPort: 3009
    lambdaPort: 3010
  settings:
    REST_API_ID: ${env:REST_API_ID}
    REST_API_ROOT_RESOURCE_ID: ${env:REST_API_ROOT_RESOURCE_ID}
    API_KEY_NAME: ${env:API_KEY_NAME}
    API_KEY: ${env:API_KEY}
    USAGE_PLAN_NAME: ${env:USAGE_PLAN_NAME}
    LAMBDA_ROLE: ${env:LAMBDA_ROLE}
    BUCKET_DEPLOY_NAME: ${env:BUCKET_DEPLOY_NAME}
    FNC_HTTP_INTEGRATION: ${env:FNC_HTTP_INTEGRATION}
  allowed-headers:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
  prune:
    automatic: true
    number: 3
  apiKeys:
    - name: ${self:custom.settings.API_KEY_NAME}
      value: ${self:custom.settings.API_KEY}
      usagePlan:
        name: ${self:custom.settings.USAGE_PLAN_NAME}
        throttle:
          rateLimit: 10000
          burstLimit: 5000
  documentation:
    version: '1'
    title: Documentacion del API
    description: Documentacion utilizando Open API
    models:
      - name: Planet
        description: Planeta de Star Wars
        contentType: "application/json"
        schema: ${file(src/main/app/models/Planet.json)}
      - name: PlanetCreated
        description: Modelo de respuesta al crear Planeta
        contentType: "application/json"
        schema: ${file(src/main/app/models/PlanetCreated.json)}
      - name: Planets
        description: Modelo de respuesta al obtener todos los planetas
        contentType: "application/json"
        schema: ${file(src/main/app/models/Planets.json)}
      - name: PlanetFound
        description: Modelo de respuesta al encontrar un planeta
        contentType: "application/json"
        schema: ${file(src/main/app/models/PlanetFound.json)}
      - name: ErrorReponse
        description: Modelo de la respuesta de error
        contentType: "application/json"
        schema:
          $schema: "http://json-schema.org/draft-04/schema#"
          properties:
            status:
              type: string
            number_records:
              type: number
            message:
              type: string
            data:
              type: object

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: devProfile
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  role: ${self:custom.settings.LAMBDA_ROLE}
  apiGateway:
    restApiId: ${self:custom.settings.REST_API_ID}
    restApiRootResourceId: ${self:custom.settings.REST_API_ROOT_RESOURCE_ID}
  tags: # Function specific tags
    env: development
  package:
    exclude:
      - .git/**
      - .gitignore
      - .DS_Store
      - npm-debug.log
      - .serverless/**
      - .serverless_plugins/**
      - .env
      - example.env
      - node_modules/**
      - jspm_packages
  deploymentBucket:
    name: ${self:custom.settings.BUCKET_DEPLOY_NAME}

functions:
  getAllPlanets:
    handler: src/main/app//controllers/planets/GetAllPlanets.getAllPlanets
    events:
      - http:
          path: /planets
          method: GET
          cors:
            origin: '*' # <-- Specify allowed origin
            headers: ${self:custom.allowed-headers}
          integration: ${self:custom.settings.FNC_HTTP_INTEGRATION}
          private: true
          documentation:
            summary: Obtener planetas
            description: Funcion utilizada para obtener todos los planetas
            queryParams:
            - name: "source"
              description: "Parametro utilizado para indicar si se quiere obtener los planetas de la base de datos o de un api externa. Puede tomar el valor 'external'."
              schema:
                type: "string"
                enum:
                    - "external"
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": Planets
              - statusCode: '500'
                responseModels:
                  "application/json": ErrorReponse
  createPlanet:
    handler: src/main/app//controllers/planets/CreatePlanet.createPlanet
    events:
      - http:
          path: /planets
          method: POST
          cors:
            origin: '*' # <-- Specify allowed origin
            headers: ${self:custom.allowed-headers}
          integration: ${self:custom.settings.FNC_HTTP_INTEGRATION}
          private: true
          documentation:
            summary: Crear planeta
            description: Funcion utilizada para la creacion de un planeta
            requestBody:
              description: Datos del planeta
            requestModels:
              application/json: Planet
            methodResponses:
              - statusCode: '201'
                responseModels:
                  "application/json": PlanetCreated
              - statusCode: '400'
                responseModels:
                  "application/json": ErrorReponse
              - statusCode: '500'
                responseModels:
                  "application/json": ErrorReponse
  getPlanetByName:
    handler: src/main/app//controllers/planets/GetPlanetByName.getPlanetByName
    events:
      - http:
          path: /planets/{nombre}
          method: GET
          cors:
            origin: '*' # <-- Specify allowed origin
            headers: ${self:custom.allowed-headers}
          integration: ${self:custom.settings.FNC_HTTP_INTEGRATION}
          private: true
          documentation:
            summary: Obtener planeta
            description: Funcion utilizada para obtener un planeta utilizando su nombre como filtro
            pathParams:
            - name: "nombre"
              description: "Nombre del planeta"
              schema:
                type: "string"
            methodResponses:
              - statusCode: '200'
                responseModels:
                  "application/json": PlanetFound
              - statusCode: '500'
                responseModels:
                  "application/json": ErrorReponse