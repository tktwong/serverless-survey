# Welcome to Serverless!
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
plugins:
  - serverless-webpack

service: shortlist-template


provider:
  name: aws
  stage: dev
  runtime: nodejs4.3
  profile: shortlist-serverless-template-dev
  environment:
    QUESTION_TABLE: "question"
    QUESTION_PAPER_TABLE : "questionPaper"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.QUESTION_TABLE}"

    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource: "arn:aws:execute-api:us-east-1:*:*"

    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.QUESTION_PAPER_TABLE}"

    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource: "arn:aws:execute-api:us-east-1:*:*"

functions:


  createQuestionFunction:
    handler: handler.createQuestionFunction
    events:
      - http:
          path: api/createquestion
          method: post
          cors: true
  
  getQuestionByCategoryFunction:
    handler: handler.getQuestionByCategoryFunction
    events:
      - http:
          path: api/getquestionbycategory
          method: get
          cors: true

  createQsnPaper:
    handler: handler.createQuestionPaperFunction
    events:
      - http:
          path: api/questionpaper
          method: post
          cors: true

resources:
  Resources:
   
     question:
          Type: 'AWS::DynamoDB::Table'
          DeletionPolicy: Retain
          Properties:
            TableName: ${self:provider.environment.QUESTION_TABLE}
            AttributeDefinitions:
              - AttributeName: Category
                AttributeType: S
              - AttributeName: Qsn_id
                AttributeType: S 
            KeySchema:
              - AttributeName: Category
                KeyType: HASH
              - AttributeName: Qsn_id
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2 

     questionPaper:
          Type: 'AWS::DynamoDB::Table'
          DeletionPolicy: Retain
          Properties:
            TableName: ${self:provider.environment.QUESTION_PAPER_TABLE}
            AttributeDefinitions:
              - AttributeName: Qsn_Ppr_Id
                AttributeType: S
              - AttributeName: Qsn_Id
                AttributeType: S 
            KeySchema:
              - AttributeName: Qsn_Ppr_Id
                KeyType: HASH
              - AttributeName: Qsn_Id
                KeyType: RANGE
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2          