service: bottletrack-api

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1

  environment:
    tableName: bottles

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  create:
    # Defines an HTTP API endpoint that calls the main function in create.py
    # - path: url path is /bottles
    # - method: POST request
    # - authorizer: authenticate using the AWS IAM role
    handler: create.main
    events:
      - http:
          path: bottles
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.py
    # - path: url path is /bottles/{name}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: bottles/{name}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.py
    # - path: url path is /bottles
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: bottles
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.py
    # - path: url path is /bottles/{name}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: bottles/{name}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.py
    # - path: url path is /bottles/{name}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: bottles/{name}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
