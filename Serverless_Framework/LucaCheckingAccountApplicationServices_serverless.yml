service: ${file(package.json):name}

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline-sns
  - serverless-offline
  - serverless-prune-plugin

custom:
  secrets: ${file(config/secrets.json)}
  webpack:
    includeModules: true
  dynamodb:
    start:
      port: 9000
      inMemory: true
      migrate: true
  s3:
    port: 9001
    directory: /tmp/s3
  serverless-offline-sns:
    port: 9002
    debug: false
  prune:
    automatic: true
    number: 2

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "us-west-2"}
  stackName:
    name: ${self:provider.stage}-${self:service}
  memorySize: 128
  deploymentBucket:
    name: ${self:provider.stage}-deployment-${self:service}
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:BatchGetItem
        - dynamodb:UpdateItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:provider.stackName.name}-transactions"
        - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:provider.stackName.name}-transactions/index/*"
        - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:provider.stackName.name}-categorized-balances"
        - "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:provider.stackName.name}-account-balances"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::${self:provider.stackName.name}/*"
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - "arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-${file(package.json):config.transactionImportedEvent}"
        - "arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-${file(package.json):config.categorizationRequestedEvent}"
        - "arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-${file(package.json):config.transactionCategorizedEvent}"
        - "arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-${file(package.json):config.transactionSplitEvent}"
        - "arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-create-transaction-dlq"
        - "arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-categorize-transaction-dlq"
        - "arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-calculate-categorization-balance-dlq"
        - "arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-calculate-checking-acct-balance-dlq"

package:
  individually: true

functions:
  import-transactions:
    name: ${self:provider.stackName.name}-import-transactions
    handler: src/commands/application-services/import-transactions-handler.importTransactions
    events:
      - http:
          path: /transactions/uncategorized
          method: POST
          request:
            parameters:
              querystrings:
                preview: false
    environment:
      jwtSecret: ${self:custom.secrets.jwtSecret}
      transactionImportedEvent: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-${file(package.json):config.transactionImportedEvent}
      domainBucket: ${self:provider.stackName.name}
  create-transaction:
    name: ${self:provider.stackName.name}-create-transaction
    handler: src/commands/application-services/create-transaction-handler.createTransaction
    events:
      - sns: ${self:provider.stackName.name}-${file(package.json):config.transactionImportedEvent}
      - sns: ${self:provider.stackName.name}-${file(package.json):config.transactionSplitEvent}
    # TODO: forward to SQS instead of SNS
    onError:
      Ref: CreateTransactionDlq
    environment:
      transactionsTable: ${self:provider.stackName.name}-transactions
  categorize-transaction:
    name: ${self:provider.stackName.name}-categorize-transaction
    handler: src/commands/application-services/categorize-transaction-handler.categorize
    events:
      - sns: ${self:provider.stackName.name}-${file(package.json):config.categorizationRequestedEvent}
    # TODO: forward to SQS instead of SNS
    onError:
      Ref: CategorizeTransactionDlq
    environment:
      transactionsTable: ${self:provider.stackName.name}-transactions
      transactionCategorizedEvent: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-${file(package.json):config.transactionCategorizedEvent}
  get-uncategorized-transactions:
    name: ${self:provider.stackName.name}-get-uncategorized-transactions
    handler: src/commands/application-services/get-uncategorized-transactions-handler.get
    events:
      - http:
          path: /transactions/uncategorized/grouped
          method: GET
          cors: true
    environment:
      jwtSecret: ${self:custom.secrets.jwtSecret}
      transactionsTable: ${self:provider.stackName.name}-transactions
  categorize-transactions:
    name: ${self:provider.stackName.name}-categorize-transactions
    handler: src/commands/application-services/categorize-transactions-handler.categorize
    events:
      - http:
          path: /transactions/categorized
          method: POST
          cors: true
    environment:
      jwtSecret: ${self:custom.secrets.jwtSecret}
      categorizationRequestedEvent: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-${file(package.json):config.categorizationRequestedEvent}
  split-transaction:
    name: ${self:provider.stackName.name}-split-transaction
    handler: src/commands/application-services/split-transaction-handler.split
    events:
      - http:
          path: transactions/uncategorized/{id}/split
          method: POST
          cors: true
          request:
            parameters:
              paths:
                id: true
    environment:
      jwtSecret: ${self:custom.secrets.jwtSecret}
      transactionsTable: ${self:provider.stackName.name}-transactions
      transactionSplitEvent: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.stackName.name}-${file(package.json):config.transactionSplitEvent}
  get-transactions:
    name: ${self:provider.stackName.name}-get-transactions
    handler: src/commands/application-services/get-transactions-handler.get
    events:
      - http:
          path: /transactions/ids
          method: POST
          cors: true
    environment:
      jwtSecret: ${self:custom.secrets.jwtSecret}
      transactionsTable: ${self:provider.stackName.name}-transactions
  calculate-categorization-balance:
    name: ${self:provider.stackName.name}-calc-categorization-balance
    handler: src/queries/handlers/calculate-categorization-balance-handler.calculate
    events:
      - sns: ${self:provider.stackName.name}-${file(package.json):config.transactionCategorizedEvent}
    # TODO: forward to SQS instead of SNS
    onError:
      Ref: CalculateCategorizationBalanceDlq
    environment:
      categorizedBalancesTable: ${self:provider.stackName.name}-categorized-balances
  calculate-checking-acct-balance:
    name: ${self:provider.stackName.name}-calculate-checking-acct-balance
    handler: src/queries/handlers/calculate-checking-account-balance-handler.calculate
    events:
      - sns: ${self:provider.stackName.name}-${file(package.json):config.transactionImportedEvent}
    # TODO: forward to SQS instead of SNS
    onError:
      Ref: CalculateCheckingAccountBalanceDlq
    environment:
      accountBalancesTable: ${self:provider.stackName.name}-account-balances
  get-account-balances:
    name: ${self:provider.stackName.name}-get-account-balances
    handler: src/queries/handlers/get-account-balances-handler.get
    events:
      - http:
          path: /balances/accounts
          method: GET
          cors: true
    environment:
      jwtSecret: ${self:custom.secrets.jwtSecret}
      accountBalancesTable: ${self:provider.stackName.name}-account-balances
  get-categorized-balances:
    name: ${self:provider.stackName.name}-get-categorized-balances
    handler: src/queries/handlers/get-categorized-balances-handler.get
    events:
      - http:
          path: /balances/categorized
          method: GET
          cors: true
          request:
            parameters:
              querystrings:
                beginningPeriod: true
                endingPeriod: true
    environment:
      jwtSecret: ${self:custom.secrets.jwtSecret}
      categorizedBalancesTable: ${self:provider.stackName.name}-categorized-balances

resources:
  Resources:
    CheckingAccountBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stackName.name}
    CreateTransactionDlq:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stackName.name}-create-transaction-dlq
    CategorizeTransactionDlq:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stackName.name}-categorize-transaction-dlq
    CalculateCheckingAccountBalanceDlq:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stackName.name}-calculate-checking-acct-balance-dlq
    CalculateCategorizationBalanceDlq:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:provider.stackName.name}-calculate-categorization-balance-dlq
    TransactionsTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: isUncategorized
            AttributeType: N
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        TableName: ${self:provider.stackName.name}-transactions
        LocalSecondaryIndexes:
          - IndexName: "ByUncategorized"
            KeySchema:
              - AttributeName: tenantId
                KeyType: HASH
              - AttributeName: isUncategorized
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    CategorizedBalancesTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: period
            AttributeType: N
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: period
            KeyType: RANGE
        TableName: ${self:provider.stackName.name}-categorized-balances
    AccountBalancesTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
        TableName: ${self:provider.stackName.name}-account-balances
