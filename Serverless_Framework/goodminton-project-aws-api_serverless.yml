service: initial-app
# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: eu-west-2
  environment:
   tableName: ${env:TABLE_NAME}
   playerDataTableName: ${env:PLAYER_DATA_TABLE_NAME}
   logsTableName: ${env:LOGS_TABLE_NAME}
  iamRoleStatements:
   - Effect: Allow
     Action:
       - dynamodb:DescribeTable
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
     Resource: "arn:aws:dynamodb:eu-west-2:*:*"
functions:
  create:
    handler: handlers/notes/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: handlers/notes/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: handlers/notes/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: handlers/notes/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: handlers/notes/delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  createPlayerData:
    handler: handlers/playerData/create.main
    events:
      - http:
          path: player
          method: post
          cors: true
          authorizer: aws_iam
  getPlayerData:
    handler: handlers/playerData/get.main
    events:
      - http:
          path: player/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updatePlayerData:
    handler: handlers/playerData/update.main
    events:
      - http:
          path: player/{id}
          method: put
          cors: true
          authorizer: aws_iam
  deletePlayerData:
    handler: handlers/playerData/delete.main
    events:
      - http:
          path: player/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  listPlayerData:
    handler: handlers/playerData/list.main
    events:
      - http:
          path: player
          method: get
          cors: true
          authorizer: aws_iam
  createLog:
    handler: handlers/playerLogs/create.main
    events:
      - http:
          path: logs
          method: post
          cors: true
          authorizer: aws_iam
  # getLogs:
  #   handler: handlers/playerLogs/get.main
  #   events:
  #     - http:
  #         path: logs/{id}
  #         method: get
  #         cors: true
  #         authorizer: aws_iam
  updateLog:
    handler: handlers/playerLogs/update.main
    events:
      - http:
          path: logs/{id}
          method: put
          cors: true
          authorizer: aws_iam
  # deleteLog:
  #   handler: handlers/playerLogs/delete.main
  #   events:
  #     - http:
  #         path: logs/{id}
  #         method: delete
  #         cors: true
  #         authorizer: aws_iam
  listLogs:
    handler: handlers/playerLogs/list.main
    events:
      - http:
          path: logs
          method: get
          cors: true
          authorizer: aws_iam
resources:
  - ${file(resources/api-gateway-errors.yml)}
