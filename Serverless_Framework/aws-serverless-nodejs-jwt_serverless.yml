service: api-jwt-auth-sample

custom:
  JWT_SECRET: ${file(./secrets.json):jwtSecret}
  EMAIL_API_KEY: ${file(./secrets.json):mailgun.apiKey}
  EMAIL_API_DOMAIN: ${file(./secrets.json):mailgun.apiDomain}
  API_HOST: ${file(./secrets.json):apiHost}
  tableName: 'users-table-${self:provider.stage}'
  # so that it locally creates our tables defined in the resources block (required when running dynamo locally)
  dynamodb:
    start:
      migrate: true

package:
  exclude:
    - ".dynamodb/**"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    JWT_SECRET: ${self:custom.JWT_SECRET}
    USERS_TABLE: ${self:custom.tableName}
    EMAIL_API_KEY: ${self:custom.EMAIL_API_KEY}
    EMAIL_API_DOMAIN: ${self:custom.EMAIL_API_DOMAIN}
    API_HOST: ${self:custom.API_HOST}
    API_STAGE: ${self:provider.stage}

functions:
  verify-token:
    handler: auth/VerifyToken.auth
    cors: true
  login:
    handler: auth/AuthHandler.login
    events:
      - http:
          path: login
          method: post
          cors: true
  register:
    handler: auth/AuthHandler.register
    events:
      - http:
          path: register
          method: post
          cors: true

  activate-account:
    handler: auth/AuthHandler.activate
    events:
      - http:
          path: activate/{id}
          method: get
          cors: true

  me:
    handler: auth/AuthHandler.me
    events:
      - http:
          path: me
          method: get
          cors: true
          authorizer: verify-token
  getUser:
    handler: user/UserHandler.getUser
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: verify-token
          request:
            parameters:
              paths:
                id: true

# using CloudFormation syntax
resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    # This response is needed for custom authorizer failures cors support
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

plugins:
  - serverless-dynamodb-local
  - serverless-offline