service:
  name: aws-nodejs-jwt

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  memorySize: 128
  runtime: nodejs8.10
  # region: us-east-1
  region: sa-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
      
functions:
  auth:
    handler: src/handlers/auth/authorizer-handler.auth
    cors: true
  jwtTokenGenerator:
    handler: src/handlers/auth/jwt-handler.getToken
    events:
      - http:
          path: auth/token
          method: post
          cors: true
  publicEndpoint:
    handler: src/handlers/public-handler.publicEndpoint
    events:
      - http:
          path: api/public
          method: post
          cors: true
  privateEndpoint:
    handler: src/handlers/private-handler.privateEndpoint
    events:
      - http:
          path: api/private
          method: post
          # See custom authorizer docs here: http://bit.ly/2gXw9pO
          authorizer: auth
          cors: true
  hello:
    handler: src/handlers/public-handler.hello
    events:
      - http:
          path: api/hello
          method: get
  hello-single:
    handler: src/handlers/single-handler.hello
    events:
      - http:
          path: api/single
          method: get

  create:
    handler: src/handlers/dynamo/create-handler.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: src/handlers/dynamo/list-handler.list
    events:
      - http:
          path: todos
          method: get
          cors: true



resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}