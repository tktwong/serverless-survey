service: sls-auth

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'local'}
  version: ${opt:version, 'v0'}
  region: eu-west-1
  profile: nourix2
  environment:
    BASE_URL: 'tiller.es/oauth'
    DB_ENCRYPTION_KEY: ${file(env.yaml):${self:provider.stage}.DB_ENCRYPTION_KEY}
    CLIENTS_TABLE_NAME: ${self:custom.dynamo_clientsTable}
    CODES_TABLE_NAME: ${self:custom.dynamo_codesTable}
    PROVIDER_SESSIONS_TABLE_NAME: ${self:custom.dynamo_providerSessionsTable}
    PROVIDERS_TABLE_NAME: ${self:custom.dynamo_providersTable}
    SESSIONS_TABLE_NAME: ${self:custom.dynamo_sessionsTable}
    TOKENS_TABLE_NAME: ${self:custom.dynamo_tokensTable}
    USERS_TABLE_NAME: ${self:custom.dynamo_usersTable}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
        - SNS:CreateTopic
      Resource: { "Fn::Join" : ["", ["arn:aws:sns:${opt:region, self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:service}_*_${self:provider.stage}" ] ]  }

    - Effect: "Allow"
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
        - sns:Publish
      Resource: "*"

    # Allow access to all Dynamo DB tables in this region that begin with the service name and end with the stage
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: { "Fn::Join" : ["", ["arn:aws:dynamodb:${opt:region, self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":table/${self:service}_*_${self:provider.stage}" ] ]  }


functions:
  token:
    handler: src/handler.token
    events:
      - http:
          path: oauth/token
          method: post
  authorize:
    handler: src/handler.authorize
    events:
      - http:
          path: oauth/authorize
          method: get
  providers:
    handler: src/handler.providers
    events:
      - http:
          path: providers/{providerId}
          method: get
          parameters:
              paths:
                providerId: true
  callback:
    handler: src/handler.callback
    events:
      - http:
          path: callback/{providerId}
          method: get
          parameters:
              paths:
                providerId: true
          
  login:
    handler: src/handler.login
    events:
      - http:
          path: login
          method: post
      - http:
          path: login
          method: get
          
resources:
  Resources:
    ClientsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamo_clientsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ProvidersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamo_providersTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamo_usersTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CodesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamo_codesTable}
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ProviderSessionsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamo_providerSessionsTable}
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    SessionsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamo_sessionsTable}
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    TokensTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamo_tokensTable}
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

package:
  include:
    - src/templates/login/template.html

custom:
  dynamo_clientsTable: "${self:service}_clients_${self:provider.stage}"
  dynamo_codesTable: "${self:service}_codes_${self:provider.stage}"
  dynamo_providerSessionsTable: "${self:service}_providerSessions_${self:provider.stage}"
  dynamo_providersTable: "${self:service}_providers_${self:provider.stage}"
  dynamo_sessionsTable: "${self:service}_sessions_${self:provider.stage}"
  dynamo_tokensTable: "${self:service}_tokens_${self:provider.stage}"
  dynamo_usersTable: "${self:service}_users_${self:provider.stage}"
  customDomain:
    domainName: tiller.es
    basePath: 'oauth'
    stage: ${self:provider.version}
    createRoute53Record: true
    certificateName: '*.tiller.es'
    securityPolicy: tls_1_2


plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-offline