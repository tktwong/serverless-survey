# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: qm
# app and org for use with dashboard.serverless.com
app: api-app
org: firminsa

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - ses:SendEmail
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

#  stage: dev
#  region: us-east-1


plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    usePipenv: false
    pythonBin: "python"
    fileName: "prod-requirements.txt"

# you can add packaging information here
package:
  #  include:
  #    - include-me.py
  #    - include-me-dir/**
  exclude:
    - swagger/**
    - .idea/**
    - LICENSE
    - package-lock.json
    - package.json
    - Pipfile
    - venv/**
    - node_modules/**
    - server.py
    - generator.py

functions:
  login:
    handler: api/handlers/account.login
    events:
      - http:
          path: qm/login
          method: post

  register:
    handler: api/handlers/account.register
    events:
      - http:
          path: qm/register
          method: post

  create_quiz:
    handler: api/handlers/quiz.create_quiz
    events:
      - http:
          path: qm/quizzes
          method: post

  get_quizzes:
    handler: api/handlers/quiz.get_quizzes
    events:
      - http:
          path: qm/quizzes
          method: get

  get_flashcards:
    handler: api/handlers/flashcard_deck.get_flashcard_decks
    events:
      - http:
          path: qm/flashcard-decks
          method: get

  get_quiz:
    handler: api/handlers/quiz.get_quiz_by_id
    events:
      - http:
          path: qm/quizzes/{quiz_id}
          method: get
          request:
            paths:
              quiz_id: true

  delete_quiz:
    handler: api/handlers/quiz.delete_quiz
    events:
      - http:
          path: qm/quizzes/{quiz_id}
          method: delete
          request:
            paths:
              quiz_id: true

  update_quiz:
    handler: api/handlers/quiz.update_quiz
    events:
      - http:
          path: qm/quizzes
          method: put

  create_question:
    handler: api/handlers/question.create_question
    events:
      - http:
          path: qm/questions
          method: post

  delete_question:
    handler: api/handlers/question.delete_question
    events:
      - http:
          path: qm/questions/{question_id}
          method: delete
          request:
            paths:
              question_id: true

  update_question:
    handler: api/handlers/question.update_question
    events:
      - http:
          path: qm/questions
          method: put

  update_flashcard:
    handler: api/handlers/flashcard.update_flashcard
    events:
      - http:
          path: qm/flashcards
          method: put

  create_flashcard_deck:
    handler: api/handlers/flashcard_deck.create_flashcard_deck
    events:
      - http:
          path: qm/flashcard-decks
          method: post

  get_flashcard_deck:
    handler: api/handlers/flashcard_deck.get_by_flashcard_deck_id
    events:
      - http:
          path: qm/flashcard-decks/{flashcard_deck_id}
          method: get
          request:
            paths:
              flashcard_deck_id: true

  create_flashcard:
    handler: api/handlers/flashcard.create_flashcard
    events:
      - http:
          path: qm/flashcards
          method: post

  delete_flashcard:
    handler: api/handlers/flashcard.delete_flashcard
    events:
      - http:
          path: qm/flashcards/{flashcard_id}
          method: delete
          request:
            paths:
              flashcard_id: true

  delete_flashcard_deck:
    handler: api/handlers/flashcard_deck.delete_flashcard_deck
    events:
      - http:
          path: qm/flashcard-decks/{flashcard_deck_id}
          method: delete
          request:
            paths:
              flashcard_deck_id: true

  update_flashcard_deck:
    handler: api/handlers/flashcard_deck.update_flashcard_deck
    events:
      - http:
          path: qm/flashcard-decks
          method: put

  get_user_quizzes:
    handler: api/handlers/quiz.get_by_user_id
    events:
      - http:
          path: qm/users/{user_id}/quizzes
          method: get
          request:
            paths:
              user_id: true

  get_user_flashcard_decks:
    handler: api/handlers/flashcard_deck.get_by_user_id
    events:
      - http:
          path: qm/users/{user_id}/flashcard-decks
          method: get
          request:
            paths:
              user_id: true


  search:
    handler: api/handlers/question.create_question
    events:
      - http:
          path: qm/questions
          method: post