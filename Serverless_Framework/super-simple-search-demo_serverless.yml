service: ${self:custom.serviceName}

custom:
  setupFile: ./setup.${self:provider.stage}.json
  serviceName: ${file(${self:custom.setupFile}):serviceName}
  indexBucket: ${self:custom.serviceName}-${file(${self:custom.setupFile}):indexBucket}
  indexFile: ${file(${self:custom.setupFile}):indexFile}
  frontBucket: ${self:custom.serviceName}-${file(${self:custom.setupFile}):frontendBucket}
  minTTL: ${file(${self:custom.setupFile}):cloudfront-minTTL}
  maxTTL: ${file(${self:custom.setupFile}):cloudfront-maxTTL}
  defaultTTL: ${file(${self:custom.setupFile}):cloudfront-defaultTTL}
  apiKey: ${file(${self:custom.setupFile}):api-key}
  fakeOrigin: ${file(${self:custom.setupFile}):fakeOrigin}
  distributionId: ${file(${self:custom.setupFile}):distributionId}
  
  s3Sync:
    - bucketName: ${self:custom.indexBucket} 
      localDir: ${file(${self:custom.setupFile}):indexBucket}
      deleteRemoved: true
    - bucketName: ${self:custom.frontBucket} 
      localDir: ${file(${self:custom.setupFile}):frontendBucket}
      deleteRemoved: true


plugins:
  - serverless-plugin-cloudfront-lambda-edge
  - serverless-s3-sync

package:
   exclude:
      - 'node_modules/**'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'demo'}
  region: ${env:region, 'us-east-1'}
  memorySize: 128
  timeout: 5
  stackTags:
    name: ${self:service}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: "*"
    - Effect: 'Allow'
      Action: sts:AssumeRole
      Resource: "*"
    - Effect: 'Allow'
      Action: cloudfront:CreateInvalidation
      Resource: "*"

functions:
  invalidate:
    handler: functions/cf-invalidate/index.handler
    lambdaAtEdge:
        distribution: 'CloudFrontDistribution'
        eventType: 'origin-request'
        pathPattern: '/invalidate*'
  search:
    handler: functions/query/index.handler
    lambdaAtEdge:
        distribution: 'CloudFrontDistribution'
        eventType: 'origin-request'
        pathPattern: '/search*'

resources:
   Resources:
    IndexData:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.indexBucket}

    FrontBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontBucket}

    FrontBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: FrontBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt: [ CfOriginAccessIdentity , S3CanonicalUserId ]
              Action: "s3:GetObject"
              Resource: 
                !Join
                  - ""
                  - - Fn::GetAtt: [FrontBucket, Arn]
                    - "/*"

    IamRoleLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: ${self:custom.serviceName}
          DefaultRootObject: index.html

          CacheBehaviors:
            - TargetOriginId: ${self:custom.serviceName}
              ViewerProtocolPolicy: 'redirect-to-https'
              DefaultTTL: ${self:custom.defaultTTL}
              MaxTTL: ${self:custom.maxTTL}
              MinTTL: ${self:custom.minTTL}
              ForwardedValues:
                QueryString: false
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
              PathPattern: '/search*'

            - TargetOriginId: ${self:custom.serviceName}
              ViewerProtocolPolicy: 'redirect-to-https'
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: false
                Headers:
                  - x-api-key
                  - invalidatePath

              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - POST
                - PATCH
                - DELETE
              PathPattern: '/invalidate*'

          DefaultCacheBehavior:
            TargetOriginId: ${self:custom.serviceName}-${self:custom.frontBucket}
            ViewerProtocolPolicy: 'redirect-to-https'
            DefaultTTL: ${self:custom.defaultTTL}
            MaxTTL: ${self:custom.maxTTL}
            MinTTL: ${self:custom.minTTL}
            ForwardedValues:
              QueryString: false
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS

          Enabled: true
          
          Origins:
            - Id: ${self:custom.serviceName}-${self:custom.frontBucket}
              DomainName: 
                !Join
                  - ''
                  - - ${self:custom.frontBucket}
                    - '.s3.amazonaws.com'
              S3OriginConfig: 
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    -
                      - 'origin-access-identity/cloudfront/'
                      - Ref: CfOriginAccessIdentity


            - Id: ${self:custom.serviceName}
              DomainName: ${self:custom.fakeOrigin}
              CustomOriginConfig:
                OriginProtocolPolicy: 'https-only'
              OriginCustomHeaders:
                - HeaderName: 'bucket'
                  HeaderValue: ${self:custom.indexBucket}
                - HeaderName: 'index'
                  HeaderValue: ${self:custom.indexFile}
                - HeaderName: 'role'
                  HeaderValue: { "Fn::GetAtt" : [ "IamRoleLambdaExecution", "Arn" ] }
                - HeaderName: 'api-key'
                  HeaderValue: ${self:custom.apiKey}
                - HeaderName: 'cloudfrontid'
                  HeaderValue: ${self:custom.distributionId}

    CfOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "access-identity-for-${self:custom.serviceName}"