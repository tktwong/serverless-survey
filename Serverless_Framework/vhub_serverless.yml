service: vhub

plugins:
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin
  - serverless-python-requirements
  - serverless-prune-plugin

provider:
  name: aws
  runtime: python3.7
  region: us-east-2
  logRetentionInDays: 30
  stage: ${opt:stage, 'dev'}
  environment:
    CRAWLED_WEBPAGE_BUCKET: ${self:custom.crawled_webpages_bucket}
    VIDEOS_TABLE: Videos-${self:provider.stage}
    CHANNELS_TABLE: Channels-${self:provider.stage}

custom:
  crawled_webpages_bucket: crawled-webpages-${self:provider.stage}
  schedule_enabled:
    prod: true
    dev: false
  prune:
    automatic: true
    number: 10

package:
  exclude:
    - node_modules/**
    - tests/**
    - venv/**
    - .pytest_cache/**
    - .vscode/**

functions:
  fetch_vtuber_antenna:
    handler: vhub.fetch_vtuber_antenna.lambda_handler
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: ${self:custom.schedule_enabled.${self:provider.stage}}
    timeout: 10
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource:
          - arn:aws:s3:::${self:custom.crawled_webpages_bucket}/*
  fetch_video:
    handler: vhub.fetch_video.lambda_handler
    events:
      - s3: ${self:custom.crawled_webpages_bucket}
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - Fn::GetAtt:
            - VideosTable
            - Arn
      - Effect: Allow
        Action:
          - s3:ListBucket
        Resource:
          - arn:aws:s3:::${self:custom.crawled_webpages_bucket}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - arn:aws:s3:::${self:custom.crawled_webpages_bucket}/*
  notifier:
    handler: vhub.notifier.lambda_handler_${self:provider.stage}
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          arn:
            Fn::GetAtt:
              - VideosTable
              - StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - Fn::GetAtt:
            - ChannelsTable
            - Arn
  fetch_vtuber_channels:
    handler: vhub.fetch_vtuber_channels.lambda_handler
    events:
      - schedule:
          rate: cron(0 3 * * ? *)
          enabled: ${self:custom.schedule_enabled.${self:provider.stage}}
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - Fn::GetAtt:
              - ChannelsTable
              - Arn

resources:
  Resources:
    VideosTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: Videos-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: url
            AttributeType: S
        KeySchema:
          - AttributeName: url
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    ChannelsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: Channels-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: url
            AttributeType: S
        KeySchema:
          - AttributeName: url
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 5
