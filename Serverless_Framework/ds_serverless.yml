service: ds

custom:
  tableName: ds-data
  queueName: dstest
  bucketName: ds-data-bucket-2
  warmup:
    enabled: true
    prewarm: true
  documentation:
    version: '1'
    title: 'DS'
    description: 'DS'
    models:
      - name: "TransactionRequest"

plugins:
  - serverless-plugin-warmup
  - serverless-plugin-warmup-ts-bridge
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-openapi-documentation

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    TABLE_NAME: ${self:custom.tableName}
    BUCKET_NAME: ${self:custom.bucketName}
    # SQS_URL:
    #   Ref: SQSQueue
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
        - dynamodb:PutItem
        - dynamodb:GetItem
        - s3:PutObject
        - s3:GetObject
        - sqs:SendMessage
      Resource: "*"

functions:
  # REST API
  authenticate:
    handler: api.authenticate
    events:
      - http:
          path: authenticate
          method: post
          cors: true
          documentation:
            summary: "authenticate"

  submit-transaction:
    handler: api.submitTransaction
    events:
      - http:
          path: api/v1/{tenant}
          method: post
          cors: true

  get-transaction-by-resource-id:
    handler: api.getTransaction
    events:
      - http:
          path: api/v1/{tenant}/{resourceID}
          method: get
          cors: true

  get-transaction-report:
    handler: api.getTransactionReport
    events:
      - http:
          path: data/{tenant}/{resourceID}
          method: get
          cors: true
          
  # Internal
  execute-transaction:
    handler: execute-transaction.executeTransaction
    timeout: 300
    # events:
    #   - sqs:
    #       arn:
    #         Fn::GetAtt: [ ExecuteTransactionQueue, Arn ]

  save-transaction:
    handler: data.saveTransaction

  get-transaction:
    handler: data.getTransaction

  get-transaction-data:
    handler: data.getTransactionData

  get-transaction-request:
    handler: data.getTransactionRequest

  update-transaction:
    handler: data.updateTransaction
    # events:
    #   - sqs:
    #       arn:
    #         Fn::GetAtt: [ UpdateTransactionQueue, Arn ]

  pm-proxy:
    handler: proxy/pm.handler
    # events:
    #   - sqs:
    #       arn:
    #         Fn::GetAtt: [ PMQueue, Arn ]

  rxrules-proxy:
    handler: proxy/rxrules.handler
    # events:
    #   - sqs:
    #       arn:
    #         Fn::GetAtt: [ RxRulesQueue, Arn ]

  dhd-proxy:
    handler: proxy/dhd.handler
    # events:
    #   - sqs:
    #       arn:
    #         Fn::GetAtt: [ DHDQueue, Arn ]

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        ObjectLockEnabled: true
    DynamoTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: resourceID
            AttributeType: S
        KeySchema:
          - AttributeName: resourceID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # ExecuteTransactionQueue:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     FifoQueue: true
    #     ContentBasedDeduplication: true
    #     QueueName: ${self:custom.queueName}-execute.fifo
    # UpdateTransactionQueue:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     FifoQueue: true
    #     ContentBasedDeduplication: true
    #     QueueName: ${self:custom.queueName}-update.fifo
    # DHDQueue:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     FifoQueue: true
    #     ContentBasedDeduplication: true
    #     QueueName: ${self:custom.queueName}-dhd.fifo
    # RxRulesQueue:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     FifoQueue: true
    #     ContentBasedDeduplication: true
    #     QueueName: ${self:custom.queueName}-rxrules.fifo
    # PMQueue:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     FifoQueue: true
    #     ContentBasedDeduplication: true
    #     QueueName: ${self:custom.queueName}-pm.fifo