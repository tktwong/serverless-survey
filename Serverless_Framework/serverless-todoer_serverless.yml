service:
  name: todo-api
frameworkVersion: '2'
enableLocalInstallationFallback: false

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - aws-amplify-serverless-plugin

custom:
  stage: ${env:STAGE, "dev"}
  region: ${env:AWS_REGION, "us-east-1"}
  amplify:
    - filename: ../../src/aws-exports.ts
      type: typescript
      appClient: CognitoUserPoolClient
  dotenv:
    path: ../../.env
  bundle:
    stats: false
package:
  individually: true
  exclude:
    - ../../package.json
    - ../../node_modules/**
    - node_modules/**
    - ../../amplify/**
    - ../../public/**
    - ../../build/**
    - ../../src/**

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: us-east-1
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-SharedGW-restApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-SharedGW-rootResourceId
  tracing:
    lambda: true

functions:
  create:
    handler: src/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true
          authorizer: aws_iam
          request:
            schema:
              application/json: ${file(./src/schema/todo.schema.json)}
            template:
              application/json: '#set($body = $util.parseJson($input.body)) {
                $body.title,
                $body.task,
                $body.done,
                $body.shouldAlert,
                $body.dueDate,
                $body.imageUrl}'
  get:
    handler: src/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: src/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: src/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true
          authorizer: aws_iam
          request:
            schema:
              application/json: ${file(./src/schema/todo.schema.json)}
            template:
              application/json: '#set($body = $util.parseJson($input.body)) {
                $body.id,
                $body.title,
                $body.task,
                $body.done,
                $body.shouldAlert,
                $body.dueDate,
                $body.imageUrl}'
  delete:
    handler: src/delete.main
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true
          authorizer: aws_iam
