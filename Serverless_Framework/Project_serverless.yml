org: j4ysen
app: app
service: location-api

plugins:
  - serverless-webpack
  - serverless-hooks-plugin
  - serverless-bundle

custom:
  webpackIncludeModules: true # enable auto-packing of external modules
  variables: ${file(./config.yml)}
  hooks:
    after:aws:deploy:finalize:cleanup:
      - ./scripts/attachConfirmUserTrigger.sh ${self:provider.profile}
      - ./../client/scripts/setup.sh ${self:provider.profile}
    before:remove:remove:
      - ./scripts/detach_policies.sh

provider:
  name: aws
  profile: default
  runtime: nodejs10.x
  stage: prod
  region: ${opt:region, self:custom.variables.region}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - iot:AttachPrincipalPolicy
        - iot:DetachPrincipalPolicy
        - iot:CreatePolicy
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        {
          "Fn::Join":
            ["", ["arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":*:*"]],
        }

functions:

  AutoConfirmUser:
    handler: src/user/confirm.main

  CreateUser:
    handler: src/user/create.main

  ListUsers:
    handler: src/user/list.main
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: aws_iam

  Connect:
    handler: src/policy/connect.main
    events:
      - http:
          path: policy/connect
          method: post
          cors: true
          authorizer: aws_iam

  Publish:
    handler: src/policy/publish.main
    events:
      - http:
          path: policy/publish
          method: post
          cors: true
          authorizer: aws_iam

  Subscribe:
    handler: src/policy/subscribe.main
    events:
      - http:
          path: policy/subscribe
          method: post
          cors: true
          authorizer: aws_iam

  Receive:
    handler: src/policy/receive.main
    events:
      - http:
          path: policy/receive
          method: post
          cors: true
          authorizer: aws_iam

    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam

  GetMe:
    handler: src/user/getMe.main
    events:
      - http:
          path: users/me
          method: get
          cors: true
          authorizer: aws_iam

  GetUser:
    handler: src/user/get.main
    events:
      - http:
          path: users/{identityId}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                identityId: true


  CreateChat:
    handler: src/chat/create.main
    events:
      - http:
          path: chats
          method: post
          cors: true
          authorizer: aws_iam

  ListChats:
    handler: src/chat/list.main
    events:
      - http:
          path: chats
          method: get
          cors: true
          authorizer: aws_iam

  GetTimetable:
    handler: src/chat/getTimetable.main
    events:
      - http:
          path: getTimetable/{getStream}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                getStream: true

  SetTimetable:
    handler: src/chat/setTimetable.main
    events:
      - http:
          path: setTimetable/{setStream}
          method: post
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                setStream: true
                

  GetEvent:
    handler: src/chat/getEvent.main
    events:
      - http:
          path: event/{getUrl}
          method: get
          cors: true
          authorizer: aws_iam
          request:
            parameters:
              paths:
                getUrl: true

  AddEvent:
    handler: src/chat/event.main
    events:
          - iot:
              sql: "SELECT * FROM 'stream/#'"

resources:
  Resources:
    UserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Users"
        AttributeDefinitions:
          - AttributeName: identityId
            AttributeType: S
        KeySchema:
          - AttributeName: identityId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    EventTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Events"
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ConnectPolicy:
      Type: "AWS::IoT::Policy"
      Properties:
        PolicyName: ConnectPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "iot:Connect"
              Resource:
                - "*"

    ChatTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Chats"
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5


    PublicSubscribePolicy:
      Type: "AWS::IoT::Policy"
      Properties:
        PolicyName: SubscribePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "iot:Subscribe"
              Resource:
                {
                  "Fn::Join":
                    [
                      "",
                      [
                        "arn:aws:iot:",
                        { "Ref": "AWS::Region" },
                        ":",
                        { "Ref": "AWS::AccountId" },
                        ":topicfilter/stream/*",
                      ],
                    ],
                }

    PublicReceivePolicy:
      Type: "AWS::IoT::Policy"
      Properties:
        PolicyName: ReceivePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "iot:Receive"
              Resource:
                {
                  "Fn::Join":
                    [
                      "",
                      [
                        "arn:aws:iot:",
                        { "Ref": "AWS::Region" },
                        ":",
                        { "Ref": "AWS::AccountId" },
                        ":topic/stream/*",
                      ],
                    ],
                }

    IdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: location_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: ReactAppClient
            ProviderName:
              Fn::GetAtt: UserPool.ProviderName



    IdentityPoolAuthRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated:
                  - "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Ref: IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSIoTDataAccess
        Path: "/"
        Policies:
          - PolicyName: invoke-api-gateway
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - execute-api:Invoke
                  Resource:
                    {
                      "Fn::Join":
                        [
                          "",
                          [
                            "arn:aws:execute-api:",
                            { "Ref": "AWS::Region" },
                            ":",
                            { "Ref": "AWS::AccountId" },
                            ":",
                            { "Ref": "ApiGatewayRestApi" },
                            "/*",
                          ],
                        ],
                    }

    IdentityPoolRoleAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: IdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
              - IdentityPoolAuthRole
              - Arn

    ConfirmUserInvocationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt: AutoConfirmUserLambdaFunction.Arn
        Principal: cognito-idp.amazonaws.com
        SourceArn:
          Fn::GetAtt: UserPool.Arn


    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: location_user_pool
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true

    ReactAppClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        GenerateSecret: false
        RefreshTokenValidity: 200
        UserPoolId:
          Ref: UserPool



  Outputs:
    AutoConfirmUserFnArn:
      Value:
        Fn::GetAtt:
          - AutoConfirmUserLambdaFunction
          - Arn

    UserPoolId:
      Value:
        Ref: UserPool

    ReactAppClientId:
      Value:
        Ref: ReactAppClient

    IdentityPoolId:
      Value:
        Ref: IdentityPool

