# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: contact-form-api

custom:
  secrets: ${file(secrets.json)}

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.secrets.NODE_ENV}
  region: us-east-1
  environment:
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    EMAIL: ${self:custom.secrets.EMAIL}
    DOMAIN: ${self:custom.secrets.DOMAIN}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
functions:
  send:
    handler: handler.send
    description: Send Email Function
    events:
      - http:
          path: email/send
          method: post
          cors: true
  comment:
    handler: handler.comment
    description: Post Comment Function
    events:
      - http:
          path: comment
          method: post
          cors: true
  getComment:
    handler: handler.getComment
    description: Get Comment based on Post Function
    events:
      - http:
          path: post/comments
          method: post
          cors: true
resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.secrets.NODE_ENV}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.secrets.NODE_ENV}-user-pool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
