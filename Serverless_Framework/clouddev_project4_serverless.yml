service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-plugin-tracing

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  tracing:
    lambda: true
    apiGateway: true

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

  environment:
    REGION: eu-west-1;
    TODO_TABLE: Todo-${self:provider.stage}
    TODO_TABLE_ARN: "arn:aws:dynamodb:eu-west-1:*:table/${self:provider.environment.TODO_TABLE}"
    FILE_UPLOAD_S3_BUCKET: clouddev-project4-todo-bucket-${self:provider.stage}
    INDEX_NAME: user-index

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: udacity-project4
        description: Serverless application
    models:
      - name: GroupRequest
        contentType: application/json
        schema: ${file(src/models/create-group-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          reqValidatorName: RequestValidator
          documentation:
              summary: Get all todos
              requestModels:
                'application/json': GroupRequest
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: ${self:provider.environment.TODO_TABLE_ARN}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          reqValidatorName: RequestValidator
          documentation:
              summary: Create new todo
              requestModels:
                'application/json': GroupRequest
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: ${self:provider.environment.TODO_TABLE_ARN}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: put
          path: todos/{todoId}
          cors: true
          reqValidatorName: RequestValidator
          documentation:
              summary: Update a todo
              requestModels:
                'application/json': GroupRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: ${self:provider.environment.TODO_TABLE_ARN}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          reqValidatorName: RequestValidator
          documentation:
              summary: Delete a todo
              requestModels:
                'application/json': GroupRequest
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: ${self:provider.environment.TODO_TABLE_ARN}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          reqValidatorName: RequestValidator
          documentation:
              summary: Generate upload url
              requestModels:
                'application/json': GroupRequest

resources:
  Resources:
    RequestValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: "req-validator"
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: todoId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.FILE_UPLOAD_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: ["s3:GetObject", "s3:Put*"]
              Resource: "arn:aws:s3:::${self:provider.environment.FILE_UPLOAD_S3_BUCKET}/*"
        Bucket: { Ref: UploadBucket }
