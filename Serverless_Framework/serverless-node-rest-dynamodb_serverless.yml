service: myService # Service name

frameworkVersion: ">=1.0.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'} # Optional - Set the default stage used. Default is dev
  region: ${opt:region, 'us-east-1'} # Optional - Overwrite the default region used. Default is us-east-1
  memorySize: 512 # Optional - Overwrite the default memory size. Default is 1024
  timeout: 10 # Optional - The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  environment: ${file(env.yml)} # Service wide environment variables. You can reference the entire file
# stackName: custom-stack-name # Use a custom name for the CloudFormation stack
# apiName: custom-api-name # Use a custom name for the API Gateway API
plugins:
# - serverless-dynamodb-local # Uncomment to enable DynamoDB local
  - serverless-offline # serverless-offline needs to be last in the plugins list

custom:
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

resources: # CloudFormation template syntax
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  usersCreate: # A Function
    handler: handler.usersCreate # The file and module for this specific function.
    events: # The Events that trigger this Function
      - http: # This creates an API Gateway HTTP endpoint which can be used to trigger this function.  Learn more in "events/apigateway"
          path: users # Path for this endpoint
          method: post # HTTP method for this endpoint
          cors: true # Turn on CORS for this endpoint, but don't forget to return the right header in your response

  usersList:
    handler: handler.usersList
    events:
      - http:
          path: users
          method: get
          cors: true

  usersGet:
    handler: handler.usersGet
    events:
      - http:
          path: users/{userId}
          method: get
          cors: true

  usersUpdate:
    handler: handler.usersUpdate
    events:
      - http:
          path: users/{userId}
          method: put
          cors: true

  usersDelete:
    handler: handler.usersDelete
    events:
      - http:
          path: users/{userId}
          method: delete
          cors: true
