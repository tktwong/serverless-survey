service: sls-appsync-backend

plugins:
  - serverless-appsync-plugin
  - serverless-plugin-additional-stacks

provider:
  name: aws
  runtime: nodejs12.x
  profile: ${file(./config/config.json):profile}
  region: ${file(./config/config.json):region}
  stage: dev

custom:
  base: ${self:service}-${self:provider.stage}
  account: ${file(./config/config.json):account}
  db: ${file(./config/config.json):db}

  cognitoStackName: ${self:custom.base}-cognito
  dynamoDBStackName: ${self:custom.base}-dynamodb

  userPoolId: 
    Fn::ImportValue: ${self:custom.base}-UserPoolId
  
  dynamoDBTable:
    Fn::ImportValue: ${self:custom.base}-DynamoDBTable

  dynamodbRoleArn: 
    Fn::ImportValue: ${self:custom.base}-DynamoDBRoleArn

  additionalStacks:
    cognitoResourcesStack:
      Deploy: Before
      StackName: ${self:custom.cognitoStackName}
      Resources: ${file(./resources/cognito.yml)}
      Outputs: ${file(./resources/cognito-outputs.yml)}
    dynamoDBResourcesStack:
      Deploy: Before
      StackName: ${self:custom.dynamoDBStackName}
      Resources: ${file(./resources/dynamodb.yml)}
      Outputs: ${file(./resources/dynamodb-outputs.yml)}

  appSync:
    name: ${self:service}-${self:provider.stage}-api
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      defaultAction: ALLOW
      userPoolId: ${self:custom.userPoolId}
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [LoggingAppSyncServiceRole, Arn] }
      level: ALL
    mappingTemplatesLocation: "mapping-templates"
    mappingTemplates:

      - dataSource: Words
        type: Query
        field: getWord
        request: "request/word-get-request.vtl"
        response: "response/response-generic.vtl"
      - dataSource: Words
        type: Query
        field: getWords
        request: "request/words-get-all.vtl"
        response: "response/response-to-words-query.vtl"
      - dataSource: Words
        type: Query
        field: getWordsByCategory
        request: "request/words-get-by-category.vtl"
        response: "response/response-to-words-query.vtl"
      - dataSource: Words
        type: Query
        field: getWordsByTag
        request: "request/words-get-by-tag.vtl"
        response: "response/response-to-words-query.vtl"
      - dataSource: Words
        type: Query
        field: getWordsByCategoryAndTag
        request: "request/words-get-by-category-tag.vtl"
        response: "response/response-to-words-query.vtl"
      - dataSource: Words
        type: Query
        field: getCategories
        request: "request/categories-get-all.vtl"
        response: "response/response-to-categories-query.vtl"
      
      - dataSource: Words
        type: Mutation
        field: createWord
        request: "request/word-create-request.vtl"
        response: "response/response-generic.vtl"
      - dataSource: Words
        type: Mutation
        field: deleteWord
        request: "request/word-delete-request.vtl"
        response: "response/response-generic.vtl"
      - dataSource: Words
        type: Mutation
        field: updateWord
        request: "request/word-update-request.vtl"
        response: "response/response-generic.vtl"
      - dataSource: Words
        type: Mutation
        field: createCategory
        request: "request/category-create-request.vtl"
        response: "response/response-generic.vtl"
      - dataSource: Words
        type: Mutation
        field: deleteCategory
        request: "request/category-delete-request.vtl"
        response: "response/response-generic.vtl"
      - dataSource: Words
        type: Mutation
        field: updateCategory
        request: "request/category-update-request.vtl"
        response: "response/response-generic.vtl"
      - dataSource: Words
        type: Mutation
        field: updateCategoryUp
        request: "request/category-update-up-request.vtl"
        response: "response/response-generic.vtl"
      - dataSource: Words
        type: Mutation
        field: updateCategoryDown
        request: "request/category-update-down-request.vtl"
        response: "response/response-generic.vtl"

    dataSources: 
      - type: AMAZON_DYNAMODB
        name: Words
        description: DynamoDB dataSource description
        config: 
          tableName: ${self:custom.dynamoDBTable}
          serviceRoleArn: ${self:custom.dynamodbRoleArn}

resources:
  Resources:
    LoggingAppSyncServiceRole: ${file(./resources/appsyncRole.yml):LoggingAppSyncServiceRole}
    