service:
  name: codesandbox-imager
  runtime: nodejs6.10

custom:
  s3Bucket: ${opt:stage}.imager.images
  region: eu-west-1
  serverless-offline:
    port: 5600

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 1536
  timeout: 300
  region: ${self:custom.region}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:custom.s3Bucket}/*"

  environment:
    IN_LAMBDA: "true"
    SERVERLESS_STAGE: ${opt:stage}
    BUCKET_NAME: ${self:custom.s3Bucket}

plugins:
  - serverless-webpack
  - serverless-plugin-warmup
  - serverless-offline

functions:
  imager:
    handler: src/index.handler
    warmup: prod
    package:
      include:
        - src/bin/**

  # NOTE: the following uses an "event" event (pubSub event in this case).
  # Please create the corresponding resources in the Google Cloud
  # before deploying this service through Serverless

  #second:
  #  handler: event
  #  events:
  #    - event:
  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish
  #        resource: projects/*/topics/my-topic

# you can define resources, templates etc. the same way you would in a
# Google Cloud deployment configuration
resources:
  Resources:
    ImageS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}

    ImageS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ImageS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*

    # ImageS3LoggingBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: packager.distribution.logging

  #   ImageS3BucketCDN:
  #     Type: AWS::CloudFront::Distribution
  #     Properties:
  #       DistributionConfig:
  #         Origins:
  #           - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
  #             ## An identifier for the origin which must be unique within the distribution
  #             Id: ImageS3Bucket
  #             CustomOriginConfig:
  #               HTTPPort: 80
  #               HTTPSPort: 443
  #               OriginProtocolPolicy: https-only
  #             ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
  #             # S3OriginConfig:
  #             #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
  #         Enabled: 'true'
  #         ## Uncomment the following section in case you are using a custom domain
  #         # Aliases:
  #         # - mysite.example.com
  #         # DefaultRootObject: index.html
  #         CustomErrorResponses:
  #           - ErrorCode: 500
  #             ErrorCachingMinTTL: 5
  #           - ErrorCode: 403
  #             ErrorCachingMinTTL: 0
  #           - ErrorCode: 404
  #             ErrorCachingMinTTL: 0
  #         DefaultCacheBehavior:
  #           Compress: 'true'
  #           AllowedMethods:
  #             - DELETE
  #             - GET
  #             - HEAD
  #             - OPTIONS
  #             - PATCH
  #             - POST
  #             - PUT
  #           ## The origin id defined above
  #           TargetOriginId: ImageS3Bucket
  #           ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
  #           ForwardedValues:
  #             QueryString: 'false'
  #             Cookies:
  #               Forward: none
  #           ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
  #           ViewerProtocolPolicy: redirect-to-https
  #         ## The certificate to use when viewers use HTTPS to request objects.
  #         ViewerCertificate:
  #           CloudFrontDefaultCertificate: 'true'
  #         ## Uncomment the following section in case you want to enable logging for CloudFront requests
  #         # Logging:
  #         #   IncludeCookies: 'false'
  #         #   Bucket: packager.distribution.logging.s3.amazonaws.com
  #         #   Prefix: packagers3logging
  # Outputs:
  #   S3PackagesCloudFrontOutput:
  #     Value:
  #       'Fn::GetAtt': [ ImageS3BucketCDN, DomainName ]
#  imports:
#    - path: my_template.jinja
