# serverless.yml

service: async-request-backend

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev # Set the default stage used. Default is dev
  region: us-east-1 # Overwrite the default region used. Default is us-east-1
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  stackTags: # Optional CF stack tags
    key: learning
  
functions:
  todo-create: 
    handler: src/todo.handler
    events:
      - http: put api/todo
  todo-create-command-handler:
    handler: src/todo.command
    events: 
      - sns: todo-create
  read-model-update:
    handler: src/readModel/index.update
    events:
      - sns:
          topicName: events
          filterPolicy:
            entity:
              - todo
  notify-listeners:
    handler: src/socket.notify
    events:
      - sns: events
  socket-connection:
    handler: src/socket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  log-event-save:
    handler: src/events.save
  log-event-notify:
    handler: src/events.notify

stepFunctions:
  stateMachines:
    log-event:
      definition:
        Comment: Save an event and publish it
        StartAt: SaveToDatabase
        States:
          SaveToDatabase:
            Type: Task
            Resource: 
              Fn::GetAtt: [log-event-save, Arn]
            Next: Publish
          Publish:
            Type: Task
            Resource:
              Fn::GetAtt: [log-event-notify, Arn]
            End: true
resources:
  Resources:
    command-sns:
      Type: AWS::SNS::Topic
      Properties:
        
    todo-create-queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: todo-create-queue
    todo-command-subscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !Ref todo-create-queue
        Region: ${self:provider.region}
        TopicArn: !Ref command-sns
    read-model-table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dev-read-model
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST


plugins:
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-offline-sqs
  - serverless-step-functions
  - serverless-offline-step-functions
  - serverless-offline

custom:
  serverless-offline:
    port: 4000
  dynamodb:
    stages:
      - dev
    start:
      port: 4566
      migrate: true
      noStart: true
  serverless-offline-sns:
    port: 4002
    #debug: true

  serverless-offline-step-functions:
   # resourcePrefix: ${self:service}-${self:provider.stage}-
    port: 8014
  serverless-offline-sqs:
    autoCreate: true                 # create queue if not exists
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:4566
    region: ${self:provider.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
