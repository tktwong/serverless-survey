# NOTE: update this with your service name
service: hitec-app-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /activities
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get

  createActivity:
    handler: create.activity
    events:
      - http:
          path: activity
          method: post
          cors: true

  createTeam:
    handler: create.team
    events:
      - http:
          path: teams
          method: post
          cors: true

  createStudent:
    handler: create.student
    events:
      - http:
          path: student
          method: post
          cors: true

  getActivity:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /activity/{id}
    # - method: GET request
    handler: get.activity
    events:
      - http:
          path: activity/{id}
          method: get
          cors: true

  getStudent:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /activity/{id}
    # - method: GET request
    handler: get.student
    events:
      - http:
          path: student/{id}
          method: get
          cors: true

  getTeam:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /activity/{id}
    # - method: GET request
    handler: get.team
    events:
      - http:
          path: teams/{id}
          method: get
          cors: true

  listActivities:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /activity
    # - method: GET request
    handler: list.activity
    events:
      - http:
          path: activity
          method: get
          cors: true

  listStudents:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /activity
    # - method: GET request
    handler: list.student
    events:
      - http:
          path: student
          method: get
          cors: true

  listTeams:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /activity
    # - method: GET request
    handler: list.team
    events:
      - http:
          path: teams
          method: get
          cors: true

  updateActivity:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /activity/{id}
    # - method: PUT request
    handler: update.activity
    events:
      - http:
          path: activity/{id}
          method: put
          cors: true

  updateTeam:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /activity/{id}
    # - method: PUT request
    handler: update.team
    events:
      - http:
          path: teams/{id}
          method: put
          cors: true

  updateTeamPoints:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /activity/{id}
    # - method: PUT request
    handler: update.points
    events:
      - http:
          path: teams/points/{id}
          method: put
          cors: true

  updateStudent:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /activity/{id}
    # - method: PUT request
    handler: update.student
    events:
      - http:
          path: student/{id}
          method: put
          cors: true

  deleteActivity:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /activity/{id}
    # - method: DELETE request
    handler: delete.activity
    events:
      - http:
          path: activity/{id}
          method: delete
          cors: true

  deleteTeam:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /activity/{id}
    # - method: DELETE request
    handler: delete.team
    events:
      - http:
          path: teams/{id}
          method: delete
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  # # API Gateway Errors
  Resources:
    # Resources:
    ActivityDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: activities
        AttributeDefinitions:
          - AttributeName: activityId
            AttributeType: S
        KeySchema:
          - AttributeName: activityId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    StudentsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: students
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    TeamsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: teams
        AttributeDefinitions:
          - AttributeName: teamId
            AttributeType: S
        KeySchema:
          - AttributeName: teamId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
