service: games-hired
provider:
  name: aws
  region: eu-west-2
  runtime: nodejs12.x
  memorySize: 128
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:${self:provider.region}:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt:
          - ConnectionsTable
          - Arn
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        Fn::GetAtt:
          - RoomsTable
          - Arn
    # - Effect: Allow
    #     Action:
    #       - dynamodb:DescribeStream
    #       - dynamodb:GetRecords
    #       - dynamodb:GetShardIterator
    #       - dynamodb:ListStreams
    #     Resource: arn:aws:dynamodb:*:*:table/my_table

  environment:
    APIG_ENDPOINT:
      Fn::Join:
        - ''
        - - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}

package:
  individually: true

functions:
  websocket:
    handler: api/websocket.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $default
      - websocket:
          route: $disconnect
  roomNotifier:
    handler: api/room.handler
    events:
      - stream:
        type: dynamodb
        batchSize: 1
        arn:
          Fn::GetAtt:
            - RoomsTable
            - StreamArn

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: api/resources/

plugins:
  - serverless-dynamodb-local
  - serverless-plugin-optimize
  - serverless-offline

resources:
  - Resources: ${file(api/resources/dynamodb.yml)}
