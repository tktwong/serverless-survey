# Welcome to Serverless!
service: ${self:custom.serviceName}
frameworkVersion: ">=0.0.1"

plugins:
  - serverless-s3-sync

provider:
  name: aws
  runtime: nodejs6.10
  region: ${self:custom.awsRegion}
  stage: ${self:custom.stage}
  memorySize: 512
  timeout: 10

stackTags:
  ApplicationName: ${self:custom.appName}
  CreatedBy: ${self:custom.createdBy}
  Stage: ${self:custom.stage}
  Organization: ${self:custom.organization}

custom:
  CONF: ${file(./conf/conf.json)}
  stage: ${opt:stage}
  appName: ${self:custom.CONF.appName}
  prefix: ${self:custom.appName}-${opt:stage}
  serviceName: ${self:custom.CONF.serviceName}
  bucketName: ${self:custom.CONF.bucketName}
  bucketNameSubdomain: www.${self:custom.CONF.bucketName}
  createdBy: ${self:custom.CONF.createdBy}
  organization: ${self:custom.CONF.organization}
  # AWS Specific confs
  awsAccountId: ${self:custom.CONF.awsAccountId}
  awsRegion: ${self:custom.CONF.awsRegion}
  # S3 Bucket Configurations
  contentPath: ${self:custom.CONF.contentPath}
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: ${self:custom.contentPath}
      acl: public-read
      followSymlinks: true
      defaultContentType: text/html
      params:
        - index.html:
            CacheControl: 'no-cache'
        - "*.js":
            CacheControl: 'public, max-age=31536000'

package:
  exclude:
    tests/**
    /.*
    #node_modules

resources:
  Resources:
    # create bucket here for images
    StaticSiteSubdomain:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketNameSubdomain}
        WebsiteConfiguration:
          RedirectAllRequestsTo: 
            HostName: ${self:custom.bucketName}
            Protocol: http
    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.bucketName}
        WebsiteConfiguration:
          IndexDocument: index.html  
          ErrorDocument: index.html  
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticSite"
                    },
                    "/*"
                  ]
                ]