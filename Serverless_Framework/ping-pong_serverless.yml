service: pingpong-front

plugins:
  - serverless-s3-remover
  - serverless-s3-sync
  # - serverless-certificate-creator

custom:
  region: ${opt:region, 'eu-west-1'}
  bucketName: pingpong
  remover:
    buckets:
      - ${self:custom.bucketName}
      - ${self:custom.bucketName}-accesslogs
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: build

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.region}
  profile: aws-perso-test

package:
  exclude:
    - 'node_modules/**'
    - 'build/**'
    - 'public/**'

ressources:
  Ressources:
    BucketAccessLogs:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.bucketName}-accesslogs
        AccessControl: LogDeliveryWrite
    PingPongApp:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.bucketName}
        WebsiteConfiguration:
          ErrorDocument: "error.html"
          IndexDocument: "index.html"
        LoggingConfiguration:
          DestinationBucketName:
            Ref: BucketAccessLogs
    S3AccessPolicy:
      Type: AWS::S3::BucketPolicy
      DependsOn:
        - PingPongApp
        - CloudFrontOriginAccessIdentity
      Properties:
        Bucket:
          Ref: PingPongApp
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource:
                - Fn::Join: [
                    '', [
                      'arn:aws:s3:::',
                      {
                        'Ref': 'PingPongApp'
                      },
                      '/*'
                    ]
                  ]
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "pingpingpong CloudFrontOrigin"
    CloudFrontDistribution:
      Type: 'AWS::CloudFront::Distribution'
      DependsOn:
        - PingPongApp
        - CloudFrontOriginAccessIdentity
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.bucketName}.s3.amazonaws.com
              OriginPath: ''
              Id: S3BucketOrigin
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - 
                      - 'origin-access-identity/cloudfront/'
                      - Ref: CloudFrontOriginAccessIdentity
          Comment: 'CloudFront origin for ${self:custom.bucketName}'
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ErrorCachingMinTTL: 0
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ErrorCachingMinTTL: 0
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: S3BucketOrigin
            Compress: true
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: 'true'
          HttpVersion: 'http2'
          PriceClass: 'PriceClass_100'
          ViewerCertificate:
              CloudFrontDefaultCertificate: true