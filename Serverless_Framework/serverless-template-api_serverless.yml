service: ${file(serverless.config.js):repositoryName}

frameworkVersion: ^2.2.0

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dotenv-plugin
  - serverless-configuration
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  cfnRole: arn:${env:AWS_PARTITION}:iam::${env:AWS_ACCOUNT_ID}:role/${self:service}-cloudformation
  stage: ${opt:stage, "local"}
  apiKeys:
    - ${self:service}-${opt:stage, "local"}
  apiGateway:
    restApiId: ${env:AWS_REST_API_ID}
    restApiRootResourceId: ${env:AWS_REST_API_ROOT_RESOURCE_ID}
  tracing:
    lambda: true
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${opt:stage, "local"}

# naming shorthand
#   since Lamba function names need to be less than 64 characters
# C - Create (HTTP PUT)
# R - Read (HTTP GET)
# U - Update (HTTP POST)
# D - Delete (HTTP DELETE)
# T - Task

functions:
  example-R-v1:
    role: arn:${env:AWS_PARTITION}:iam::${env:AWS_ACCOUNT_ID}:role/${self:service}-${opt:stage, "local"}
    handler: src/index.exampleGetV1
    events:
      - http:
          path: api/v1/example
          method: get
          private: true
  example-C-v1:
    role: arn:${env:AWS_PARTITION}:iam::${env:AWS_ACCOUNT_ID}:role/${self:service}-${opt:stage, "local"}
    handler: src/index.examplePutV1
    events:
      - http:
          path: api/v1/example
          method: put
          private: true
  example-T-v1:
    role: arn:${env:AWS_PARTITION}:iam::${env:AWS_ACCOUNT_ID}:role/${self:service}-${opt:stage, "local"}
    handler: src/index.exampleScheduledTaskV1
    events:
      - schedule:
          rate: rate(60 minutes)
          enabled: ${self:custom.eventsEnabled.${opt:stage, self:provider.stage}}

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${opt:stage, "local"}-${self:service}-table
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        BillingMode: PAY_PER_REQUEST

custom:
  eventsEnabled:
    local: true
    nonlive: true
    live: true
  serverless-offline:
    useChildProcesses: true
    noPrependStageInUrl: true
    prefix: ${file(serverless.config.js):serviceName}
  bundle:
    sourcemaps: true
    caching: true
    stats: true
    linting: true
    fixPackages:
      - 'formidable@1.x'
    packager: yarn
  serverless-configuration:
    local:
      del:
        - provider.apiGateway.restApiId
        - provider.apiGateway.restApiRootResourceId
  dynamodb:
    stages:
      - local
    start:
      port: 8100
      dbPath: .dynamodb
      migrate: true
