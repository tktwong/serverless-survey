service: apt-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-split-stacks

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  residentsTable: ${self:custom.stage}-residents
  apartsTable: ${self:custom.stage}-aparts
  maintanancesTable: ${self:custom.stage}-maintanances
  paymentsTable: ${self:custom.stage}-payments
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  splitStacks:
    perFunction: true
    perType: false


provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    residentsTable: ${self:custom.residentsTable}
    apartsTable: ${self:custom.apartsTable}
    maintanancesTable: ${self:custom.maintanancesTable}
    paymentsTable: ${self:custom.paymentsTable}
    stripeSecretKey: ${self:custom.environment.stripeSecretKey}
    region: ${self:custom.environment.region}
    userPoolClientId: ${self:custom.environment.userPoolClientId}
    userPoolId: ${self:custom.environment.userPoolId}
    identityPoolId: ${self:custom.environment.identityPoolId}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ ResidentsTable, Arn ]
        - "Fn::GetAtt": [ ApartsTable, Arn ]
        - "Fn::GetAtt": [ MaintanancesTable, Arn ]
        - "Fn::GetAtt": [ PaymentsTable, Arn ]
        - "Fn::Join": ['/', ["Fn::GetAtt": [ ResidentsTable, Arn ], 'index', 'emailIndex']]

functions:

  # Residents APIs
  createResident:
    handler: functions/residents/create.resident
    events:
      - http:
          path: residents
          method: post
          cors: true
          authorizer: aws_iam
  getResident:
    handler: functions/residents/get.resident
    events:
      - http:
          path: residents/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getResidentByEmail:
    handler: functions/residents/get.residentByEmail
    events:
      - http:
          path: residents/email/{email}
          method: get
          cors: true
          authorizer: aws_iam
  updateResident:
    handler: functions/residents/update.resident
    events:
      - http:
          path: residents/{id}
          method: put
          cors: true
          authorizer: aws_iam
  deleteResident:
    handler: functions/residents/delete.resident
    events:
      - http:
          path: residents/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billing:
    handler: functions/billing.main
    events:
      - http:
          path: billings
          method: post
          cors: true
          authorizer: aws_iam
  customMessage:
    handler: functions/residents/customMessage.main
    events:
      - http:
          path: customMessage
          method: get
          cors: true
          authorizer: aws_iam
  # Bank Account
  updateBankAccount:
    handler: functions/residents/update.updateBankAccount
    events:
      - http:
          path: residents/updateBankAccount/{id}
          method: put
          cors: true
          authorizer: aws_iam
  # Card
  updateCard:
    handler: functions/residents/update.updateCard
    events:
      - http:
          path: residents/updateCard/{id}
          method: put
          cors: true
          authorizer: aws_iam
  # Autopay
  updateAutopay:
    handler: functions/residents/update.updateAutopay
    events:
      - http:
          path: residents/updateAutopay/{id}
          method: put
          cors: true
          authorizer: aws_iam
  
  # Aparts APIs
  createApart:
    handler: functions/aparts/create.apart
    events:
      - http:
          path: aparts
          method: post
          cors: true
          authorizer: aws_iam
  getApart:
    handler: functions/aparts/get.apart
    events:
      - http:
          path: aparts/{aid}
          method: get
          cors: true
          authorizer: aws_iam
  listAparts:
    handler: functions/aparts/list.apart
    events:
      - http:
          path: aparts/list/{aid}
          method: get
          cors: true
          authorizer: aws_iam
  listApartsWithFilter:
    handler: functions/aparts/listWithFilter.apart
    events:
      - http:
          path: aparts/list
          method: get
          cors: true
          authorizer: aws_iam
  updateApart:
    handler: functions/aparts/update.apart
    events:
      - http:
          path: aparts/info/{aid}
          method: put
          cors: true
          authorizer: aws_iam
  updateMoveOutDate:
    handler: functions/aparts/update.earlyMoveOut
    events:
      - http:
          path: aparts/earlyMoveOut/{aid}
          method: put
          cors: true
          authorizer: aws_iam
  updateAnnouncement:
    handler: functions/aparts/updateAnnouncement.apart
    events:
      - http:
          path: aparts/{aid}
          method: put
          cors: true
          authorizer: aws_iam
  addResidentInApart:
    handler: functions/aparts/update.addResident
    events:
      - http:
          path: aparts/{aid}/add
          method: put
          cors: true
          authorizer: aws_iam
  removeResidentInApart:
    handler: functions/aparts/update.removeResident
    events:
      - http:
          path: aparts/{aid}/remove/{rid}
          method: put
          cors: true
          authorizer: aws_iam
  confirmAnnouncement:
    handler: functions/aparts/update.confirmAnnouncement
    events:
      - http:
          path: aparts/{aid}/confirmAnnouncement/{rid}
          method: put
          cors: true
          authorizer: aws_iam
  alertLatePayment:
    handler: functions/aparts/updateAnnouncement.alertLatePayment
    events:
      - http:
          path: aparts/alertLatePayment/{aid}
          method: put
          cors: true
          authorizer: aws_iam
  updateMoveOut: # Scan all aparts everyday for 60 day notice
    handler: functions/aparts/update.updateMoveOut
    events:
      - http:
          path: aparts/updateMoveOut
          method: put
          cors: true
          authorizer: aws_iam
  renew:
    handler: functions/aparts/update.renew
    events:
      - http:
          path: aparts/renew/{aid}
          method: put
          cors: true
          authorizer: aws_iam
  updateAutopayOnApart:
    handler: functions/aparts/update.updateAutopay
    events:
      - http:
          path: aparts/updateAutopay/{aid}
          method: put
          cors: true
          authorizer: aws_iam
  
  # Maintanances APIs
  createRequest:
    handler: functions/maintanances/create.request
    events:
      - http:
          path: requests
          method: post
          cors: true
          authorizer: aws_iam
  listRequests:
    handler: functions/maintanances/list.request
    events:
      - http:
          path: requests/list
          method: get
          cors: true
          authorizer: aws_iam
  updateRequestNote:
    handler: functions/maintanances/updateNote.request
    events:
      - http:
          path: requests/updateNote/{requestId}
          method: put
          cors: true
          authorizer: aws_iam
  updateStatus:
    handler: functions/maintanances/updateStatus.request
    events:
      - http:
          path: requests/updateStatus/{requestId}
          method: put
          cors: true
          authorizer: aws_iam
  # Payments APIs
  listPayments:
    handler: functions/payments/list.payments
    events:
      - http:
          path: payments/{aid}
          method: get
          cors: true
          authorizer: aws_iam
  createPayment:
    handler: functions/payments/create.payments
    events:
      - http:
          path: payments
          method: post
          cors: true
          authorizer: aws_iam
  deletePayment:
    handler: functions/payments/delete.payments
    events:
      - http:
          path: payments/{aid}
          method: delete
          cors: true
          authorizer: aws_iam
  chargeMonthly:
    handler: functions/payments/create.chargeMonthly
    events:
      - http:
          path: payments/chargeMonthly
          method: post
          cors: true
          authorizer: aws_iam
  autopayCharge:
    handler: functions/payments/create.autopayCharge
    events:
      - http:
          path: payments/autopayCharge
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
