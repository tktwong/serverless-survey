service: btx-graph-server

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list

custom:
  tables:
    condition: '${self:service}-${self:provider.stage}-table-condition'
    injection: '${self:service}-${self:provider.stage}-table-injection'
    session: '${self:service}-${self:provider.stage}-table-session'
    patient: '${self:service}-${self:provider.stage}-table-patient'
    patient_condition: '${self:service}-${self:provider.stage}-table-patient-condition'
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ConditionDynamoDBTable", "Arn" ] }
        
        - { "Fn::GetAtt": ["InjectionDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["SessionDynamoDBTable", "Arn" ] }
      
        - { "Fn::GetAtt": ["PatientDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["PatientConditionDynamoDBTable", "Arn" ] }
        
  environment:
    TABLE_CONDITION: ${self:custom.tables.condition}
    TABLE_INJECTION: ${self:custom.tables.injection}
    TABLE_SESSION: ${self:custom.tables.session}
    TABLE_PATIENT: ${self:custom.tables.patient}
    TABLE_PATIENT_CONDITION: ${self:custom.tables.patient_condition}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    environment: 
      # session_arn: ${self:resources.Outputs.App.Value}
      statemachine_arn: ${self:resources.Outputs.App.Value}
  # hello: 
  #   handler: index.hello
  uploadstep: 
    handler: index.uploadstep


stepFunctions:
  stateMachines:
    uploadstepfunc:
      name: 'uploadstepfunc'
      definition:
        Comment: "A Hello World example"
        StartAt: UploadFunc
        States:
          UploadFunc:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-uploadstep"
            End: true

resources:
  Resources:
    ConditionDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: condition_id
            AttributeType: N
         
        KeySchema:
          -
            AttributeName: condition_id
            KeyType: HASH
        # BillingMode: PAY_PER_REQUEST
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:custom.tables.condition}
    InjectionDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: injection_id
            AttributeType: N
         
        KeySchema:
          -
            AttributeName: injection_id
            KeyType: HASH
        # BillingMode: PAY_PER_REQUEST
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:custom.tables.injection}
    SessionDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: session_id	
            AttributeType: N
         
        KeySchema:
          -
            AttributeName: session_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:custom.tables.session}
        # GlobalSecondaryIndexes:
        # - IndexName: "patient_id-index"
        #   KeySchema:
        #   - AttributeName: "patient_id"
        #     KeyType: HASH
        #   Projection:
        #     ProjectionType: "ALL"
        #   ProvisionedThroughput:
        #     ReadCapacityUnits: '20'
        #     WriteCapacityUnits: '20'
    PatientDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: patient_id	
            AttributeType: N
         
        KeySchema:
          -
            AttributeName: patient_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:custom.tables.patient}
    PatientConditionDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: patient_condition_id	
            AttributeType: N
         
        KeySchema:
          -
            AttributeName: patient_condition_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:custom.tables.patient_condition}
  Outputs:
    App:
      Description: upload item step function
      Value:
        Ref: Uploadstepfunc
    
    