
service: potassium40

custom:
  aws_region: us-east-1
  bucketName: p40.${sls:instanceId} # random id
  queueName0: p40-scan-queue0
  queueName1: p40-scan-queue1
  queueName2: p40-scan-queue2
  queueName3: p40-scan-queue3
  dlQueueName: p40-scan-dl
  stage: functions
  retry: 1 # set to one for no retry (fastest)
  visibilityTimeout: 90
  functionTimeout: 60

resources:
  Resources:

    p40Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        AccessControl: Private
    
    scanQueue0:
      Type: AWS::SQS::Queue
      DependsOn: deadLetterQueue
      Properties:
        QueueName: ${self:custom.queueName0}
        MessageRetentionPeriod: 1200
        VisibilityTimeout: ${self:custom.visibilityTimeout}
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - deadLetterQueue
              - Arn
          maxReceiveCount: ${self:custom.retry}

    scanQueue1:
      Type: AWS::SQS::Queue
      DependsOn: deadLetterQueue
      Properties:
        QueueName: ${self:custom.queueName1}
        MessageRetentionPeriod: 1200
        VisibilityTimeout: ${self:custom.visibilityTimeout}
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - deadLetterQueue
              - Arn
          maxReceiveCount: ${self:custom.retry}

    scanQueue2:
      Type: AWS::SQS::Queue
      DependsOn: deadLetterQueue
      Properties:
        QueueName: ${self:custom.queueName2}
        MessageRetentionPeriod: 1200
        VisibilityTimeout: ${self:custom.visibilityTimeout}
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - deadLetterQueue
              - Arn
          maxReceiveCount: ${self:custom.retry}

    scanQueue3:
      Type: AWS::SQS::Queue
      DependsOn: deadLetterQueue
      Properties:
        QueueName: ${self:custom.queueName3}
        MessageRetentionPeriod: 1200
        VisibilityTimeout: ${self:custom.visibilityTimeout}
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - deadLetterQueue
              - Arn
          maxReceiveCount: ${self:custom.retry}
    
    deadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.dlQueueName}
        MessageRetentionPeriod: 1209600

provider:
  name: aws
  runtime: python3.7
  logRetentionDays: 1
  stage: ${self:custom.stage}
  region: ${self:custom.aws_region}
  logRetentionInDays: 1  # don't need so many
  iamRoleStatements:
  # Bucket Permissions
  - Effect: Allow
    Action:
    - s3:ListBucket
    Resource:
      Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - ${self:custom.bucketName}
  # Bucket **Objects** Permissions
  - Effect: Allow
    Action:
    - s3:PutObject
    - s3:GetObject
    - s3:DeleteObject
    - s3:PutObjectAcl
    - s3:GetObjectAcl  # ACL permissions required for file_upload
    - s3:AbortMultipartUpload
    Resource:
      Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - ${self:custom.bucketName}
          - "/*"
  - Effect: Allow
    Action:
      - sqs:SendMessage
      - sqs:GetQueueUrl
    Resource:
      - Fn::GetAtt:
          - scanQueue0
          - Arn
      - Fn::GetAtt:
          - scanQueue1
          - Arn
      - Fn::GetAtt:
          - scanQueue2
          - Arn
      - Fn::GetAtt:
          - scanQueue3
          - Arn
  environment:
    bucket_name: ${self:custom.bucketName}
    scan_queue0:
      Ref: scanQueue0
    scan_queue1:
      Ref: scanQueue1
    scan_queue2:
      Ref: scanQueue2
    scan_queue3:
      Ref: scanQueue3

layers:
  majestic:
    package:
      artifact: layers/majestic_million.csv.zip  # Majestic 1 million


functions:
  get_robots:
    handler: get_robots.get_robots
    memorySize: 1792
    timeout: ${self:custom.functionTimeout}
    description: Use Lambda functions to get robots.txt file from Cisco Umbrella 1 million
    layers:
      - {Ref: MajesticLambdaLayer}
      - arn:aws:lambda:${self:provider.region}:113088814899:layer:Klayers-python37-requests:3
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - scanQueue0
              - Arn
          batchSize: 1
      - sqs:
          arn:
            Fn::GetAtt:
              - scanQueue1
              - Arn
          batchSize: 1
      - sqs:
          arn:
            Fn::GetAtt:
              - scanQueue2
              - Arn
          batchSize: 1
      - sqs:
          arn:
            Fn::GetAtt:
              - scanQueue3
              - Arn
          batchSize: 1
    reservedConcurrency: 800
  compress_object:
    handler: compress_object.main
    memorySize: 1792
    timeout: 600
    description: Compress specific object in s3 bucket using gzip
  clear_bucket:
    handler: clear_bucket.clear_bucket
    memorySize: 256
    timeout: 600
    description: Delete all items from bucket


package:
  exclude:
    - venv/**
    - .gitignore
    - node_modules/**
    - package.json
    - package-lock.json
    - layers/**
