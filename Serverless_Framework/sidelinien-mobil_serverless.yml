service: sidelinien-api

plugins:
  - serverless-offline
  - serverless-api-compression
  - serverless-webpack
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

package:
  exclude:
    - mocks/**
    - node_modules/aws-sdk/**
    - node_modules/puppeteer/.local-chromium/**

custom:
  stage: ${opt:stage, self:provider.stage}
  clientBucket: sidelinien-${self:custom.stage}-client
  #environment: ${file(./../env.yml):${self:custom.stage}, file(./../env.yml):default}
  contentCompression: 1024

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      packagePath: "./package.json"
      forceExclude:
        - aws-sdk

  cloudfrontInvalidate:
    distributionIdKey: DistributionId
    items:
      - "/*"
      - "/index.html"
  s3Sync:
    - bucketName: ${self:custom.clientBucket}
      localDir: ./../client/build
      acl: public-read
      params:
        - index.html:
            CacheControl: "no-cache"
        - "*.js":
            CacheControl: "public, max-age=31536000"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-north-1
  profile: allora
  individually: true

  layers:
    # TODO: Compile yourself and use own binary!
    # https://www.serverless.com/blog/publish-aws-lambda-layers-serverless-framework
    - arn:aws:lambda:eu-north-1:764866452798:layer:chrome-aws-lambda:19

  environment:
    STAGE: ${self:custom.stage}
    REGION: ${self:provider.region}

functions:
  sendShout:
    handler: src/endpoints/sendShout.main
    events:
      - http:
          path: /sendshout
          method: post
          cors: true
  getShouts:
    handler: src/endpoints/getShouts.main
    events:
      - http:
          path: /getshouts
          method: get
          cors:
            origin: "*"
            headers:
              - Authorization
  getCredentials:
    handler: src/endpoints/getCredentials.main
    events:
      - http:
          path: /getcredentials
          method: post
          cors: true
  getSecurityToken:
    handler: src/endpoints/getSecurityToken.main
    memorySize: 1536
    timeout: 30
    events:
      - http:
          path: /getsecuritytoken
          method: post
          cors: true

resources:
  Resources:
    # Credits: https://coletiv.com/blog/how-to-use-aws-cloud-formation-to-setup-the-infrastructure-for-a-static-website/
    # Create the bucket to contain the website HTML
    clientBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.clientBucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          ErrorDocument: "index.html"
          IndexDocument: "index.html"

    # Configure CloudFront
    CloudFrontDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          # Aliases:
          #   - sidelinien.allora.dk
          CustomErrorResponses:
            - ErrorCode: 403 # not found
              ResponseCode: 404
              ResponsePagePath: "/index.html"
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            DefaultTTL: 3600 # in seconds
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
            MaxTTL: 86400 # in seconds
            MinTTL: 60 # in seconds
            TargetOriginId: s3-website-origin
            ViewerProtocolPolicy: "allow-all"
          # This DefaultRootObject configuration is not enough.
          DefaultRootObject: "/index.html"
          Enabled: true
          HttpVersion: http2
          PriceClass: "PriceClass_All"
          Origins:
            - CustomOriginConfig:
                HTTPPort: "80"
                HTTPSPort: "443"
                OriginProtocolPolicy: http-only
              DomainName: "${self:custom.clientBucket}.s3-website.${self:provider.region}.amazonaws.com"
              Id: s3-website-origin

  Outputs:
    Bucket:
      Description: "S3 Bucket Name"
      Value: !Ref clientBucket
    BucketUrl:
      Description: "S3 Bucket Url"
      Value: !GetAtt "clientBucket.WebsiteURL"
    DistributionId:
      Description: "CloudFront Distribution ID"
      Value: !Ref CloudFrontDistribution
    Domain:
      Description: "Cloudfront Domain"
      Value: !GetAtt CloudFrontDistribution.DomainName
