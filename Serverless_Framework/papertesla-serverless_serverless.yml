service: papertesla-api

org: arroyodev
app: papertesla-api

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  stackName: ${self:custom.stack}
  tags:
    PROJECT: papertesla
  environment:
    DB_PRODUCTS: ${self:service}-products-${opt:stage, self:provider.stage}
    DB_ORDERS: ${self:service}-orders-${opt:stage, self:provider.stage}

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  stack: papertesla-api-${self:custom.stage}
  tableThroughput: 1
  customDomain:
    domainName: api.papertesla.com
    basePath: v1
    certificateArn: arn:aws:acm:us-east-1:100482411214:certificate/76a30e34-f26b-427d-88c4-133d9f59f42f
  pythonRequirements:
    dockerizePip: false
    zip: true
    usePoetry: false
  dynamodb:
    stages:
      - dev
    start:
      seed: true
      migrate: true
    seed:
      test:
        sources:
          - table: ${self:provider.environment.DB_PRODUCTS}
            sources: [./resources/seed/products.json]
          - table: ${self:provider.environment.DB_ORDERS}
            sources: [./resources/seed/orders.json]

package:
  exclude:
    - .git/**
    - .vscode/**
    - .sass-cache/**
    - amplify/**
    - node_modules/**
    - docs/**
    - schema/**
    - resources/**

functions:
  getProducts:
    handler: papertesla/store.get_products
    role: 'ApiHandler'
    events:
      - http:
          path: products
          method: get
          cors: true

  createOrder:
    handler: papertesla/store.create_order
    role: 'ApiHandler'
    events:
      - http:
          path: orders
          method: post
          cors: true

resources:
  # Databases
  - ${file(resources/dynamodb/products.yml)}
  - ${file(resources/dynamodb/orders.yml)}
  # Roles
  - ${file(resources/roles.yml)}
