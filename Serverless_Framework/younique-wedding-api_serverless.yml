service: younique-wedding-api-2

package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-younique-wedding
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  stage: dev
  region: eu-central-1

  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [YouniqueWeddingTable, Arn]

    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource:
        - "*"

functions:
  getDashboard:
    handler: functions/getDashboard.main
    events:
      - http:
          path: dashboard
          method: get
          cors: true
          authorizer: aws_iam

  getTodos:
    handler: functions/getTodos.main
    events:
      - http:
          path: todos
          method: get
          cors: true
          authorizer: aws_iam

  createTodo:
    handler: functions/createTodo.main
    events:
      - http:
          path: todos
          method: post
          cors: true
          authorizer: aws_iam

  deleteTodo:
    handler: functions/deleteTodo.main
    events:
      - http:
          path: todos
          method: delete
          cors: true
          authorizer: aws_iam

  updateTodo:
    handler: functions/updateTodo.main
    events:
      - http:
          path: todos
          method: put
          cors: true
          authorizer: aws_iam

  getGuests:
    handler: functions/getGuests.main
    events:
      - http:
          path: guests
          method: get
          cors: true
          authorizer: aws_iam

  createGuest:
    handler: functions/createGuest.main
    events:
      - http:
          path: guests
          method: post
          cors: true
          authorizer: aws_iam

  deleteGuest:
    handler: functions/deleteGuest.main
    events:
      - http:
          path: guests
          method: delete
          cors: true
          authorizer: aws_iam

  updateGuest:
    handler: functions/updateGuest.main
    events:
      - http:
          path: guests
          method: put
          cors: true
          authorizer: aws_iam

  getBudgetItems:
    handler: functions/getBudgetItems.main
    events:
      - http:
          path: budget
          method: get
          cors: true
          authorizer: aws_iam

  createBudgetItem:
    handler: functions/createBudgetItem.main
    events:
      - http:
          path: budget
          method: post
          cors: true
          authorizer: aws_iam

  deleteBudgetItem:
    handler: functions/deleteBudgetItem.main
    events:
      - http:
          path: budget
          method: delete
          cors: true
          authorizer: aws_iam

  updateBudgetItem:
    handler: functions/updateBudgetItem.main
    events:
      - http:
          path: budget
          method: put
          cors: true
          authorizer: aws_iam

  sendFeedbackEmail:
    handler: functions/sendFeedbackEmail.main
    events:
      - http:
          path: sendFeedbackEmail
          method: post
          cors: true
          authorizer: aws_iam

  getSettings:
    handler: functions/getSettings.main
    events:
      - http:
          path: settings
          method: get
          cors: true
          authorizer: aws_iam

  updateSettings:
    handler: functions/updateSettings.main
    events:
      - http:
          path: settings
          method: put
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/database-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
