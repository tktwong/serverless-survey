service: edvardgig-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  notesTable: edvardgig-${self:custom.stage}-notes
  licensesTable: edvardgig-${self:custom.stage}-licenses
  productsTable: edvardgig-${self:custom.stage}-products
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    # Tables
    notesTable: ${self:custom.notesTable}
    licensesTable: ${self:custom.licensesTable}
    productsTable: ${self:custom.productsTable}
    # Stripe
    stripeSecretKey: ${self:custom.environment.stripeSecretKey}
    #De/encryption
    privateKey: ${self:custom.environment.privateKey}
    privateSecret: ${self:custom.environment.privateSecret}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]
        - "Fn::GetAtt": [ LicensesTable, Arn ]
        - "Fn::GetAtt": [ ProductsTable, Arn ]

functions:
  - ${file(services/notes/notes.yml)}
  - ${file(services/licenses/licenses.yml)}
  - ${file(services/products/products.yml)}
  - ${file(services/billing/billing.yml)}

# Create our resources with separate CloudFormation templates
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
