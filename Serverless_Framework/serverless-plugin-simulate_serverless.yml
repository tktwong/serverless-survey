service: docker

provider:
  name: aws
  runtime: nodejs4.3
  region: us-east-1

plugins:
  - serverless-plugin-simulate

custom:
  simulate:
    services: docker-compose.yml

functions:
  authorizer:
    handler: functions/authorizer.handler
    type: 'TOKEN'
    identitySource: method.request.header.Authorization

  bffHandler:
    handler: functions/bff.handler
    environment:
      BFF_BACKEND_FUNC: ${self:service}-${opt:stage, self:provider.stage}-bffBackend
    events:
      - http:
          path: bff
          method: GET

  bffBackend:
    handler: functions/bff.backend

  error:
    handler: functions/lambda-proxy.unhandled
    events:
      - http:
          path: error/unhandled
          method: GET

  unauthorized:
    handler: functions/lambda-proxy.success
    events:
      - http:
          path: unauthorized
          method: GET
          authorizer: authorizer

  lambda:
    handler: functions/lambda.success
    events:
      - http:
          integration: lambda
          path: lambda/{part}
          method: GET
          authorizer:
            name: authorizer
            type: 'TOKEN'
            identitySource: method.request.header.Authorization
      - http:
          integration: lambda
          path: lambda
          method: POST
          authorizer: authorizer
      - http:
          integration: lambda
          path: lambda
          method: PUT
          request:
            template:
              application/xml: '{ "stage" : "$context.stage" }'
              application/json: '{ "httpMethod" : "$context.httpMethod" }'
          response:
            headers:
              My-Header: "'some value'"
            template: $input.path('$')

  lambdaError:
    handler: functions/lambda.error
    events:
      - http:
          path: error/lambda
          method: GET
          request:
            template:
              application/xml: '{ "stage" : "$context.stage" }'
              application/json: '{ "httpMethod" : "$context.httpMethod" }'
          response:
            template: $input.path('$')
            statusCodes:
                409:
                    pattern: '.*"statusCode":409,.*'
                    template:
                      application/json: $input.path("$.errorMessage") # JSON return object
                      application/xml: $input.path("$.errorMessage") # XML return object
                    headers:
                      My-Header: "'some value'"

  lambdaProxy:
    handler: functions/lambda-proxy.success
    events:
      - http:
          path: lambda-proxy/{part}
          method: GET
          authorizer:
            name: authorizer
            type: 'TOKEN'
            identitySource: method.request.header.Authorization
      - http:
          path: lambda-proxy
          method: POST
          authorizer: authorizer
      - http:
          path: lambda-proxy
          method: PUT

  lambdaProxyError:
    handler: functions/lambda-proxy.error
    events:
      - http:
          path: error/lambda-proxy
          method: GET

  python:
    handler: functions/handler.endpoint
    runtime: python2.7
    events:
      - http:
          path: ping
          method: GET

  anyMethod:
    handler: functions/lambda-proxy.success
    events:
      - http:
          path: any/{greedy+}
          method: ANY


  timeout:
    handler: functions/timeout.handler
    timeout: 1
    memorySize: 128
