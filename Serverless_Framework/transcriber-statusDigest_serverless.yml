# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: transcriber-statusdigest

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1
  stage: dev #cli build params will override this!!
  stackName: TranscriberDigest${self:custom.myStage}

custom:
  myStage: ${opt:stage, self:provider.stage} #use the --stage CLI option if it exists, or use provider.stage

plugins:
  -serverless-plugin-typescript
  -serverless-offline
package:
  exclude:
    - node_modules/**/*
  include:
    - node_modules/es-abstract/**
    - node_modules/xml2js/**
    - node_modules/moment-timezone/**
    - node_modules/moment/**
    - node_modules/save/**
    - node_modules/duplexer/**
    - node_modules/event-stream/**
    - node_modules/from/**
    - node_modules/lodash/**
    - node_modules/lodash.assign/**
    - node_modules/map-stream/**
    - node_modules/mingo/**
    - node_modules/pause-stream/**
    - node_modules/split/**
    - node_modules/stream-combiner/**
    - node_modules/through/**
    - node_modules/sax/**
    - node_modules/xmlbuilder/**
    - node_modules/util.promisify/**
    - node_modules/define-properties/**
    - node_modules/object-keys/**
    - node_modules/object.getownpropertydescriptors/**
    - node_modules/has/**
    - node_modules/function-bind/**
    - node_modules/es-to-primitive/**
    - node_modules/is-callable/**
    - node_modules/is-date-object/**
    - node_modules/is-symbol/**
    - node_modules/has-symbols/**
    - node_modules/object-inspect/**
    - node_modules/is-regex/**
functions:
  transcriber-statusDigest:
    handler: src/index.handler
    name: transcriber-statusdigest-${self:custom.myStage} # optional, Deployed Lambda name
    description: send nightly status email # optional, Description to publish to AWS
    
    events:
      - schedule: 
        name: elevenpmest
        description: 'Run at 11PM'
        rate: cron(0 4 * * ? *)
        enabled: true
       
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

    runtime: nodejs10.x # optional overwrite, default is provider runtime
    memorySize: 1024 # optional, in MB, default is 1024
    timeout: 90 # optional, in seconds, default is 6
    environment:
      SIL_TR_HOST: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_HOST}
      SIL_TR_URLPATH: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_URLPATH}
      SIL_TR_FROM_EMAIL: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_FROM_EMAIL}
      SIL_TR_NOTIFYTIMEMINUTES: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_NOTIFYTIMEMINUTES}

    role: ${file(./serverless.env.yml):${self:custom.myStage}.SIL_TR_LAMBDA_ROLE}
    deploymentBucket:
      name: sil-transcriber-digest # Deployment bucket name. Default is generated by the framework


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
