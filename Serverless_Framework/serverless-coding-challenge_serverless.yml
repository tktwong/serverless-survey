service: serverless-coding-challenge

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-southeast-2
  memorySize: 128
  timeout: 3
  versionFunctions:
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"
    - Effect: Allow
      Action:
        - cognito-idp:AdminGetUser
      Resource: "*" # In PROD the access will be provided based on resource wise

custom:
  userInfoTable: userInfoTable

functions:
  verifyUser:
    handler: verify.handler
    events:
      - http:
          path: users/verify
          method: get
          cors: true
    environment:
      userInfoTable: ${self:custom.userInfoTable}
      userPool: !Ref CognitoUserPool

resources:
  Resources:
    UserInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: UserID
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: UserID
            KeyType: HASH
        TableName: ${self:custom.userInfoTable}

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: name
          - Name: gender

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
