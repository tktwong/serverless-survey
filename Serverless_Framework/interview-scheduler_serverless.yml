# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: interview-scheduler # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
    name: aws
    runtime: nodejs4.3
    region: ap-southeast-2
    config: ${file(./serverless.env.yml)}
    iamRoleStatements:
        - Effect: "Allow"
          Action:
              - "dynamodb:GetItem"
              - "dynamodb:BatchGetItem"
              - "dynamodb:Query"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:Scan"
          Resource:
              - "arn:aws:dynamodb:${self:provider.region}:${self:provider.config.${opt:stage}.account}:table/${self:service}-interview-data"


functions:
    createInterview:
        handler: functions/createInterview.createInterview
        memorySize: 128
        timeout: 3
        events:
            - http:
                path: apply
                method: post
                integration: lambda-proxy
                cors: true

    getAllInterviewList:
            handler: functions/getAllInterviewList.getAllInterviewList
            events:
                - http:
                    path: getAllInterviewList
                    method: get
                    integration: lambda-proxy
                    cors: true

    updateTime:
            handler: functions/updateTime.setTime
            events:
                - http:
                    path: updateTime
                    method: post
                    integration: lambda-proxy
                    cors: true

    responseHandler:
        handler: functions/responseHandler.responseHandler
        events:
            - http:
                path: textResponse
                method: post
                integration: lambda-proxy
                cors: true

    sendReminder:
                handler: functions/sendReminder.sendReminder
                events:
                    - http:
                        path: sendReminder
                        method: post
                        integration: lambda-proxy
                        cors: true

resources:
    Resources: ${file(./additional-cfn.json)}


# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**


# resources:
#   Resources: ${file(./additional-cfn.json)}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
