org: shindy
app: guru
service: appsync-api

plugins:
  - serverless-appsync-plugin

provider:
  name: aws
  region: "us-east-1"
  runtime: nodejs12.x
  stage: ${param:STAGE, "dev"}

custom:
  accountId: ${param:ACCOUNT_ID}
  api: gurus-api-${self:provider.stage}

  appSync:
    name: ${self:custom.api}
    authenticationType: API_KEY
    apiKeys:
      - name: ${param:API_KEY}
        description: "AppSync Api Key"
        expiresAfter: 365d
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
      level: NONE
    schema: ./schema.graphql
    mappingTemplates:
      - dataSource: UsersTable
        type: Query
        field: getUser
      - dataSource: UsersTable
        type: Query
        field: listUsers
      - dataSource: UsersTable
        type: Mutation
        field: createUser
      - dataSource: UsersTable
        type: Mutation
        field: updateUser
      - dataSource: UsersTable
        type: Mutation
        field: deleteUser
    dataSources:
      - type: AMAZON_DYNAMODB
        name: UsersTable
        config:
          tableName: Users-${self:custom.api}
          iamRoleStatements:
            - Effect: Allow
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:Query"
                - "dynamodb:Scan"

              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Users-${self:custom.api}"
                - "arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Users-${self:custom.api}/*"

resources:
  Resources:
    UserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: Users-${self:custom.api}

    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.api}_AppSyncLoggingServiceRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: "appsync.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: CloudWatchLogsAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Effect: Allow
                  Resource:
                    - "arn:aws:logs:${self:provider.region}:${self:custom.accountId}:*"
