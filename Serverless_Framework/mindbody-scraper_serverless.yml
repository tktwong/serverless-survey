service: mindbody-scraper
provider:
  name: aws
  profile: banjo
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  environment:
    region: ${self:provider.region}
    stage: ${self:provider.stage}
    natOff: https://s3-us-west-2.amazonaws.com/mindbody-scraper-auth/mindbody-scraper-auth-off-template.yml
    natOn: https://s3-us-west-2.amazonaws.com/mindbody-scraper-auth/mindbody-scraper-auth-on-template.yml
    scraperLogName:
      Ref: scraperLog
    scraperQueueUrl:
      Ref: scraperQueue
    authStackName:
      Fn::GetAtt: [ authStack, Outputs.StackName ]
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - Fn::GetAtt: [ appointmentsTable, Arn ]
        - Fn::GetAtt: [ appointmentTypesTable, Arn ]
        - Fn::GetAtt: [ autopayTable, Arn ]
        - Fn::GetAtt: [ classEventsTable, Arn ]
        - Fn::GetAtt: [ classCategoriesTable, Arn ]
        - Fn::GetAtt: [ classTypesTable, Arn ]
        - Fn::GetAtt: [ contractTypesTable, Arn ]
        - Fn::GetAtt: [ clientsTable, Arn ]
        - Fn::GetAtt: [ pricingDetailsTable, Arn ]
        - Fn::GetAtt: [ productsTable, Arn ]
        - Fn::GetAtt: [ staffTable, Arn ]
        - Fn::GetAtt: [ resourcesTable, Arn ]
        - Fn::GetAtt: [ locationsTable, Arn ]
        - Fn::GetAtt: [ enrollmentsTable, Arn ]
        - Fn::GetAtt: [ serviceCategoryVisitTypesTable, Arn ]
        - Fn::GetAtt: [ salesTable, Arn ]
    - Effect: Allow
      Action:
        - logs:*
        - ssm:*
        - s3:*
        - ec2:*
        - cloudformation:*
        - lambda:*
        - sqs:*
      Resource:
        - "*"

custom:
  vpc:
    securityGroupIds:
      - Fn::GetAtt: [ authStack, Outputs.SecurityGroupId ]
    subnetIds:
      - Fn::GetAtt: [ authStack, Outputs.PrivateSubnetId ]

functions:
  clearLogs:
    handler: functions/clearLogs.handler
  getStudio:
    handler: functions/getStudio.handler
  getTest:
    handler: functions/getTest.handler
    vpc: ${self:custom.vpc}
  mbFetch:
    handler: functions/mbFetch.handler
    timeout: 180
    reservedConcurrency: 4
    vpc: ${self:custom.vpc}
  getToken:
    handler: functions/getToken.handler
    timeout: 180
    reservedConcurrency: 2
    vpc: ${self:custom.vpc}
  processQueue:
    handler: functions/processQueue.handler
    timeout: 180
    reservedConcurrency: 4
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt: [ scraperQueue, Arn ]
  createAuthVpc:
    handler: functions/createAuthVpc.handler
  deleteAuthVpc:
    handler: functions/deleteAuthVpc.handler
  getAppointments:
    handler: functions/getAppointments.handler
    timeout: 180
  getAppointmentTypes:
    handler: functions/getAppointmentTypes.handler
    timeout: 180
  getAutopay:
    handler: functions/getAutopay.handler
    timeout: 180
  getBusinessLocations:
    handler: functions/getBusinessLocations.handler
    timeout: 180
  getEnrollments:
    handler: functions/getEnrollments.handler
    timeout: 180
  getEnrollmentDetails:
    handler: functions/getEnrollmentDetails.handler
    timeout: 180
  getResources:
    handler: functions/getResources.handler
    timeout: 180
  getProductsByLetter:
    handler: functions/getProductsByLetter.handler
    timeout: 180
  getProductsByVariantId:
    handler: functions/getProductsByVariantId.handler
    timeout: 180
  getProductDetails:
    handler: functions/getProductDetails.handler
    timeout: 180
  getProducts:
    handler: functions/getProducts.handler
    timeout: 180
  getPricingDetails:
    handler: functions/getPricingDetails.handler
    timeout: 180
  getPricing:
    handler: functions/getPricing.handler
    timeout: 180
  getClassTypeDetails:
    handler: functions/getClassTypeDetails.handler
    timeout: 180
  getClassTypeEvents:
    handler: functions/getClassTypeEvents.handler
    timeout: 180
  getClassTypeEventsTeachers:
    handler: functions/getClassTypeEventsTeachers.handler
    timeout: 180
  getClassTypes:
    handler: functions/getClassTypes.handler
    timeout: 180
  getContractType:
    handler: functions/getContractType.handler
    timeout: 180
  getContractTypes:
    handler: functions/getContractTypes.handler
    timeout: 180
  getSales:
    handler: functions/getSales.handler
    timeout: 180
    reservedConcurrency: 4
  getSalesRange:
    handler: functions/getSalesRange.handler
    timeout: 180
    reservedConcurrency: 1
  getStaff:
    handler: functions/getStaff.handler
    timeout: 180
  getStaffMember:
    handler: functions/getStaffMember.handler
    timeout: 180
  getStaffMemberPayRates:
    handler: functions/getStaffMemberPayRates.handler
    timeout: 180
  getStaffMemberApptAvailability:
    handler: functions/getStaffMemberApptAvailability.handler
    timeout: 180
  getStaffMemberApptPay:
    handler: functions/getStaffMemberApptPay.handler
    timeout: 180
  getUserProfile:
    handler: functions/getUserProfile.handler
    timeout: 180
  getUsers:
    handler: functions/getUsers.handler
    timeout: 180
  getClassEventUsers:
    handler: functions/getClassEventUsers.handler
    timeout: 180
resources:
  Resources:
    scraperQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ScraperQueue"
        VisibilityTimeout: 180
    authStack:
      Type: AWS::CloudFormation::Stack
      Properties:
        TemplateURL: ${self:provider.environment.natOn}
    scraperLog:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 7
    appointmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AppointmentsTable
        AttributeDefinitions:
          - AttributeName: appointmentsId
            AttributeType: S
        KeySchema:
          - AttributeName: appointmentsId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    appointmentTypesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AppointmentTypesTable
        AttributeDefinitions:
          - AttributeName: appointmentTypeId
            AttributeType: S
        KeySchema:
          - AttributeName: appointmentTypeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    autopayTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AutopayTable
        AttributeDefinitions:
          - AttributeName: autopayId
            AttributeType: S
        KeySchema:
          - AttributeName: autopayId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    classEventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ClassEventsTable
        AttributeDefinitions:
          - AttributeName: classId
            AttributeType: S
        KeySchema:
          - AttributeName: classId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    classCategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ClassCategoriesTable
        AttributeDefinitions:
          - AttributeName: classCategoryId
            AttributeType: S
        KeySchema:
          - AttributeName: classCategoryId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    classTypesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ClassTypesTable
        AttributeDefinitions:
          - AttributeName: classTypeId
            AttributeType: S
        KeySchema:
          - AttributeName: classTypeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    contractTypesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ContractTypesTable
        AttributeDefinitions:
          - AttributeName: contractTypeId
            AttributeType: S
        KeySchema:
          - AttributeName: contractTypeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    clientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ClientsTable
        AttributeDefinitions:
          - AttributeName: clientId
            AttributeType: S
        KeySchema:
          - AttributeName: clientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    enrollmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EnrollmentsTable
        AttributeDefinitions:
          - AttributeName: enrollmentId
            AttributeType: S
        KeySchema:
          - AttributeName: enrollmentId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    staffTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: StaffTable
        AttributeDefinitions:
          - AttributeName: staffMemberId
            AttributeType: S
        KeySchema:
          - AttributeName: staffMemberId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    pricingDetailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PricingDetailsTable
        AttributeDefinitions:
          - AttributeName: pricingDetailId
            AttributeType: S
        KeySchema:
          - AttributeName: pricingDetailId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductsTable
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    locationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LocationsTable
        AttributeDefinitions:
          - AttributeName: locationId
            AttributeType: S
        KeySchema:
          - AttributeName: locationId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    resourcesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ResourcesTable
        AttributeDefinitions:
          - AttributeName: resourceId
            AttributeType: S
        KeySchema:
          - AttributeName: resourceId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    salesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SalesTable
        AttributeDefinitions:
          - AttributeName: saleId
            AttributeType: S
        KeySchema:
          - AttributeName: saleId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    serviceCategoryVisitTypesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ServiceCategoryVisitTypesTable
        AttributeDefinitions:
          - AttributeName: serviceCategoryVisitTypeId
            AttributeType: S
        KeySchema:
          - AttributeName: serviceCategoryVisitTypeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
