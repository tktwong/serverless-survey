service: trip-api

plugins:
  # - serverless-offline
  - serverless-prune-plugin

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  role: ${self:custom.env.IAM_ROLE}
  apiKeys:
    - test-trip-api

  environment:
    APP_VERSION: ${self:custom.version}
    HOST: ${self:custom.env.HOST}
    PORT: ${self:custom.env.PORT}
    DB: ${self:custom.env.DB}
    USER: ${self:custom.env.USER}
    PASSWORD: ${self:custom.env.PASSWORD}
    AUDIO_FOLDER: ${self:custom.env.AUDIO_FOLDER}
    IMAGE_FOLDER: ${self:custom.env.IMAGE_FOLDER}
    AUDIO_TYPES: ${self:custom.env.AUDIO_TYPES}
    IMAGE_TYPES: ${self:custom.env.IMAGE_TYPES}
    S3_BUCKET: ${self:custom.env.S3_BUCKET}
    S3_URL: ${self:custom.env.S3_URL}
    S3_BUCKET_SECURED: ${self:custom.env.S3_BUCKET_SECURED}
    S3_URL_SECURED: ${self:custom.env.S3_URL_SECURED}
    NOREPLY_USER: ${self:custom.env.NOREPLY_USER}
    NOREPLY_PASS: ${self:custom.env.NOREPLY_PASS}
    GOOGLE_PLACES_API_KEY: ${self:custom.env.GOOGLE_PLACES_API_KEY}
    AWS_ACC_KEY_ID: ${self:custom.env.AWS_ACC_KEY_ID}
    AWS_SEC_ACCESS_KEY: ${self:custom.env.AWS_SEC_ACCESS_KEY}
    GATEWAY_API_KEY: ${self:custom.env.GATEWAY_API_KEY}
    ONESIGNAL_APP_ID: ${self:custom.env.ONESIGNAL_APP_ID}
    ONESIGNAL_REST_API_KEY: ${self:custom.env.ONESIGNAL_REST_API_KEY}

package:
  include:
    - node_modules/**
    - server/**

custom:
  stage: ${opt:stage, 'dev'}
  version: '1.0'

  prune:
    automatic: true
    number: 1

  env:
    APP_VERSION: ${self:custom.version}
    HOST: ${self:custom.env.${self:custom.stage}.HOST, self:custom.env.default.HOST}
    PORT: ${self:custom.env.${self:custom.stage}.PORT, self:custom.env.default.PORT}
    DB: ${self:custom.env.${self:custom.stage}.DB, self:custom.env.default.DB}
    USER: ${self:custom.env.${self:custom.stage}.USER, self:custom.env.default.USER}
    PASSWORD: ${self:custom.env.${self:custom.stage}.PASSWORD, self:custom.env.default.PASSWORD}
    S3_BUCKET: ${self:custom.env.${self:custom.stage}.S3_BUCKET, self:custom.env.default.S3_BUCKET}
    S3_URL: ${self:custom.env.${self:custom.stage}.S3_URL, self:custom.env.default.S3_URL}
    S3_BUCKET_SECURED: ${self:custom.env.${self:custom.stage}.S3_BUCKET_SECURED, self:custom.env.default.S3_BUCKET_SECURED}
    S3_URL_SECURED: ${self:custom.env.${self:custom.stage}.S3_URL_SECURED, self:custom.env.default.S3_URL_SECURED}
    IAM_ROLE: ${self:custom.env.${self:custom.stage}.IAM_ROLE, self:custom.env.default.IAM_ROLE}
    AUDIO_FOLDER: ${self:custom.env.${self:custom.stage}.AUDIO_FOLDER, self:custom.env.default.AUDIO_FOLDER}
    IMAGE_FOLDER: ${self:custom.env.${self:custom.stage}.IMAGE_FOLDER, self:custom.env.default.IMAGE_FOLDER}
    AUDIO_TYPES: ${self:custom.env.${self:custom.stage}.AUDIO_TYPES, self:custom.env.default.AUDIO_TYPES}
    IMAGE_TYPES: ${self:custom.env.${self:custom.stage}.IMAGE_TYPES, self:custom.env.default.IMAGE_TYPES}
    NOREPLY_USER: ${self:custom.env.${self:custom.stage}.NOREPLY_USER, self:custom.env.default.NOREPLY_USER}
    NOREPLY_PASS: ${self:custom.env.${self:custom.stage}.NOREPLY_PASS, self:custom.env.default.NOREPLY_PASS}
    GOOGLE_PLACES_API_KEY: ${self:custom.env.${self:custom.stage}.GOOGLE_PLACES_API_KEY, self:custom.env.default.GOOGLE_PLACES_API_KEY}
    AWS_ACC_KEY_ID: ${self:custom.env.${self:custom.stage}.AWS_ACC_KEY_ID, self:custom.env.default.AWS_ACC_KEY_ID}
    AWS_SEC_ACCESS_KEY: ${self:custom.env.${self:custom.stage}.AWS_SEC_ACCESS_KEY, self:custom.env.default.AWS_SEC_ACCESS_KEY}
    GATEWAY_API_KEY: ${self:custom.env.${self:custom.stage}.GATEWAY_API_KEY, self:custom.env.default.GATEWAY_API_KEY}
    ONESIGNAL_APP_ID: ${self:custom.env.${self:custom.stage}.ONESIGNAL_APP_ID, self:custom.env.default.ONESIGNAL_APP_ID}
    ONESIGNAL_REST_API_KEY: ${self:custom.env.${self:custom.stage}.ONESIGNAL_REST_API_KEY, self:custom.env.default.ONESIGNAL_REST_API_KEY}

    default:
      APP_VERSION: ${self:custom.version}
      HOST: ${ssm:/api/${self:custom.stage}/db/host}
      PORT: ${ssm:/api/${self:custom.stage}/db/port}
      DB: ${ssm:/api/${self:custom.stage}/db/name}
      USER: ${ssm:/api/${self:custom.stage}/db/username}
      PASSWORD: ${ssm:/api/${self:custom.stage}/db/password~true}
      IAM_ROLE: ${ssm:/api/${self:custom.stage}/security/iam-role}
      S3_BUCKET: ${ssm:/api/${self:custom.stage}/storage/name}
      S3_URL: ${ssm:/api/${self:custom.stage}/storage/domain}
      S3_BUCKET_SECURED: ${ssm:/api/${self:custom.stage}/storage/secured/name}
      S3_URL_SECURED: ${ssm:/api/${self:custom.stage}/storage/secured/domain}
      NOREPLY_USER: ${ssm:/api/${self:custom.stage}/email/noreply/user}
      NOREPLY_PASS: ${ssm:/api/${self:custom.stage}/email/noreply/password~true}
      GOOGLE_PLACES_API_KEY: ${ssm:/api/${self:custom.stage}/keys/google-places}
      AWS_ACC_KEY_ID: ${ssm:/api/${self:custom.stage}/keys/aws-access}
      AWS_SEC_ACCESS_KEY: ${ssm:/api/${self:custom.stage}/keys/aws-secret}
      GATEWAY_API_KEY: ${ssm:/api/${self:custom.stage}/keys/aws-gateway}
      ONESIGNAL_APP_ID: ${ssm:/api/${self:custom.stage}/keys/onesignal-app-id}
      ONESIGNAL_REST_API_KEY: ${ssm:/api/${self:custom.stage}/keys/onesignal-rest-api}
      AUDIO_FOLDER: 'audios'
      IMAGE_FOLDER: 'images'
      AUDIO_TYPES: 'mpeg,wav,webm,ogg,mp3,mp4,m4a'
      IMAGE_TYPES: 'gif,png,jpeg,jpg,webp'

functions:
  user:
    handler: server/handlers/user.handler
    description: 'Lambda Users handler'
    events:
      - http:
          path: /api/${self:custom.version}/users/login
          method: POST
          cors: true
        #   private: true
      - http:
          path: /api/${self:custom.version}/users/signup
          method: POST
          cors: true
        #   private: true
      - http:
          path: /api/${self:custom.version}/users/activate
          method: PUT
          cors: true
        #   private: true
      - http:
          path: /api/${self:custom.version}/users/{userId}
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/users/{userId}/files
          method: PUT
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/users/{userId}
          method: PATCH
          cors: true
          private: true
  trip:
    handler: server/handlers/trip.handler
    description: 'Lambda Trips handler'
    events:
      - http:
          path: /api/${self:custom.version}/trips/{tripId}
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips
          method: POST
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/all
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}
          method: PATCH
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}
          method: DELETE
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/files
          method: PUT
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/files
          method: GET
          cors: true
          private: true
  place:
    handler: server/handlers/place.handler
    description: 'Lambda Places handler'
    events:
      - http:
          path: /api/${self:custom.version}/trips/places/all
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places/{placeId}
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places
          method: POST
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places/{placeId}
          method: PATCH
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places/{placeId}
          method: DELETE
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places/{placeId}/files
          method: PUT
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/trips/{tripId}/places/{placeId}/files
          method: GET
          cors: true
          private: true
  purchase:
    handler: server/handlers/purchase.handler
    description: 'Lambda Purchases handler'
    events:
      - http:
          path: /api/${self:custom.version}/purchases/all
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/purchases/count
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/purchases
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/purchases
          method: POST
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/purchases/{purchaseId}
          method: PATCH
          cors: true
          private: true
  rating:
    handler: server/handlers/rating.handler
    description: 'Lambda Ratings handler'
    events:
      - http:
          path: /api/${self:custom.version}/ratings/all
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/ratings
          method: GET
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/ratings
          method: POST
          cors: true
          private: true
      - http:
          path: /api/${self:custom.version}/ratings/{ratingId}
          method: PATCH
          cors: true
          private: true
