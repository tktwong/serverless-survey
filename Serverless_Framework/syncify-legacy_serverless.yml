service: syncify
provider:
  name: aws
  runtime: nodejs12.x
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  environment:
    JWT_SECRET: ${env:JWT_SECRET}
    USERS_TABLE_NAME: ${self:provider.stage}-users
    SPOTIFY_CLIENT_ID: ${env:SPOTIFY_CLIENT_ID}
    SPOTIFY_CLIENT_SECRET: ${env:SPOTIFY_CLIENT_SECRET}
    SPOTIFY_REDIRECT_URL: ${env:SPOTIFY_REDIRECT_URL}
plugins:
  - serverless-domain-manager
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

package:
  individually: true

custom:
  # 'dev' locally, 'prod' when deployed with `serverless --stage prod`
  stage: ${opt:stage, 'dev'}
  dotenv:
    include:
      [JWT_SECRET, APP_URL, API_URL, SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET, SPOTIFY_REDIRECT_URL]
  customDomain:
    domainName: api.syncify.co
    stage: prod
    certificateName: api.syncify.co
    createRoute53Record: true
    endpointType: edge
    securityPolicy: tls_1_2

functions:
  room:
    name: ${self:provider.stage}-room-index
    handler: ./src/api/modules/rooms/handlers/show.handler
    environment:
      ROOMS_TABLE_NAME: ${self:provider.stage}-rooms
    events:
      - http:
          path: /rooms/{id}
          method: get
          request: { parameters: { paths: { id: true } } }

  authorizationTradeToken:
    name: ${self:provider.stage}-auth-trade-token
    handler: ./src/api/modules/auth/handlers/trade-token.handler
    events:
      - http: { path: /auth/trade-token, method: post }

  authorizationRefresh:
    name: ${self:provider.stage}-auth-refresh
    handler: ./src/api/modules/auth/handlers/refresh.handler
    events:
      - http: { path: /auth/refresh, method: post }

resources:
  - Conditions:
      CreateProdResources:
        Fn::Equals:
          - ${self:provider.stage}
          - prod
  - ${file(infrastructure/cloudfront.yml)}
  - Resources:
      AssetsBucket: # TODO: delete
        Type: AWS::S3::Bucket
        Condition: CreateProdResources
        Properties:
          BucketName: syncify-assets
          AccessControl: PublicRead
      UsersTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:provider.stage}-users
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
      RoomsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:provider.stage}-rooms
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          BillingMode: PAY_PER_REQUEST
