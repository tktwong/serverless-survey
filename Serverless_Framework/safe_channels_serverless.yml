org: pawmot
app: safe-channels

service:
  name: safe-channels

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  endpointType: REGIONAL
  websocketsApiName: ${self:provider.stage}-safe-channels-ws-api
  websocketsApiRouteSelectionExpression: $request.body.type
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:PutItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.stage}-channels
    - Effect: Allow
      Action: dynamodb:GetItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.stage}-channels
    - Effect: Allow
      Action: dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.stage}-channels
    - Effect: Allow
      Action: dynamodb:Scan
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.stage}-channels
    - Effect: Allow
      Action: dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.stage}-channels

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  customDomain:
    domainName: ${file(stages.yaml):${self:custom.stage}.domain}
    basePath: ''
    stage: ${self:custom.stage}
    createRoute53Record: true
    endpointType: 'regional'

functions:
  static:
    handler: fn/static.handler
    events:
      - http:
          method: get
          path: /{filepath+}
          contentHandling: CONVERT_TO_BINARY
      - http:
          method: get
          path: /
    environment:
      PRODUCTION: ${file(env/${self:provider.stage}.yaml):production}

  appConfig:
    handler: fn/appConfig.handler
    events:
      - http:
          method: get
          path: /appConfig
    environment:
      PRODUCTION: ${file(env/${self:provider.stage}.yaml):production}
      WSS_ADDRESS: ${file(env/${self:provider.stage}.yaml):wssAddress}

  handleConnection:
    handler: fn/socket.handleConnection
    events:
      - websocket:
          route: $connect

  handlePing:
    handler: fn/socket.handlePing
    events:
      - websocket:
          route: ping

  handleDisconnection:
    handler: fn/socket.handleDisconnection
    events:
      - websocket:
          route: $disconnect
    environment:
      CHANNELS_TABLE: ${self:provider.stage}-channels

  handleCreateChannel:
    handler: fn/socket.handleCreateChannel
    events:
      - websocket:
          route: createChannel
    environment:
      CHANNELS_TABLE: ${self:provider.stage}-channels

  handleConnectToChannel:
    handler: fn/socket.handleConnectToChannel
    events:
      - websocket:
          route: connectToChannel
    environment:
      CHANNELS_TABLE: ${self:provider.stage}-channels

  handleMessage:
    handler: fn/socket.handleMessage
    events:
      - websocket:
          route: clientBinaryExchange
    environment:
      CHANNELS_TABLE: ${self:provider.stage}-channels

resources:
  Resources:
    channelsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-channels
        AttributeDefinitions:
          - AttributeName: channelName
            AttributeType: S
        KeySchema:
          - AttributeName: channelName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
