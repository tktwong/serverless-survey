service:
  name: simple-journaling-app

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: SimpleJournalingAPI
        description: Serverless application for creating and updating journaling items

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024

  environment:
    JOURNAL_ITEMS_TABLE: JournalItems-${self:provider.stage}
    INDEX_NAME: ItemIndex
    IMAGES_S3_BUCKET: masa-serverless-journaling-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300


  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler


  GetJournalItems:
    handler: src/lambda/http/getJournalItems.handler
    events:
      - http:
            method: get
            path: journalitems
            cors: true
            authorizer: Auth

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_ITEMS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      
  CreateJournalItem:
    handler: src/lambda/http/createJournalItem.handler
    events:
      - http:
            method: post
            path: journalitems
            authorizer: Auth
            cors: true
            request:
              # Schema that will be used to validate incoming requests
              schema:
                application/json: ${file(models/create-journal-entry-request.json)}

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_ITEMS_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"



  UpdateJournalItem:
    handler: src/lambda/http/updateJournalItem.handler
    events:
      - http:
            method: patch
            path: journalitems/{journalItemId}
            cors: true
            authorizer: Auth

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_ITEMS_TABLE}/index/${self:provider.environment.INDEX_NAME}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
            method: post
            path: journalitems/{journalItemId}/attachment
            cors: true
            authorizer: Auth
    iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:UpdateItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_ITEMS_TABLE}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOURNAL_ITEMS_TABLE}/index/${self:provider.environment.INDEX_NAME}
        - Effect: "Allow"
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    JournalItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: journalItemId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.JOURNAL_ITEMS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: journalItemId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket