# This serverless application config file.

service: whatsapppush

custom:
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  templatesTableName: nstemplates-${opt:stage, self:provider.stage}
  nstasksTableName: nstasks-${opt:stage, self:provider.stage}
  nsstatusTableName: nsstatus-${opt:stage, self:provider.stage}
  nsmessagesQueueName: nsmessages-${opt:stage, self:provider.stage}
  uploadBucketName: nsuploadbucket-${opt:stage, self:provider.stage}

configValidationMode: error

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  versionFunctions: false # Disable function versioning.
  # Let this be default region
  region: ${self:custom.region}
  environment:
    NSTEMPLATE_TABLE: ${self:custom.templatesTableName}
    NSTASKS_TABLE: ${self:custom.nstasksTableName}
    NSSTATUS_TABLE: ${self:custom.nsstatusTableName}
    NSMESSAGES_QUEUE: ${self:custom.nsmessagesQueueName}
    NSMESSAGES_QUEUE_URL: ${self:resources.Outputs.nsmessagesQueueURL.Value}
    NSUPLOAD_BUCKET: ${self:custom.uploadBucketName}
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    TWILIO_SMS_PHONE_NUMBER: ${env:TWILIO_SMS_PHONE_NUMBER}
  # Lambda function IAM role for resources in this config.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.templatesTableName}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.nstasksTableName}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.nsstatusTableName}"
    - Effect: Allow
      Action:
        - "sqs:*"
      Resource:
        Fn::Join:
          - ':'
          - - arn
            - aws
            - sqs
            - ${self:custom.region}
            - Ref: AWS::AccountId
            - ${self:custom.nsmessagesQueueName}
    - Effect: Allow
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::*"

functions:
  hello:
    handler: handlers/appcheck.hello
    events:
      - http:
          path: check/hello
          method: get
  # A group of status & summary handlers
  # ... to get and list status.
  listStatusLogs:
    handler: handlers/nsstatus.listStatusLogs
    events:
      - http:
          path: status/{notificationId}
          method: get
  getStatusLog:
    handler: handlers/nsstatus.getStatusLog
    events:
      - http:
          path: status/{notificationId}/{logId}
          method: get
  getStatusLogSummary:
    handler: handlers/nsstatus.getStatusLogSummary
    events:
      - http:
          path: status/summary/{notificationId}
          method: get
  # Handler to construct & get Upload URL
  #
  getSignedUploadUrl:
    handler: handlers/signedurl.getSignedUploadUrl
    events:
      - http:
          path: uploadurl/{userId}
          method: post
  # A group of ns-message handlers
  # ... to create, process, list and callback for Twilio
  createNotification:
    handler: handlers/notification.createNotification
    events:
      - http:
          path: notification
          method: post
  listNotifications:
    handler: handlers/notification.listNotifications
    events:
      - http:
          path: notification/{userId}
          method: get
  processNotification:
    handler: handlers/notification.processNotification
    events:
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - sqs
                - ${self:custom.region}
                - Ref: AWS::AccountId
                - ${self:custom.nsmessagesQueueName}
          batchSize: 1
  messageStatusCallback:
    handler: handlers/notification.messageStatusCallback
    events:
      - http:
          path: notification/status
          method: post
          cors: true
  # A group of ns-templates handlers
  # ... to create, delete, get, list and update
  createTemplates:
    handler: handlers/nstemplate.createTemplates
    events:
      - http:
          path: templates
          method: post
  deleteTemplates:
    handler: handlers/nstemplate.deleteTemplates
    events:
      - http:
          path: templates/{userId}/{templateId}
          method: delete
  getTemplate:
    handler: handlers/nstemplate.getTemplate
    events:
      - http:
          path: templates/{userId}/{templateId}
          method: get
  listTemplates:
    handler: handlers/nstemplate.listTemplates
    events:
      - http:
          path: templates/{userId}
          method: get
  updateTemplates:
    handler: handlers/nstemplate.updateTemplates
    events:
      - http:
          path: templates/{userId}/{templateId}
          method: put

resources:
  Resources:
    nstemplates:
      Type: AWS::DynamoDB::Table
      Properties:
         TableName: ${self:custom.templatesTableName}
         AttributeDefinitions:
           - AttributeName: templateid
             AttributeType: S
           - AttributeName: userid
             AttributeType: S
         KeySchema:
           - AttributeName: userid
             KeyType: HASH
           - AttributeName: templateid
             KeyType: RANGE
         ProvisionedThroughput:
           ReadCapacityUnits: 1
           WriteCapacityUnits: 1
    nstasks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.nstasksTableName}
        AttributeDefinitions:
          - AttributeName: userid
            AttributeType: S
          - AttributeName: notificationid
            AttributeType: S
        KeySchema:
          - AttributeName: userid
            KeyType: HASH
          - AttributeName: notificationid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    nsstatus:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.nsstatusTableName}
        AttributeDefinitions:
          - AttributeName: notificationid
            AttributeType: S
          - AttributeName: logid
            AttributeType: S
        KeySchema:
          - AttributeName: notificationid
            KeyType: HASH
          - AttributeName: logid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    NsmessagesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.nsmessagesQueueName}
    nsuploadbucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.uploadBucketName}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - HEAD
              MaxAge: 900
  Outputs:
    nsmessagesQueueURL:
      Description: NsmessagesQueue URL
      Value:
        Ref: NsmessagesQueue
