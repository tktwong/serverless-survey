# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: library-service

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-west-2
  environment:
    TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

resources:
  Resources:
    BooksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.TABLE_NAME}

functions:
  bookSubmission:
    handler: api/postBook.submit
    memorySize: 128
    description: Create a new book in the library.
    events:
      - http:
          path: books
          method: post
  listBooks:
    handler: api/getBooks.list
    memorySize: 128
    description: List all books
    events:
      - http:
          path: books
          method: get
  bookDetails:
    handler: api/getBooks.get
    description: Get a book by id.
    events:
      - http:
          path: books/{id}
          method: get
  bookUpdate:
    handler: api/updateBook.submit
    description: Update a book in the library.
    events:
      - http:
          path: books/{id}
          method: put
  bookDelete:
    handler: api/deleteBook.remove
    description: Delete a book from the library.
    events:
      - http:
          path: books/{id}
          method: delete
