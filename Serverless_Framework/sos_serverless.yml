service: sos # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  stage: ${opt:stage, 'live'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: ${self:custom.BUCKET_ITMES_TABLE_ARN}
  environment:
    LOCAL_ENV: ${self:custom.${self:custom.stage}.LOCAL_ENV}
    TABLE_NAME: ${self:custom.${self:custom.stage}.TABLE_NAME}

functions:
  get:
    handler: src/handler.get_one_bucket_item
    events:
      - http:
          path: /get/{id}
          method: get
  list:
    handler: src/handler.get_bucket_items
    events:
      - http:
          path: /get-bucket-items
          method: get

  create:
    handler: src/handler.create_bucket_item
    events:
      - http:
          path: /create
          method: post

  delete:
    handler: src/handler.delete_item
    events:
      - http:
          path: /delete/{id}
          method: delete

  update:
    handler: src/handler.update_bucket_item
    events:
      - http:
          path: /update/{id}
          method: put

  update_urls:
    handler: src/handler.update_urls
    events:
      - http:
          path: /update/{id}
          method: post

  delete_all:
    handler: src/handler.delete_all
    events:
      - http:
          path: /delete_all
          method: delete

plugins:
  - serverless-offline-python
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
  BUCKET_ITMES_TABLE_ARN: arn:aws:dynamodb:us-east-1:792000220664:table/BucketItems
  stage: ${opt:stage, self:provider.stage}
  local:
    LOCAL_ENV: "TRUE"
    TABLE_NAME: 'BucketItems'
  live:
    LOCAL_ENV: "FALSE"
    TABLE_NAME: 'BucketItems'

package:
  exclude:
    - venv/**
