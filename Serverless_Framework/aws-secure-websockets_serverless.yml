service: aws-secure-websockets

plugins:
  - serverless-dynamodb-local
  - serverless-offline

frameworkVersion: ">=1.38.0 <2.0.0"

custom:
  # This can be changed to the desired origin
  # When using lambda proxy integration, you have to manually add the CORS headers to responses...
  # https://github.com/serverless/serverless/issues/4681
  corsOrigin: '*'
  user: damoresa
  dynamodb:
    start:
      port: 8700
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  serverless-offline:
    port: 3700

# This article helped me find out how Serverless handles Cloud Formation naming
# https://github.com/serverless/serverless/blob/master/docs/providers/aws/guide/resources.md
provider:
  name: aws
  memorySize: 256
  runtime: nodejs8.10
  region: eu-central-1
  # API GW Websocket specific configuration
  websocketsApiName: ${self:service}-apigw-websocket-${opt:stage, self:provider.stage}
  # Custom routes are selected by the value of the action property in the body
  websocketsApiRouteSelectionExpression: $request.body.action
  # DynamoDB table name, as composed with parameters from this definition file
  environment:
    ENVIRONMENT: ${opt:stage, self:provider.stage}
    COGNITO_USER_POOL:
      Ref: CognitoUserPool
    COGNITO_USER_POOL_CLIENT:
      Ref: CognitoUserPoolClient
    CORS_ORIGIN: ${self:custom.corsOrigin}
    DYNAMODB_SOCKETS_TYPE_GSI: ${self:service}-sockets-type-gsi-${opt:stage, self:provider.stage}
    DYNAMODB_SOCKETS_TABLE: ${self:service}-sockets-${opt:stage, self:provider.stage}
    KEYS_URL: !Join ['', ['https://cognito-idp.', '${opt:region, self:provider.region}', '.amazonaws.com/', !Ref CognitoUserPool, '/.well-known/jwks.json']]
    WEBSOCKET_API_ENDPOINT: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', '${opt:region, self:provider.region}', '.amazonaws.com/', '${opt:stage, self:provider.stage}/']]
  # Define the service IAM permissions
  iamRoleStatements:
    # Websocket permissions
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:${opt:region, self:provider.region}:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SOCKETS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SOCKETS_TABLE}/index/${self:provider.environment.DYNAMODB_SOCKETS_TYPE_GSI}"

functions:
  authUser:
    name: LAMBDA_${self:custom.user}_${self:service}_auth_${opt:stage, self:provider.stage}
    handler: handler.authUser
    events:
      - http:
          path: auth
          method: post
          cors:
            origin: ${self:custom.corsOrigin}
  authWebsocket:
    name: LAMBDA_${self:custom.user}_${self:service}_auth_websocket_${opt:stage, self:provider.stage}
    handler: handler.authWebsocket
    cors:
      origin: ${self:custom.corsOrigin}
  defaultSocketHandler:
    name: LAMBDA_${self:custom.user}_${self:service}_socket_default_${opt:stage, self:provider.stage}
    handler: handler.defaultSocketHandler
    events:
      - websocket:
          route: $default
  greeting:
    name: LAMBDA_${self:custom.user}_${self:service}_socket_greeting_${opt:stage, self:provider.stage}
    handler: handler.greeting
    events:
      - websocket:
          route: GREETING
  handleSocketConnect:
    name: LAMBDA_${self:custom.user}_${self:service}_socket_connect_${opt:stage, self:provider.stage}
    handler: handler.handleSocketConnect
    events:
      - websocket:
          route: $connect
          # references the authWebsocket function below, serverless doesn't provide any other
          # way to perform this as of 01/07/2019
          authorizer:
            name: authWebsocket
            identitySource:
              - 'route.request.querystring.Authorizer'
  handleSocketDisconnect:
    name: LAMBDA_${self:custom.user}_${self:service}_socket_disconnect_${opt:stage, self:provider.stage}
    handler: handler.handleSocketDisconnect
    events:
      - websocket:
          route: $disconnect
  refreshToken:
    name: LAMBDA_${self:custom.user}_${self:service}_auth_refresh_${opt:stage, self:provider.stage}
    handler: handler.refreshToken
    events:
      - http:
          path: auth/refresh
          method: post
          cors:
            origin: ${self:custom.corsOrigin}

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        AliasAttributes:
          - preferred_username
        MfaConfiguration: OFF
        UserPoolName: ${self:service}-cognito-${opt:stage, self:provider.stage}
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:service}-cognito-client-${opt:stage, self:provider.stage}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    SocketsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # For a production deployment, you'd want to retain your DB
      # in case of re-deployment or stack removal to avoid data loss.
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_SOCKETS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_SOCKETS_TYPE_GSI}
            KeySchema:
              - AttributeName: type
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
  Outputs:
    CognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: ASW-CognitoUserPoolId-${self:provider.stage}
    CognitoUserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
      Export:
        Name: ASW-CognitoUserPoolClientId-${self:provider.stage}
