service: btx-data-server-test

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list

custom:
  tables:
    physicians: '${self:service}-${self:provider.stage}-table-physicians'
    conditions: '${self:service}-${self:provider.stage}-table-conditions'
    muscles: '${self:service}-${self:provider.stage}-table-muscles'
    injections: '${self:service}-${self:provider.stage}-table-injections'

    # condition: '${self:service}-${self:provider.stage}-table-condition'
    # injection: '${self:service}-${self:provider.stage}-table-injection'
    # session: '${self:service}-${self:provider.stage}-table-session'
    # patient: '${self:service}-${self:provider.stage}-table-patient'
    # patient_condition: '${self:service}-${self:provider.stage}-table-patient-condition'
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        #New tables
        - { "Fn::GetAtt": ["PhysiciansTable", "Arn" ] }
        - { "Fn::GetAtt": ["ConditionsTable", "Arn" ] }
        - { "Fn::GetAtt": ["MusclesTable", "Arn" ] }
        - { "Fn::GetAtt": ["InjectionsTable", "Arn" ] }
        #Old tables 
        # - { "Fn::GetAtt": ["ConditionDynamoDBTable", "Arn" ] }
        # - { "Fn::GetAtt": ["InjectionDynamoDBTable", "Arn" ] }
        # - { "Fn::GetAtt": ["SessionDynamoDBTable", "Arn" ] }
        # - { "Fn::GetAtt": ["PatientDynamoDBTable", "Arn" ] }
        # - { "Fn::GetAtt": ["PatientConditionDynamoDBTable", "Arn" ] }
        
  environment:
    # New 
    TABLE_PHYSICIANS: ${self:custom.tables.physicians}
    TABLE_CONDITIONS: ${self:custom.tables.conditions}
    TABLE_MUSCLES: ${self:custom.tables.muscles}
    TABLE_INJECTIONS: ${self:custom.tables.injections}
   

    # Old 
    # TABLE_CONDITION: ${self:custom.tables.condition}
    # TABLE_INJECTION: ${self:custom.tables.injection}
    # TABLE_SESSION: ${self:custom.tables.session}
    # TABLE_PATIENT: ${self:custom.tables.patient}
    # TABLE_PATIENT_CONDITION: ${self:custom.tables.patient_condition}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    environment: 
      # session_arn: ${self:resources.Outputs.App.Value}
      
  # hello: 
  #   handler: index.hello

resources:
  Resources:
    # New
    PhysiciansTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        # BillingMode: PAY_PER_REQUEST
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${self:custom.tables.physicians}

    ConditionsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        # BillingMode: PAY_PER_REQUEST
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${self:custom.tables.conditions}

    MusclesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        # BillingMode: PAY_PER_REQUEST
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${self:custom.tables.muscles}

    InjectionsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        # BillingMode: PAY_PER_REQUEST
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${self:custom.tables.injections}
