service:
  name: face-rekognition-alf

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    IMAGES_S3_BUCKET: rekognition-images-alfian
    SIGNED_URL_EXPIRATION: 720

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Identity & Compare Faces API
        description: Serverless application Face Identification and Comparison
    models:
      - name: CompareFaceRequest
        contentType: application/json
        schema:
          required: 
            - sourceImageS3Name
            - targetImageS3Name
            - simillarityThreshold
          properties:
            sourceImageS3Name:
              type: string
            targetImageS3Name:
              type: string
            simillarityThreshold:
              type: number

functions:
  CompareFaces:
    handler: src/lambda/http/compareFaces.handler
    events:
      - http:
          method: post
          path: faces/compare
          cors: true
          reqValidatorName: 'RequestBodyValidator'
          documentation:
            summary: Compare two faces
            description: Compare two faces to find similarity
            requestModels:
              "application/json": CompareFaceRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - rekognition:*
        Resource: '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: faces/attachment
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
