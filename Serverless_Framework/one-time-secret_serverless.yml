service: one-time-secret

provider:
    name: aws
    runtime: nodejs10.x
    profile: ${opt:profile}
    stage: ${opt:stage, 'dev'}
    region: eu-central-1
    stackName: ${self:service}-backend
    logRetentionInDays: 1
    stackTags:
        ENVIRONMENT: ${self:service}
    environment:
        SECRETS_TABLE: ${self:custom.prefix}-secrets
        LINK_ID_INDEX: LinkIdIndex
        USER_ID_INDEX: UserIdIndex
        LOG_LEVEL: debug
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:DescribeTable
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
          Resource:
              - "Fn::GetAtt": [SecretsTable, Arn]
        - Effect: Allow
          Action:
              - dynamodb:Query
          Resource:
              - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SECRETS_TABLE}/index/${self:provider.environment.LINK_ID_INDEX}
              - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SECRETS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

plugins:
    - serverless-webpack
    - serverless-reqvalidator-plugin
    - serverless-aws-documentation
    - serverless-iam-roles-per-function
    - aws-amplify-serverless-plugin
    - serverless-dynamodb-local
    - serverless-offline

# package:
#     individually: true

custom:
    prefix: ${self:service}-${self:provider.stage}

    serverless-iam-roles-per-function:
        defaultInherit: true

    documentation:
        api:
            info:
                version: v1.0.0
                title: one-time-secret
                description: Serverless one-time-secret application
        models:
            - name: ShareSecret
              contentType: application/json
              schema: ${file(models/share-secret-request.json)}

    webpack:
        includeModules: true # enable auto-packing of external modules

    amplify:
        - filename: ../frontend/src/aws-exports.tsx
          type: typescript
          appClient: WebCognitoUserPoolClient
          s3bucket: disabled

    serverless-offline:
        host: 0.0.0.0
        port: 4000
        noAuth: true

    dynamodb:
        stages:
            - dev
        start:
            port: 4569
            host: localstack
            migrate: true
            noStart: true

functions:
    share-secret:
        handler: src/lambda/http/share-secret.handler
        events:
            - http:
                  path: secrets/share
                  method: post
                  cors: true
                  authorizer: aws_iam
                  reqValidatorName: RequestBodyValidator
                  documentation:
                      summary: Share a secret
                      description: Share a secret
                      requestModels:
                          "application/json": ShareSecret
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:PutItem
              Resource:
                  - "Fn::GetAtt": [SecretsTable, Arn]

    get-secret-meta:
        handler: src/lambda/http/get-secret-meta.handler
        events:
            - http:
                  path: secrets/{secretId}
                  method: get
                  cors: true
                  authorizer: aws_iam

    delete-secret:
        handler: src/lambda/http/delete-secret.handler
        events:
            - http:
                  path: secrets/{secretId}
                  method: delete
                  cors: true
                  authorizer: aws_iam
        iamRoleStatements:
            - Effect: Allow
              Action:
                  - dynamodb:DeleteItem
              Resource:
                  - "Fn::GetAtt": [SecretsTable, Arn]

    retrieve-secret:
        handler: src/lambda/http/retrieve-secret.handler
        events:
            - http:
                  path: retrieve/{linkId}
                  method: post
                  cors: true
                  authorizer: aws_iam

    get-history:
        handler: src/lambda/http/get-history.handler
        events:
            - http:
                  path: secrets
                  method: get
                  cors: true
                  authorizer: aws_iam

resources:
    - ${file(resources/request-body-validator.yml)}
    - ${file(resources/api-gateway-errors.yml)}
    - ${file(resources/dynamodb-table.yml)}
    - ${file(resources/cognito-user-pool.yml)}
    - ${file(resources/cognito-identity-pool.yml)}
