# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: eoa-serverless-boiler

plugins:
  - serverless-aws-models

custom:
  models:
    NodeRequest:
      ContentType: "application/json"
      Schema: ${file(models/nodeRequest.json)}
    BatchRequest:
      ContentType: "application/json"
      Schema: ${file(models/batchRequest.json)}

provider:
  name: aws
  runtime: nodejs6.10
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action:
        - "*"
      Resource: "arn:aws:s3:::eoautilstorage"
    - Effect: Allow
      Action:
        - "*"
      Resource: "arn:aws:s3:::eoautilstorage/*"

functions:
  list:
    handler: nodes/list.list
    events:
      - http:
          path: nodes
          method: get
          cors: true
          integration: lambda

          response:
            headers:
              Content-Type: "'application/json'"
            template: ${file(templates/defaultResponse.vm)}

  create:
    handler: nodes/create.create
    events:
      - http:
          requestModels:
            "application/json": "NodeRequest"
          path: nodes
          method: post
          cors: true
          integration: lambda

          request:
            template:
              application/json: ${file(templates/batchTemplate.vm)}

          response:
            headers:
              Content-Type: "'application/json'"
            template: ${file(templates/defaultResponse.vm)}

  patch:
    handler: nodes/patch.patch
    events:
      - http:
          requestModels:
            "application/json": "BatchRequest"
          path: nodes
          method: patch
          cors: true
          integration: lambda

          request:
            template:
              application/json: ${file(templates/batchTemplate.vm)}

          response:
            headers:
              Content-Type: "'application/json'"
            template: ${file(templates/defaultResponse.vm)}

  get:
    handler: nodes/get.get
    events:
      - http:
          path: nodes/{id}
          method: get
          cors: true
          integration: lambda

          request:
            parameters:
              paths:
                id: true
            template:
              application/json: ${file(templates/idTemplate.vm)}

          response:
            headers:
              Content-Type: "'application/json'"
            template: ${file(templates/defaultResponse.vm)}

  delete:
    handler: nodes/delete.delete
    events:
      - http:
          path: nodes/{id}
          method: delete
          cors: true
          integration: lambda

          request:
            parameters:
              paths:
                id: true
            template:
              application/json: ${file(templates/idTemplate.vm)}

          response:
            headers:
              Content-Type: "'application/json'"
            template: ${file(templates/defaultResponse.vm)}

  update:
    handler: nodes/update.update
    events:
      - http:
          path: nodes/{id}
          method: put
          cors: true
          integration: lambda

          request:
            parameters:
              paths:
                id: true
            template:
              application/json: ${file(templates/idTemplate.vm)}

          response:
            headers:
              Content-Type: "'application/json'"
            template: ${file(templates/defaultResponse.vm)}
