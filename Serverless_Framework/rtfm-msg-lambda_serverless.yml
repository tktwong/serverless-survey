service: rtfm-msg-lambda

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  variableSyntax: "\\${{([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)}}"
  memorySize: 128
  timeout: 15
  environment:
    STAGE: ${{self:custom.stage}}
    RTFM_TIMESERIES_TABLE: rtfm-device-timeseries-data-${{self:custom.stage}}
    RTFM_COGNITO_USER_POOL_ID: ${{secret:settings:cognito.userPoolId}}
    RTFM_IOT_ARN: ${{secret:settings:arn.iot}}
    EMAIL_SENDER: ${{secret:settings:email.sender}}
  role: rtfmRole
  stackTags:
    OWNER: ananse
    REPO: ${{self:service}}

plugins:
  - "@ananseio/lambda-secrets"

custom:
  stage: ${{opt:stage, self:provider.stage}}
  secrets:
    config: ${{s3:rtfm-secrets/secrets.json}}
  authorizer: &authorizer
    name: rtfm-authorizer
    arn: ${{secret:settings:arn.userPool}}
    identitySource: method.request.header.X-aws-authorizer

functions:
  create-customer:
    handler: dist/lambda.createCustomer
  create-user:
    handler: dist/lambda.createUser
    events:
      - http:
          method: POST
          path: /user
          cors: ${{secret:settings:api.cors}}
  request-attach-policy:
    handler: dist/lambda.requestAttachPolicy
    events:
      - http:
          method: GET
          path: /{identityId}/attach_policy
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer

  create-device:
    handler: dist/lambda.createDevice
    events:
      - http:
          method: POST
          path: /device
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  delete-device:
    handler: dist/lambda.deleteDevice
    events:
      - http:
          method: DELETE
          path: /device/{deviceUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  get-device:
    handler: dist/lambda.getDevice
    events:
      - http:
          method: GET
          path: /device/{deviceUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  list-device:
    handler: dist/lambda.listDevice
    events:
      - http:
          method: GET
          path: /device
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  update-device:
    handler: dist/lambda.updateDevice
    events:
      - http:
          method: POST
          path: /device/{deviceUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
      - http:
          method: PUT
          path: /device/{deviceUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer

  create-profile:
    handler: dist/lambda.createProfile
    events:
      - http:
          method: POST
          path: /profile
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  delete-profile:
    handler: dist/lambda.deleteProfile
    events:
      - http:
          method: DELETE
          path: /profile/{profileUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  get-profile:
    handler: dist/lambda.getProfile
    events:
      - http:
          method: GET
          path: /profile/{profileUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  list-profile:
    handler: dist/lambda.listProfile
    events:
      - http:
          method: GET
          path: /profile
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  update-profile:
    handler: dist/lambda.updateProfile
    events:
      - http:
          method: POST
          path: /profile/{profileUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
      - http:
          method: PUT
          path: /profile/{profileUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer

  create-record:
    handler: dist/lambda.createRecord
    events:
      - http:
          method: POST
          path: /record
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  delete-record:
    handler: dist/lambda.deleteRecord
    events:
      - http:
          method: DELETE
          path: /record/{recordUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  get-record:
    handler: dist/lambda.getRecord
    events:
      - http:
          method: GET
          path: /record/{recordUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  list-record:
    handler: dist/lambda.listRecord
    events:
      - http:
          method: GET
          path: /record
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
  update-record:
    handler: dist/lambda.updateRecord
    events:
      - http:
          method: POST
          path: /record/{recordUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
      - http:
          method: PUT
          path: /record/{recordUuid}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
      - http:
          method: POST
          path: /record/{recordUuid}/{action}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer
      - http:
          method: PUT
          path: /record/{recordUuid}/{action}
          cors: ${{secret:settings:api.cors}}
          authorizer: *authorizer

resources:
  Resources:
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rtfm-device-timeseries-data-${{self:custom.stage}}
        AttributeDefinitions:
          - AttributeName: deviceId
            AttributeType: S
          - AttributeName: timestamp_nodeId
            AttributeType: S
        KeySchema:
          - AttributeName: deviceId
            KeyType: HASH
          - AttributeName: timestamp_nodeId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    devices:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rtfm-devices-${{self:custom.stage}}
        AttributeDefinitions:
          - AttributeName: deviceUuid
            AttributeType: S
          - AttributeName: owner
            AttributeType: S
        KeySchema:
          - AttributeName: deviceUuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: owner-index
            KeySchema:
              - AttributeName: owner
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    profiles:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rtfm-profiles-${{self:custom.stage}}
        AttributeDefinitions:
          - AttributeName: profileUuid
            AttributeType: S
          - AttributeName: owner
            AttributeType: S
        KeySchema:
          - AttributeName: profileUuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: owner-index
            KeySchema:
              - AttributeName: owner
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    records:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rtfm-records-${{self:custom.stage}}
        AttributeDefinitions:
          - AttributeName: recordUuid
            AttributeType: S
          - AttributeName: owner
            AttributeType: S
          - AttributeName: profileUuid
            AttributeType: S
        KeySchema:
          - AttributeName: recordUuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: owner-index
            KeySchema:
              - AttributeName: owner
                KeyType: HASH
              - AttributeName: profileUuid
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    customers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rtfm-customers-${{self:custom.stage}}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    #sessions:
    #  Type: AWS::DynamoDB::Table
    #  Properties:
    #    TableName: rtfm-sessions-${{self:custom.stage}}
    #    AttributeDefinitions:
    #      - AttributeName: sessionUuid
    #        AttributeType: S
    #    KeySchema:
    #      - AttributeName: sessionUuid
    #        KeyType: HASH
    #    ProvisionedThroughput:
    #      ReadCapacityUnits: 1
    #      WriteCapacityUnits: 1
    #
    #nodes:
    #  Type: AWS::DynamoDB::Table
    #  Properties:
    #    TableName: rtfm-nodes-${{self:custom.stage}}
    #    AttributeDefinitions:
    #      - AttributeName: nodeUuid
    #        AttributeType: S
    #    KeySchema:
    #      - AttributeName: nodeUuid
    #        KeyType: HASH
    #    ProvisionedThroughput:
    #      ReadCapacityUnits: 1
    #      WriteCapacityUnits: 1


    rtfmTopicRule:
      Type: AWS::IoT::TopicRule
      Properties:
        RuleName: rtfm2dynamo
        TopicRulePayload:
          Sql: >-
            SELECT deviceId, timestamp_nodeId, data FROM 'rtfm/#'
          RuleDisabled: false
          Actions:
            - DynamoDBv2:
                PutItem:
                  TableName: ${{self:provider.environment.RTFM_TIMESERIES_TABLE}}
                RoleArn:
                  Fn::GetAtt: [rtfmRole, Arn]

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${{secret:settings:api.origin}}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-aws-authorizer'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'${{secret:settings:api.origin}}'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-aws-authorizer'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    rtfmRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: rtfm-role-${{self:custom.stage}}
        Policies:
          - PolicyName: rtfm-fullstack-policy-${{self:custom.stage}}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogStreams
                    - dynamodb:*
                    - iot:*
                    - cognito-identity:*
                    - cognito-idp:*
                    - ses:SendEmail
                  Resource: "*"
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - iot.amazonaws.com
              Action:
                - sts:AssumeRole
