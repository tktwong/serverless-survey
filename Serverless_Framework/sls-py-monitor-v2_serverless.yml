service: sls-py-webmonitor

custom:
  stage: ${opt:stage, self:provider.stage}
  func_prefix: ${self:service}-${self:custom.stage}
  private: false # Change to 'true' if you don't want to 


provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: ap-northeast-1
  memorySize: 128
  cfLogs: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:${self:provider.region}:*:function:*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SITE_TABLE_NAME}"
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: "${self:resources.Outputs.SitesSNSTopicArn.Value}"
    - Effect: "Allow"
      Action: 
        - "mobileanalytics:PutEvents"
      Resource: "*"

  environment:
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_STAGE: ${self:custom.stage}
    SITE_TABLE_NAME: ${self:service}-sites-${self:custom.stage}
    SNS_TOPIC_ARN: ${self:resources.Outputs.SitesSNSTopicArn.Value}
    S3_REACT_DATA: ${self:service}-bucket-${self:custom.stage}
    SITE_URL: ${self:provider.environment.S3_REACT_DATA}.s3-website-${self:provider.region}.amazonaws.com

functions:
  register:
    handler: handler.register
    name: ${self:custom.func_prefix}-register
    description: "${self:service}: Register target website to DynamoDB"
    events:
      - http:
          path: register
          method: post
          cors: true
          private: ${self:custom.private}
  remove:
    handler: handler.remove
    name: ${self:custom.func_prefix}-remove
    description: "${self:service}: Remove target website from DynamoDB"
    events:
      - http:
          path: remove
          method: post
          cors: true
          private: ${self:custom.private}
  check_sites:
    handler: lib/backend.check_sites
    name: ${self:custom.func_prefix}-check_sites
    description: "${self:service}: Check status code of each sites"
    events:
      - schedule: rate(5 minutes)
  sns:
    handler: lib/backend.sns
    name: ${self:custom.func_prefix}-sns
    description: "${self:service}: Notify when website's status is changed"
    #environment:
    #  SNS_TOPIC_ARN: ${self:resources.Outputs.SitesSNSTopicArn.Value}
  get_site:
    handler: handler.get_site
    name: ${self:custom.func_prefix}-get_site
    events: 
      - http:
          path: get_site
          method: get
          cors: true
resources:
  Resources:
    SitesDynamo:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.SITE_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3ReactData:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: ${self:provider.environment.S3_REACT_DATA}
    SitesSNS:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:custom.stage}
        DisplayName: "Serverless Web Monitor"
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:custom.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${self:custom.stage}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false


  Outputs:
    SitesSNSTopicArn:
      Value: {Ref: SitesSNS}
    UserPoolId:
      Value: {Ref: CognitoUserPool}
    UserPoolClientId:
      Value: {Ref: CognitoUserPoolClient}

