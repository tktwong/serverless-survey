# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hackathon18lumohours
provider:
  name: aws
  runtime: go1.x

  stage: dev
  region: eu-west-2
  environment: 
    IFTTT_SERVICE_KEY: ${opt:ifttt}
    DB_ADDR: ${opt:db}
package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:

  clear-new-events:
    handler: bin/clear-new-events
    events:
     - http:
         path: /set-mock-data
         method: delete
         cors: true

  set-mock-data:
    handler: bin/set-mock-data
    events:
     - http:
         path: /set-mock-data
         method: post
         cors: true

  status:
    handler: bin/status
    events:
     - http:
         path: /ifttt/v1/status
         method: get

  test-setup:
    handler: bin/test-setup
    events:
     - http:
         path: /ifttt/v1/test/setup
         method: post

  hours:
    handler: bin/trigger
    events:
     - http:
         path: /ifttt/v1/triggers/lumo_hours
         method: post

  hoursStartOptions:
    handler: bin/trigger-time-options
    events:
     - http:
         path: /ifttt/v1/triggers/lumo_hours/fields/hours_start/options
         method: post

  hoursStopOptions:
    handler: bin/trigger-time-options
    events:
     - http:
         path: /ifttt/v1/triggers/lumo_hours/fields/hours_stop/options
         method: post

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
