# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-eventstore # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  runtime: go1.x
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#iamRoleStatements:
#  - Effect: Allow
#    Action:
#      - dynamodb:DescribeTable
#      - dynamodb:Query
#      - dynamodb:Scan
#      - dynamodb:GetItem
#      - dynamodb:PutItem
    # Restrict our IAM role permissions to
    # the specific table for the stage
#    Resource:
#      - "Fn::GetAtt": [ Events, EventSources, Arn ]

# you can define service wide environment variables here
environment:
  S3_MIGRATIONS_PATH: ${self:custom.S3.MIGRATIONS_PATH}
  AURORA_HOST: ${self:custom.AURORA.HOST}
  AURORA_PORT: ${self:custom.AURORA.PORT}
  AURORA_DATABASE: ${self:custom.AURORA.DATABASE}
  AURORA_USERNAME: ${self:custom.AURORA.USERNAME}

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  migrate:
    handler: bin/migrate
  write:
    handler: bin/write
    events:
      - http:
          path: /
          method: post
  read:
    handler: bin/read
    events:
      - http:
          path: /
          method: get

plugins:
  - serverless-sam
  - serverless-domain-manager

custom:
  stage: ${opt:stage, self:provider.stage}
  AURORA:
    HOST:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
    PORT:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
    DATABASE: aurora${self:custom.stage}
    USERNAME: master
    PASSWORD: ${file(ssm.js):AURORA_PASSWORD}
    VPC_CIDR: 10
  S3:
    MIGRATIONS_PATH: event-store/migrations
  customDomain:
    domainName: protoblue.com
    stage: ${self:custom.stage}
    basePath: "events"
    createRoute53Record: true
    endpointType: 'regional'

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
#  - ${file(resources/s3.yml)}
  - ${file(resources/auroradb.yml)}
