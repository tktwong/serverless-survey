service: k3

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  tracing: true
  iamRoleStatements:
    - Effect: "Allow"
      Action: lambda:InvokeFunction
      Resource: '*'
    - Effect: "Allow"
      Action: 
          - sqs:SendMessageBatch
          - sqs:SendMessage
      Resource: '*'
    - Effect: "Allow"
      Action: sns:Publish
      Resource: '*'
    - Effect: "Allow"
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: '*'

functions:
  hello:
    handler: k3.doIt
    environment:
      DOWNSTREAM_Q_URL:
        Ref: K3Q
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - K3
              - Arn
  processRecord:
    handler: k3.doRecord
#    vpc:
#      securityGroupIds:
#        - sg-0795c1be5cf1c7c5c
#      subnetIds:
#        - subnet-004d36d2ec80d8009
#        - subnet-03472c7eb7ef6c783
    reservedConcurrency: 10
    events:
      - sqs:
          arn:
            Fn::GetAtt: 
              - K3Q
              - Arn
          batchSize: 1
    onError: 
      Ref: ProcessingErrors


resources:
  Resources:
    K3:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: "K3Stream-${self:provider.stage}"
        ShardCount: 1

    ProcessingErrors:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "K3ProcessingError-${self:provider.stage}"

    K3Q:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "K3Q-${self:provider.stage}"

plugins:
  - serverless-plugin-tracing