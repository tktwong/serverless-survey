# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: airbnb-manager # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

package:
  individually: true

provider:
  name: aws
  runtime: nodejs6.10
  region: ap-southeast-1
  stage: dev
  environment:
    OPT_STAGE: ${self:custom.stage}
  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)
    - Effect: Allow
      Principal: "*"
      Action: "Update:*"
      Resource: "*"
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "lambda:*"
         - "dynamodb:*"
         - "s3:*"
       Resource: '*'

custom:
  env:
    dev: ${file(./config/serverless.dev.yml)}
    prod: ${file(./config/serverless.prod.yml)}
  service: ${self:custom.env.${self:custom.stage}}
  stage: ${opt:stage, self:provider.stage}
  config: ${file(./config/config.json)}
  webpack: ./webpack.config.${self:custom.stage}.js
  webpackIncludeModules: 
    forceExclude:
          - aws-sdk

  # the following will resolve identically in other serverless.yml files so long as they define
  # `custom.newService: ${file(<relative-path-to-this-file>/serverless.yml)}`
  # exportName: ${self:custom.newService.service}-export
  dynamodb:
    start:
      port: 8001
      inMemory: true
      migrate: true
      seed: false
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
  serverless-offline:
    resourceRoutes: true


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

resources: ${self:custom.service.resources}
functions:
  # test: ${self:custom.service.functions.test}
  receive:
    handler: src/handlers/auth.receive
    events:
          - http:
              path: webhook
              method: post
              cors: true
  airbnb_send_message: ${self:custom.service.functions.airbnb_send_message}
  schedule_before_checkout: ${self:custom.service.functions.schedule_before_checkout}
  schedule_new_booking: ${self:custom.service.functions.schedule_new_booking}
  schedule_before_checkin: ${self:custom.service.functions.schedule_before_checkin}
  schedule_after_checkin: ${self:custom.service.functions.schedule_after_checkin}
  google_api_call: ${self:custom.service.functions.google_api_call}


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-offline
