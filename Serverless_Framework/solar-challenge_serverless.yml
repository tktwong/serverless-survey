service: solar-challenge

plugins:
  - serverless-offline
  - serverless-s3-local
  - serverless-webpack

functions:
  solar-challenge:
    handler: src/handler.solar
    events:
      - http:
          path: solar-challenge
          method: post
          cors: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'test'}
  region: eu-west-2
  deploymentBucket:
    name: ${self:custom.deploymentBucket.${self:provider.stage}}

  environment:
    ENV: ${self:custom.env.${self:provider.stage}}
    STORE_S3_BUCKET: ${self:custom.storeBucket.${self:provider.stage}}
    VERSION: ${file(./package.json):version}
    S3_HOST: ${self:custom.s3.host}
    S3_PORT: ${self:custom.s3.port}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:ListBucket" 
      Resource: "arn:aws:s3:::${self:custom.deploymentBucket.${self:provider.stage}}/*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:ListBucket" 
      Resource: "arn:aws:s3:::${self:custom.storeBucket.${self:provider.stage}}/*"

custom:
  s3:
    host: 0.0.0.0
    port: 8001
  storeBucket:
    dev: 'solar-store'
    test: 'solar-store'
    prod: 'solar-store'
  env:
    dev: 'dev'
    test: 'test'
    prod: 'prod'
  deploymentBucket: 
    dev: ronnie-serverless-deployments
    test: ronnie-serverless-deployments
    prod: ronnie-serverless-deployments

resources:
  Conditions:
    IsDev:
      Fn::Equals:
        - ${opt:stage}
        - dev
  Resources:
    storeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.storeBucket.${self:provider.stage}}
      Condition: IsDev 

package:
  individually: true
  exclude:
    - test/**
  include:
    - src/**
  excludeDevDependencies: true
