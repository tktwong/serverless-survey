service: conferences-api

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-east-1

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createConference:
    handler: createConference.main
    events:
      - http:
          path: conferences
          method: post
          cors: true
          authorizer: aws_iam

  getConference:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: getConference.main
    events:
      - http:
          path: conferences/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listConferences:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: listConferences.main
    events:
      - http:
          path: conferences
          method: get
          cors: true
          authorizer: aws_iam

  updateConference:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: updateConference.main
    events:
      - http:
          path: conferences/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteConference:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: deleteConference.main
    events:
      - http:
          path: conferences/{id}
          method: delete
          cors: true
          authorizer: aws_iam
#--------------------------------------------------------------------------------------
  createParticipant:
    handler: createParticipant.main
    events:
      - http:
          path: participants
          method: post
          cors: true
          authorizer: aws_iam

  getParticipant:
    handler: getParticipant.main
    events:
      - http:
          path: participants/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listParticipants:
    handler: listParticipants.main
    events:
      - http:
          path: participants
          method: get
          cors: true
          authorizer: aws_iam

  updateParticipant:
    handler: updateParticipant.main
    events:
      - http:
          path: participants/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteParticipant:
    handler: deleteParticipant.main
    events:
      - http:
          path: participants/{id}
          method: delete
          cors: true
          authorizer: aws_iam
#--------------------------------------------------------------------------------------
  createRegCategory:
    handler: createRegCategory.main
    events:
      - http:
          path: regcategories
          method: post
          cors: true
          authorizer: aws_iam

  getRegCategory:
    handler: getRegCategory.main
    events:
      - http:
          path: regcategories/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listRegCategories:
    handler: listRegCategories.main
    events:
      - http:
          path: regcategories
          method: get
          cors: true
          authorizer: aws_iam

  updateRegCategory:
    handler: updateRegCategory.main
    events:
      - http:
          path: regcategories/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteRegCategory:
    handler: deleteRegCategory.main
    events:
      - http:
          path: regcategories/{id}
          method: delete
          cors: true
          authorizer: aws_iam
#--------------------------------------------------------------------------------------
  createRegContext:
    handler: createRegContext.main
    events:
      - http:
          path: regcontexts
          method: post
          cors: true
          authorizer: aws_iam

  getRegContext:
    handler: getRegContext.main
    events:
      - http:
          path: regcontexts/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listRegContexts:
    handler: listRegContexts.main
    events:
      - http:
          path: regcontexts
          method: get
          cors: true
          authorizer: aws_iam

  updateRegContext:
    handler: updateRegContext.main
    events:
      - http:
          path: regcontexts/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteRegContext:
    handler: deleteRegContext.main
    events:
      - http:
          path: regcontexts/{id}
          method: delete
          cors: true
          authorizer: aws_iam
