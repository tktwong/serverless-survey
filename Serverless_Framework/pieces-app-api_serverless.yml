# NOTE: update this with your service name
service: pieces-app-2-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-pieces
  userTableName: ${self:custom.stage}-users
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      true
      # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region:
    us-east-1
    # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    userTableName: ${self:custom.userTableName}
    stripeSecretKey: ${self:custom.environment.stripeSecretKey}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [PiecesTable, Arn]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /pieces
  # - method: POST request
  # - cors: enabled CORS for browser cross domain api call
  # - authorizer: authenticate using the AWS IAM rolw
  create:
    handler: create.main
    events:
      - http:
          path: pieces
          method: post
          cors: true
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /pieces/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: pieces/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /pieces
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: pieceslist/{versionId}
          method: get
          cors: true
          authorizer: aws_iam
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /pieces/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: pieces/{id}
          method: put
          cors: true
          authorizer: aws_iam
  practise:
    # Defines an HTTP API endpoint that calls the main function in practise.js
    # - path: url path is /pieces/{id}
    # - method: POST request
    handler: practise.main
    events:
      - http:
          path: practise/{id}
          method: post
          cors: true
          authorizer: aws_iam
  resetWeek:
    # Defines an HTTP API endpoint that calls the main function in resetWeek.js
    # - path: url path is /resetWeek
    # - method: POST request
    handler: resetWeek.main
    events:
      - http:
          path: resetWeek
          method: post
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /pieces/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: pieces/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
  # API Gateway errors
  - ${file(resources/api-gateway-errors.yml)}
