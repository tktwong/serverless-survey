service: thumbnail-api

app: thumbnail-api
org: skaznowiecki

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  region: us-east-1
  environment:
    BUCKET: ${file(./.env.yml):BUCKET}
    BASE_PATH: ${file(./.env.yml):BASE_PATH}
    REGION: ${file(./.env.yml):REGION}
    ACCESS_KEY: ${env:ACCESS_KEY}
    SECRET_KEY: ${env:SECRET_KEY}
    
functions:
  store:
    handler: handlers/api.store
    events:
      - http:
          path: thumbs
          method: post
          cors: true
    environment:
      MAX_SIZE: ${file(./.env.yml):MAX_SIZE}
      ALLOW_FORMATS: ${file(./.env.yml):ALLOW_FORMATS}
  show:
    handler: handlers/api.show
    events:
      - http:
          path: thumbs/{id}
          method: get
          cors: true
          request: 
            parameters:
               paths: 
                 id: true
          
  resize:
    handler: handlers/process.resize
    events:
      - s3:
          bucket: ${file(./.env.yml):BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
          existing: true

resources:
  Resources:
    ApiAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        Name: AuthUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: 
          Ref: ApiGatewayRestApi
        ProviderARNs: 
          - Fn::GetAtt:
              - UserPool
              - Arn
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${opt:stage,'dev'}-sinapsis-user-pool

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(./.env.yml):BUCKET}
        AccessControl: PublicReadWrite
        CorsConfiguration:
          CorsRules:
          - AllowedOrigins:
            - '*'
            AllowedHeaders:
            - '*'
            AllowedMethods:
            - GET
            - HEAD
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3Bucket
        PolicyDocument:
          Statement:
              Action:
                - s3:GetObject
              Effect: Allow
              Resource:
                Fn::Join: ['', [Fn::GetAtt: [ S3Bucket, Arn ], '/*'] ]
              Principal: "*"