
service: sls-athena # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7

# you can overwrite defaults here
#  stage: dev
  region: eu-central-1


  # NOTE: THESE ARE EXTREMELY BROAD PERMISSIONS, DON'T USE IN PRODUCTION!
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
        - "glue:*"
        - "athena:*"
        - "cloudwatch:*"
      Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:

  exclude:
  # The pre-installed boto is sufficient
    - venv/**
    - node_modules/**
    - doc/**

functions:
  ShortRunningQuery:
    handler: handler.short_running_query

  StartLongRunningQuery:
    handler: handler.start_long_running_query

  GetLongRunningQueryStatus:
    handler: handler.get_long_running_query_status

  GetLongRunningResult:
    handler: handler.get_long_running_result

stepFunctions:
  stateMachines:
    long_running_query:
      name: "Long-running-query-demo"
      definition:
        StartAt: start_long_running_query
        States:
          start_long_running_query:
            Type: Task
            Resource:
              Fn::GetAtt: [StartLongRunningQueryLambdaFunction, Arn]
            Next: wait_five_seconds
          wait_five_seconds:
            Type: Wait
            Seconds: 5
            Next: get_query_status
          get_query_status:
            Type: Task
            Resource:
              Fn::GetAtt: [GetLongRunningQueryStatusLambdaFunction, Arn]
            Next: check_query_status
          query_failed:
            Type: Fail
            Cause: Cause unclear, investigate the cloudwatch logs
            Error: The query failed, check the logs.
          check_query_status:
            Type: Choice
            Choices:
              - Or:
                  - Variable: "$.WaitTask.QueryState"
                    StringEquals: FAILED
                  - Variable: "$.WaitTask.QueryState"
                    StringEquals: CANCELED
                Next: query_failed
              - Or:
                  - Variable: "$.WaitTask.QueryState"
                    StringEquals: RUNNING
                  - Variable: "$.WaitTask.QueryState"
                    StringEquals: QUEUED
                Next: wait_five_seconds
              - Variable: "$.WaitTask.QueryState"
                StringEquals: SUCCEEDED
                Next: process_query_result
          process_query_result:
            Type: Task
            Resource:
              Fn::GetAtt: [GetLongRunningResultLambdaFunction, Arn]
            End: true

plugins:
  - serverless-step-functions
