service:
  name: serverless-bookshelf-app

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeMOdules: true

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1KB

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    BOOKS_TABLE: Books-${self:provider.stage}
    TITLE_INDEX: TitleIndex
    CREATED_AT_INDEX: CreatedAtIndex
    RATING_INDEX: RatingIndex
    ATTACHMENTS_S3_BUCKET: serverless-bookshelf-nitin-ab123de-attachments-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  tracing:
    lambda: true
    apiGateway: true
  
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetBooks:
    handler: src/lambda/http/getBooks.handler
    events:
      - http:
          method: get
          path: books
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/${self:provider.environment.CREATED_AT_INDEX}

  CreateBook:
    handler: src/lambda/http/createBook.handler
    events:
      - http:
          method: post
          path: books
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validation/models/create-book-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

  UpdateBook:
    handler: src/lambda/http/updateBook.handler
    events:
      - http:
          method: patch
          path: books/{bookId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validation/models/update-book-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

  DeleteBook:
    handler: src/lambda/http/deleteBook.handler
    events:
      - http:
          method: delete
          path: books/{bookId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}

  GenerateUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: books/{bookId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'

  emailAddBook:
    handler: src/lambda/http/sendEmailOnBookCreate.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt BooksDynamoDBTable.StreamArn
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:*
        Resource: '*'


resources:
  Resources:

    GatewayResponseDefault4XX:  # Required to satisfy CORS if Authorization is not granted
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    BooksDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: rating
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: bookId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.TITLE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: title
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.RATING_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: rating
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BOOKS_TABLE}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
