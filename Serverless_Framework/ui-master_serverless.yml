service:
  name: santaswap-ui

plugins:
  - serverless-plugin-epsagon
  - serverless-webpack
  - serverless-cloudformation-resource-counter
  - serverless-plugin-iam-checker

provider:
  name: aws
  runtime: nodejs8.10
  stage: local
  iamRoleStatements:
    - Effect: Allow
      Action: cloudfront:CreateInvalidation
      Resource: '*'
    - Effect: Allow
      Action: sns:Publish
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - SiteUpdated${opt:stage, self:provider.stage}
  environment:
    REVISION: ${file(helper.js):revision}
    STAGE: ${opt:stage, self:provider.stage}

custom:
  domain:
    prod: ${opt:domain, env:DOMAIN}
    stage: ${opt:stage, self:provider.stage}.${opt:domain, env:DOMAIN}
  epsagon:
    token: ${env:EPSAGON_TOKEN}
    appName: ${self:service.name}-${opt:stage, self:provider.stage}
  hostedZones:
    cloudFront: Z2FDTNDATAQYW2
    domain: ${opt:domainHostedZoneId, env:DOMAIN_HOSTED_ZONE_ID}
  iamChecker:
    resources:
      # Unfortunately need to allow wildcard only because CloudFront doesn't support resource ARNs in IAM
      allowWildcardOnly: true

functions:
  invalidateCDN:
    handler: invalidate-cdn.handler
    events:
      - sns: SiteUpdated${opt:stage, self:provider.stage}
    environment:
      CDN: { Fn::If: [Prod, { Ref: CDN }, ''] }

  bucketEvent:
    handler: bucket-event.handler
    environment:
      SITE_UPDATED_SNS:
        Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - SiteUpdated${opt:stage, self:provider.stage}

resources:
  Description: Static site hosting for Santa Swap website

  Conditions:
    Prod: { Fn::Equals: ['${opt:stage, self:provider.stage}', prod] }

  Mappings:
    S3Domains:
      us-east-1:
        DNS: s3-website-us-east-1.amazonaws.com
        HostedZoneId: Z3AQBSTGFYJSTF

  Resources:
    SiteS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: '${self:custom.domain.stage}'
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: 's3:ObjectCreated:*'
              Filter:
                S3Key:
                  Rules:
                    - Name: suffix
                      Value: index.html
              Function:
                Fn::GetAtt: [BucketEventLambdaFunction, Arn]

    BucketEventLambdaPermission:
      DependsOn:
        - BucketEventLambdaFunction
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt: [BucketEventLambdaFunction, Arn]
        Action: 'lambda:InvokeFunction'
        Principal: 's3.amazonaws.com'
        SourceArn: 'arn:aws:s3:::${self:custom.domain.stage}'

    NakedRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: { Fn::If: [Prod, '${self:custom.domain.prod}', '${self:custom.domain.stage}'] }
        Type: A
        AliasTarget:
          DNSName:
            Fn::If:
              - Prod
              - Fn::GetAtt: CDN.DomainName
              - Fn::FindInMap: [S3Domains, { Ref: AWS::Region }, DNS]
          HostedZoneId:
            Fn::If:
              - Prod
              - ${self:custom.hostedZones.cloudFront}
              - Fn::FindInMap: [S3Domains, { Ref: AWS::Region }, HostedZoneId]
        HostedZoneId: ${self:custom.hostedZones.domain}

    WWWRecordSet:
      Type: AWS::Route53::RecordSet
      Properties:
        Name: { Fn::If: [Prod, 'www.${self:custom.domain.prod}', 'www.${self:custom.domain.stage}'] }
        Type: A
        AliasTarget:
          DNSName:
            Fn::If:
              - Prod
              - Fn::GetAtt: CDN.DomainName
              - Fn::FindInMap: [S3Domains, { Ref: AWS::Region }, DNS]
          HostedZoneId:
            Fn::If:
              - Prod
              - ${self:custom.hostedZones.cloudFront}
              - Fn::FindInMap: [S3Domains, { Ref: AWS::Region }, HostedZoneId]
        HostedZoneId: ${self:custom.hostedZones.domain}

    DomainCertificate:
      Type: AWS::CertificateManager::Certificate
      Condition: Prod
      Properties:
        DomainName: '*.${self:custom.domain.prod}'
        DomainValidationOptions:
          - DomainName: '*.${self:custom.domain.prod}'
            ValidationDomain: ${self:custom.domain.prod}
        SubjectAlternativeNames:
          - ${self:custom.domain.prod}

    CDN:
      Type: AWS::CloudFront::Distribution
      Condition: Prod
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domain.prod}
            - www.${self:custom.domain.prod}
          CustomErrorResponses:
            - ErrorCode: 404
              ErrorCachingMinTTL: 0
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ErrorCachingMinTTL: 0
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD, OPTIONS]
            TargetOriginId: StaticSiteOrigin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            DefaultTTL: 2592000 # 1 month
            MinTTL: 2592000 # 1 month
            MaxTTL: 31536000 # 1 year
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          Origins:
            - DomainName:
                Fn::GetAtt: SiteS3Bucket.DomainName
              Id: StaticSiteOrigin
              S3OriginConfig:
                OriginAccessIdentity: ''
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn:
              Ref: DomainCertificate
            SslSupportMethod: sni-only
