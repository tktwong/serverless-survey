tenant: 
app: 
service: qiankun-crud

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    IS_OFFLINE: true
    DYNAMODB_QIANKUN_TABLE: ${self:service}-qiankun-${opt:stage}
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan*
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-qiankun-${opt:stage}

plugins:
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-dynamodb-local  

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: /v1/qiankun
          method: post
  list:
    handler: handler.list
    events:
      - http:
          path: /v1/qiankun
          method: get    
  get:
    handler: handler.get
    events:
      - http:
          path: /v1/qiankun/{name}
          method: get    
  update:
    handler: handler.update
    events:
      - http:
          path: /v1/qiankun/{name}
          method: put    
  delete:
    handler: handler.delete
    events:
      - http:
          path: /v1/qiankun/{name}
          method: delete    

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true        

resources:
  Resources:
    qiankunTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:service}-qiankun-${opt:stage}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S        
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
