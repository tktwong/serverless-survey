service: serverless-app
app: myapp
org: brgmnadam

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 1024
  region: us-east-1
  environment:
    CLIENT_ID: ${ssm:/login/clientId~true}
    CLIENT_SECRET: ${ssm:/login/clientSecret~true}
    SECRET_TOKEN: ${ssm:secretToken~true}
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    WSS_TABLE_NAME: ${self:custom.wssTableName}
    CLIENT_URL: https://github-app.adambergman.me
    SERVER_URL: https://sls-github.adambergman.me
  iamRoleStatements:
    - Effect: Allow
      Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:us-east-1:*:*'

plugins:
  - serverless-finch
  - serverless-domain-manager

custom:
  usersTableName: githubUsers
  wssTableName: socketUsers
  client:
    bucketName: github-app.adambergman.me
    distributionFolder: ../client/build
    indexDocument: index.html
    errorDocument: index.html
  customDomain:
    domainName: sls-github.adambergman.me
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    
functions:
  oauthCallback:
    handler: lambdas/oauthCallback.handler
    events:
      - http:
          path: /oauth/callback
          method: get
          cors: true
  index:
    handler: lambdas/index.handler
    events:
      - http:
          path: /
          method: get
          cors: true
  user:
    handler: lambdas/user/saveUser.handler
    events:
      - http:
          path: /user
          method: post
          cors: true
  updateUser:
    handler: lambdas/user/updateUserRepos.handler
    events:
      - http:
          path: /updateUser
          method: post
          cors: true
  updateUserURL:
    handler: lambdas/user/updateUserURL.handler
    events:
      - http:
          path: /updateUserURL
          method: post
          cors: true
  deleteUserNotifications:
    handler: lambdas/user/deleteUserNotifications.handler
    events:
      - http:
          path: /deleteUserNotifications
          method: delete
          cors: true
  addWebhook:
    handler: lambdas/addWebhook.handler
    events:
      - http:
          path: /addWebhook
          method: post
          cors: true
  getWebhook:
    handler: lambdas/getWebhook.handler
    events:
      - http:
          path: /webhook
          method: post
          cors: true
  websocket-connect:
    handler: lambdas/websockets/connect.handler
    events:
      - websocket:
          route: $connect
  websocket-disconnect:
    handler: lambdas/websockets/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  websocket-default:
    handler: lambdas/websockets/default.handler
    events:
      - websocket:
          route: $default

resources:
  Resources:
    WebSocketUsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.wssTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST