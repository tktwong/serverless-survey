# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: dynamo-lambda-cognito-serverless

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion:                                     "=X.X.X"


# Package Configuration
package:
  exclude:
    - .dynamodb/**
    - src/**
    - .gitignore
    - package-lock.json
    - tsconfig.json
    - yarn.lock

provider:
  name:                                                 aws
  runtime:                                              nodejs8.10

# you can overwrite defaults here
#  stage:                                               dev
  region:                                               us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:                                    # permissions for all of your functions can be set here
    - Effect:                                           Allow
      Action:                                           # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem

      Resource:                                         "arn:aws:dynamodb:us-east-1:*:*"

# you can define service wide environment variables here
#  environment:
#    variable1:                                         value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

plugins:
  # - serverless-reqvalidator-plugin
  # - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-offline

functions:
  ListTasks:
    handler:                                            dist/Tasks/list.default
    events:
      - http:
          path:                                         tasks
          method:                                       get
          cors:                                         true
          reqValidatorName:                             'xValidateParams'
          authorizer:                                   aws_iam
          request:
            parameters:
              querystrings:
                id:                                     false
                name:                                   false
                description:                            false
  CreateTasks:
    handler:                                            dist/Tasks/create.default
    events:
      - http:
          path:                                         tasks
          method:                                       post
          cors:                                         true
          reqValidatorName:                             'xValidateParams'
          authorizer:                                   aws_iam
  DeleteTasks:
    handler:                                            dist/Tasks/delete.default
    events:
      - http:
          path:                                         tasks
          method:                                       delete
          cors:                                         true
          reqValidatorName:                             'xValidateParams'
          authorizer:                                   aws_iam
          request:
              parameters:
                querystrings:
                  id:                                   true

#    The following are a few example events you can configure
#    NOTE:                                              Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path:                                        users/create
#          method:                                      get
#      - s3:                                            ${env:BUCKET}
#      - schedule:                                      rate(10 minutes)
#      - sns:                                           greeter-topic
#      - stream:                                        arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill:                                    amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome:                                amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql:                                         "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog:                                 '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool:                                        MyUserPool
#          trigger:                                     PreSignUp

#    Define function environment variables here
#    environment:
#      variable2:                                       value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    tasksTable:
      Type:                                             AWS::DynamoDB::Table
      Properties:
        TableName:                                      Task
        AttributeDefinitions:
          - AttributeName:                              id
            AttributeType:                              S
        KeySchema:
          - AttributeName:                              id
            KeyType:                                    HASH
        ProvisionedThroughput:
          ReadCapacityUnits:                            1
          WriteCapacityUnits:                           1
    xValidateParams:
      Type:                                             "AWS::ApiGateway::RequestValidator"
      Properties:
        Name:                                           'validate-params'
        RestApiId:
          Ref:                                          ApiGatewayRestApi
        ValidateRequestBody:                            false
        ValidateRequestParameters:                      true
    CognitoUserPool:
      Type:                                             AWS::Cognito::UserPool
      Properties:
        UserPoolName:                                   tasks-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type:                                             AWS::Cognito::UserPoolClient
      Properties:
        ClientName:                                     tasks-user-pool-client
        UserPoolId:
          Ref:                                          CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret:                                 false
    CognitoIdentityPool:
      Type:                                             AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName:                               CognitoUserPoolClient
        AllowUnauthenticatedIdentities:                 false
        CognitoIdentityProviders:
          - ClientId:
              Ref:                                      CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt:                               ["CognitoUserPool", "ProviderName"]

    CognitoIdentityPoolRoles:
      Type:                                             AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref:                                          CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:                                 [CognitoAuthRole, Arn]

    CognitoAuthRole:
      Type:                                             AWS::IAM::Role
      Properties:
        Path:                                           /
        AssumeRolePolicyDocument:
          Version:                                      '2012-10-17'
          Statement:
            - Effect:                                   'Allow'
              Principal:
                Federated:                              'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref:                                CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName:                                 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version:                                  '2012-10-17'
              Statement:
                - Effect:                               'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource:                             '*'

                - Effect:                               'Allow'
                  Action:
                    - 'execute-api:Invoke'
                  Resource:
                    Fn::Join:
                      - ''
                      -
                        - 'arn:aws:execute-api:'
                        - Ref:                          AWS::Region
                        - ':'
                        - Ref:                          AWS::AccountId
                        - ':'
                        - Ref:                          ApiGatewayRestApi
                        - '/*'

Outputs:
  UserPoolId:
    Value:
      Ref:                                              CognitoUserPool

  UserPoolClientId:
    Value:
      Ref:                                              CognitoUserPoolClient
  IdentityPoolId:
  Value:
    Ref:                                                CognitoIdentityPool
# Custom Resources
# custom:
