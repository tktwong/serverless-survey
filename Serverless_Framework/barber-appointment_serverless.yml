service:
  name: serverless-barber-appointments

frameworkVersion: 2

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${env:AWS_DEPLOY_STAGE, 'dev'}
  region: ${env:AWS_DEPLOY_REGION, 'us-east-1'}

  apiGateway:
    minimumCompressionSize: 1024

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    APPOINTMENTS_TABLE: Appointments-${self:provider.stage}
    BARBERS_TABLE: Appointments-${self:provider.stage}
    S3_ATTACHEMENTS_BUCKET: barber-appointment-files-${self:provider.stage}
    SIGNED_URL_EXPIRATION_TIME: 300

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'xray:PutTelemetryRecords'
        - 'xray:PutTraceSegments'
      Resource:
        - '*'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Barber Appointments API
        description: Serverless application for Barber Appointments
    models:
      - name: CreateAppointmentReq
        contentType: application/json
        schema: ${file(models/create-appointment-request.json)}
      - name: UpdateAppointmentReq
        contentType: application/json
        schema: ${file(models/update-appointment-request.json)}
      - name: UpdateAppointmentReviewReq
        contentType: application/json
        schema: ${file(models/update-appointment-review-request.json)}
      - name: UpdateAppointmentIsDoneReq
        contentType: application/json
        schema: ${file(models/update-appointment-is-done-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateAppointment:
    handler: src/lambda/http/createAppointment.handler
    events:
      - http:
          method: post
          path: appointments
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Appointment Item
            description: Create a new Appointment Item
            requestModels:
              application/json: CreateAppointmentReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}

  GetDAppointments:
    handler: src/lambda/http/getDoneAppointments.handler
    events:
      - http:
          method: get
          path: appointments
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_ATTACHEMENTS_BUCKET}/*

  GetUAppointments:
    handler: src/lambda/http/getUserAppointments.handler
    events:
      - http:
          method: get
          path: userappointments
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_ATTACHEMENTS_BUCKET}/*

  UpdateAppointment:
    handler: src/lambda/http/updateAppointment.handler
    events:
      - http:
          method: patch
          path: appointments/{appointmentId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a Appointment Item
            description: Update a Appointment Item
            requestModels:
              'application/json': UpdateAppointmentReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}

  UpdateReview:
    handler: src/lambda/http/updateAppointmentReview.handler
    events:
      - http:
          method: patch
          path: appointments/review/{appointmentId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a Appointment Review
            description: Update a Appointment Review
            requestModels:
              'application/json': UpdateAppointmentReviewReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}

  UpdateIsDone:
    handler: src/lambda/http/updateAppointmentIsDone.handler
    events:
      - http:
          method: patch
          path: appointments/done/{appointmentId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a Appointment done
            description: Update a Appointment done
            requestModels:
              'application/json': UpdateAppointmentIsDoneReq
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}

  DeleteAppointment:
    handler: src/lambda/http/deleteAppointment.handler
    events:
      - http:
          method: delete
          path: appointments/{appointmentId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete a Appointment Item
            description: Delete a Appointment Item
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_ATTACHEMENTS_BUCKET}/*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: get
          path: appointments/{appointmentId}/attachment/{prefix}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_ATTACHEMENTS_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.APPOINTMENTS_TABLE}

resources:
  Resources:

    AppointmentsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: appointmentId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: appointmentId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.APPOINTMENTS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_ATTACHEMENTS_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: BarberAppointmentS3Policy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: arn:aws:s3:::${self:provider.environment.S3_ATTACHEMENTS_BUCKET}/*
        Bucket:
          Ref: AttachmentsBucket

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
