service: brinquedos-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableNameRequests: Requests
    tableNameProducts: products
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan 
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - ses:SendEmail
      Resource: 
        - "*"

functions:
  create:
    handler: create.main
    events:
      - http:
          path: Requests
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: Requests/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  update:
    handler: update.main
    events:
      - http:
          path: Requests/{id}
          method: put
          cors: true
          authorizer: aws_iam


  list:
    handler: list.main
    events:
      - http:
          path: Requests
          method: get
          cors: true
          authorizer: aws_iam
  
  delete:
    handler: delete.main
    events:
      - http:
          path: Requests/{id}
          method: delete
          cors: true
          authorizer: aws_iam
        
  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

  sendMail:
    handler: sendMail.main
    events:
      - http:
          path: sendMail
          method: post
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  createProduct:
    handler: createProduct.main
    events:
      - http:
          path: createProduct
          method: post
          cors: true
          authorizer: aws_iam

  getProduct:
    handler: getProduct.main
    events:
      - http:
          path: getProduct/{id}
          method: get
          cors: true
          authorizer: aws_iam

  updateProduct:
    handler: updateProduct.main
    events:
      - http:
          path: updateProduct/{id}
          method: put
          cors: true
          authorizer: aws_iam

  listProduct:
    handler: listProduct.main
    events:
      - http:
          path: listProducts
          method: get
          cors: true
          authorizer: aws_iam

  deleteProduct:
    handler: deleteProduct.main
    events:
      - http:
          path: deleteProduct/{id}
          method: delete
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}