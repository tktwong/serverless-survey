# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: compassion-3 # NOTE: update this with your service name
plugins:
  - serverless-iam-roles-per-function
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  iamRoleStatements:
    - Effect: Allow
      Action:
      - "transcribe:StartTranscriptionJob"
      Resource: "*"
    - Effect: Allow
      Action:
      - "translate:TranslateText"
      Resource: "*"
    - Effect: Allow
      Action:
        - "S3:*"
      Resource:
      - "*"

custom:
#  transcribe_input_from_spanish_bucket_name: transcribe-input-from-spanish-dev-2
  transcribe_input_from_english_bucket_name: work-transcribe-input-from-english
  translate_input_to_spanish_bucket_name: work-translate-input-to-spanish
  translate_output_to_spanish_bucket_name: work-translate-output-to-spanish
#  translate_input_to_english_bucket_name: translate-input-to-english-dev-2
#  translate_output_to_english_bucket_name: translate-output-to-english-dev-2
#  twillio_bucket_from_spanish_to_english_output_bucket: twillio-bucket-from-sp-to-en-output-bucket-dev-2
  twillio_bucket_from_english_to_spanish_output_bucket: work-twillio-bucket-from-en-to-sp-output-bucket
#  polly_input_to_english: polly-input-to-english-dev-2
  polly_input_to_spanish: work-polly-input-to-spanish

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  transcribe_from_english:
    handler: transcribe_handler_from_english.transcribe_from_english
    events:
    - s3:
        bucket: ${self:custom.transcribe_input_from_english_bucket_name}
        event: s3:ObjectCreated:*
    environment:
      translate_input_bucket: ${self:custom.translate_input_to_spanish_bucket_name}

#  transcribe_from_spanish:
#    handler: transcribe_handler_from_spanish.transcribe_from_spanish
#    events:
#    - s3:
#        bucket: ${self:custom.transcribe_input_from_spanish_bucket_name}
#        event: s3:ObjectCreated:*
#    environment:
#      translate_input_bucket: ${self:custom.translate_input_to_english_bucket_name}

#  translate_to_english:
#    handler: translate_handler_to_english.translate_to_english
#    events:
#    - s3:
#        bucket: ${self:custom.translate_input_to_english_bucket_name}
#        event: s3:ObjectCreated:*
#    environment:
#      translate_output_bucket: ${self:custom.polly_input_to_english}

  translate_to_spanish:
    handler: translate_handler_to_spanish.translate_to_spanish
    events:
    - s3:
        bucket: ${self:custom.translate_input_to_spanish_bucket_name}
        event: s3:ObjectCreated:*
    environment:
      translate_output_bucket: ${self:custom.polly_input_to_spanish}

  polly_to_spanish:
    handler: polly_handler_to_spanish.polly_to_spanish
    events:
    - s3:
        bucket: ${self:custom.polly_input_to_spanish}
        event: s3:ObjectCreated:*
    environment:
      polly_output_bucket_to_spanish: ${self:custom.twillio_bucket_from_english_to_spanish_output_bucket}
#
#  polly_to_english:
#    handler: polly_handler_to_english.polly_to_english
#    events:
#    - s3:
#        bucket: ${self:custom.polly_input_to_english}
#        event: s3:ObjectCreated:*
#    environment:
#      polly_output_bucket_to_english: ${self:custom.twillio_bucket_from_spanish_to_english_output_bucket}

#    environment:
#      translate_input_bucket:
#      translate_output_bucket:
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
#    inputBucketTranscribe:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${self:custom.transcribe_input_bucket_name}
#    inputBucketTranslate:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${self:custom.translate_input_bucket_name}
    outputBucketTranslateToSpanish:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.translate_output_to_spanish_bucket_name}

#    outputBucketTranslateToEnglish:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${self:custom.translate_output_to_english_bucket_name}

#    twillioInputToEnglish:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${self:custom.twillio_bucket_from_spanish_to_english_output_bucket}

    twillioInputToSpanish:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.twillio_bucket_from_english_to_spanish_output_bucket}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
