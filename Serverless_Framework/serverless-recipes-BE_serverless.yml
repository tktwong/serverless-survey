service: serverless-recipes
# app and org for use with dashboard.serverless.com
app: serverless-recipes
org: deangilewicz

# Pin service to only deploy with a specific Serverless version
# frameworkVersion: "=X.X.X"

# where service will be deployed
provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.currentStage}
  region: us-west-2
  profile: ${self:custom.profiles.api}
  # cfnRole: ${self:custom.secrets.AWS_CRN_ROLE}
  # define service wide environment variables
  environment:
    AWS_APP_CLIENT_ID: ${self:custom.secrets.AWS_APP_CLIENT_ID}
    AWS_USER_POOL_ID: ${self:custom.secrets.AWS_USER_POOL_ID}
    # AWS_REGION is reserved
    AWS_THE_REGION: ${self:custom.secrets.AWS_THE_REGION}
    CLOUDINARY_CLOUD_NAME: ${self:custom.secrets.CLOUDINARY_CLOUD_NAME}
    CLOUDINARY_API_KEY: ${self:custom.secrets.CLOUDINARY_API_KEY}
    CLOUDINARY_API_SECRET: ${self:custom.secrets.CLOUDINARY_API_SECRET}
    RECIPES_TABLE_NAME: ${self:custom.recipesTableName}
    INDEX_TABLE_NAME: ${self:custom.indexTableName}
    FE_WEBSITE_DOMAIN: ${self:custom.secrets.FE_WEBSITE_DOMAIN}

  apiGateway:
    binaryMediaTypes:
      - "multipart/form-data"

# allow for function level iam roles
plugins:
  - serverless-iam-roles-per-function

# define and reference custom properties and values
custom:
  secrets: ${file(config/secrets.yml):${self:custom.currentStage}}
  defaultStage: api
  currentStage: ${opt:stage, self:custom.defaultStage}
  profiles:
    api: ${self:custom.secrets.AWS_IAM}
  userPoolName: serverless-recipes-user-pool-${self:custom.currentStage}
  userPoolClientName: serverless-recipes-user-pool-client-${self:custom.currentStage}
  indexTableName: r-index-${self:custom.currentStage}
  recipesTableName: r-recipes-${self:custom.currentStage}

# add packaging information here
package:
  #  include:
  #    - include-me.js
  #    - include-me-dir/**
  exclude:
    - config/**

functions:
  createUser:
    handler: lambdas/users.createUser
    description: Create Cognito user
    events:
      - http:
          path: api/users/create
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  confirmUser:
    handler: lambdas/users.confirmUser
    description: Confirm Cognito user
    events:
      - http:
          path: api/users/confirm
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  resendConfirmation:
    handler: lambdas/users.resendConfirmation
    description: Resend Cognito user confirmation code
    events:
      - http:
          path: api/users/resendConfirmation
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  forgotPassword:
    handler: lambdas/users.forgotPassword
    description: Cognito user forgot password
    events:
      - http:
          path: api/users/forgotPassword
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  forgotPasswordConfirm:
    handler: lambdas/users.forgotPasswordConfirm
    description: Cognito user forgot password confirmation
    events:
      - http:
          path: api/users/forgotPasswordConfirm
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  loginUser:
    handler: lambdas/users.login
    description: Log Cognito user in
    events:
      - http:
          path: api/users/login
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  authorization:
    handler: lambdas/users.authorization
    description: Authenticate cognito user
    events:
      - http:
          path: api/users/authorization
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Custom-Token
            allowCredentials: false
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  changePassword:
    handler: lambdas/users.changePassword
    description: Change Cognito user password
    events:
      - http:
          path: api/users/changePassword
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  updateUser:
    handler: lambdas/users.updateUser
    description: Change Cognito user attributes
    events:
      - http:
          path: api/users/updateUser
          method: put
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  deleteUser:
    handler: lambdas/users.deleteUser
    description: Delete Cognito user
    events:
      - http:
          path: api/users/deleteUser
          method: delete
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  logOutUser:
    handler: lambdas/users.logOut
    description: Log Cognito user out
    events:
      - http:
          path: api/users/logOut
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Custom-Token
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: CommonLibsLambdaLayer }

  createRecipe:
    handler: lambdas/recipes.createRecipe
    description: Create a user recipe
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource:
          - Fn::GetAtt: [RecipesTable, Arn]
          - Fn::GetAtt: [IndexTable, Arn]
    events:
      - http:
          path: api/recipes/create
          method: post
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: RecipeLibsLambdaLayer }

  getRecipesByUser:
    handler: lambdas/recipes.getRecipesByUser
    description: Get all recipes by user
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - Fn::GetAtt: [RecipesTable, Arn]
          - Fn::Join:
              [
                "/",
                [
                  Fn::GetAtt: [RecipesTable, Arn],
                  "index",
                  "recipesGlobalSecondaryIndex",
                ],
              ]
    events:
      - http:
          path: api/recipes
          method: get
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: RecipeLibsLambdaLayer }

  getRecipeByUser:
    handler: lambdas/recipes.getRecipeByUser
    description: Get a recipe by user
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - Fn::GetAtt: [RecipesTable, Arn]
          - Fn::Join:
              [
                "/",
                [
                  Fn::GetAtt: [RecipesTable, Arn],
                  "index",
                  "recipesGlobalSecondaryIndex",
                ],
              ]
    events:
      - http:
          path: api/recipes/{id}
          method: get
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: RecipeLibsLambdaLayer }

  updateRecipeByUser:
    handler: lambdas/recipes.updateRecipeByUser
    description: Update a recipe by user
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource:
          - Fn::GetAtt: [RecipesTable, Arn]
    events:
      - http:
          path: api/recipes/{id}/update
          method: put
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: RecipeLibsLambdaLayer }

  updateRecipeImageByUser:
    handler: lambdas/recipes.updateRecipeImageByUser
    description: Update a user's recipe image
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource:
          - Fn::GetAtt: [RecipesTable, Arn]
    events:
      - http:
          path: api/recipes/{id}/updateImage
          method: put
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: RecipeLibsLambdaLayer }

  deleteRecipeByUser:
    handler: lambdas/recipes.deleteRecipeByUser
    description: Delete a recipe by user
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource:
          - Fn::GetAtt: [RecipesTable, Arn]
    events:
      - http:
          path: api/recipes/{id}/delete
          method: delete
          # cors: true
          cors:
            origin: ${self:custom.secrets.FE_WEBSITE_DOMAIN} # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    layers:
      # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
      - { Ref: RecipeLibsLambdaLayer }

# layers allow for node modules to be referenced for fns
layers:
  commonLibs:
    path: layer
    compatibleRuntimes:
      - nodejs10.x
  recipeLibs:
    path: recipeLayer
    compatibleRuntimes:
      - nodejs10.x

# CloudFormation resource templates
resources:
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/dynamodb-index.yml)}
  - ${file(resources/dynamodb-recipes.yml)}
  - ${file(resources/api-gateway-authorizer.yml)}
  - ${file(resources/api-gateway-errors.yml)}
