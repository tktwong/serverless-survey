service:
  name: serverless-password-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}


  environment:
    LOGINS_TABLE: serverless-login-table-${self:provider.stage}
    INDEX_NAME: UserIdIndex
    S3_BUCKET: login-serverless-project-${self:provider.stage}

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Logins API
        description: Serverless application for managing logins
    models:
      - 
        name: CreateLoginRequest
        contentType: application/json
        schema:
          required: 
            - domainName
            - userName
            - password
          properties:
            domainName:
              type: string
            userName:
              type: string             
            password:
              type: string
      - 
        name: UpdateLoginRequest
        contentType: application/json
        schema:
          required: 
            - domainName
            - userName
            - password
          properties:
            domainName:
              type: string
            userName:
              type: string             
            password:
              type: string


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetLogins:
    handler: src/lambda/http/getLogins.handler
    events:
      - http:
          method: get
          path: logins
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOGINS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOGINS_TABLE}/index/UserIdIndex

  CreateLogin:
    handler: src/lambda/http/createLogin.handler
    events:
      - http:
          method: post
          path: logins
          cors: true
          authorizer: Auth
          reqvalidatorName: RequstBodyValidator
          documentation:
            summary: create new login
            description: create new login
            requestModels: 
              'application/json': CreateLoginRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOGINS_TABLE}

  UpdateLogin:
    handler: src/lambda/http/updateLogin.handler
    events:
      - http:
          method: patch
          path: logins/{loginId}
          cors: true
          authorizer: Auth
          reqvalidatorName: RequstBodyValidator
          documentation:
            summary: Update login
            description: Update login
            requestModels: 
              'application/json': CreateLoginRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOGINS_TABLE}

  DeleteLogin:
    handler: src/lambda/http/deleteLogin.handler
    events:
      - http:
          method: delete
          path: logins/{loginId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LOGINS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: logins/{loginId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*

resources:
  Resources:
    RequstBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        ValidateRequestBody: true
        ValidateRequestParameters: false
        RestApiId:
          Ref: ApiGatewayRestApi


    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    LoginTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: loginId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: loginId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.LOGINS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Policy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: s3:*
              Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
        Bucket: !Ref AttachmentBucket
