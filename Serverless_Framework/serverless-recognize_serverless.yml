# Welcome to #noServerNovember Challenge #6
# Twitter Bot that recognizes animal images

service: recognize 

custom: 
  # Our stage is based on what is passed in when running serverless
  # commands.  Or fallback to what we set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set our DynamoDB throughput based on stage
  tableThroughputs:
    prod: 1
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  tableName: ${self:custom.stage}-last-tweet

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ LastTweetTable, Arn ]
    - Effect: Allow
      Action: 
        - rekognition:DetectLabels
      Resource: 
        - "*"

# you can define service wide environment variables here
  environment:
    tableName: ${self:custom.tableName}
    region: ${self:provider.region}

functions:
  recognize:
    handler: handler.recognize
    events:
      - schedule: rate(15 minutes)    

# you can add CloudFormation resource templates here
resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
