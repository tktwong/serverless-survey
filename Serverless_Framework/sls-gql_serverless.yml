# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myService # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.21.0 <2.0.0"

plugins:
  - serverless-appsync-plugin
  # - serverless-webpack
  - serverless-appsync-offline
  - serverless-offline #serverless-offline needs to be last in the list

provider:
  name: aws
  runtime: nodejs8.10
  apiKeys:
    - token

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

custom:
  # supersecret: ${ssm:/aws/reference/secretsmanager/secret_ID_in_Secrets_Manager~true}
  accountId: abc #{AWS::AccountId}
  appSync:
    name: sls-appsync-api
    authenticationType: API_KEY
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: awsLambdaDataSource
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }  

  serverless-offline:
    resourceRoutes:
      YourCloudFormationMethodId:
        Uri: 'http://localhost:3001/assets/{proxy}'
functions:
  graphql:
    handler: handler.graphql
    # description: 
    events:
      - http:
          path: graphql
          method: get
          cors: true
      - http:
          path: graphql
          method: post
          cors: true

  graphqlAuthorizerWithFunctionName:
    handler: handler.graphql
    events:
      - http:
          path: graphqlAuthorizerWithCustomFunction
          method: get
          authorizer:
            name: authHandler
            identitySource: method.request.header.Authorization #Required for serverless-offline, although it's a default
            resultTtlInSeconds: 0 #prevents caching the authorizer

  authHandler:
    handler: handler.authHandler

  graphqlLambdaIntegration:
    handler: handler.graphqlLambdaIntegration
    events:
      - http:
          path: graphqlLambdaIntegration
          method: get
          integration: lambda
      - http:
          path: graphqlLambdaIntegration
          method: post
          integration: lambda
  basicAuthentication:
    handler: handler.basicAuthentication
    events:
      - http:
          path: fn2
          method: GET
          private: true

  samePathPublicGet:
    handler: handler.graphql
    events:
      - http:
          path: fn3
          method: GET

  samePathPrivatePost:
    handler: handler.basicAuthentication
    events:
      - http:
          path: fn3
          method: POST
          private: true

  catchAll:
    handler: handler.catchAll
    events:
      - http:
          path: /{proxy+}
          method: ANY
  pathParams:
    handler: handler.pathParams
    events:
      - http:
          path: /pathParams/{id}
          method: GET

# sns config
#  compute:
#     handler: handler.compute
#     events:
#       - sqs: arn:aws:sqs:region:XXXXXX:MyFirstQueue
#       - sqs:
#           arn:
#             Fn::GetAtt:
#               - MySecondQueue
#               - Arn
#       - sqs:
#           arn:
#             Fn::ImportValue: MyExportedQueueArnId
#       - sqs:
#           arn:
#             Fn::Join:
#               - ":"
#               - - arn
#                 - aws
#                 - sqs
#                 - Ref: AWS::Region
#                 - Ref: AWS::AccountId
#                 - MyOtherQueue
# 
resources:
  Resources:
    # AppSync lambda role
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:us-east-1:${self:custom.accountId}:function:myService-dev-graphql"
                    - "arn:aws:lambda:us-east-1:${self:custom.accountId}:function:myService-dev-graphql:*"
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/graphql'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
