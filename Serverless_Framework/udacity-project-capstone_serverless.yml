service:
  name: serverless-${self:provider.environment.PROJECT}-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-s3-local

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  #TODO uncomment when full code is enabled.
  # tracing:
  #   lambda: true
  #   apiGateway: true

  environment:
    TRACKER_TABLE: ${self:provider.environment.PROJECT}-${self:provider.stage}
    USERS_TABLE: users-${self:provider.stage}
    IMAGES_S3_BUCKET: images-${self:provider.environment.PROJECT}-${self:provider.stage}
    PROJECT: babytrack
custom:
  topicName: ${self:provider.environment.PROJECT}-Topic-${self:provider.stage}
  # Local config
  serverless-offline:
    port: 3003
  
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages: # deleteme
      - dev
  s3:
    host: localhost
    directory: /tmp

  # end local config
  documentation:
    api:
      info:
        version: v1.0.0
        title: Baby tracker API
        description: Serverless application for Baby tracker tracking
    models:
      - name:  ${self:provider.environment.PROJECT}RequestSchema
        contentType: application/json
        schema: ${file(models/tracking-request.json)}
      - name:  ${self:provider.environment.PROJECT}RequestSchemaUpdate
        contentType: application/json
        schema: ${file(models/update-request.json)}
      - name:  ${self:provider.environment.PROJECT}RequestSchemaUser
        contentType: application/json
        schema: ${file(models/user-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTracking:
    handler: src/lambda/http/getTracking.handler
    events:
      - http:
          method: get
          path: trackingdate/{isoDate}
          cors: true
          auth: Auth

    iamRoleStatementsName: ${self:provider.environment.PROJECT}-role-get-tracking-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRACKER_TABLE}
  
  GetProfile:
    handler: src/lambda/http/getUser.handler
    events:
      - http:
          method: get
          path: profile
          cors: true
          auth: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT}-role-get-profile-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  CreateTrackingItem:
    handler: src/lambda/http/createTracking.handler
    events:
      - http:
          method: post
          path: tracking
          cors: true
          authorizer : Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create Tracking Item
            description: Create Tracking item
            requestModels:
              'application/json': ${self:provider.environment.PROJECT}RequestSchema
    iamRoleStatementsName: ${self:provider.environment.PROJECT}-role-create-tracking-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRACKER_TABLE}

  UpdateTracking:
    handler: src/lambda/http/updateTracking.handler
    events:
      - http:
          method: patch
          path: tracking/{trackingId}
          cors: true
          authorizer : Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update tracking
            description: Update Tracking
            requestModels:
              'application/json': ${self:provider.environment.PROJECT}RequestSchemaUpdate
    iamRoleStatementsName: ${self:provider.environment.PROJECT}-role-update-tracking-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRACKER_TABLE}

  UpdateUser:
    handler: src/lambda/http/updateUser.handler
    events:
      - http:
          method: patch
          path: profile
          cors: true
          authorizer : Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update user
            description: Update user
            requestModels:
               'application/json': ${self:provider.environment.PROJECT}RequestSchemaUser
    iamRoleStatementsName: ${self:provider.environment.PROJECT}-role-update-user-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}


  DeleteTracking:
    handler: src/lambda/http/deleteTracking.handler
    events:
      - http:
          method: delete
          path: tracking/{trackingId}
          cors: true
          authorizer : Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT}-role-delete-tracking-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRACKER_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: profile/attachment
          cors: true
          authorizer : Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT}-role-upload-s3-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
        - s3:PutObject
        - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TrackerDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: trackingId
            AttributeType: S

        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: trackingId
            KeyType: RANGE

        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TRACKER_TABLE}
      
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          # - AttributeName: name
          #   AttributeType: S

        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          # - AttributeName: name
          #   KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Policy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Bucket: !Ref ImagesBucket