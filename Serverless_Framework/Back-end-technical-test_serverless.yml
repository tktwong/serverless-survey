service: filmdatabase

custom:
  settings:
    CINEMAWORLD_TABLE: CinemaWorld
    FILMWORLD_TABLE: FilmWorld

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  environment:
    CINEMAWORLD_TABLE: { "Ref": "Cinemaworld" }
    FILMWORLD_TABLE: { "Ref": "Filmworld" }
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:ListBucket
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.CINEMAWORLD_TABLE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.FILMWORLD_TABLE}"
        - arn:aws:s3:::bulkmovies/*

functions:
  createFilm:
    handler: handler.createFilm
    events:
      - http:
          path: /{database}/movie
          method: post
          cors: true
          authorizer: aws_iam

  getAllFilms:
    handler: handler.getAllFilms
    events:
      - http:
          path: /{database}/movies
          method: get
          cors:
            origins:
              - "http://localhost:5500/"
            headers:
              - Accept
              - Origin
              - DNT
              - User-Agent
              - Referer
              - Content-Type
              - X-Amz-Date
              - x-amz-date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: false
  getFilms:
    handler: handler.getFilms
    events:
      - http:
          path: /{database}/movies/{number}
          method: get

  getFilm:
    handler: handler.getFilm
    events:
      - http:
          path: /{database}/movie/{id}
          method: get

  updateFilm:
    handler: handler.updateFilm
    events:
      - http:
          path: /{database}/movie/{id}
          method: put

  deleteFilm:
    handler: handler.deleteFilm
    events:
      - http:
          path: /{database}/movie/{id}
          method: delete

  csvExport:
    handler: handler.csvExport
    events:
      - sqs: arn:aws:sqs:ap-southeast-2:939450071149:CsvTransactionQueue

resources:
  Resources:
    Cinemaworld:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.CINEMAWORLD_TABLE}
    Filmworld:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.FILMWORLD_TABLE}
