# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: epokly-service-v2

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
    - Effect: Allow
      Action: # Gives permission to Elastic Search domain
        - es:ESHttpPost
      Resource: "arn:aws:es:us-east-1:820202039892:domain/epokly-dev-v1/*"
    - Effect: Allow
      Action: # Gives permission to Elastic Search domain
        - s3:*
      Resource: "arn:aws:iam::aws:policy/AmazonS3FullAccess"
    - Effect: Allow
      Action: # Gives permission to Elastic Search domain
        - ses:*
      Resource: "*"
      
# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
#    - exclude-me.js
    - node_modules/aws-sdk/**

functions:
  getBusiness:
    handler: api/business.get
    description : get business by Id
    events:
      - http:
          path: business/{busId}
          method: get
          cors: true
  saveBusiness:
    handler: api/business.save
    description : save single business
    events:
      - http:
          path: business
          method: post
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:820202039892:userpool/us-east-1_H2JaRAdhV
  updateBusiness:
    handler: api/business.update
    description : update business
    events:
      - http:
          path: business/{busId}
          method: post
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:820202039892:userpool/us-east-1_H2JaRAdhV
  getBusinessExpenses:
    handler: api/business.getBusinessExpenses
    description : get business expenses by Id
    events:
      - http:
          path: business/expense/{busId}
          method: get
          cors: true  
  ddbESBusinessIndexer:
    handler: common/ddbEsIndexer.esBusinessIndexer
    description: index busines docs from ddb to es
    events:
      -  stream: arn:aws:dynamodb:us-east-1:820202039892:table/Business/stream/2017-11-07T09:36:01.413
  #ddbESStaffIndexer:
  #  handler: common/ddbEsIndexer.esStaffIndexer
  #  description: index staff docs from ddb to es
  #  events:
  #    -  stream: arn:aws:dynamodb:us-east-1:820202039892:table/Staff/stream/2018-01-15T22:12:58.224    
  ddbESAppointmentIndexer:
    handler: common/ddbEsIndexer.appointmentIndexer
    description: index appointment information from ddb to ES
    events:
      - stream: arn:aws:dynamodb:us-east-1:820202039892:table/Appointments/stream/2018-02-23T17:13:45.412    
  getStaff:
    handler: api/staff.get
    description : get staff by Id and bus id
    events:
      - http:
          path: staff/{busId}/{staffId}
          method: get
          cors: true
  getStaffALL:
    handler: api/staff.getAll
    description : get all staff by Id
    events:
      - http:
          path: staffs/{staffId}
          method: get
          cors: true
  saveStaff:
    handler: api/staff.save
    description : save single staff
    events:
      - http:
          path: staff
          method: post
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:820202039892:userpool/us-east-1_H2JaRAdhV
  getAppointment:
    handler: api/appointment.getSlotDetails
    description : get the appointment details by id
    events:
      - http:
          path: appt/{sId}
          method: get
          cors : true
  createAppointment:
    handler: api/appointment.createNew
    description : create appointment
    events:
      - http:
          path: appt/new
          method: post
          cors : true
  saveAppointment:  # modify appointment
    handler: api/appointment.save
    description : save appointment
    events:
      - http:
          path: appt
          method: post
          cors : true
  cancelAppointment:
    handler: api/appointment.cancel
    description : available appointments
    events:
      - http:
          path: slots/cancel/{sId}
          method: get
          cors : true
  getAllAppointments:
    handler: api/appointment.getAllAppointments
    description : available appointments
    events:
      - http:
          path: slots/{busId}/{staffId}
          method: get
          cors : true
  findBookedSlots:
    handler: api/appointment.findBookedSlots
    description : booked appointments for a business and staff
    events:
      - http:
          path: bookedslots/{busId}/{staffId}
          method: get
          cors : true     
  getBusinessBookedAppointments:
    handler: api/appointment.getBusinessBookedAppointments
    description : booked appointments for a business
    events:
      - http:
          path: appt/business/{busId}
          method: get
          cors : true
  getAllAppointmentsByAppointmentId:
    handler: api/appointment.getAllAppointmentsByAppointmentId
    description : booked appointments for a user
    events:
      - http:
          path: appt/apptId/{sId}
          method: get
          cors : true
  getAllAppointmentsOfUser:
    handler: api/appointment.getAllAppointmentsOfUser
    description : booked appointments for a user
    events:
      - http:
          path: userappts
          method: get
          cors : true
  search:
    handler: api/search.doSearch
    description : search api
    events:
      - http:
          path: search
          method: get
          cors : true
  #filter:
  #  handler: api/search.doFacetSearch
  #  description : facet search api
  #  events:
  #    - http:
  #        path: facetfilter
  #        method: post
  #        cors : true
  getUserDetails:
    handler: api/user.get
    description : booked appointments for a business and staff
    events:
      - http:
          path: user/{userEmail}
          method: get
          cors : true
  saveUserDetails:
    handler: api/user.save
    description : booked appointments for a business and staff
    events:
      - http:
          path: user
          method: post
          cors : true
  postUserSignupConfirmation:
    handler: api/user.saveCognitoUser
    events:
      - cognitoUserPool:
          pool: lorvids-user-pool
          trigger: PostConfirmation
  #uploadpic:
  #  handler: api/imageapi.upload
  #  description : upload to s3
  #  events:
  #    - http:
  #        path: savepic/{picid}
  #        method: post
  #        cors : true
  #uploadBusPic:
  #  handler: api/imageapi.uploadBusPic
  #  description : upload to s3
  #  events:
  #    - http:
  #        path: saveBusPic
  #        method: post
  #        cors : true
  #deletepic:
  #  handler: api/imageapi.delete
  #  description : delete file from s3
  #  events:
  #    - http:
  #        path: pic/{picid}
  #        method: delete
  #        cors : true
  activateUser:
    handler: api/user.activateUser
    description : activate user
    events:
      - http:
          path: user/activate/{emailHash}
          method: get
          cors : true
#  passLogin:
#    handler: api/user.loginRoute
#    description : decides the route after successful login
#    events:
#      - http:
#          path: user/loginpass
#          method: get
#          cors : true
  #### google calendar support #########
  misc:
    handler: api/misc.misc
    description : a set of miscellaneous apis
    events:
      - http:
           path: /
           method: ANY
           cors : true
      - http:
           path: /{proxy+}
           method: ANY
           cors : true
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    lorvids-user-pool:
#      Type: AWS::Cognito::UserPool
#      Properties:
#        AliasAttributes: 
#          - phone_number
#          - email
#        AutoVerifiedAttributes: email
#        EmailVerificationMessage: verification code for your Lorvids account
#        EmailVerificationSubject: "Verification code for your Lorvids account registration.\nGo to : http://localhost:4200/confirmuser\nVerification Code :  {####}"
#        UserPoolName: "lorvids-user-pool-v1"
#        Schema: 
#          - AttributeDataType: string
#          - DeveloperOnlyAttribute: true
#          - Mutable: true
#          - Name: "name"
#          - StringAttributeConstraints:
#            - MaxLength: 256
#            - MinLength: 1
#          - AttributeDataType: string
#          - DeveloperOnlyAttribute: true
#          - Mutable: true
#          - Name: "name"
#          - StringAttributeConstraints:
#            - MaxLength: 256
#            - MinLength: 1
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
