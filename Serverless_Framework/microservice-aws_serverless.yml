service: serverless-demo
frameworkVersion: '2'
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: us-east-1
  credentials:
    accessKeyId: AKIARXYMRLI4X6AATWZC
    secretAccessKey: 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
  environment:
    DYNAMODB_TABLE: '${self:service}-${opt:stage, self:provider.stage}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'
resources:
  Resources:
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: '${self:provider.environment.DYNAMODB_TABLE}'
functions:
  hello:
    handler: handler.hello
  usersCreate:
    handler: users/create_user.create
    events:
      - http:
          path: users
          method: post
          cors: true
  usersGet:
    handler: users/get_user.get
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
  usersList:
    handler: users/list_users.list
    events:
      - http: 
          path: users/{id}
          method: get
          cors: true
  usersDelete:
    handler: users/delete_user.delete
    events:
    - http: 
        path: users/{id}
        method: delete
        cors: true
  usersUpdate:
    handler: users/update_user.update
    events:
    - http: 
        path: users/{id}
        method: put
        cors: true
