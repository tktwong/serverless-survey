service: test-sls # NOTE: update this with your service name
#awsKmsKeyArn: arn:aws:kms:us-east-1:XXXXXX:key/some-hash

provider:
  name: aws
  runtime: python3.6
  versionFunctions: false
  #role: arn:aws:iam::12345:role/LambdaRole #For roles based login
  stage: dev
  region: ap-south-1
  #notificationArns:
   #   - 'arn:aws:sns:ap-south-1:XXXXXX:mytopic'
  
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "uploadBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "sns:publish"
      Resource: "*"
       # Fn::Join:    #To add multiple resources
        #  - ""
         # - - "arn:aws:s3:::"
          #  - "Ref" : "ServerlessDeploymentBucket"
           # - "/*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource: "*"

  resourcePolicy:
    - Effect: Allow
      Principal:
            AWS:
              - {"Fn::Join" :["", ["arn:aws:iam::",{"Ref" : "AWS::AccountId"},":user/jenkins_user"]]}
              - {"Fn::Join" :["", ["arn:aws:iam::",{"Ref" : "AWS::AccountId"},":root"]]}
      Action: execute-api:Invoke
      Resource:
        - execute-api:/*/*/*
    - Effect: Allow
      Principal: "*"
      Action: execute-api:Invoke
      Resource:
        - execute-api:/*/*/*
      Condition:
        IpAddress:
          aws:SourceIp:
            - "0.0.0.0/0"

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

  environment:
    #BUCKET: {"Fn::Join" :${self:service}-${self:provider.stage}-uploads}
    #TOPIC: 


functions:
  s3bucket:
    handler: lambda_functions/s3bucket.s3list
    memorySize: 128
    description: My function
    #onError: {"Fn::Sub" :"arn:aws:sns:${self:provider.region}:{ "Ref" : "AWS::AccountId" }:${self:service}-${self:provider.stage}-topic" }
    events:
        - http:
            path: first-endpoint
            method: GET
            cors: true
            authorizer: aws_iam       
  
resources:
  Resources:
      uploadBucket:
          Type: AWS::S3::Bucket
          Properties:
              BucketName: ${self:service}-${self:provider.stage}-uploads
##      SQSQueue:
##          Type: AWS::SQS::Queue
##          Properties:
##            QueueName: ${self:service}-${self:provider.stage}-queue
##      SNSTopic:
##          Type: AWS::SNS::Topic
##          Properties:
##            DisplayName: SNSTopic
##            TopicName: ${self:service}-${self:provider.stage}-topic
##      SNSSubscription:
##          Type: AWS::SNS::Subscription
##          Properties:
##              Endpoint: chandra.prakash363@gmail.com
##              Protocol: email
##              TopicArn: { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:resources.Resources.SNSTopic.Properties.TopicName}" ] ]  }

#Used to generated trigger which is not neccesary
##      lambdaInv:
##          Type: AWS::Lambda::Permission
##          Properties:
##              Action: lambda:InvokeFunction
##              Principal: sns.amazonaws.com
##              SourceArn:
##                  Ref: SNSTopic
##              FunctionName: { "Fn::Join" : ["", ["arn:aws:lambda:${self:provider.region}:", { "Ref" : "AWS::AccountId" },: fucntion ":${self:service}-${self:provider.stage}-s3bucket}"]]}

                
#    TestDynamoDbTable:
#      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
#      Properties:
#        AttributeDefinitions:
#          -
#            AttributeName: app_name
#            AttributeType: S
#        KeySchema:
#          -
#            AttributeName: app_name
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: ${self:service}-${self:provider.stage}-table1
      
