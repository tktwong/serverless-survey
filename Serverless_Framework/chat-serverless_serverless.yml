service:
  name: chat

plugins:
  - serverless-s3-sync
  # - serverless-apigw-binary
  - serverless-dynamodb-local

package:
  individually: true
  excludeDevDependencies: true
  include:
    - .nuxt/dist/handler.js
    - .nuxt/dist/auth.js
    - .nuxt/dist/websocket.js
    - .nuxt/dist/server/**
  exclude:
    - .editorconfig
    - .envrc
    - .eslintrc.js
    - .dynamodb/**
    - .git/**
    - .gitignore
    - .nuxt/**
    - .prettierrc
    - .serverless
    - LICENSE
    - README.md
    - assets/**
    - components/**
    - dist/**
    - layouts/**
    - local.js
    - middleware/**
    - migrations/**
    - nuxt.config.js
    - package.json
    - pages/**
    - plugins/**
    - secrets.example.json
    - secrets.json
    - server/**
    - serverless.yml
    - static/**
    - store/**
    - webpack.config.js
    - yarn.lock
    - node_modules/.cache/**
    - node_modules/aws-sdk/**
    - node_modules/webpack/**
    - node_modules/@babel/**

provider:
  name: aws
  region: ap-northeast-1
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  memorySize: 2048
  environment:
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_DOMAIN: ${file(./secrets.json):AUTH0_DOMAIN}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}
  websocketsApiName: websockets-api
  websocketsApiRouteSelectionExpression: $request.body.action
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

custom:
  stackId: gjfyl6
  buckets:
    ASSETS_BUCKET_NAME: ${self:service}-${self:custom.stackId}-${self:provider.stage}-assets
    STATIC_BUCKET_NAME: ${self:service}-${self:custom.stackId}-${self:provider.stage}-static
  s3Sync:
    - bucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}
      localDir: .nuxt/dist/client
    - bucketName: ${self:custom.buckets.STATIC_BUCKET_NAME}
      localDir: static
  apigwBinary:
    types:
      - '*/*'
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: rooms
            sources: [./migrations/rooms.json]

functions:
  auth:
    name: ${self:service}-${self:custom.stackId}-${self:provider.stage}-auth
    handler: .nuxt/dist/auth.handler
    package:
      exclude:
        - node_modules/**
  renderer:
    name: ${self:service}-${self:custom.stackId}-${self:provider.stage}-renderer
    handler: .nuxt/dist/handler.handler
    memorySize: 2048
    timeout: 30
    environment:
      NODE_ENV: production
    package:
      exclude:
        - node_modules/websocket/**
    events:
      - http:
          path: /
          method: any
      - http:
          path: /{proxy+}
          method: any
      - http:
          path: /api/{proxy+}
          method: any
          authorizer: auth
      - http:
          path: /_nuxt/{proxy+}
          method: any
          integration: http-proxy
          request:
            uri: https://${self:custom.buckets.ASSETS_BUCKET_NAME}.s3.${self:provider.region}.amazonaws.com/{proxy}
            parameters:
              paths:
                proxy: true
      - http:
          path: /static/{proxy+}
          method: any
          integration: http-proxy
          request:
            uri: https://${self:custom.buckets.STATIC_BUCKET_NAME}.s3.${self:provider.region}.amazonaws.com/{proxy}
            parameters:
              paths:
                proxy: true
  connectHandler:
    handler: .nuxt/dist/websocket.connectHandler
    events:
      - websocket:
          route: $connect
  disconnectHandler:
    handler: .nuxt/dist/websocket.disconnectHandler
    events:
      - websocket:
          route: $disconnect
  joinHandler:
    handler: .nuxt/dist/websocket.joinHandler
    events:
      - websocket:
          route: join
  postHandler:
    handler: .nuxt/dist/websocket.postHandler
    events:
      - websocket:
          route: post

resources:
  Resources:
    RoomsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rooms
        AttributeDefinitions:
          - AttributeName: owner
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: owner
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: rooms_id
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - name
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: connections
        AttributeDefinitions:
          - AttributeName: roomId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: roomId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ClientAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.ASSETS_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
              ExposedHeaders:
                - x-amz-server-side-encryption
                - x-amz-request-id
                - x-amz-id-2
    ClientAssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ClientAssetsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement: [
            {
              Action: ['s3:GetObject'],
              Effect: 'Allow',
              Resource: {
                Fn::Join: ['', ['arn:aws:s3:::', { Ref: 'ClientAssetsBucket' }, '/*']],
              },
              Principal: '*'
            },
          ]
    ClientStaticBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.STATIC_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
                - PUT
                - POST
                - DELETE
              MaxAge: 3000
              ExposedHeaders:
                - x-amz-server-side-encryption
                - x-amz-request-id
                - x-amz-id-2
    ClientStaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ClientStaticBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement: [
            {
              Action: ['s3:GetObject'],
              Effect: 'Allow',
              Resource: {
                Fn::Join: ['', ['arn:aws:s3:::', { Ref: 'ClientStaticBucket' }, '/*']],
              },
              Principal: '*'
            },
          ]
