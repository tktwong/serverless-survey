org: kellyc
app: kings-court
service: kings-court

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-appsync-plugin
  - serverless-appsync-offline
  - serverless-offline

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  appSync:
    name: ${self:service}-graphql-${self:provider.stage}
    authenticationType: API_KEY # use API_KEY in this tutorial
    dataSources:
      - type: AMAZON_DYNAMODB
        name: battlestarsSource # name of the resource
        config:
          tableName: BattleStarDynamoDbTable-${opt:stage, self:provider.stage} # name of our DynamoDB table
      - type: AMAZON_DYNAMODB
        name: racesSource # name of the resource
        config:
          tableName: RacesDynamoDbTable-${opt:stage, self:provider.stage} # name of our DynamoDB table
    mappingTemplates:
      - dataSource: battlestarsSource
        type: Query
        field: listBattlestars # from the query in schema.graphql
        request: "list_battlestars/request.vtl"
        response: "list_battlestars/response.vtl"
      - dataSource: battlestarsSource
        type: Mutation
        field: putBattlestar # from the mutation in schema.graphql
        request: "put_battlestar/request.vtl"
        response: "put_battlestar/response.vtl"
      - dataSource: racesSource
        type: Query
        field: listRaces # from the query in schema.graphql
        request: "races/list_races/request.vtl"
        response: "races/list_races/response.vtl"
      - dataSource: racesSource
        type: Query
        field: getRacesByUserId # from the query in schema.graphql
        request: "races/get_races_by_user_id/request.vtl"
        response: "races/get_races_by_user_id/response.vtl"
      - dataSource: racesSource
        type: Query
        field: getRace # from the query in schema.graphql
        request: "races/get_race/request.vtl"
        response: "races/get_race/response.vtl"
      - dataSource: racesSource
        type: Mutation
        field: createRace # from the mutation in schema.graphql
        request: "races/create_race/request.vtl"
        response: "races/create_race/response.vtl"
      - dataSource: racesSource
        type: Mutation
        field: deleteRace # from the mutation in schema.graphql
        request: "races/delete_race/request.vtl"
        response: "races/delete_race/response.vtl"
      - dataSource: racesSource
        type: Mutation
        field: updateRace # from the mutation in schema.graphql
        request: "races/update_race/request.vtl"
        response: "races/update_race/response.vtl"
  appsync-offline: # appsync-offline configuration
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    DYNAMODB_RACES_TABLE: RacesDynamoDbTable-${opt:stage, self:provider.stage}
    DYNAMODB_BATTLE_STAR_TABLE: BattleStarDynamoDbTable-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_RACES_TABLE}"

functions: # function names, like createRace, can be named anything, but must be unique
  createRace:
    handler: races/create.create
    events:
      - http:
          path: races
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - User-Agent
              - X-Amz-User-Agent
            allowCredentials: false

  listRaces:
    handler: races/list.list
    events:
      - http:
          path: races
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - User-Agent
              - X-Amz-User-Agent
            allowCredentials: false

  listAllRaces:
    handler: races/list.listAll
    events:
      - http:
          path: races-all
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - User-Agent
              - X-Amz-User-Agent
            allowCredentials: false

  getRace:
    handler: races/get.get
    events:
      - http:
          path: races/{id}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - User-Agent
              - X-Amz-User-Agent
            allowCredentials: false

  updateRace:
    handler: races/update.update
    events:
      - http:
          path: races/{id}
          method: put
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - User-Agent
              - X-Amz-User-Agent
            allowCredentials: false

  query:
    handler: races/get.query
    events:
      - http:
          path: query
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - User-Agent
              - X-Amz-User-Agent
            allowCredentials: false

  deleteRace:
    handler: races/delete.delete
    events:
      - http:
          path: races/{id}
          method: delete
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - User-Agent
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  - ${file(resources/battle-star.yml)}
  - ${file(resources/dynamodb-races-table.yml)}
