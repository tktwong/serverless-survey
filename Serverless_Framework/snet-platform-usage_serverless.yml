plugins:
  - serverless-offline
  - serverless-python-requirements

service: metering

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage,'dev'}
  timeout: 30
  description: Metering service entrypoints # optional, Description to publish to AWS
  memorySize: 128
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: metering
  deploymentPrefix: serverless # The S3 prefix under which deployed artifacts should be stored. Default is serverless

custom:
  pythonRequirements:
    dockerizePip: true
  stages:
    - dev
    - ropsten
    - mainnet
  origin:
    local: localhost
    ropsten: "*"
    mainnet: "*"

package:
  exclude:
    - tests/**
    - .gitignore

functions:
  verify-deamon:
    handler: handlers/verify_handler.main
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          path: /verify
          method: get
          authorizer:
            type: request
            arn: ${file(./config.${self:provider.stage}.json):SIGN_AUTHORIZER}
            identitySource: ${file(./config.${self:provider.stage}.json):SIGN_HEADERS}
            name: verify_authorizer
#            resultTtlInSeconds: 100
          cors:
            origin: ${self:custom.origin.${self:provider.stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  get-freecalls:
    handler: handlers/freecall_handler.main
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - http:
          path: /usage/freecalls
          method: get
          authorizer:
            type: request
            arn: ${file(./config.${self:provider.stage}.json):SIGN_AUTHORIZER}
            identitySource: ${file(./config.${self:provider.stage}.json):SIGN_HEADERS}
            name: freecall_authorizer
#            resultTtlInSeconds: 100
          cors:
            origin: ${self:custom.origin.${self:provider.stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
  create-usage:
    handler: handlers.usage_handler.main
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - http:
          path: /usage
          method: post
          cors:
            origin: ${self:custom.origin.${self:provider.stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
  pricing-create-usage:
    handler: handlers.usage_handler.main
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - http:
          path: /pricing/usage
          method: post
          authorizer:
            type: request
            arn: ${file(./config.${self:provider.stage}.json):SIGN_AUTHORIZER}
            identitySource: ${file(./config.${self:provider.stage}.json):SIGN_HEADERS}
            name: usage_authorizer
#            resultTtlInSeconds: 100
          cors:
            origin: ${self:custom.origin.${self:provider.stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  get-usage:
    handler: handlers/freecall_handler.main
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - http:
          path: /pricing/usage
          method: get
          authorizer:
            type: request
            arn: ${file(./config.${self:provider.stage}.json):SIGN_AUTHORIZER}
            identitySource: ${file(./config.${self:provider.stage}.json):SIGN_HEADERS}
            name: freecall_authorizer
          #            resultTtlInSeconds: 100
          cors:
            origin: ${self:custom.origin.${self:provider.stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with