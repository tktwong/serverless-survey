service: river-trail-alerts

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  timeout: 30
  iamRoleStatements:
    - Effect: "Allow"
      Action: "*"
      Resource:
        Fn::GetAtt:
          - RiverTrailAlertsTable
          - Arn
    - Effect: "Allow"
      Action: "*"
      Resource: !Ref EmailSNSTopic

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

custom:
  pythonRequirements:
    dockerizePip: non-linux
  messenger:
    pageAccessToken: ${opt:pageAccessToken, env:PAGE_ACCESS_TOKEN, ''}
  customDomain:
    domainName: rivertrailalerts.com
    basePath: ''
    stage: prod
    createRoute53Record: true
  url:
    dev:
      !Join
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.'
          - ${opt:region, self:provider.region}
          - '.amazonaws.com/'
          - ${self:provider.stage}
    prod: https://rivertrailalerts.com     

functions:
  update:
    handler: handler.handle
    events:
      - schedule: rate(30 minutes)
    environment:
      EMAIL_SNS_TOPIC_ARN: !Ref EmailSNSTopic 
      DEPLOYMENT_STAGE: ${self:provider.stage}
  fb_messenger_verify:
    handler: fb_messenger.webhook
    events:
      - http:
          path: /messenger
          method: get
    environment:
      DEPLOYMENT_STAGE: ${self:provider.stage}
      PAGE_ACCESS_TOKEN: ${self:custom.messenger.pageAccessToken}
  fb_messenger_webhook:
    handler: fb_messenger.webhook
    events:
      - http:
          path: /messenger
          method: post
    environment:
      DEPLOYMENT_STAGE: ${self:provider.stage}
      PAGE_ACCESS_TOKEN: ${self:custom.messenger.pageAccessToken}
  subscribe:
    handler: frontend/subscribe.subscribe_page
    environment:
      EMAIL_SNS_TOPIC_ARN: !Ref EmailSNSTopic 
      SUBSCRIBE_LAMBDA_ENDPOINT: ${self:custom.url.${self:provider.stage}}
    events:
      # GET returns sign up form
      - http:
          path: /
          method: get
          integration: lambda
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'text/html'"   
      # POST adds subscription and returns confirmation page         
      - http:
          path: /
          method: post
          integration: lambda
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'text/html'"
    
resources:
  Resources:  
    RiverTrailAlertsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: RiverTrailAlertsTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: "pk"
            AttributeType: "S"
          - AttributeName: "sk"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "pk"
            KeyType: "HASH"
          - AttributeName: "sk"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 2
    EmailSNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: "RiverTrailAlerts"
