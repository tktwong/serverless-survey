service:
  name: blog-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-offline
provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    POSTS_TABLE: posts-${self:provider.stage}
    INDEX_NAME: posts-index-${self:provider.stage}
    IMAGES_S3_BUCKET: posts-images-smbas-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:
  serverless-offline:
    port: 8080
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  documentation:
    api:
      info:
        version: v1.0.0
        title: Blog Posts API
        description: Serverless application for Blog Posts API
    models:
      - name: CreatePostRequest
        contentType: application/json
        schema: ${file(models/create-post-request.json)}
      - name: UpdatePostRequest
        contentType: application/json
        schema: ${file(models/update-post-request.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  CreatePost:
    handler: src/lambda/http/createPost.handler
    events:
      - http:
          method: post
          path: posts
          authorizer: Auth
          cors: true
          reqValidatorName: 'RequestBodyValidator'
          documentation:
            summary: Create
            description: Create
            requestModels:
              'application/json': CreatePostRequest
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
  GetPostsByUser:
    handler: src/lambda/http/getPostsByUser.handler
    events:
      - http:
          method: get
          path: posts
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
  GetAllPosts:
    handler: src/lambda/http/getAllPosts.handler
    events:
      - http:
          method: get
          path: posts/all
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
  GetPostById:
    handler: src/lambda/http/getPostById.handler
    events:
      - http:
          method: get
          path: posts/{postId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: posts/{postId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
  UpdatePost:
    handler: src/lambda/http/updatePost.handler
    events:
      - http:
          method: patch
          path: posts/{postId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update
            description: Update
            requestModels:
              'application/json': UpdatePostRequest
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
  DeleteTodo:
    handler: src/lambda/http/deletePost.handler
    events:
      - http:
          method: delete
          path: posts/{postId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.POSTS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: postId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: ['s3:GetObject', 's3:Put*']
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: { Ref: ImagesBucket }
