# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ilp-cloud-connectors

frameworkVersion: ">=1.16.0 <2.0.0"

plugins:
  - serverless-offline
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:us-east-2:659125015803:table/Connectors"

package:
  exclude:
    - node_modules/**/*
  include:
    - src/server/lambda/!{*.spec}.ts

environment:
  SLS_DEBUG: true

functions:

  create_connector:
    handler: src/server/lambda/handler.createConnector
    events:
      - http:
          path: /connector
          method: put
          cors: true

  get_connector:
    handler: src/server/lambda/handler.getConnector
    events:
      - http:
          path: /connector
          method: get
          cors: true

  delete_connector:
    handler: src/server/lambda/handler.deleteConnector
    events:
      - http:
          path: /connector
          method: delete
          cors: true

  close_channel:
    handler: src/server/lambda/handler.closeChannel
    events:
      - http:
          path: /connector/channel
          method: delete
          cors: true

  get_connector_info:
    handler: src/server/lambda/handler.getConnectorInfo
    events:
      - http:
          path: /connector/info
          method: get
          cors: true

  stop_connector:
    handler: src/server/lambda/handler.stopConnector
    events:
      - http:
          path: /connector
          method: post
          cors: true

custom:
  serverless-offline:
    port: 4000