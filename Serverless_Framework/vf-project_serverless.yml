service: assignment
frameworkVersion: '2'
configValidationMode: error

provider:
  name: aws
  runtime: nodejs12.x
  profile: voiceFoundry
  region: ${opt:region, self:custom.defaultRegion}

plugins:
  - serverless-s3-sync

custom:
  defaultRegion: us-east-1
  s3Sync:
    - bucketName: voicefoundry-assignment-databucket
      localDir: uploads

functions:
  uploadObjectParser:
    handler: handler.uploadObjectParser
    timeout: 60
    role: UploadObjectParserRole
    environment:
      UPLOAD_OBJECT_METADATA_TABLE: voicefoundry-s3upload-metadata-table
      AGENT_ROSTER_TABLE: voicefoundry-agent-roster-table
      CONNECT_ALIAS: voicefoundry-assignment
    events:
      - s3:
          bucket: voicefoundry-assignment-databucket
          event: s3:ObjectCreated:*
          existing: true
  agentRosterManager:
    handler: handler.agentRosterManager
    timeout: 60
    role: AgentRosterManagerRole
    environment:
      CONNECT_ALIAS: voicefoundry-assignment
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [AgentRosterTable, StreamArn]

resources:
  Transform: AmazonConnectProvider
  Resources:
    DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: voicefoundry-assignment-databucket
    UploadsMetadataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: voicefoundry-s3upload-metadata-table
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: sequencer
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: sequencer
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    AgentRosterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: voicefoundry-agent-roster-table
        AttributeDefinitions:
          - AttributeName: Email
            AttributeType: S
        KeySchema:
          - AttributeName: Email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    UploadObjectParserRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: UploadObjectParserRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaS3MetadataCollector
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:dynamodb:"
                        - Ref : "AWS::Region"
                        - ":*:table/"
                        - voicefoundry-s3upload-metadata-table
                        - "*"
                    - Fn::Join:
                      - ""
                      - - "arn:aws:dynamodb:"
                        - Ref : "AWS::Region"
                        - ":*:table/"
                        - voicefoundry-agent-roster-table
                        - "*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetObject
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref" : "DataBucket"
                        - "/*"
                - Effect: Allow
                  Action:
                    - secretsmanager:CreateSecret
                    - kms:GenerateDataKey
                    - kms:Decrypt
                    - secretsmanager:TagResource
                  Resource: "*"
    AgentRosterManagerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: AgentRosterManagerRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonConnect_FullAccess
        Policies:
          - PolicyName: DynamoDBStreamReader
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeStream
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:dynamodb:"
                        - Ref : "AWS::Region"
                        - ":*:table/"
                        - voicefoundry-agent-roster-table
                        - "/stream/"
                        - "*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetObject
                  Resource:
                    - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref" : "DataBucket"
                        - "/*"
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                    - kms:Decrypt
                  Resource: "*"
    CallCenter:
      Type: AWS::Connect::Instance
      Properties:
        Domain: voicefoundry-assignment
    CallCenterContactFlow:
      Type: AWS::Connect::ContactFlow
      Properties:
        ConnectInstance:  !GetAtt CallCenter.Domain
        Name: simpleCallFlow
        Description: a very simple contact flow
        States:
          - Id: play
            Start: true
            Type: PlayPrompt
            Parameters:
              - Name: Text
                Value: Thank you for calling my sample contact center. I appreciate the opportunity you've given me to demonstrate my technical skills and personal dedication.
              - Name: TextToSpeechType
                Value: text
            Branches:
              - Destination: disconnect
                Condition: Success
          - Id: disconnect
            Type: Disconnect
    ContactCenterPhoneNumber:
      Type: AWS::Connect::PhoneNumber
      Properties:
        ConnectInstance: !GetAtt CallCenter.Domain
        ContactFlow: !GetAtt CallCenterContactFlow.Name
        Type: DID
        Country: United States
        Description: phone number for direct-inward-dial calls
outputs:  
  Outputs:
    ConnectOutput:
      Description: call center DID phone number
      Value: !GetAtt ContactCenterPhoneNumber.PhoneNumber





# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2
