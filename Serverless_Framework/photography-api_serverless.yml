service: photography-api

# Create an optimized package for our functions
package:
    individually: true

plugins:
    - serverless-webpack
    - serverless-offline
    - serverless-dotenv-plugin # Load .env as environment variables

custom:
    # Our stage is based on what is passed in when running serverless
    # commands. Or fallsback to what we have set in the provider section.
    stage: ${opt:stage, self:provider.stage}
    # Set the table name here so we can use it while testing locally
    entriesTableName: ${self:custom.stage}-entries
    photoKeyMappingsTableName: ${self:custom.stage}-photo-key-mappings
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules: true

provider:
    name: aws
    runtime: nodejs12.x
    stage: dev
    region: eu-west-2

    # These environment variables are made available to our functions
    # under process.env.
    environment:
        entriesTableName: ${self:custom.entriesTableName}
        photoKeyMappingsTableName: ${self:custom.photoKeyMappingsTableName}
        proccessedPhotoBucket:
            - 'Fn::GetAtt': [ProcessedPhotoBucket, BucketName]

    # 'iamRoleStatements' defines the permission policy for the Lambda function.
    # In this case Lambda functions are granted with permissions to access DynamoDB.
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:DescribeTable
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
          # Restrict our IAM role permissions to
          # the specific table for the stage
          Resource:
              - 'Fn::GetAtt': [EntriesTable, Arn]
        - Effect: Allow
          Action:
              - s3:PutBucketNotification
          Resource:
              - 'Fn::GetAtt': [PhotoBucket, Arn]

functions:
    list:
        handler: src/actions/entries/list.main
        events:
            - http:
                  path: entries
                  method: get
                  cors: true
                  authorizer: aws_iam
    create:
        handler: src/actions/entries/create.main
        events:
            - http:
                  path: entries
                  method: post
                  cors: true
                  authorizer: aws_iam
    get:
        handler: src/actions/entries/get.main
        events:
            - http:
                  path: entries/{id}
                  method: get
                  cors: true
                  authorizer: aws_iam
    update:
        handler: src/actions/entries/update.main
        events:
            - http:
                  path: entries/{id}
                  method: put
                  cors: true
                  authorizer: aws_iam
    delete:
        handler: src/actions/entries/delete.main
        events:
            - http:
                  path: entries/{id}
                  method: delete
                  cors: true
                  authorizer: aws_iam

    resize:
        handler: src/actions/process-photos/resize.main
        events:
            - s3:
                  bucket: !Ref PhotoBucket
                  event: s3:ObjectCreated:*
                  existing: true

# Create our resources with separate CloudFormation templates
resources:
    # API Gateway Errors
    - ${file(resources/api-gateway-errors.yml)}
    # DynamoDB
    - ${file(resources/dynamodb-table.yml)}
    # S3
    - ${file(resources/s3-bucket.yml)}
    # Cognito
    - ${file(resources/cognito-user-pool.yml)}
    - ${file(resources/cognito-identity-pool.yml)}
