service: telegramhub-1602

frameworkVersion: ">=2.12.0 <3.0.0"

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: python3.7
  region: ${file(../stages/${opt:stage}/conf.json):AWS_REGION}
  environment:
    STAGE: ${opt:stage}
    CONF_PATH: s3://${self:resources.Resources.StorageBucket.Properties.BucketName}/private-conf
    PUBLIC_COMPUTE_URL_PREFIX:   https://${file(${self:custom.stageConfPath}):COMPUTE_DOMAIN}
    PUBLIC_STATIC_URL_PREFIX:    https://${file(${self:custom.stageConfPath}):STATIC_DOMAIN}
    PUBLIC_DEPLOYGEN_URL_PREFIX: https://${file(${self:custom.stageConfPath}):DEPLOYGEN_DOMAIN}
    PUBLIC_MUTABLE_URL_PREFIX:   https://${file(${self:custom.stageConfPath}):MUTABLE_DOMAIN}
    PUBLIC_TMP_URL_PREFIX:       https://${file(${self:custom.stageConfPath}):TMP_DOMAIN}
    PUBLIC_STATIC_PATH:     s3://${self:resources.Resources.StorageBucket.Properties.BucketName}/public-static
    PUBLIC_DEPLOYGEN_PATH:  s3://${self:resources.Resources.StorageBucket.Properties.BucketName}/public-deploygen
    PUBLIC_MUTABLE_PATH:    s3://${self:resources.Resources.StorageBucket.Properties.BucketName}/public-mutable
    PUBLIC_TMP_PATH:        s3://${self:resources.Resources.StorageBucket.Properties.BucketName}/public-tmp
    PRIVATE_STATIC_PATH:    s3://${self:resources.Resources.StorageBucket.Properties.BucketName}/private-static
    PRIVATE_DEPLOYGEN_PATH: s3://${self:resources.Resources.StorageBucket.Properties.BucketName}/private-deploygen
    PRIVATE_MUTABLE_PATH:   s3://${self:resources.Resources.StorageBucket.Properties.BucketName}/private-mutable
    PRIVATE_TMP_PATH:       s3://${self:resources.Resources.StorageBucket.Properties.BucketName}/private-tmp
    DB_TABLE_NAME: ${self:resources.Resources.Db.Properties.TableName}
  deploymentBucket:
    name: ${self:service}-${opt:stage}-deploy
    serverSideEncryption: AES256
  iamRoleStatements:
  - Effect: 'Allow'
    Action:
    - s3:GetObject
    Resource:
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
        - /public-static/*
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
        - /public-deploygen/*
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
        - /private-static/*
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
        - /private-deploygen/*
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
        - /private-conf/*
  - Effect: 'Allow'
    Action:
    - s3:GetObject
    - s3:PutObject
    - s3:DeleteObject
    Resource:
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
        - /public-mutable/*
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
        - /public-tmp/*
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
        - /private-mutable/*
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
        - /private-tmp/*
  - Effect: 'Allow'
    Action:
    - s3:ListBucket
    Resource:
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - Ref: StorageBucket
  - Effect: 'Allow'
    Action:
    - dynamodb:BatchGetItem
    - dynamodb:BatchWriteItem
    - dynamodb:ConditionCheckItem
    - dynamodb:DeleteItem
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:UpdateItem
    Resource:
    - Fn::GetAtt:
      - Db
      - Arn
    - Fn::Join:
      - ''
      - - Fn::GetAtt:
          - Db
          - Arn
        - '/index/*'
  apiGateway:
    # https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
    shouldStartNameWithService: true

functions:
  endpoint:
    handler: wsgi_handler.handler
    memorySize: 256
    timeout: 10 # timeout need to be longer in first run
    events:
    - http: ANY /
#  job0:
#    handler: jobs.job0
#    memorySize: 128
#    timeout: 10 # in mem=128, timeout need to be longer in first run
#    events:
#    - schedule: rate(1 minute) # minute | minutes | hour | hours | day | days
#    # - schedule: cron(0 4 * * ? *)

resources:
  Resources:
    StorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${opt:stage}-storage
        LifecycleConfiguration:
          Rules:
          - Prefix: public-tmp/
            ExpirationInDays: 1
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            NoncurrentVersionExpirationInDays: 1
            Status: Enabled
          - Prefix: private-tmp/
            ExpirationInDays: 1
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            NoncurrentVersionExpirationInDays: 1
            Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
      DeletionPolicy: Retain
    PublicCloudfrontOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: ${self:service} ${opt:stage} PublicCloudfrontOAI
    StorageBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StorageBucket
        PolicyDocument:
          Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                - ''
                - - 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity '
                  - Ref: PublicCloudfrontOAI
            Action:
            - s3:GetObject
            Resource:
            - 'Fn::Join':
              - ''
              - - 'arn:aws:s3:::'
                - Ref: StorageBucket
                - /public-static/*
            - 'Fn::Join':
              - ''
              - - 'arn:aws:s3:::'
                - Ref: StorageBucket
                - /public-deploygen/*
            - 'Fn::Join':
              - ''
              - - 'arn:aws:s3:::'
                - Ref: StorageBucket
                - /public-mutable/*
            - 'Fn::Join':
              - ''
              - - 'arn:aws:s3:::'
                - Ref: StorageBucket
                - /public-tmp/*
    PublicStaticCloudfront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - DomainName:
              Fn::GetAtt:
              - StorageBucket
              - DomainName
            OriginPath: /public-static
            Id: S3-${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                - ''
                - - 'origin-access-identity/cloudfront/'
                  - Ref: PublicCloudfrontOAI
          Enabled: 'true'
          DefaultRootObject: index.html
          Aliases:
          - ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            TargetOriginId: S3-${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: allow-all
          HttpVersion: http2
          IPV6Enabled: true
          PriceClass: PriceClass_200 # PriceClass_100 / PriceClass_200 / PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN_ACM_CERTIFICATE_ARN}
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only
    PublicStaticDns:
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        HostedZoneId: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN_HOSTED_ZONE_ID}
        RecordSets:
        - Name: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}.
          Type: 'A'
          AliasTarget:
            DNSName:
              Fn::GetAtt:
                - PublicStaticCloudfront
                - DomainName
            HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode
        - Name: ${file(../stages/${opt:stage}/conf.json):STATIC_DOMAIN}.
          Type: 'AAAA'
          AliasTarget:
            DNSName:
              Fn::GetAtt:
                - PublicStaticCloudfront
                - DomainName
            HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode
    PublicDeploygenCloudfront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - DomainName:
              Fn::GetAtt:
              - StorageBucket
              - DomainName
            OriginPath: /public-deploygen
            Id: S3-${file(../stages/${opt:stage}/conf.json):DEPLOYGEN_DOMAIN}
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                - ''
                - - 'origin-access-identity/cloudfront/'
                  - Ref: PublicCloudfrontOAI
          Enabled: 'true'
          DefaultRootObject: index.html
          Aliases:
          - ${file(../stages/${opt:stage}/conf.json):DEPLOYGEN_DOMAIN}
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            TargetOriginId: S3-${file(../stages/${opt:stage}/conf.json):DEPLOYGEN_DOMAIN}
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: allow-all
          HttpVersion: http2
          IPV6Enabled: true
          PriceClass: PriceClass_200 # PriceClass_100 / PriceClass_200 / PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: ${file(../stages/${opt:stage}/conf.json):DEPLOYGEN_DOMAIN_ACM_CERTIFICATE_ARN}
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only
    PublicDeploygenDns:
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        HostedZoneId: ${file(../stages/${opt:stage}/conf.json):DEPLOYGEN_DOMAIN_HOSTED_ZONE_ID}
        RecordSets:
        - Name: ${file(../stages/${opt:stage}/conf.json):DEPLOYGEN_DOMAIN}.
          Type: 'A'
          AliasTarget:
            DNSName:
              Fn::GetAtt:
                - PublicDeploygenCloudfront
                - DomainName
            HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode
        - Name: ${file(../stages/${opt:stage}/conf.json):DEPLOYGEN_DOMAIN}.
          Type: 'AAAA'
          AliasTarget:
            DNSName:
              Fn::GetAtt:
                - PublicDeploygenCloudfront
                - DomainName
            HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode
    PublicMutableCloudfront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - DomainName:
              Fn::GetAtt:
              - StorageBucket
              - DomainName
            OriginPath: /public-mutable
            Id: S3-${file(../stages/${opt:stage}/conf.json):MUTABLE_DOMAIN}
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                - ''
                - - 'origin-access-identity/cloudfront/'
                  - Ref: PublicCloudfrontOAI
          Enabled: 'true'
          DefaultRootObject: index.html
          Aliases:
          - ${file(../stages/${opt:stage}/conf.json):MUTABLE_DOMAIN}
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            TargetOriginId: S3-${file(../stages/${opt:stage}/conf.json):MUTABLE_DOMAIN}
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: allow-all
          HttpVersion: http2
          IPV6Enabled: true
          PriceClass: PriceClass_200 # PriceClass_100 / PriceClass_200 / PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: ${file(../stages/${opt:stage}/conf.json):MUTABLE_DOMAIN_ACM_CERTIFICATE_ARN}
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only
    PublicMutableDns:
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        HostedZoneId: ${file(../stages/${opt:stage}/conf.json):MUTABLE_DOMAIN_HOSTED_ZONE_ID}
        RecordSets:
          - Name: ${file(../stages/${opt:stage}/conf.json):MUTABLE_DOMAIN}.
            Type: 'A'
            AliasTarget:
              DNSName:
                Fn::GetAtt:
                - PublicMutableCloudfront
                - DomainName
              HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode
          - Name: ${file(../stages/${opt:stage}/conf.json):MUTABLE_DOMAIN}.
            Type: 'AAAA'
            AliasTarget:
              DNSName:
                Fn::GetAtt:
                - PublicMutableCloudfront
                - DomainName
              HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode
    PublicTmpCloudfront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - DomainName:
              Fn::GetAtt:
              - StorageBucket
              - DomainName
            OriginPath: /public-tmp
            Id: S3-${file(../stages/${opt:stage}/conf.json):TMP_DOMAIN}
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                - ''
                - - 'origin-access-identity/cloudfront/'
                  - Ref: PublicCloudfrontOAI
          Enabled: 'true'
          DefaultRootObject: index.html
          Aliases:
          - ${file(../stages/${opt:stage}/conf.json):TMP_DOMAIN}
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            TargetOriginId: S3-${file(../stages/${opt:stage}/conf.json):TMP_DOMAIN}
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: allow-all
          HttpVersion: http2
          IPV6Enabled: true
          PriceClass: PriceClass_200 # PriceClass_100 / PriceClass_200 / PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: ${file(../stages/${opt:stage}/conf.json):TMP_DOMAIN_ACM_CERTIFICATE_ARN}
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only
    PublicTmpDns:
      Type: "AWS::Route53::RecordSetGroup"
      Properties:
        HostedZoneId: ${file(../stages/${opt:stage}/conf.json):TMP_DOMAIN_HOSTED_ZONE_ID}
        RecordSets:
        - Name: ${file(../stages/${opt:stage}/conf.json):TMP_DOMAIN}.
          Type: 'A'
          AliasTarget:
            DNSName:
              Fn::GetAtt:
                - PublicTmpCloudfront
                - DomainName
            HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode
        - Name: ${file(../stages/${opt:stage}/conf.json):TMP_DOMAIN}.
          Type: 'AAAA'
          AliasTarget:
            DNSName:
              Fn::GetAtt:
                - PublicTmpCloudfront
                - DomainName
            HostedZoneId: Z2FDTNDATAQYW2 # AWS hardcode
    Db:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage}-table
        AttributeDefinitions:
        - AttributeName: ItemId
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: BotId
          AttributeType: S
        - AttributeName: ChatId
          AttributeType: S
        - AttributeName: HubId
          AttributeType: S
        - AttributeName: PublisherId
          AttributeType: S
        - AttributeName: ForwardId
          AttributeType: S
        - AttributeName: PermissionId
          AttributeType: S
        - AttributeName: Search0Hash
          AttributeType: S
        - AttributeName: Search0Range
          AttributeType: S
        - AttributeName: Search1Hash
          AttributeType: S
        - AttributeName: Search1Range
          AttributeType: S
        KeySchema:
        - AttributeName: UserId
          KeyType: 'HASH'
        - AttributeName: ItemId
          KeyType: 'RANGE'
        GlobalSecondaryIndexes:
        - IndexName: BotIdx
          KeySchema:
          - AttributeName: BotId
            KeyType: 'HASH'
          - AttributeName: ItemId
            KeyType: 'RANGE'
          Projection:
            ProjectionType: "KEYS_ONLY"
        - IndexName: ChatIdx
          KeySchema:
          - AttributeName: ChatId
            KeyType: 'HASH'
          - AttributeName: ItemId
            KeyType: 'RANGE'
          Projection:
            ProjectionType: "KEYS_ONLY"
        - IndexName: HubIdx
          KeySchema:
          - AttributeName: HubId
            KeyType: 'HASH'
          - AttributeName: ItemId
            KeyType: 'RANGE'
          Projection:
            ProjectionType: "KEYS_ONLY"
        - IndexName: PublisherIdx
          KeySchema:
          - AttributeName: PublisherId
            KeyType: 'HASH'
          - AttributeName: ItemId
            KeyType: 'RANGE'
          Projection:
            ProjectionType: "KEYS_ONLY"
        - IndexName: ForwardIdx
          KeySchema:
          - AttributeName: ForwardId
            KeyType: 'HASH'
          - AttributeName: ItemId
            KeyType: 'RANGE'
          Projection:
            ProjectionType: "KEYS_ONLY"
        - IndexName: PermissionIdx
          KeySchema:
          - AttributeName: PermissionId
            KeyType: 'HASH'
          - AttributeName: ItemId
            KeyType: 'RANGE'
          Projection:
            ProjectionType: "KEYS_ONLY"
        - IndexName: Search0Idx
          KeySchema:
          - AttributeName: Search0Hash
            KeyType: 'HASH'
          - AttributeName: Search0Range
            KeyType: 'RANGE'
          Projection:
            ProjectionType: "KEYS_ONLY"
        - IndexName: Search1Idx
          KeySchema:
          - AttributeName: Search1Hash
            KeyType: 'HASH'
          - AttributeName: Search1Range
            KeyType: 'RANGE'
          Projection:
            ProjectionType: "KEYS_ONLY"
        BillingMode: PAY_PER_REQUEST

custom:
  functionsBasePath: ${self:custom.projectRootPath}/src
  wsgi:
    app: endpoint.app
    pythonBin: python
  pythonRequirements:
    dockerizePip: false
  customDomain:
    domainName: ${file(${self:custom.projectRootPath}/stages/${opt:stage}/conf.json):COMPUTE_DOMAIN}
    basePath: ''
    stage: ${opt:stage}
    createRoute53Record: true
  s3Sync:
  - bucketName: ${self:resources.Resources.StorageBucket.Properties.BucketName}
    localDir: ../public-static
    bucketPrefix: public-static/
  - bucketName: ${self:resources.Resources.StorageBucket.Properties.BucketName}
    localDir: ../deploygen.tmp/public
    bucketPrefix: public-deploygen/
  - bucketName: ${self:resources.Resources.StorageBucket.Properties.BucketName}
    localDir: ../stages/${opt:stage}
    bucketPrefix: private-conf/
  - bucketName: ${self:resources.Resources.StorageBucket.Properties.BucketName}
    localDir: ../private-static
    bucketPrefix: private-static/
  - bucketName: ${self:resources.Resources.StorageBucket.Properties.BucketName}
    localDir: ../deploygen.tmp/private
    bucketPrefix: private-deploygen/
  cleanupS3DeleteBucket:
    enable: ${file(../stages/${opt:stage}/conf.json):UNDEPLOY_DELETE_S3, 'false'}
    bucketList:
    - bucketName: ${self:resources.Resources.StorageBucket.Properties.BucketName}
  projectRootPath:
    ${opt:project_root_path, env:PROJECT_ROOT_PATH, '..'}
  stageConfPath:
    ${self:custom.projectRootPath}/stages/${opt:stage}/conf.json

plugins:
- serverless-deployment-bucket
- serverless-domain-manager
- serverless-python-requirements
- serverless-s3-sync
- serverless-wsgi
- serverless-cleanup-s3-delete-bucket
