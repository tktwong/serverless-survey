service: threatstack-aws-dynamodb-writer

plugins:
  - serverless-python-requirements
  - serverless-cloudformation-parameter-setter
  - serverless-sam

custom:
  stage: "${opt:stage, env:SLS_STAGE, 'dev'}"
  profile: "${opt:aws-profile, env:AWS_PROFILE, env:AWS_DEFAULT_PROFILE, 'default'}"
  log_level: "${env:LOG_LEVEL, 'INFO'}"

  ts_sns_publisher_stack: "${env:TS_AWS_SNS_PUBLISHER_STACK, 'threatstack-aws-sns-publisher-${self:custom.stage}'}"
  ddt_hash_key: '_id'

  # This is for in case you renamed the CFN stack.
  cf-parameters:
    ThreatStackAwsSnsPublisherStack: "${self:custom.ts_sns_publisher_stack}"

  # Ensure consistent build environment; also avoid issue deploying from Mac
  # with Homebrew Python.
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  profile: ${self:custom.profile}
  stage: ${self:custom.stage}
  runtime: python3.6

functions:
  ThreatStackAwsDDTWriter:
    description: "Store Threat Stack alert data in DynamoDB."
    handler: handlers/threatstack-aws-dynamodb-writer.handler
    memorySize: 128
    timeout: 15
    role: ThreatStackAwsDDTWriterIamRole
    environment:
      AWS_DYNAMODB_TABLE_NAME:
        Ref: ThreatStackAlertsDynamoDBTable
      AWS_DYNAMODB_HASH_KEY: "${self:custom.ddt_hash_key}"
      LOG_LEVEL: "${self:custom.log_level}"

resources:
  Parameters:
    ThreatStackAwsSnsPublisherStack:
      Type: String
      Description: "Stack name of Threat Stack AWS SNS Publisher"
      NoEcho: true

  Resources:
    ThreatStackAlertsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "${self:custom.ddt_hash_key}"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "${self:custom.ddt_hash_key}"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

    ThreatStackAwsDDTWriterIamRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-${self:provider.region}-lambdaRole
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          # NOTE: This role lacks the resource restrictions SLS creates by
          # default when managing the role.
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - Fn::ImportValue:
              Fn::Join:
                - "-"
                - - Ref: ThreatStackAwsSnsPublisherStack
                  - "SnsConfirmSubscriptionIamManagedPolicyArn"
        Policies:
          - PolicyName: ${self:provider.stage}-${self:service}-lambda
            PolicyDocument:
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:PutItem"
                  Resource:
                    Fn::GetAtt:
                      - ThreatStackAlertsDynamoDBTable
                      - Arn

    # Needed because we're not setting the SNS event in the function section.
    ThreatStackAwsDDTWriterLambdaPermission:
      Type: 'AWS::Lambda::Permission'
      Properties:
        Action: "lambda:InvokeFunction"
        FunctionName:
          Ref: ThreatStackAwsDDTWriterLambdaFunction
        Principal: 'sns.amazonaws.com'
        SourceArn:
          Fn::ImportValue:
            Fn::Join:
              - '-'
              - - Ref: ThreatStackAwsSnsPublisherStack
                - "SnsTopicArn"

    SnsSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn:
          Fn::ImportValue:
            Fn::Join:
              - '-'
              - - Ref: ThreatStackAwsSnsPublisherStack
                - "SnsTopicArn"
        Protocol: lambda
        Endpoint:
          Fn::GetAtt:
            - ThreatStackAwsDDTWriterLambdaFunction
            - Arn

  Outputs:
    ThreatStackAlertsDynamoDBTableName:
      Description: "DynamoDB table where alerts are stored."
      Value:
        Ref: "ThreatStackAlertsDynamoDBTable"
      Export:
        Name:
          Fn::Join:
            - "-"
            - - Ref: "AWS::StackName"
              - "ThreatStackAlertsDynamoDBTable"


