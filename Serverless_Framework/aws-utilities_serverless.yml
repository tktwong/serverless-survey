# Setup:
#   1. Name your service. This will prefix all functions
#      service: alp-bot will produce functions named
#        alp-bot-dev-charge-cards
#        alp-bot-prod-send-report
#   2. Update your folder name and package:include to match #1
#   3. Give your first function (and its handler) a name!
#   4. Rename new_function.py  
#   5. Type `serverless print` to check your final serverless.yml output

# hyphens are the only allowed special character
service: service-folder-name

provider:
  name: aws
  runtime: python3.6
  role: ${file(../../templates/base_python.yml):provider.role}
  vpc: ${file(../../templates/base_python.yml):provider.vpc}

# Plugins cannot be replaced by variables. These run BEFORE variable substitution.
plugins:
  - serverless-package-external # Bundles local dependencies outside serverless root (e.g. common directory)
  - serverless-python-requirements # Bundles dependencies from requirements.txt when deploying
  - serverless-plugin-aws-alerts # Automatically creates Alarms on deploy

package:
  individually: true
  exclude: # If you use common/ files, explicitly include the subfolders below, per function
    - 'common/**'
    - '*.js'

custom:
  packageExternal: # directories included by serverless-package-external plugin
    external:
      - '../../common' # load an out-of-directory module
  pythonRequirements:
    dockerizePip: non-linux # cross compiling option for serverless-python-requirements plugin
  alerts: # https://github.com/ACloudGuru/serverless-plugin-aws-alerts
    stages:
      - prod
    nameTemplate: $[functionName]-$[metricName]-Alarm
    topics:
      alarm:
        topic: arn:aws:sns:us-east-1:930510191294:ALP_all_error_monitoring
    alarms:
      - functionErrors # this is a default, with some overrides in below 'definitions'
    definitions:
      functionErrors:
        period: 300
        treatMissingData: notBreaching

  enabled: ${file(../../templates/base_python.yml):custom.enabled}

# Before adding new functions, ask yourself:
# Is this function a reusable service?
# Then break it out with `make python name=new_service_name`
# If it is closely related to the functions below, go ahead and add it here.
functions:
  new-function:
    handler: handler.new_function_handler
    memorySize: 2048 # Raise or lower as necessary.
    timeout: 300 # In seconds. Max 900 
    # package:
    #   include:
    #     - 'common/s3_utils/**'
    # environment:
    #   VARIABLE: ${env:${opt:stage, 'dev'}_VARIABLE} # this syntax sources dev_VARIABLE or prod_VARIABLE from your postactivate depending on --stage option
