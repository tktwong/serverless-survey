service: contactDeabute

package:
  exclude:
    - ./monolithic_server.js
  include:
    - ./**

provider:
  name: aws
  stage: prod
  runtime: nodejs12.x
  region: us-east-1
  timeout: 3
  memorySize: 4016
  environment:
    DM_WH: ${env:DM_WH}
    ENDPOINT_ROUTE: ${env:ENDPOINT_ROUTE}
    HOST_EMAIL: ${env:HOST_EMAIL}
    DB_NAME: ${env:DB_NAME}
    MONGODB_URI: ${env:MONGODB_URI}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'

functions:
  connect:
    description: 'adds connected users to db'
    handler: api/DefaultSockets.connect
    events:
      - websocket:
          route: $connect
  disconnect:
    description: 'removes disconnected users from db'
    handler: api/DefaultSockets.disconnect
    events:
      - websocket:
          route: $disconnect
  default:
    description: 'handles unhandled routes'
    handler: api/DefaultSockets.default
    events:
      - websocket:
          route: $default
  GetAvail:
    description: 'Allows client to get up to date on host availability'
    handler: api/availability.GetAvail
    events:
      - websocket:
          route: GetAvail
  SetAvail:
    description: 'Allows host to set availability'
    handler: api/availability.SetAvail
    events:
      - websocket:
          route: SetAvail
  EndCall:
    description: 'Allows host or guest to end call'
    handler: api/availability.EndCall
    events:
      - websocket:
          route: EndCall
  login:
    description: 'request to log into service'
    handler: api/authentication.login
    events:
      - websocket:
          route: login
  logout:
    description: 'request for host to log out'
    handler: api/authentication.logout
    events:
      - websocket:
          route: logout
  ice:
    description: 'Exchange ice candidates'
    handler: api/WebRTC.ice
    events:
      - websocket:
          route: ice
  offer:
    description: 'Offer SDP negotiation data to host'
    handler: api/WebRTC.offer
    events:
      - websocket:
          route: offer
  answer:
    description: 'Answer from host with SPD data'
    handler: api/WebRTC.answer
    events:
      - websocket:
          route: answer
  relay:
    description: 'Relays messages from contact form to slack'
    handler: api/slackDM.relay
    events:
      - websocket:
          route: relay
