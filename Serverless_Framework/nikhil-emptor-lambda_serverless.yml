frameworkVersion: ">=1.44.1 <2.0.0"

service: patronemptor

provider:
  name: aws
  runtime: python3.7
  memorySize: 128
  region: us-east-1
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - iam:GetRole
        - iam:PassRole
        - iam:DeleteRolePolicy
        - iam:CreateRole
        - iam:DeleteRole
        - iam:AttachRolePolicy
        - iam:DetachRolePolicy
        - iam:PutRolePolicy
        - s3:CreateBucket
        - s3:PutObject
        - dynamodb:*
        - lambda:*
      Resource:
        "*"

functions:
  weblambda:
    handler: handler.url_parser
#    events:
#      - stream:
#          type: dynamodb
#          batchSize: 5
#          startingPosition: LATEST
#          arn:
#            Fn::GetAtt:
#              - myDynamoTable
#              - arn:aws:dynamodb:($self:provide.region)*
  asyncinvoke:
    handler: asyncinvoke.processor
  querydb:
    handler: querydb.processor

#resources:
#  Resources:
#    myDynamoTable:
#      Type: 'AWS::DynamoDB::Table'
#      Properties:
#        TableName: 'version3'
#        AttributeDefinitions:
#          - AttributeName: req_id
#            AttributeType: S
#        KeySchema:
#          - AttributeName: req_id
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 5
#          WriteCapacityUnits: 5
#  Outputs:
#    TableStreamArn:
#      Value: !GetAtt myDynamoTable.StreamArn
