# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: forex-batch
# app and org for use with dashboard.serverless.com
app: forex
org: sreerajkytco

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  memorySize: ${file(./config/${self:provider.stage}.yml):memorySize}
  timeout: ${file(./config/${self:provider.stage}.yml):timeout}
  retry: 0

  vpc:
    securityGroupIds:
      - sg-0442b3dc480978ff4
    subnetIds:
      - subnet-07721c26425171b53
      - subnet-03983c2c4c24fda1b
      - subnet-0b793b3bd6cbfc206
      - subnet-07a299a5ae0be1330
      - subnet-03c46acd2d3101a55
      - subnet-011d3d8e2a9ee3442
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DetachNetworkInterface
        - ec2:DeleteNetworkInterface
        - "secretsmanager:GetSecretValue"
      Resource: "*"

#outputs:
#  custom-output: any-value-here

# you can overwrite defaults here
#  stage: dev
#  region: ap-south-1
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  forex-exchange-handler:
    handler: dist/functions/forex-exchange-handler.getForexExchangeRate
    events:
      - schedule: rate(${file(./config/${self:provider.stage}.yml):SCHEDULE_TIME_FREQUENCY})
        maximumRetryAttempts: rate(${file(./config/${self:provider.stage}.yml):maximumRetryAttempts})

    #iamRoleStatements:
    #  - Effect: "Allow"
    #    Action:
    #      - "secretsmanager:GetSecretValue"
    #    Resource: "arn:aws:secretsmanager:ap-south-1:398009231008:secret:skynet-qa/rds/oms-vXZyMZ"

    environment:
      STAGE: ${file(./config/${self:provider.stage}.yml):env}
      EXCHANGE_RATE_URL: ${file(./config/${self:provider.stage}.yml):EXCHANGE_RATE_URL}
      FOREX_API_BEARER_TOKEN: ${file(./config/${self:provider.stage}.yml):FOREX_API_BEARER_TOKEN}
      FOREX_API_TIMEOUT: ${file(./config/${self:provider.stage}.yml):FOREX_API_TIMEOUT}
      FOREX_API_TENANT: ${file(./config/${self:provider.stage}.yml):FOREX_API_TENANT}
      PG_HOST: ${file(./config/${self:provider.stage}.yml):PG_HOST}
      PG_PORT: ${file(./config/${self:provider.stage}.yml):PG_PORT}
      PG_USERNAME: ${file(./config/${self:provider.stage}.yml):PG_USERNAME}
      PG_PASSWORD: ${file(./config/${self:provider.stage}.yml):PG_PASSWORD}
      PG_SECRET_KEY: ${file(./config/${self:provider.stage}.yml):PG_SECRET_KEY}
      PG_DATABASE: ${file(./config/${self:provider.stage}.yml):PG_DATABASE}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      events:
#        - schedule: rate(10 minutes)
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-pseudo-parameters
  - serverless-mocha

custom:
  serverless-mocha-plugin:
    testTemplate: templates/test-template.ejs
    functionTemplate: templates/function-template.ejs
