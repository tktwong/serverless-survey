service: teststepfunction
frameworkVersion: '2'

provider:
  name: aws
  runtime: dotnetcore3.1
  stage: development
  region: eu-west-2

package:
  # individually: true
  artifact: ./bin/release/netcoreapp3.1/BaseStepFunction.zip

functions:
  hello:
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello

stepFunctions:
  stateMachines:
    teststepfunc1:
      events:
        - http:
            path: gofunction
            method: GET
        - schedule:
            rate: rate(10 minutes)
            enabled: true
            input:
              name: Selwyn
              likes: Step Functions
              stageParams:
                stage: development
      name: myStateMachine
      definition:
        Comment: "A test step function deployed via serverless"
        StartAt: Step1
        States:
          Step1:
            Type: Task
            Resource:
              Fn::GetAtt: [hello, Arn]
            End: true
      dependsOn: lambdaExecutionRole
      tags:
        Team: HackIt
#      alarms:
#        topics:
#          ok: arn:aws:sns:us-east-1:1234567890:NotifyMe
#          alarm: arn:aws:sns:us-east-1:1234567890:NotifyMe
#          insufficientData: arn:aws:sns:us-east-1:1234567890:NotifyMe
#        metrics:
#          - executionsTimedOut
#          - executionsFailed
#          - executionsAborted
#          - metric: executionThrottled
#            treatMissingData: breaching # overrides below default
#          - executionsSucceeded
#        treatMissingData: ignore # optional
    hellostepfunc2:
      definition:
        StartAt: Step2
        States:
          Step2:
            Type: Task
            Resource:
              Fn::GetAtt: [hello, Arn]
            End: true
      dependsOn:
        - lambdaExecutionRole
      tags:
        Team: HackIt
#  activities:
#    - myTask
#    - yourTask
#  validate: true # enable pre-deployment definition validation (disabled by default)

resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"


plugins:
  - serverless-step-functions
