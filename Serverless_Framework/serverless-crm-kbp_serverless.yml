# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: kb1
# app and org for use with dashboard.serverless.com
app: kb1-crm-app
org: guy1812

provider:
  name: aws
  apiKeys:
    - access_crm_query_key_${self:provider.stage}
  runtime: nodejs12.x
  timeout: 40
  stage: ${opt:stage, self:custom.default_stage}
  environment:
    APIG_DEPLOYMENT_ID: ApiGatewayDeployment${sls:instanceId}
    STAGE: ${self:provider.stage}

functions:
  returnNotValid:
    handler: src/functions/returnNotValid.returnNotValid
    events:
      - http:
          path: returnNotValid
          method: post

  sendReplies:
    handler: src/functions/sendMsgAsUser.sendMsgAsUser
    events:
      - http:
          path: sendReplies
          method: post

  existByPhone:
    provisionedConcurrency: 1
    handler: src/functions/existOnCrm.existByPhone
    events:
      - http:
          path: crm/existByPhone
          method: post
          private: true

  checkForMessenger:
    handler: src/functions/existOnCrm.existByPhone
    events:
      - http:
          path: crm/checkForMessenger
          method: post
          private: true

  registerNotificationKey:
    handler: src/functions/notifications/index.registerNotificationKey
    events:
      - http:
          path: notifications/registerNotificationKey
          method: post
          private: false

  sendNotifications:
    handler: src/functions/notifications/index.sendNotifications
    events:
      - http:
          path: notifications/send
          method: post
          private: true
#
#  checkNotificationPushStatus:
#    handler: src/functions/notifications/index.checkNotificationPushStatus
#    events:
#      - http:
#          path: notifications/send
#          method: post
#          private: true

  createOrder:
    provisionedConcurrency: 1
    handler: src/functions/orders.create
    events:
      - http:
          path: crm/orders/create
          method: post
          private: true

  createOrderAsync:
    handler: src/functions/orders.createAsync
    events:
      - http:
          path: crm/orders/createAsync
          method: post
          private: true


  onCustomerMessage:
    provisionedConcurrency: 1
    handler: src/functions/bot/guideHelper.onCustomerMessage
    events:
      - http:
          path: bot/guideHelper/onCustomerMessage
          method: post
          private: true

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-jest-plugin

custom:
  default_stage: dev
  jest:
    collectCoverage: true
  serverless-offline:
    useChildProcesses: true
  enterprise:
    logIngestMode: pull

resources:
  Resources:
    NewOrders:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: NewOrders_${self:provider.stage}