service: resize-on-the-fly

package:
  individually: true

plugins:
  - serverless-plugin-cloudfront-lambda-edge

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${self:custom.stage}

custom:
  stage: ${opt:stage, 'dev'}
  name: ${opt:name, 'resize-on-the-fly'}-${self:custom.stage}

functions:
  origin-response:
    handler: origin-response/index.handler
    name: ${self:custom.name}-origin-response
    runtime: nodejs6.10
    memorySize: 512
    timeout: 12
    role: originResponseRole
    lambdaAtEdge:
      distribution: 'cloudFrontDistribution'
      eventType: 'origin-response'
    package:
      exclude:
        - '*/**'
      include:
        - 'origin-response/**'
  viewer-request:
    handler: viewer-request/index.handler
    name: ${self:custom.name}-viewer-request
    runtime: nodejs6.10
    memorySize: 128
    timeout: 5
    role: viewerRequestRole
    lambdaAtEdge:
      distribution: 'cloudFrontDistribution'
      eventType: 'viewer-request'
    package:
      exclude:
        - '*/**'
      include:
        - 'viewer-request/**'

resources:
  Resources:
    imagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: 'PublicRead'
        BucketName: ${self:custom.name}-images
    cloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          DefaultCacheBehavior:
            Compress: true
            DefaultTTL: 31536000
            ForwardedValues:
              Cookies:
                Forward: 'none'
              QueryString: true
              QueryStringCacheKeys:
                - 'p'
                - 'crop'
            TargetOriginId: 'OriginBucket'
            ViewerProtocolPolicy: 'redirect-to-https'
          Enabled: true
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - 'imagesBucket'
                  - 'DomainName'
              Id: 'OriginBucket'
              S3OriginConfig: {}
          PriceClass: 'PriceClass_All'
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
    originResponseRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.name}-origin-response-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: ${self:custom.name}-origin-response-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:GetFunction
                    - lambda:EnableReplication
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - 'arn:aws:lambda'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'function'
                        - '${self:custom.name}-origin-response'
                - Effect: Allow
                  Action:
                    - iam:CreateServiceLinkedRole
                    - cloudFront:UpdateDistribution
                    - cloudFront:CreateDistribution
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObjectAcl
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:DeleteObject
                    - s3:GetBucketLocation
                    - s3:PutObjectAcl
                  Resource:
                    - 'arn:aws:s3:::${self:custom.name}-images'
                    - 'arn:aws:s3:::${self:custom.name}-images/*'
                - Effect: Allow
                  Action:
                    - s3:ListAllMyBuckets
                  Resource:
                    - '*'
    viewerRequestRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.name}-viewer-request-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: ${self:custom.name}-viewer-request-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObjectAcl
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:DeleteObject
                    - s3:GetBucketLocation
                    - s3:PutObjectAcl
                  Resource:
                    - 'arn:aws:s3:::${self:custom.name}-images'
                    - 'arn:aws:s3:::${self:custom.name}-images/*'
                - Effect: Allow
                  Action:
                    - s3:ListAllMyBuckets
                  Resource:
                    - '*'
