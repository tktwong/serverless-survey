frameworkVersion: '>=1.0.0 <2.0.0'

service: ${self:custom.project.eventHandler.name}

custom:
  stage: ${opt:stage, self:custom.private.stage}
  private: ${file(../private.yml)}
  project: ${file(../project.yml)}
  # stream: ${file(../stream/serverless.yml)}
  # streamVersion: 1
  eventHandlerVersion: 1 # The version of this service to depend upon
  eventHandler: ${self:} # externally, use `${file(~/eventHandler/serverless.yml)}`, replacing the `~` therein with the appropriate relative reference [e.g. '..' or '../..']
  # Exports
  exportEventHandlerRestApi: ${self:custom.eventHandler.service}:${self:custom.stage}:EventHandlerRestApi:${self:custom.eventHandlerVersion}

provider:
  name: aws
  deploymentBucket: ${self:custom.project.deploymentBucket}
  runtime: nodejs6.10
  profile: ${self:custom.private.profile}
  region: ${self:custom.private.region}

functions:
  eventHandler:
    role:
      Fn::GetAtt: [ EventHandler, Arn ]
    handler: handler.eventHandler
    environment:
      ENDPOINT_TWILIO:
        Fn::Join:
          - ''
          - - https://
            - Ref: ApiGatewayRestApi
            - .execute-api.${self:custom.private.region}.amazonaws.com/${self:custom.stage}/sms
      # STREAM_NAME:
      #   Fn::ImportValue: ${self:custom.stream.custom.exportStreamName}
      IMAGE_BUCKET: ${self:custom.project.eventHandler.bucket}
      PROJECT_NAME: ${self:custom.project.name}
      STAGE: ${self:custom.stage}
      SALT: ${self:custom.private.accountId} # TODO use KMS to encrpyt this and something better than accountId
      UPGRADE_URL: https://www.starbucks.com/account/signin
      # TWILIO_ACC: ${self:custom.private.twilio.accountSid} # TODO use KMS to encrpyt this
      # TWILIO_AUTH: ${self:custom.private.twilio.authToken} # TODO use KMS to encrpyt this
      # TWILIO_PHONE: ${self:custom.private.twilio.phoneNumber}
    events:
      - http:
          path: sms
          method: post
          cors: true
      - http: # for other stuff
          path: eventHandler
          method: post
          # authorizer: aws_iam # TODO need serverless at 1.14.0+ to do this simply (get rid of resource block below)
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    # Log Group
    EventHandlerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:custom.stage}-eventHandler
        RetentionInDays: 7

    EventHandler: # role for the Event Handler Lambda to write to logs and the Kinesis Stream
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.stage}EventHandler${self:custom.eventHandlerVersion}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: lambda.amazonaws.com
        Policies:
          - PolicyName: CreateAndWriteToLogStream
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource:
                    - Fn::Join:
                      - ':'
                      - - Fn::GetAtt: [ EventHandlerLogGroup, Arn ]
                        - '*'
          - PolicyName: StoreImageInBucket
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:putObject'
                    - 's3:putObjectAcl'
                  Resource: ${self:custom.project.eventHandler.bucketArn}/${self:custom.stage}/*
          # - PolicyName: WriteToKinesis
          #   PolicyDocument:
          #     Version: '2012-10-17'
          #     Statement:
          #       - Effect: Allow
          #         Action:
          #           - 'kinesis:PutRecord'
          #         Resource:
          #           Fn::ImportValue: ${self:custom.stream.custom.exportStreamArn}

  Outputs:
    EventHandlerRestApi:
      Description: API used to handle Twilio svents
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.eventHandler.custom.exportEventHandlerRestApi}
