service: szotki-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-api-gateway-throttling
  - serverless-stack-output

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-privatebin
  userAccountTable: ${self:custom.stage}-userAccount

  # Configures throttling settings for all http endpoints
  apiGatewayThrottling:
    maxRequestsPerSecond: 10
    maxConcurrentRequests: 5

  output:
    #    handler: scripts/output.handler # Same syntax as you already know
    file: ./stack.yml # toml, yaml, yml, and json format is available


provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-central-1
  profile: metano

  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ PrivateBinTable, Arn ]

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito.yml)}

functions:
  createNotes:
    handler: src/notes/create.main
    events:
      - http:
          path: privatebin/notes
          method: post
          cors: true

  getNotes:
    handler: src/notes/get.main
    events:
      - http:
          path: privatebin/notes/{id}
          method: get
          cors: true

  listNotes:
    handler: src/notes/list.main
    events:
      - http:
          path: privatebin/notes
          method: get
          cors:
            origin: '*' # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - userid
#            allowCredentials: true

  updateNotes:
    handler: src/notes/update.main
    events:
      - http:
          path: privatebin/notes/{id}
          method: put
          cors: true

  deleteNotes:
    handler: src/notes/delete.main
    events:
      - http:
          path: privatebin/notes/{id}
          method: delete
          cors: true

  createUserAccount:
    handler: src/user-accounts/create.main
    events:
      - http:
          path: privatebin/user-accounts
          method: post
          cors: true

  getUserAccount:
    handler: src/user-accounts/get.main
    events:
      - http:
          path: privatebin/user-accounts/{id}
          method: get
          cors: true

  updateUserAccount:
    handler: src/user-accounts/update.main
    events:
      - http:
          path: privatebin/user-accounts/{id}/{counter}
          method: get
          cors: true
