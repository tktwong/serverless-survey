service:
  name: image-resizer

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-domain-manager
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs10.x
  profile: personal-sandbox # ChangeIt
  region: ap-south-1 # ChangeIt
  stage: ${opt:stage, 'dev'}
  apiKeys:
    - thumbnailGenerator
  usagePlan:
    quota:
      limit: 1000
      offset: 0
      period: DAY
    throttle:
      burstLimit: 15
      rateLimit: 15

custom:
  env: ${file(./env/${self:provider.stage}.yml)} # ChangeIt
  subDomain: ${self:custom.env.SUBDOMAIN}
  host: ${self:custom.env.DOMAIN}.${self:custom.env.ROOT_DOMAIN}
  customDomain:
    domainName: ${self:custom.subDomain}.${self:custom.host}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: 'regional' # ChangeIt
  globalParameters:
    thumbnailGeneratorSecretToken: ${ssm:/sampleapp-thumbnailGenerator}
  webpack:
    packager: npm
    includeModules:
      forceExclude:
        - aws-sdk

functions: # add your functions
  health:
    handler: src/health.health
    name: ${self:service.name}-${self:provider.stage}-health
    descptions: default end point used to return the status of health
    events:
      - http:
          method: get
          path: health
          authorizer: authorize
  getImageMetaData:
    handler: src/getImageMetaData.getImageMetaData
    name: ${self:service.name}-${self:provider.stage}-getImageMetaData
    descptions: this end point fetches the metadata of a given image name
    environment:
      META_TABLE_NAME:
        Ref: ImagesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "S3:ListBucket"
          - "S3:GetObject"
        Resource: arn:aws:s3:::thumbnails-xpparel/*
      - Effect: Allow
        Action:
          - "dynamodb:Scan"
          - "dynamodb:GetItem"
        Resource:
          - '#{ImagesTable.Arn}'
    events:
      - http:
          method: get
          path: /image/{name}/metadata
          authorizer: authorize
  resizeHandler:
    handler: src/resizeHandler.resizeHandler
    name: ${self:service.name}-${self:provider.stage}-resizeHandler
    description: will get triggered when a jpeg image is uploaded or renamed in uploads floder.
    environment:
      UPLOADS_FOLDER: 'uploads/'
      THUMBNAILS_FOLDER: 'thumbnails/'
      META_TABLE_NAME:
        Ref: ImagesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "S3:ListBucket"
          - "S3:GetObject"
          - "S3:PutObject"
        Resource: arn:aws:s3:::thumbnails-xpparel/*
      - Effect: Allow
        Action:
          - "dynamodb:Scan"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:DeleteItem"
        Resource:
          - '#{ImagesTable.Arn}'
    events:
# only .jpg is supported in this sample app
      - s3:
          bucket: thumbnails-xpparel
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
#      - s3:
#          bucket: thumbnails-xpparel
#          event: s3:ObjectCreated:*
#          rules:
#            - prefix: uploads/
#            - suffix: .jpeg
  thumbnailsDetails:
    handler: src/thumbnailsDetails.thumbnailsDetails
    name: ${self:service.name}-${self:provider.stage}-thumbnailsDetails
    description: will get triggered when a jpeg image is uploaded or renamed in thumbnails floder.
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "S3:ListBucket"
          - "S3:GetObject"
          - "S3:PutObject"
        Resource: arn:aws:s3:::thumbnails-xpparel/thumbnails/*
    events:
      - s3:
          bucket: thumbnails-xpparel
          event: s3:ObjectCreated:*
          rules:
            - prefix: thumbnails/
            - suffix: .jpeg
  generateToken:
    handler: src/generateToken.generateTokenFun
    name: ${self:service.name}-${self:provider.stage}-generateToken
    description: generates jwt token
    environment:
      APP_SECRET: ${self:custom.globalParameters.thumbnailGeneratorSecretToken}
    events:
      - http:
          method: POST
          path: /token
          private: true
  authorize:
    environment:
      APP_SECRET: ${self:custom.globalParameters.thumbnailGeneratorSecretToken}
    handler: src/auth/authoriser.authorize

resources:
  # Output
  - ${file(InfrastructureResources/outputs.yml)}
  - ${file(InfrastructureResources/dynamoDB.yml)}
