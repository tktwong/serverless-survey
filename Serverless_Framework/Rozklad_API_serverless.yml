service: rozklad-api

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-openapi-documentation
  - serverless-plugin-warmup
iamRoleStatements:
  - Effect: 'Allow'
    Action:
      - 'lambda:InvokeFunction'
    Resource: "*"
custom:
  warmup:
    enabled: true # Whether to warm up functions by default or not
    folderName: '_warmup' # Name of the folder created for the generated warmup
    cleanFolder: false
    memorySize: 256
    name: 'make-them-pop'
#      role: myCustRole0
    vpc: false
    events:
      - schedule: 'cron(0/30 8-23 ? * MON-FRI *)' # Run WarmUp every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
    package:
      individually: true
#        exclude: # exclude additional binaries that are included at the serverless package level
#          - ../**
#          - ../../**
#        include:
#          - ./**
    timeout: 20
    prewarm: true # Run WarmUp immediately after a deploymentlambda
    clientContext:
      source: my-custom-source
      other: '20'
    payload:
      source: my-custom-source
      other: 20
    payloadRaw: true # Won't JSON.stringify() the payload, may be necessary for Go/AppSync deployments
    concurrency: 5 # Warm up 5 concurrent instances
  documentation:
    version: '1'
    title: "rozklad"
    description: "Description"
    models:
      - name: "SubjectModel"
        description: "This is subject"
        contentType: "application/json"
        schema:
          type: object
          properties:
            name:
              type: string
            teachers:
              type: string
            lessonsZoom:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                  accessCode:
                    type: string
            labsZoom:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                  accessCode:
                    type: string
            isRequired:
              type: boolean

  serverless-offline:
    useChildProcesses : true
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - student_id
package:
  excludeDevDependencies: false

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: eu-north-1
  memorySize: 128
  timeout: 5
  endpointType: regional

functions:
  # Subject
  add-subject:
    warmup: true
    handler: app/handler.add_subject
    description: POST /subject
    events :
      - http:
          path: subject
          method: post
          cors:
            origin : '*'
            headers: ${self:custom.allowedHeaders}
          documentation:
            summary: "Create Subject"
            description: "Create new Subject object"
            requestBody:
              description: "Subject object, in format {'Item':{//Subject here}}"
            requestModels:
              application/json: "SubjectModel"

  get-subject:
    warmup: true
    handler: app/handler.get_subject
    description: GET /subject
    events :
      - http:
          path : subject/{id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}



  update-subject:
    warmup: true
    handler: app/handler.update_subject
    description: PUT /subject/{id}
    events :
      - http:
          path: subject/{id}
          method: put
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  getAll-subject:
    handler: app/handler.get_all
    description: GET /subject
    events:
      - http:
          path: subject
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  remove-subject:
    handler: app/handler.remove_subject
    description: DELETE /subject
    events:
      - http:
          path : /subject/{id}
          method : delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  # Student
  add-student :
    handler: app/handler.create_student
    description:  POST /student
    events:
      - http:
          path: student
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-student:
    handler : app/handler.get_student
    description: GET /student/{id}
    events:
      - http:
          path: student/{id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  getAll-student:
    handler: app/handler.getAll_students
    description: GET /student
    events:
      - http:
          path: student
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-student-by-name:
    handler: app/handler.get_student_by_name
    description: POST /student/name
    events:
      - http:
          path: student/name
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
#  get-student_by_lastname:
#    handler: app/handler.get_student_by_name
#    description: GET /student/by_name/{name}
#    events:
#      - http:
#          path: student/by_name/{name}
#          method: get
#          cors:
#            origin: '*'
#            headers: ${self:custom.allowedHeaders}
  update-student:
    handler: app/handler.update_student
    description: PUT /student/{id}
    events:
      - http:
          path : student/{id}
          method: put
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  remove-student:
    handler: app/handler.remove_student
    description: DELETE /student/{id}
    events:
      - http:
          path : student/{id}
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  #Lesson
  add-lesson:
    handler: app/handler.create_lesson
    description: POST /lesson
    events:
      - http:
          path: lesson
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-lesson:
    handler: app/handler.get_lesson
    description: GET /lesson
    events:
      - http:
          path: lesson/{id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  update-lesson:
    handler: app/handler.update_lesson
    description: PUT /lesson/{id}
    events:
      - http:
          path: lesson/{id}
          method: put
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  remove-lesson:
    handler: app/handler.remove_lesson
    description: DELETE /lesson/{id}
    events:
      - http:
          path: lesson/{id}
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  getAll-lesson:
    handler: app/handler.getAll_lesson
    description: GET /lesson
    events:
      - http:
          path: lesson
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  #TimeTable
  get-Timetable:
    warmup: true
    handler: app/handler.get_TimeTable
    description: GET /timetable
    events :
      - http:
          path : timetable
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
