frameworkVersion: "<=1.26.1"
plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-webpack

custom:
  # webpack:
  #   includeModules: true
  dynamodb:
    start:
      port: 8001
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

service: asdsgn-net-api
provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-west-2
  environment:
    DYNAMODB_POSTS_TABLE: ${self:service}__posts--${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_POSTS_TABLE}"

functions:
  auth:
    handler: auth.authorize

  posts_create:
    handler: posts.create
    events:
      - http:
          path: posts
          method: post
          authorizer: auth
          cors:
            origins:
              - 'https://www.asdsgn.net'
            headers:
              - Content-Type
              - Authorization
          
  
  posts_list:
    handler: posts.list
    events:
      - http:
          path: posts
          method: get
          cors:
            origins:
              - 'https://www.asdsgn.net'
            headers:
              - Content-Type
  
  posts_get:
    handler: posts.get
    events:
      - http:
          path: posts/{id}
          method: get
          cors:
            origins:
              - 'https://www.asdsgn.net'
            headers:
              - Content-Type
  
  # posts_update:
  #   handler: posts/handler.update
  #   events:
  #     - http:
  #         path: posts/{id}
  #         method: put
  #         authorizer: auth
  #         cors:
  #           origins:
  #             - 'https://www.asdsgn.net'
  #           headers:
  #             - Content-Type
  #             - X-Amz-Date
  #             - Authorization
  #             - X-Api-Key
  #             - X-Amz-Security-Token
  
  posts_delete:
    handler: posts.delete
    events:
      - http:
          path: posts/{id}
          method: delete
          authorizer: auth
          cors:
            origins:
              - 'https://www.asdsgn.net'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

resources:
  Resources:
    PostsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
           -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_POSTS_TABLE}
