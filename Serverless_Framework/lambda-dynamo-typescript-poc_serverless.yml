service:
  name: ${self:custom.apiEntity}-service

plugins:
  - serverless-webpack
  - serverless-offline

package:
  individually: true
  include:
    - src/**

custom:
  apiEntity: todos # plural
  version: v1
  tableName: ${self:custom.apiEntity}-${self:provider.stage}-${self:custom.version}
  eventBusName: ${self:custom.apiEntity}-${self:provider.stage}-${self:custom.version}
  pathPrefix: ${self:custom.version}/${self:custom.apiEntity}

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'eu-west-2'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  environment:
    API_ENTITY: ${self:custom.apiEntity}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    EVENT_BUS_NAME: ${self:custom.eventBusName}
    SERVICE_NAME: ${self:service.name}-${self:provider.stage}-${self:custom.version}
    TABLE_NAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
      Resource:
        Fn::GetAtt:
          - DynamoTable
          - Arn
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource:
        Fn::GetAtt:
          - EventBus
          - Arn

functions:
  post:
    handler: src/post.handler
    events:
      - http:
          method: post
          path: ${self:custom.pathPrefix}
          cors: true
  get:
    handler: src/get.handler
    events:
      - http:
          method: get
          path: ${self:custom.pathPrefix}/{id}
          cors: true
  list:
    handler: src/list.handler
    events:
      - http:
          method: get
          path: ${self:custom.pathPrefix}
          cors: true
  put:
    handler: src/put.handler
    events:
      - http:
          method: put
          path: ${self:custom.pathPrefix}/{id}
          cors: true
  delete:
    handler: src/delete.handler
    events:
      - http:
          method: delete
          path: ${self:custom.pathPrefix}/{id}
          cors: true

resources:
  Resources:
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        SSESpecification:
          SSEEnabled: true
    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: ${self:custom.eventBusName}
    EventBusArnSSMParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Description: 'Event Bus Arn for ${self:custom.apiEntity} events'
        Name: ${self:custom.apiEntity}-event-bus
        Type: String
        Value: !GetAtt EventBus.Arn
  Outputs:
    EventBusName:
      Value: !GetAtt EventBus.Name
