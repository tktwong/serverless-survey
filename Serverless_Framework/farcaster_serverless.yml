# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: farcaster-lambda

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  s3_bucket: ${file(./config.${self:custom.currentStage}.json):s3Bucket}
  vpc_subnet: ${file(./config.${self:custom.currentStage}.json):vpcSubnet}
  cluster_name: ${file(./config.${self:custom.currentStage}.json):clusterName}
  task_definition: ${file(./config.${self:custom.currentStage}.json):taskDefinition}
  tableName: ${file(./config.${self:custom.currentStage}.json):tableName}
  readThroughput: ${file(./config.${self:custom.currentStage}.json):readThroughput}
  writeThroughput: ${file(./config.${self:custom.currentStage}.json):writeThroughput}

provider:
  name: aws
  runtime: python3.6
  stage: ${self:custom.currentStage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"
    - Effect: "Allow"
      Action:
        - "iam:PassRole"
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:iam::'
            - Ref: 'AWS::AccountId'
            - ':role/ecsTaskExecutionRole'
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - ${self:custom.s3_bucket}
            - '/*'
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - ${self:custom.s3_bucket}
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ TimeSeriesTable, Arn ]
  iamManagedPolicies:
    - arn:aws:iam::aws:policy/AmazonECS_FullAccess

functions:
  farcaster:
    handler: handler.queue_farcaster
    environment:
      RUNNER: ${self:custom.task_definition}
      SUBNET: ${self:custom.vpc_subnet}
      CLUSTER_NAME: ${self:custom.cluster_name}
      TABLE_NAME: ${self:custom.tableName}
    events:
      - http:
          path: /farcaster
          method: post

resources:
  Resources:
    TimeSeriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: request_id
            AttributeType: S
        KeySchema:
          - AttributeName: request_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.readThroughput}
          WriteCapacityUnits: ${self:custom.writeThroughput}

plugins:
  - serverless-python-requirements
