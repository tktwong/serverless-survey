service:
  name: dynamo-stage
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceInclude:
        - debug
  defaultStage: dev
  stage: ${opt:stage, self:custom.defaultStage}
  dynamodbAutoBackups:
    backupRate: rate(10 minutes) # Every 5 minutes, from the time it was deployed
    source: server/backups.handler # Path to the handler function we created in step #2
    active: true
# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - '@unly/serverless-plugin-dynamodb-backups'

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-northeast-1
  stage: ${self:custom.stage}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

functions:
  put:
    handler: server/receiver.handler
    environment:
      stage: ${self:custom.stage}
    events:
      - http:
          method: post
          path: put
    iamRoleStatementsName: reciever-${self:custom.stage}-lambdaRole
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource:
          Fn::GetAtt: [DynamoDBStageTable, Arn]
  logic:
    handler: server/logic.handler
    environment:
      stage: ${self:custom.stage}
      topicArn:
        Ref: SnsStageTopic
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DynamoDBStageTable, StreamArn]
    iamRoleStatementsName: logic-${self:custom.stage}-lambdaRole
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:ListStreams
        Resource:
          Fn::GetAtt: [DynamoDBStageTable, Arn]
      - Effect: "Allow"
        Action:
          - SNS:Publish
        Resource:
          Ref: SnsStageTopic
resources:
  Resources:
    DynamoDBStageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stage}DynamoDBStageTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    SnsStageTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.stage}SnsStageTopic
        Subscription:
          - Endpoint: ""
            Protocol: "email"
