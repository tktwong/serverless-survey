service:
  name: serverless-book-review-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    REVIEWS_TABLE: Reviews-${self:provider.stage}
    INDEX_NAME: ReviewsIndex
    ATTACHMENTS_S3_BUCKET: book-reviews-app-attachments-eam-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

custom:

  documentation:
    api:
      info:
        version: v1.0.0
        title: Book Review App API            
        description: Serverless application for creating book reviews
    models:
      - name: CreateReviewRequest
        contentType: application/json
        schema: ${file(src/models/create-review-request.json)}
      - name: UpdateReviewRequest
        contentType: application/json
        schema: ${file(src/models/update-review-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetReviews:
    handler: src/lambda/http/getReviews.handler
    events:
      - http:
          method: get
          path: reviews
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}/index/${self:provider.environment.INDEX_NAME}
  
  CreateReview:
    handler: src/lambda/http/createReview.handler
    events:
      - http:
          method: post
          path: reviews
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create new review
            description: Create new review item
            requestModels:
              'application/json': CreateReviewRequest
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}

  UpdateReview:
    handler: src/lambda/http/updateReview.handler
    events:
      - http:
          method: patch
          path: reviews/{reviewId}
          cors: true
          authorizer: Auth
          #reqValidatorName: RequestBodyValidator
          #documentation:
          #  summary: Update review
          #  description: Update review item
          #  requestModels:
          #    'application/json': UpdateReviewRequest
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}

  DeleteReview:
    handler: src/lambda/http/deleteReview.handler
    events:
      - http:
          method: delete
          path: reviews/{reviewId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}

  uploadUrl:
    handler: src/lambda/http/uploadUrl.handler
    events:
      - http:
          method: post
          path: reviews/{reviewId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: reviewId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: reviewId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.REVIEWS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    AttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: ["s3:GetObject", "s3:Put*"]
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*"
        Bucket: { Ref: AttachmentsBucket }