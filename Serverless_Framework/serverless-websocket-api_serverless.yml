service: ${opt:service}

# Warning: plugin order matters
plugins:
  - serverless-webpack # The Webpack Plugin must come before offline, so the code compiles for the simulated API Gateway to find
  - serverless-dynamodb-local
  - serverless-offline

custom:
  # https://github.com/serverless-heaven/serverless-webpack
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true

  dynamodb:
    stages:
      - local
    start:
      port: 8000
      migrate: true # this is required to create the DynamoDB local tables on start

provider:
  name: aws
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'local'}
  runtime: nodejs12.x
  # Websocket API Gateway
  # Serverless sets WebsocketsApi as the Resource ID for referencing the Websockets API in YAML
  # e.g. Ref: WebsocketsApi or Fn::GetAtt: [WebsocketsApi, Attribute]
  # https://github.com/serverless/serverless/blob/0293040164fe240f2c171ac2357587a77b7afa0f/lib/plugins/aws/lib/naming.js#L172
  websocketsApiName: ${self:service}-${self:provider.stage}
  websocketsApiRouteSelectionExpression: $request.body.action

  environment:
    SERVICE: ${self:service}
    STAGE: ${self:provider.stage}

  # IAM Roles
  iamRoleStatements:
    # Allow managing and posting to websocket connections
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
        - 'execute-api:Invoke'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'

    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: '*'

    # Allow updating the connections table
    - Effect: Allow
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:Query'
        - 'dynamodb:DeleteItem'
      Resource:
        - Fn::GetAtt: [DynamoDBTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [DynamoDBTable, Arn]
              - '*'

# Manually provide the package for each Lambda
package:
  individually: true

functions:
  onConnect:
    timeout: 15
    memorySize: 512 # Default is 1024
    handler: src/lambdas/on-connect.handler
    events:
      - websocket:
          route: $connect

  onDisconnect:
    timeout: 15
    memorySize: 512 # Default is 1024
    handler: src/lambdas/on-disconnect.handler
    events:
      - websocket:
          route: $disconnect

# Database
resources:
  Resources:
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-connections-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: room_id
            AttributeType: S
          - AttributeName: connection_id
            AttributeType: S
        KeySchema:
          - AttributeName: room_id
            KeyType: HASH
          - AttributeName: connection_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          # An index is needed on connection_id because disconnect lookups only have the connection_id available
          # https://docs.amazonaws.cn/en_us/amazondynamodb/latest/developerguide/GSI.OnlineOps.html#GSI.OnlineOps.Creating
          - IndexName: connection_id
            KeySchema:
              - AttributeName: connection_id
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
