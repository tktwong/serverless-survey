# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: helloPet # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
#  memorySize: 3008
#  timeout: 30000
#  versionFunctions: false

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

#plugins:
#  - serverless-offline
#custom:
#  custom:
#    webpackIncludeModules:
#      packagePath: './package.json'
#    serverless-offline:
#        babelOptions:
#          presets: ["es2015"]

# you can add packaging information here
#package:
#  individually: true
#  include:
#    - index.js
#    - node_modules/**
#    - lib/**
#    - package.json
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  petlist:
    handler: handler.petlist
  seleniumtest:
    handler: handler.seleniumtest
#    name: login-test-inst
#    description: sample selenium test to login to canvas test instructure site
#    events:
#      - http:
#          path: /
#          method: get
#  hello:
#    handler: handler.hello
#    events:
#      - http:
#          path: /
#          method: get
#  imageResize:
#    handler: handler.imageResize
#    events:
#      - http:
#          path: /imageResize
#          method: get

#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    petlist:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: petlist
        AttributeDefinitions:
          - AttributeName: petId
            AttributeType: S
        KeySchema:
          - AttributeName: petId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

 # A policy is a resource that states one or more permssions. It lists actions, resources and effects.

DynamoDBIamPolicy:
  Type: AWS::IAM::Policy
  DependsOn: petlist
  Properties:
    PolicyName: lambda-dynamodb
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:*:*:table/petlist
    Roles:
      - Ref: IamRoleLambdaExecution

