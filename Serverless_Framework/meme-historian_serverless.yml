service: meme-historian

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  account: ${opt:account}
  region: ${opt:region, 'eu-central-1'}
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: sls-deploy-${opt:account, 'serverless'}-${self:provider.region}
    serverSideEncryption: AES256
  environment:
    DEFAULT_FOLDER: ${file(config/${self:provider.stage}.json):defaultFolder}
    SUGGEST_FOLDER: ${file(config/${self:provider.stage}.json):suggestFolder}
    S3_BUCKET_NAME: ${file(config/${self:provider.stage}.json):bucketName}-${self:provider.stage}
    LOG_LEVEL: ${file(config/${self:provider.stage}.json):logLevel}
    PAGE_SIZE: 20
    SNS_EMAIL_TOPIC_NAME: ${file(config/${self:provider.stage}.json):topicName}
    SNS_EMAIL_TOPIC_ARN: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:provider.environment.SNS_EMAIL_TOPIC_NAME}
    MAIL_RECEIVER: ${file(config/${self:provider.stage}.json):adminEmail}
  apiKeys:
    - meme-api-key
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:ListBucket
        - s3:ListObjectsV2
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}*
        - arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*
    - Effect: "Allow"
      Action:
        - SNS:Publish
      Resource:
        - ${self:provider.environment.SNS_EMAIL_TOPIC_ARN}

functions:
  uploadImage:
    handler: src/handler.uploadImage
    events:
      - http:
          path: album/folder/{folderName}
          method: post
          private: true
  deleteImage:
    handler: src/handler.deleteImage
    events:
      - http:
          path: album/folder/{folderName}/image/{imageId}
          method: delete
          private: true
  moveImage:
    handler: src/handler.moveImage
    events:
      - http:
          path: album/folder/{folderName}/image/{imageId}
          method: put
          private: true
  folders:
    handler: src/handler.folders
    events:
      - http:
          path: album/folder
          method: get
          private: true
          request:
            parameters:
              querystrings:
                token: false
  getFolderContent:
    handler: src/handler.getFolderContent
    events:
      - http:
          path: album/folder/{folderName}
          method: get
          private: true
          request:
            parameters:
              querystrings:
                token: false

resources:
  - ${file(template.yml)}

plugins:
  - serverless-plugin-typescript
  - serverless-deployment-bucket
  - serverless-pseudo-parameters
  - serverless-plugin-include-dependencies
