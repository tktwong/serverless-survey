service:
    name: serverless-pokemon-app

plugins:
    - serverless-webpack
    - serverless-iam-roles-per-function
    - serverless-plugin-tracing
  
provider:
    name: aws
    runtime: nodejs10.x
  
    stage: ${opt:stage, 'dev'}
    region: ${opt:region, 'us-west-1'}

    tracing:
      lambda: true
      apiGateway: true 
  
    environment:
      POKEMONS_TABLE: PokemonTable-${self:provider.stage}
      USER_INDEX: UserIndex
      AUTH_0_SECRET: wWvX0xcc41oxAV6WZioeNZpfMuF8mTKIQdfVQwPa0Tm8qig3gwHUlsxkjCkGVOO3
      S3_BUCKET: serverless-pokemon-thabo-${self:provider.stage}
      SIGNED_EXPIRATION: 300

    iamRoleStatements:
      - Effect: "Allow"
        Action: 
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
    
    
  
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  
    # TODO: Configure this function
  GetPokemons:
    handler: src/lambda/http/getPokemons.handler
    events:
      - http:
          method: get
          path: pokemons
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service.name}-get-pokemons-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POKEMONS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POKEMONS_TABLE}/index/${self:provider.environment.USER_INDEX}
      
  

  CreatePokemon:
    handler: src/lambda/http/createPokemon.handler
    events:
      - http:
          method: post
          path: pokemons
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service.name}-create-pokemon-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POKEMONS_TABLE}
      
  
    # TODO: Configure this function
  
  UpdatePokemon:
    handler: src/lambda/http/updatePokemon.handler
    events:
      - http:
          method: patch
          path: pokemons/{pokemonId}
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service.name}-update-pokemon-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POKEMONS_TABLE}
      
  
    # TODO: Configure this function
  
  DeletePokemon:
    handler: src/lambda/http/deletePokemon.handler
    events:
      - http:
          method: delete
          path: pokemons/{pokemonId}
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service.name}-delete-pokemon-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POKEMONS_TABLE}
      
    # TODO: Configure this function
  
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: pokemons/{pokemonId}/attachment
          cors: true
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service.name}-generate-url-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POKEMONS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
      
  
resources:
  Resources:
     # TODO: Add any necessary AWS resources
    PokemonsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: pokemonId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: pokemonId 
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.POKEMONS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
  
    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
  
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
        Bucket: !Ref AttachmentBucket
  