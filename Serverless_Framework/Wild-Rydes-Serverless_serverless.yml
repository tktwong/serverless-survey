service: wild-rydes-api

plugins:
  - serverless-stack-output

custom:
  output:
    file: ../../src/build/config/api_config.json
  s3HostingBucket: ${self:service}-${self:provider.stage}-hosting
  ridesDynamoDBTable: ${self:service}-${self:provider.stage}-rides
  authStack: wild-rydes-auth-${self:provider.stage}
  userPoolArn: ${cf:${self:custom.authStack}.userPoolArn}

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["RidesDynamoDbTable", "Arn"] }

package:
  include:
    - ../../lambda/**

functions:
  RequestUnicorn:
    handler: lambda/index.handler
    events:
      - http:
          path: ride
          method: POST
          integration: lambda
          cors: true
          authorizer:
            arn: ${self:custom.userPoolArn}
          claims:
            - email
resources:
  Resources:
    S3HostingBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.s3HostingBucket}
        AccessControl: "PublicRead"
        WebsiteConfiguration:
          IndexDocument: "index.html"

    S3HostingBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket:
          Ref: S3HostingBucket
        PolicyDocument:
           Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3HostingBucket}/*

    RidesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: RideId
            AttributeType: S
        KeySchema:
          -
            AttributeName: RideId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.ridesDynamoDBTable}

  Outputs:
    Region:
      Value:
        Ref: 'AWS::Region'

