# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-nodejs # NOTE: update this with your service name
app: chandelier
tenant: timothyjoh

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
   - serverless-appsync-plugin
   - serverless-dynamodb-local
   - serverless-offline

# custom:
#   accountId: 684415158208 
#   appSync:
#     name:  # defaults to api
#     # apiKey # only required for update-appsync/delete-appsync
#     authenticationType: API_KEY or AWS_IAM or AMAZON_COGNITO_USER_POOLS or OPENID_CONNECT
#     # if AMAZON_COGNITO_USER_POOLS
#     userPoolConfig:
#       awsRegion: # required # region
#       defaultAction: # ALLOW
#       userPoolId: # required # user pool ID
#       region: # defaults to provider region
#     # if OPENID_CONNECT
#     openIdConnectConfig:
#       issuer: 
#       clientId: 
#       iatTTL: 
#       authTTL: 
#     logConfig:
#       loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
#       level: ERROR # Logging Level: NONE | ERROR | ALL
#     mappingTemplatesLocation: # defaults to mapping-templates
#     mappingTemplates:
#       - dataSource: # data source name
#         type: # Query, Mutation, Subscription
#         field: getUserInfo
#         request: # request mapping template name
#         response: # response mapping template name
#     schema: # defaults schema.graphql
#     dataSources:
#       - type: AMAZON_DYNAMODB
#         name: # data source name
#         description: # DynamoDB Table Description
#         config:
#           tableName: { Ref: MyTable } # Where MyTable is a dynamodb table defined in Resources
#           serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] } # Where AppSyncDynamoDBServiceRole is an IAM role defined in Resources
#           iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
#             - Effect: "Allow"
#               Action:
#                 - "dynamodb:GetItem"
#               Resource:
#                 - "arn:aws:dynamodb:{REGION}:{ACCOUNT_ID}:myTable"
#                 - "arn:aws:dynamodb:{REGION}:{ACCOUNT_ID}:myTable/*"
              
#           region: # Overwrite default region for this data source
#       - type: AMAZON_ELASTICSEARCH
#         name: # data source name
#         description: 'ElasticSearch'
#         config:
#           endpoint: # required # "https://{DOMAIN}.{REGION}.es.amazonaws.com"
#           serviceRoleArn: { Fn::GetAtt: [AppSyncESServiceRole, Arn] } # Where AppSyncESServiceRole is an IAM role defined in Resources
#           iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
#             - Effect: "Allow"
#               Action:
#                 - "es:ESHttpGet"
#               Resource:
#                 - "arn:aws:es:{REGION}:{ACCOUNT_ID}:{DOMAIN}"
#       - type: AWS_LAMBDA
#         name: # data source name
#         description: 'Lambda DataSource'
#         config:
#           lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
#           serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] } # Where AppSyncLambdaServiceRole is an IAM role defined in Resources
#           iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
#             - Effect: "Allow"
#               Action:
#                 - "lambda:invokeFunction"
#               Resource:
#                 - "arn:aws:lambda:{REGION}:{ACCOUNT_ID}:myFunction"
#                 - "arn:aws:lambda:{REGION}:{ACCOUNT_ID}:myFunction:*"
#       - type: HTTP
#         name: # data source name
#         description: 'Http endpoint'
#         config:
#           endpoint: # required # "https://{DOMAIN}/{PATH}"
#     substitutions: # allows to pass variables from here to velocity templates
#       # ${exampleVar1} will be replaced with given value in all mapping templates
#       exampleVar1: "${self:service.name}"
#       exampleVar2: {'Fn::ImportValue': 'Some-external-stuff'}