service: hyperbudget-password-reset

plugins:
  - serverless-offline
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-2
  stage: ${opt:stage, 'dev'}
  apiKeys:
    - hbQueKey3-${self:provider.stage}
  environment:
    DYNAMODB_TABLE: ${self:service}3-${self:provider.stage}
    SQS_QUEUE: hyperbudget-email-service-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource: "arn:aws:sqs:${opt:region, self:provider.region}:*:${self:provider.environment.SQS_QUEUE}"
    - Effect: Allow
      Action:
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${opt:region, self:provider.region}:*:*"

custom:
  documentation:
    api:
      info:
        version: '0.0.1'
        title: 'hyperbudget-password-reset'
        description: 'Password reset service'
    models:
      -
        name: ResetEmailRequest
        description: 'Model for the password reset request'
        contentType: 'application/json'
        schema: ${file(jsonschema/ResetEmail.json)}
      -
        name: ValidateTokenRequest
        description: 'Validate a password reset token'
        contentType: 'application/json'
        schema: ${file(jsonschema/ValidateToken.json)}

functions:
  sendPasswordReset:
    handler: handler.sendPasswordReset
    environment:
      SQS_QUEUE_URL: 'https://sqs.${self:provider.region}.amazonaws.com/504193536768/hyperbudget-email-service-${self:provider.stage}'
      REGION: '${self:provider.region}'
    events:
      - http:
          path: email/send
          method: post
          reqValidatorName: 'BodyValidator'
          documentation:
            summary: 'Send a password reset email'
            requestModels:
              'application/json': 'ResetEmailRequest'
  checkToken:
    handler: handler.checkToken
    environment:
      SQS_QUEUE_URL: 'https://sqs.${self:provider.region}.amazonaws.com/504193536768/hyperbudget-email-service-${self:provider.stage}'
      REGION: '${self:provider.region}'
    events:
      - http:
          path: token/verify
          method: post
          reqValidatorName: 'BodyValidator'
          documentation:
            summary: 'Verify a password reset token'
            requestModels:
              'application/json': 'ValidateTokenRequest'

resources:
  Resources:
    UserEmailDDBTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    BodyValidator:
      Type: 'AWS::ApiGateway::RequestValidator'
      Properties:
        Name: 'body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
