service: panda3test-api

provider:
  name: aws
  runtime: java8
  timeout: 15
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "cognito-idp:*"
        - "s3:*"
      Resource:
        - "*"



  region: us-east-1


package:
  artifact: target/hello-dev.jar

functions:
  # participants lambdas

  readParticipants:
    handler: panda3.lambda.participants.ReadParticipants
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: participants/read
          method: get
          cors: true

  readRecruiters:
    handler: panda3.lambda.participants.ReadRecruiters
    events:
      - http:
          path: recruiters/read
          method: get
          cors: true

  addUser:
    handler: panda3.lambda.participants.AddUser
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: users/add
          method: post
          cors: true

  deleteUser:
    handler: panda3.lambda.participants.DeleteUser
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: users/delete
          method: delete
          cors: true

  # tests lambdas
  createTest:
    handler: panda3.lambda.tests.CreateTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          method: post
          path: tests/create/{id}
          cors: true

  readTests:
    handler: panda3.lambda.tests.ReadTests
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/read
          method: get
          cors: true

  readTest:
    handler: panda3.lambda.tests.ReadTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/{id}
          method: get
          cors: true


  readMyTests:
    handler: panda3.lambda.tests.ReadMyTests
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: /tests/user/{userId}
          method: get
          cors: true

  deleteTest:
    handler: panda3.lambda.tests.DeleteTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/delete/{id}
          method: delete
          cors: true



  updateTest:
    handler: panda3.lambda.tests.UpdateTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: tests/update/{id}
          method: put
          cors: true

  # answers lambdas
  creatAnswer:
    handler: panda3.lambda.answers.CreateAnswer
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/commit/answer
          method: post
          cors: true

  addUserToTest:
    handler: panda3.lambda.answers.CreateTestForUser
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/add/users
          method: post
          cors: true

  addUserTestResult:
    handler: panda3.lambda.answers.CreateAnswerResults
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/check
          method: post
          cors: true

  readTestAnswers:
    handler: panda3.lambda.answers.ReadTestToCheck
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/test/answers/{testId}
          method: get
          cors: true

  readUsersFromTest:
    handler: panda3.lambda.participants.ReadTestUsers
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/test/users/{testId}
          method: get
          cors: true


  readTestResults:
    handler: panda3.lambda.answers.ReadUserResults
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/test/result/{userId}
          method: get
          cors: true

  readAnswers:
    handler: panda3.lambda.answers.ReadAnswers
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/read
          method: get
          cors: true

  readUserAnswers:
    handler: panda3.lambda.answers.ReadUserAnswers
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: answers/read/{testId}/user/{userId}
          method: get
          cors: true

  #csv
  importCsv:
    handler: panda3.lambda.csv.Import
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: csv/import
          method: get
          cors: true

  exportCsv:
    handler: panda3.lambda.csv.Export
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: csv/export/{id}
          method: get
          cors: true


  #recruiter
  getRecruiterTests:
    handler: panda3.lambda.recruiter.ReadRecruiterTest
    Policies: AmazonDynamoDBFullAccess
    events:
      - http:
          path: recruiter/read/{userId}
          method: get
          cors: true



resources:
  Resources:
    answersTabel:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: answer_table
        AttributeDefinitions:
          - AttributeName: testId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: testId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    testsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tests_table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: recruiterId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: recruiterId
            KeyType: RANGE
        ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

    recruiterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: recruiters_table
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
