service: reservation-bot

plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: ruby2.7
  stackName: ${self:service}
  region: ${opt:region, 'ap-southeast-2'}
  iamRoleStatements:
  - Effect: "Allow"
    Action:
    - lambda:InvokeFunction
    Resource: "*"
  - Effect: "Allow"
    Action:
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    - dynamodb:DeleteItem
    - dynamodb:Query
    - dynamodb:Scan
    Resource: arn:aws:dynamodb:${opt:region, 'ap-southeast-2'}:#{AWS::AccountId}:table/${self:resources.Resources.ReservationsTable.Properties.TableName}

functions:
  reservationbot:
    memorySize: 256
    name: ${self:service}
    handler: mention_handler.MentionHandler.incoming_mention
    events:
    - http:
        path: "/action"
        method: post
    environment:
      VERIFICATION_TOKEN: ${ssm:/reservationbot/slack.verification.token~true}
      CONCIERGE_FN: ${self:functions.reservation_concierge.name}

  reservation_lister:
    memorySize: 256
    name: ${self:service}-lister
    handler: list_handler.ListHandler.list_reservations
    events:
    - http:
        path: "/list"
        method: get
    environment:
      DYNAMO_TABLE: ${self:resources.Resources.ReservationsTable.Properties.TableName}

  reservation_concierge:
    memorySize: 256
    name: ${self:service}-concierge
    handler: concierge_handler.ConciergeHandler.handle
    environment:
      BOT_TOKEN: ${ssm:/reservationbot/slack.bot.oauth.token~true}
      DYNAMO_TABLE: ${self:resources.Resources.ReservationsTable.Properties.TableName}

resources:
  Resources:
    ReservationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:service}-reservations"
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
        - AttributeName: "environment"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "environment"
          KeyType: HASH
