service: aws-node-ingest-pipeline

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-offline-scheduler
  - serverless-offline

provider:
  name: aws
  runtime: nodejs4.3
  environment:
    DYNAMODB_TABLE_UPLOADED: ${self:service}-${opt:stage, self:provider.stage}-uploaded
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_UPLOADED}"

functions:
  ftpData:
    handler: src/ingest/lambda/ftpData.ftpData
    environment:
      FTP_HOST: localhost
      FTP_USERNAME: anonymous
      FTP_PASSWORD: anonymous
      S3_BUCKET: talis-test
      S3_KEY_PREFIX: ml
      PROPONOJS_AWS_ACCESS_KEY_ID: ${env:PROPONOJS_AWS_ACCESS_KEY_ID}
      PROPONOJS_AWS_SECRET_KEY: ${env:PROPONOJS_AWS_SECRET_KEY}
      PROPONOJS_QUEUE_REGION: ${env:PROPONOJS_QUEUE_REGION}
    events:
      # Invoke Lambda function every minute
      - schedule: rate(1 minute)
  list:
    handler: uploaded/list.list
    events:
      - http:
          path: uploaded
          method: get
          cors: true

resources:
  Resources:
    UploadedDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_UPLOADED}


