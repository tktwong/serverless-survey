service: budgeteer-ws

provider:
  name: aws
  runtime: nodejs12.x
  profile: budgeteer
  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'local'}
  environment: ${self:custom.env.vars}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
      Resource:
        - Fn::GetAtt:
            - DynamoDbTable
            - Arn
        - Fn::Join:
            - '/'
            - - Fn::GetAtt:
                  - DynamoDbTable
                  - Arn
              - 'index/*'

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

custom:
  env: ${file(./envs/${self:provider.stage}.yml)}
  serverless-offline:
    httpPort: 4000
  dynamodb:
    start:
      dbPath: ${env:PWD}/.db
      migrate: true
      port: 3001
    stages:
      - ${self:provider.stage}

functions:
  graphql:
    handler: src/graphql/graphqlHandler.default
    events:
      - http:
          path: graphql
          method: any
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  validateGroup:
    handler: src/rest/validateGroupHandler.default
    events:
      - http:
          path: api/validate-group/{id}
          method: get

  setMonthEndBalances:
    handler: src/setMonthEndBalances/setMonthEndBalancesHandler.default
    timeout: 45
    events:
      - eventBridge:
          schedule: cron(0 6 1 * ? *)

resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPool
              - Arn

    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-${self:provider.region}-budgeteer
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: groupId
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GS1
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: groupId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-${self:provider.region}-budgeteer
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: groupId

    CognitoUserPoolClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: ${self:provider.stage}-${self:provider.region}-budgeteer
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool

  Outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
