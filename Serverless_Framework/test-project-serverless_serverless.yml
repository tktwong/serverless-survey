service: serverless
app: serverless-app
org: jules
frameworkVersion: '2'
useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    MONGODB_CONNECTION_STRING: ${env:MONGODB_CONNECTION_STRING}

custom:
  cognitoAuth:
    name: Cognito_Auth
    type: COGNITO_USER_POOLS
    arn: !GetAtt CognitoUserPoolTeachingWebUserPool.Arn
  corsConfig:
    origins:
      - http://localhost:8000
      - https://localhost:8000

functions:
  validateSignUp:
    handler: auth/validate.validateSignUp
    events:
      - cognitoUserPool:
          pool: TeachingWebUserPool
          trigger: PreSignUp
  createUser:
    handler: auth/createUser.createUser
    events:
      - cognitoUserPool:
          pool: TeachingWebUserPool
          trigger: PostConfirmation
  getUser:
    handler: users/getUser.getUser
    events:
      - http:
          path: users/{id}
          method: GET
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.cognitoAuth}
  logIn:
    handler: auth/logIn.logIn
    events:
      - cognitoUserPool:
          pool: TeachingWebUserPool
          trigger: PostAuthentication
  protectApi:
    handler: auth/protectApi.protectApi
    environment:
      REGION: ${self:provider.region}
      USERPOOL_ID: !Ref CognitoUserPoolTeachingWebUserPool
  testLambda:
    handler: test/testLambda.testLambda
    events:
      - http:
          path: tests/test
          method: GET
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.cognitoAuth}

resources:
  Resources:
    CognitoUserPoolTeachingWebUserPool: ${file(./cognito.yml):UserPool}
    TeachingWebUserPoolClient: ${file(./cognito.yml):UserPoolClient}
    TeachingWebStudentsUserPoolGroup: ${file(./cognito.yml):StudentsUserPoolGroup}
    TeachingWebTeachersUserPoolGroup: ${file(./cognito.yml):TeachersUserPoolGroup}
