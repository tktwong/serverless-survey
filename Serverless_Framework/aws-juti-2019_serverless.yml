service: (YOUR_SERVICE_NAME)

# Create an optimized package for our functions
package:
  individually: true

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless commands.
  # Or fallsback to what we have set in the proovider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally.
  tableName: (YOUR_TABLE_NAME)
  # Set the client app name here to name the api keys accordingly.
  clientName: (YOUR_CLIENT_NAME)
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}