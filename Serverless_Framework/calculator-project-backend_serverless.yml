# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: calculator-project

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    REGION: ${self:provider.region}
    DYNAMODB_TABLE_REPORTING: ${self:service}-${opt:stage, self:provider.stage}-reporting
    DYNAMODB_TABLE_REPORTING_SEC_INDEX: reporting-by-date
    S3_REPORTING: ${self:service}-${opt:stage, self:provider.stage}-reporting
#  stage: dev
  region: ap-southeast-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.S3_REPORTING}"

functions:
  calculate:
    handler: apis/calculate.main
    events:
      - http:
          path: calculate
          method: post
          cors:
            origin: 'http://localhost:3000, http://calculator-project.s3-website-ap-southeast-1.amazonaws.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getDailyReport:
    handler: apis/report.daily
    events:
      - http:
          path: report/daily
          method: post
          cors:
            origin: 'http://localhost:3000, http://calculator-project.s3-website-ap-southeast-1.amazonaws.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getWeeklyReport:
    handler: apis/report.weekly
    events:
      - http:
          path: report/weekly
          method: post
          cors:
            origin: 'http://localhost:3000, http://calculator-project.s3-website-ap-southeast-1.amazonaws.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getMonthlyReport:
    handler: apis/report.monthly
    events:
      - http:
          path: report/monthly
          method: post
          cors:
            origin: 'http://localhost:3000, http://calculator-project.s3-website-ap-southeast-1.amazonaws.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  # dailyReport:
  #   handler: jobs/dailyReportGeneration.main
    # events:
    #   - schedule: cron(0 2 * * *)


resources:
  Resources:
    ReportingDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: type
            AttributeType: S
          -
            AttributeName: timestamp
            AttributeType: N
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '2'
        TableName: ${self:provider.environment.DYNAMODB_TABLE_REPORTING}
        GlobalSecondaryIndexes:
        - IndexName: ${self:provider.environment.DYNAMODB_TABLE_REPORTING_SEC_INDEX}
          KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '2'
            WriteCapacityUnits: '1'
    S3BucketReports:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_REPORTING}
