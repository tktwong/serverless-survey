# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
# add stages later
service: twitter-flight-bot # NOTE: update this with your service name


plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
  userTableName: twitter-flight-user
  tweetsTableName: twitter-flight-tweets
  tweetsTableName-CreatedDate-Index: TweetCreatedDate
  resourceTagKey: "Project"
  resourceTagValue: "Twitter Flight Deals"
  cleanupDays: 7
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
provider:
  name: aws
  runtime: python3.7
  memorySize: 256
  timeout: 15

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - "Fn::GetAtt": [TwitterUserTable, Arn]
        - "Fn::GetAtt": [TwitterTweetsTable, Arn]
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - { "Fn::Join": [ "/", [
          { "Fn::GetAtt": ["TwitterTweetsTable", "Arn" ] }, "index", "${self:custom.tweetsTableName-CreatedDate-Index}"
        ]]}
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - Ref: NewDealTopic


#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    userTableName: ${self:custom.userTableName}
    tweetsTableName: ${self:custom.tweetsTableName}
    tweetsTableCreatedDateIndex: ${self:custom.tweetsTableName-CreatedDate-Index}
    TWITTER_ACCESS_TOKEN: ${ssm:dcTwitterAccessToken}
    TWITTER_ACCESS_TOKEN_SECRET: ${ssm:dcTwitterAccessTokenSecret}
    TWITTER_CONSUMER_KEY: ${ssm:dcTwitterConsumerKey}
    TWITTER_CONSUMER_SECRET: ${ssm:dcTwitterConsumerSecret}
    TWITTER_NOTIFICATION_SNS_ARN:
      Ref: NewDealTopic


# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  scrape-flight-deals:
    handler: TravelBot.process_tweets
    description: Scrape flight deals from twitter users list
    events:
      - schedule: rate(3 hours)
  cleanup-old-flight-deals:
    handler: TravelBot.process_tweet_cleanup
    description: Remove old flight deals
    events:
      - schedule:
          rate: rate(${self:custom.cleanupDays} days)
          input:
            days: ${self:custom.cleanupDays}
  get-list-members:
    handler: TravelAPI.get_twitter_list_members
    description: Get the list of twitter users followed
    events:
      - http:
          path: flight-deals/list-members
          method: get
          cors: true # lock down later
  get-airports:
    handler: TravelAPI.get_airports
    description: Get list of airports tracked
    events:
      - http:
          path: flight-deals/airports
          method: get
          cors: true
  get-tweets:
    handler: TravelAPI.get_airport_tweets
    description: Get travel deal tweets
    events:
      - http:
          path: flight-deals/tweets
          method: post
          cors: true
# https://serverless.com/framework/docs/providers/aws/events/apigateway/#enabling-cors


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  - ${file(resources/new-deal-sns-topic.yml)}
  - ${file(resources/flight-tweets-table.yml)}
  - ${file(resources/flight-user-table.yml)}