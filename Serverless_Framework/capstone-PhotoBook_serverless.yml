service:
  name: serverless-album-1
# app and org for use with dashalbum.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk

  documentation:
    api:
      info:
        version: v1.0.0
        title: Album API
        description: serverless api for album creation application
    models:
      - name: CreateAlbum
        contentType: application/json
        schema: ${file(src/model/json-schema/create_album_json_request.json)}
      - name: UploadImage
        contentType: application/json
        schema: ${file(src/model/json-schema/create_image_json_request.json)}
      - name: SaveAlbums
        contentType: application/json
        schema: ${file(src/model/json-schema/create_album_json_request.json)}
      - name: UpdateAlbumsImage
        contentType: application/json
        schema: ${file(src/model/json-schema/update_album_json_request.json)}


# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function

provider:
  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    ALBUMS_TABLE: albums-1-${self:provider.stage}
    IMAGES_TABLE: album-images-1-v2-${self:provider.stage}
    IMAGES_S3_BUCKET: serverless-1-album-images-${self:provider.stage}
    IMAGE_ID_INDEX: ImageIdIndex

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateAlbum:
    handler: src/lambda/http/createAlbum.handler
    events:
      - http:
          method: post
          path: albums
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: create new Album
            description: create new Alnum
            requestModels:
              "application/json": CreateAlbum

    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}

  GetAlbums:
    handler: src/lambda/http/getAllAlbum.handler
    events:
      - http:
          method: get
          path: albums
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}

  SaveAlbums:
    handler: src/lambda/http/saveAlbum.handler
    events:
      - http:
          method: post
          path: albums/{albumId}/save
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          # documentation:
          #   summary: update Album
          #   description: update Album
          #   requestModels:
          #     "application/json": SaveAlbums
    iamRoleStatements:
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}

  UpdateAlbumsImage:
    handler: src/lambda/http/updateAlbumImage.handler
    events:
      - http:
          method: post
          path: albums/{albumId}/counter
          cors: true
          authorizer: Auth
          documentation:
            summary: create new Album
            description: create new Alnum
            requestModels:
              "application/json": UpdateAlbumsImage
      # - http:
      #     method: get
      #     path: albums/{albumId}
      #     cors: true
      #     authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}

  UploadImage:
    handler: src/lambda/http/uploadImage.handler
    events:
      - http:
          method: post
          path: albums/{albumId}/images
          cors: true
          authorizer: Auth
          documentation:
            summary: create new Album
            description: create new Alnum
            requestModels:
              "application/json": UploadImage
      - http:
          method: get
          path: albums/{albumId}
          cors: true
          authorizer: Auth

    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

  GetImages:
    handler: src/lambda/http/getImages.handler
    events:
      - http:
          method: get
          path: albums/{albumId}/images
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}

  GetPins:
    handler: src/lambda/http/getFavs.handler
    events:
      - http:
          method: get
          path: /favs
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}

  # GetAllImages:
  #   handler: src/lambda/http/getAllImages.handler
  #   events:
  #     - http:
  #         method: get
  #         path: /images
  #         cors: true
  #         authorizer: Auth
  #   iamRoleStatements:
  #     - Effect: "Allow"
  #       Action:
  #         - "xray:PutTraceSegments"
  #         - "xray:PutTelemetryRecords"
  #       Resource:
  #         - "*"
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:query
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}

  GetAlbum:
    handler: src/lambda/http/getAlbum.handler
    events:
      - http:
          method: get
          path: albums/{albumId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}

  DeleteImage:
    handler: src/lambda/http/deleteImage.handler
    events:
      - http:
          method: delete
          path: images/{imageId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}

  DeleteAlbum:
    handler: src/lambda/http/deleteAlbum.handler
    events:
      - http:
          method: delete
          path: albums/{albumId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ALBUMS_TABLE}

  PinImage:
    handler: src/lambda/http/pinImage.handler
    events:
      - http:
          method: post
          path: images/{imageId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}

resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: "request-body-validator"
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ValidateRequestBody: true
        ValidateRequestParameters: false
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AlbumsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ALBUMS_TABLE}

    ImagesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: albumId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
        KeySchema:
          - AttributeName: albumId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

        TableName: ${self:provider.environment.IMAGES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
            KeySchema:
              - AttributeName: imageId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket
