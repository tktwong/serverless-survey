service:
  name: ${env:SLS_CONFIG_SERVICE_NAME}

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-pseudo-parameters
  - serverless-finch
  - serverless-stack-output

provider:
  name: aws
  profile: ${opt:profile, env:SLS_CONFIG_PROFILE}
  runtime: ${env:SLS_CONFIG_RUNTIME}
  memorySize: ${env:SLS_CONFIG_MEMORY_SIZE}
  timeout: ${env:SLS_CONFIG_TIMEOUT_IN_SECONDS}
  stage: ${opt:stage, env:SLS_CONFIG_STAGE}
  region: ${opt:region, env:SLS_CONFIG_REGION}

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  accountId: #{AWS::AccountId}
  output:
    file: ./outputs/stack.json
  clientStage: ${opt:stage, 'clientQa'}
  settings: ${file(resources/enviroments.conf.yml)}
  client:
    bucketName: ${self:custom.settings.${self:custom.clientStage}.BUCKETNAME}
    distributionFolder: ${self:custom.settings.${self:custom.clientStage}.DISTRIBUTIONFOLDER}
    errorDocument: ${self:custom.settings.${self:custom.clientStage}.ERRORDOCUMENT}

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          method: get
          cors: true
          authorizer: aws_iam
          path: hello
  graphql:
    handler: handler.graphql

resources:
  - ${file(resources/cognito.identity.service.yml)}
  - ${file(resources/cognito.pool.service.yml)}
  - ${file(resources/cognito.rol.yml)}
  - ${file(resources/outputs.yml)}
