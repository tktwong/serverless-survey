service: ops-lambdas

frameworkVersion: "=1.24"

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  stage: dev
  region: us-east-1
  #profile: your-aws-credentials-profile
  #deploymentBucket: your-custom-bucket-${self:provider.region}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - lambda:InvokeFunction
        - ecs:*
        - codepipeline:*
        - elasticloadbalancing:*
        - autoscaling:*
        - sns:*
      Resource: '*'

custom:
  alerts:
    definitions:
      errors:
        description: 'errors'
        metric: errors
        threshold: 0
        statistic: Minimum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'error'
      functionDuration:
        threshold: 60000
    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations
      - functionDuration
      # metric log filters
      - errors
    # SNS notifications
    # topics:
    #   alarm:
    #     topic: ${self:service}-${opt:stage, self:provider.stage}-alerts-alarm
    #     notifications:
    #       - protocol: email
    #         endpoint: your-email@address.com

functions:
  EcsDeployer:
    handler: src/deployer.handler

  EcsLifecycle:
    handler: src/lifecycle.handler
    timeout: 60
    events:
      - sns: EcsLifecycleHookTopic

resources:
  Description: Lambdas for opsy things.
  Resources:
    EcsDeployerLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 14
        
    EcsLifecycleLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 14

  Outputs:
    EcsDeployerLambdaFunctionName:
      Description: Name of the ECS deployer function.
      Value:
        Ref: EcsDeployerLambdaFunction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}:EcsDeployerLambdaFunctionName

    EcsLifecycleLambdaFunctionName:
      Description: Name of the ECS lifecycle function.
      Value:
        Ref: EcsLifecycleLambdaFunction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}:EcsLifecycleLambdaFunctionName

    EcsLifecycleHookTopicName:
      Description: Name of the ECS lifecycle hook topic.
      Value:
        Fn::GetAtt: SNSTopicEcsLifecycleHookTopic.TopicName
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}:EcsLifecycleHookTopicName

    EcsLifecycleHookTopicArn:
      Description: Arn of the ECS lifecycle hook topic.
      Value:
        Ref: SNSTopicEcsLifecycleHookTopic
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}:EcsLifecycleHookTopicArn


plugins:
  - serverless-webpack
  - serverless-plugin-aws-alerts
  - serverless-mocha-plugin
