service: fm-ach-service

plugins:
  - serverless-domain-manager

provider:
  name: aws
  stage: ${opt:stage,'dev'}
  runtime: java8
  versionFunctions: false
  logs:
    restApi: true

package:
  artifact: target/ach.service-0.0.1-lambda-package.zip

custom:
  customDomain: ${self:custom.domains.${opt:stage,'dev'}}
  domains:
    dev:
      # TODO: replace with your custom domain name
      domainName: '<DEV_DOMAIN_NAME>'
      # TODO: replace with your ACM certificate name
      certificateName: '<DEV_CERTIFICATE_NAME>'
      basePath: 'ach'
      stage: dev
      createRoute53Record: true
    prod:
      # TODO: replace with your custom domain name
      domainName: '<PROD_DOMAIN_NAME>'
      # TODO: replace with your ACM certificate name
      certificateName: '<PROD_CERTIFICATE_NAME>'
      basePath: 'ach'
      stage: prod
      createRoute53Record: true
  privateKeyPassword:
    # TODO: replace with your develop private key password
    dev: <DEV_PRIVATE_KEY_PASSWORD>
    # TODO: replace with your production private key password
    prod: <PROD_PRIVATE_KEY_PASSWORD>
  tinyproxyHost:
    # TODO: replace with your tinyproxy develop url. eg: http://8.8.8.8:8888
    dev: <DEV_TINYPROXY_PUBLIC_IP_AND_PORT>
    # TODO: replace with your tinyproxy production url. eg: http://8.8.8.8:8888
    prod: <DEV_TINYPROXY_PUBLIC_IP_AND_PORT>
  subnetIds:
    dev:
      # TODO: replace with your develop subnet id
      - <DEV_PRIVATE_SUBNET>
    prod:
      # TODO: replace with your production subnet id
      - <PROD_PRIVATE_SUBNET>
  securityGroupIds:
    dev:
      # TODO: replace with your develop security group id
      - <SECURITY_GROUP_ID>
    prod:
      # TODO: replace with your production security group id
      - <SECURITY_GROUP_ID>

functions:
  achServices:
    timeout: 28
    handler: com.financialomejor.ach.ACHLambdaHandler
    memorySize: 2048
    environment:
      TINYPROXY_HOST: ${self:custom.tinyproxyHost.${opt:stage,'dev'}}
      # TODO: replace with your enterprise NIT
      NIT: <YOUR_ENTERPRISE_NIT>
      PRIVATE_KEY_PSSWD: ${self:custom.privateKeyPassword.${opt:stage,'dev'}}
    vpc:
      subnetIds: ${self:custom.subnetIds.${opt:stage,'dev'}}
      securityGroupIds: ${self:custom.securityGroupIds.${opt:stage,'dev'}}
    events:
      - http:
          integration: lambda-proxy
          path: '{proxy+}'
          method: ANY
          cors: true
