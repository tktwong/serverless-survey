

service: find-a-gamer

# app and org for use with dashboard.serverless.com
app: find-a-gamer


plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation


package:
  individually: true


provider:

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    EVENTS_TABLE: Events-${self:provider.stage}
    EVENTS_GAME_ID_INDEX: Events_GameIdIndex
    EVENTS_OWNER_ID_INDEX: Events_OwnerIdIndex
    GAMES_TABLE: Games-${self:provider.stage}
    EVENTS_IMAGES_S3_BUCKET: events-images-s3-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300


custom:
  documentation:
    api:
      info:
        version: v0.0.1
        title: Serverless find-a-gamer API
        description: find-a-gamer Serverless app
    models:
      - name: CreateEventRequest
        contentType: application/json
        schema: ${file(src/requests/create-event-request.json)}
      - name: CreateEventCommentRequest
        contentType: application/json
        schema: ${file(src/requests/create-event-comment-request.json)}
      - name: UpdateEventRequest
        contentType: application/json
        schema: ${file(src/requests/update-event-request.json)}


functions:
  
  Auth:
    handler: src/lambda/auth/auth0rizer.handler

  CreateEvent:
    handler: src/lambda/http/createEvent.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: events
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Event
            description: Create a new Event
            requestModels:
              'application/json': CreateEventRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamoDB:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
  
  GetEvents:
    handler: src/lambda/http/getEvents.handler
    events:
      - http:
          method: get
          path: events
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}/index/${self:provider.environment.EVENTS_GAME_ID_INDEX}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
 
  GetOwnerEvents:
    handler: src/lambda/http/getOwnerEvents.handler
    events:
      - http:
          method: get
          path: users/{ownerId}/events
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}/index/${self:provider.environment.EVENTS_OWNER_ID_INDEX}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

  CreateEventComment:
    handler: src/lambda/http/createEventComment.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: events/{eventId}/comments
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new Comment to existing Event
            description: Create a new Comment to existing Event
            requestModels:
              'application/json': CreateEventCommentRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamoDB:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
  
  GetEvent:
    handler: src/lambda/http/getEvent.handler
    events:
      - http:
          method: get
          path: events/{eventId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

  UpdateEvent:
    handler: src/lambda/http/updateEvent.handler
    events:
      - http:
          method: patch
          authorizer: Auth
          path: events/{eventId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update existing Event
            description: update existing Event
            requestModels:
              'application/json': UpdateEventRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamoDB:UpdateItem
          - dynamoDB:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
    
  DeleteEvent:
    handler: src/lambda/http/deleteEvent.handler
    events:
      - http:
          method: delete
          authorizer: Auth
          path: events/{eventId}
          cors: true
          documentation:
            summary: remove existing Event
            description: remove existing Event
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamoDB:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

  GetGames:
    handler: src/lambda/http/getGames.handler
    events:
      - http:
          method: get
          path: games
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAMES_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
  
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          authorizer: Auth
          path: events/{eventId}/image
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamoDB:Query
          - dynamoDB:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENTS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.EVENTS_IMAGES_S3_BUCKET}/*
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"


resources:
 Resources:

  RequestBodyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: 'request-body-validator'
      RestApiId:
        Ref: ApiGatewayRestApi
      ValidateRequestBody: true
      ValidateRequestParameters: false

  EventsDynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: eventId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: gameId
          AttributeType: S
        - AttributeName: ownerId
          AttributeType: S
      KeySchema:
        - AttributeName: eventId
          KeyType: HASH
        - AttributeName: ownerId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName: ${self:provider.environment.EVENTS_TABLE}
      GlobalSecondaryIndexes:
        - IndexName: ${self:provider.environment.EVENTS_GAME_ID_INDEX}
          KeySchema:
          - AttributeName: gameId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ${self:provider.environment.EVENTS_OWNER_ID_INDEX}
          KeySchema:
          - AttributeName: ownerId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

  GamesDynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: gameId
          AttributeType: S
      KeySchema:
        - AttributeName: gameId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: ${self:provider.environment.GAMES_TABLE}

  AttachmentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:provider.environment.EVENTS_IMAGES_S3_BUCKET}
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000
    
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: 'arn:aws:s3:::${self:provider.environment.EVENTS_IMAGES_S3_BUCKET}/*'
      Bucket: !Ref AttachmentsBucket
