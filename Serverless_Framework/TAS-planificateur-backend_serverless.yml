service: proj-integrateur
provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  region: ${opt:stage, 'eu-west-3'}
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-python-requirements
package:
  exclude:
    - .dynamodb/**
    - seed-data/**
custom:
  pythonRequirements:
    dockerizePip: true
  dynamoTable: ProjIntegrateur
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: ${self:custom.dynamoTable}
            sources: [seed-data/proj-integrateur.json, seed-data/Solution_PPC_15_sec.json]
functions:
  getProject:
    handler: endpoints/getProject.handler
    role: ServiceRole
    events:
      - http:
          path: project/parameters
          method: get
          cors: true
  editProject:
    handler: endpoints/editProject.handler
    role: ServiceRole
    events:
      - http:
          path: project/parameters/{meca1}/{qual1}/{meca2}/{qual2}/{duration}
          method: post
          cors: true
  getSolution:
    handler: endpoints/getSolution.handler
    role: ServiceRole
    events:
      - http:
          path: project/solution
          method: get
          cors: true
  addSolution:
    handler: endpoints/addSolution.handler
    role: ServiceRole
    events:
      - http:
          path: project/solution
          method: put
          cors: true
  getConstraints:
    handler: endpoints/getConstraints.handler
    role: ServiceRole
    events:
      - http:
          path: project/constraints
          method: get
          cors: true
  createConstraint:
    handler: endpoints/createConstraint.handler
    role: ServiceRole
    events:
      - http:
          path: project/constraints
          method: put
          cors: true
  editConstraint:
    handler: endpoints/editConstraint.handler
    role: ServiceRole
    events:
      - http:
          path: project/constraints/{code}
          method: post
          cors: true
  deleteConstraint:
    handler: endpoints/deleteConstraint.handler
    role: ServiceRole
    events:
      - http:
          path: project/constraints/{code}
          method: delete
          cors: true
  restartSolver:
    handler: endpoints/restartSolver.handler
    role: ServiceRole
    events:
      - http:
          path: solver/restart
          method: get
          cors: true
resources:
  Resources:
    IntegTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTable}
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: IntegRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: IntegPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                    - dynamodb:Query
                  Resource:
                    - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoTable}
                    - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoTable}/*
                - Effect: Allow
                  Action:
                    - ec2:StartInstances
                    - ec2:RebootInstances
                  Resource:
                    - arn:aws:ec2:${self:provider.region}:*:instance/*
                - Effect: Allow
                  Action:
                    - ec2:DescribeInstances
                  Resource:
                    - "*"
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:PutLogEvents
                  Resource:
                    - arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/proj-integrateur-${self:provider.stage}*:*
                    - arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/proj-integrateur-${self:provider.stage}*:*:*
          