service:
  name: zoomfit-app

# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
package:
  individually: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: zoomfit API
        description: Serverless application for train-together
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  # - serverless-offline
  # - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    USER_TABLE: zoomfit-user-${self:provider.stage}
    USER_TABLE_INDEX: zoomfit-userindex-${self:provider.stage}
    SESSION_TABLE: zoomfit-session-${self:provider.stage}
    SESSION_TABLE_INDEX: zoomfit-sessionindex-${self:provider.stage}
    # FILES_S3_BUCKET: tt-dev-${self:provider.stage}

## Functions goes here
functions:
  Auth:
    handler: src/lambda/auth/authUid.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  CreateUser:
    handler: src/lambda/http/CreateUser.handler
    events:
      - http:
          method: post
          path: zoomfit/v1/user/
          cors: true
          # authorizer: Auth
          documentation:
            summary: Create User dynamoDB
            description: Create User dynamoDB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  RegisterToSession:
    handler: src/lambda/http/RegisterToSession.handler
    events:
      - http:
          method: post
          path: zoomfit/v1/user/register/
          cors: true
          authorizer: Auth
          documentation:
            summary: register to session
            description: register to session
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamoDB:GetItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSION_TABLE}

  UnregisterToSession:
    handler: src/lambda/http/UnregisterToSession.handler
    events:
      - http:
          method: post
          path: zoomfit/v1/user/unregister/
          cors: true
          authorizer: Auth
          documentation:
            summary: unregister to session
            description: unregister to session
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamoDB:GetItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSION_TABLE}

  GetUser:
    handler: src/lambda/http/GetUser.handler
    events:
      - http:
          method: get
          path: zoomfit/v1/user/
          cors: true
          authorizer: Auth
          documentation:
            summary: Get User dynamoDB
            description: Get User dynamoDB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  Login:
    handler: src/lambda/http/login.handler
    events:
      - http:
          method: get
          path: zoomfit/v1/user/login/
          cors: true
          documentation:
            summary: Get User dynamoDB
            description: Get User dynamoDB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}/index/${self:provider.environment.USER_TABLE_INDEX}

  GetUserSessions:
    handler: src/lambda/http/GetUserSessions.handler
    events:
      - http:
          method: get
          path: zoomfit/v1/user/sessions/
          cors: true
          authorizer: Auth
          documentation:
            summary: Get User sessions dynamoDB
            description: Get User sessions dynamoDB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
          - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSION_TABLE}

  InsertUser:
    handler: src/lambda/http/InsertUser.handler
    events:
      - http:
          method: post
          path: zoomfit/v1/user/insert/
          cors: true
          documentation:
            summary: Create User dynamoDB
            description: Create User dynamoDB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  CreateSession:
    handler: src/lambda/http/CreateSession.handler
    events:
      - http:
          method: post
          path: zoomfit/v1/session/
          cors: true
          authorizer: Auth
          documentation:
            summary: Create session dynamoDB
            description: Create session dynamoDB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSION_TABLE}

  InsertSession:
    handler: src/lambda/http/InsertSession.handler
    events:
      - http:
          method: post
          path: zoomfit/v1/session/insert/
          cors: true
          documentation:
            summary: Create User dynamoDB
            description: Create User dynamoDB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSION_TABLE}

  GetSession:
    handler: src/lambda/http/GetSession.handler
    events:
      - http:
          method: get
          path: zoomfit/v1/session/
          cors: true
          # authorizer: Auth
          documentation:
            summary: Get session dynamoDB
            description: Get session dynamoDB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSION_TABLE}

  GetAllSessions:
    handler: src/lambda/http/GetAllSessions.handler
    events:
      - http:
          method: get
          path: zoomfit/v1/session/all/
          cors: true
          # authorizer: Auth
          documentation:
            summary: Get all session dynamoDB
            description: Get all session dynamoDB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SESSION_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    UserDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_TABLE_INDEX}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    SessionDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
          - AttributeName: eventDate
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SESSION_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.SESSION_TABLE_INDEX}
            KeySchema:
              - AttributeName: sessionId
                KeyType: HASH
              - AttributeName: eventDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
#### Unused Code
# AddUserFollowing:
#   handler: src/lambda/http/AddUserFollowing.handler
#   events:
#     - http:
#         method: post
#         path: zoomfit/v1/user/addFollowing
#         cors: true
#         documentation:
#           summary: Add User dynamoDB
#           description: Add User dynamoDB
#   iamRoleStatements:
#     - Effect: Allow
#       Action:
#         - dynamodb:GetItem
#         - dynamodb:UpdateItem
#       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
# TestUserDB:
#   handler: src/lambda/http/TestUserdDB.handler
#   events:
#     - http:
#         method: post
#         path: zoomfit/v1/user/test
#         cors: true
#         documentation:
#           summary: Test User dynamoDB
#           description: Test User dynamoDB
#   iamRoleStatements:
#     - Effect: Allow
#       Action:
#         - dynamodb:PutItem
#         - dynamodb:GetItem
#         - dynamodb:UpdateItem
#         - dynamodb:DeleteItem
#       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
# AttachmentsBucket:
#   Type: AWS::S3::Bucket
#   Properties:
#     BucketName: ${self:provider.environment.FILES_S3_BUCKET}
#     CorsConfiguration:
#       CorsRules:
#         - AllowedOrigins:
#             - "*"
#           AllowedHeaders:
#             - "*"
#           AllowedMethods:
#             - GET
#             - PUT
#             - POST
#             - DELETE
#             - HEAD
#           MaxAge: 3000
# BucketPolicy:
#   Type: AWS::S3::BucketPolicy
#   Properties:
#     PolicyDocument:
#       Id: MyPolicy
#       Version: "2012-10-17"
#       Statement:
#         - Sid: PublicReadForGetBucketObjects
#           Effect: Allow
#           Principal: "*"
#           Action: "s3:GetObject"
#           Resource: "arn:aws:s3:::${self:provider.environment.FILES_S3_BUCKET}/*"
#     Bucket: !Ref AttachmentsBucket
