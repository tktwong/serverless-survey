# NOTE: update this with your service name
service: lambdas

# custom:
#   bundle:
#     ignorePackages:
#       - pg-native

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    # POSTGRES_USER: postgres
    # POSTGRES_PASSWORD: postgres
    # POSTGRES_DB: restaurants
    # POSTGRES_HOST: localhost
    # POSTGRES_PORT: 5432
    restaurantTable: restaurants

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:us-east-2:*:*'

functions:
  getRestaurant:
    handler: handlers/restaurant/getRestaurant.get
    events:
      - http:
          path: /restaurants/{id}
          method: get
          cors: true
  fetchRestaurants:
    handler: handlers/restaurant/fetchRestaurants.fetch
    events:
      - http:
          path: /restaurants
          method: get
          cors: true
  addRestaurant:
    handler: handlers/restaurant/addRestaurant.add
    events:
      - http:
          path: /restaurants
          method: post
          cors: true
  addReview:
    handler: handlers/reviews/addReview.add
    events:
      - http:
          path: /reviews/{id}
          method: post
          cors: true
  deleteReview:
    handler: handlers/reviews/deleteReview.remove
    events:
      - http:
          path: /restaurants/{id}/reviews/{reviewId}
          method: delete
          cors: true
