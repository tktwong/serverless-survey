service: training-app-api


# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableTraining: ${self:custom.stage}-training
  tableSeason: ${self:custom.stage}-season

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1


  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableTraining: ${self:custom.tableTraining}
    tableSeason: ${self:custom.tableSeason}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ TrainingTable, Arn ]
        - "Fn::GetAtt": [ SeasonTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in create-training.js
  # - path: url path is /trainings
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role

  ######## TRAINING ########
  createTraining:
    handler: training/create-training.main
    events:
      - http:
          path: trainings
          method: post
          cors: true
          authorizer: aws_iam

  getTraining:
    # Defines an HTTP API endpoint that calls the main function in get-training.js
    # - path: url path is /trainings/{id}
    # - method: GET request
    handler: training/get-training.main
    events:
      - http:
          path: trainings/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listTraining:
    # Defines an HTTP API endpoint that calls the main function in list-training.js
    # - path: url path is /trainings
    # - method: GET request
    handler: training/list-training.main
    events:
      - http:
          path: trainings
          method: get
          cors: true
          authorizer: aws_iam

  updateTraining:
    # Defines an HTTP API endpoint that calls the main function in update-training.js
    # - path: url path is /trainings/{id}
    # - method: PUT request
    handler: training/update-training.main
    events:
      - http:
          path: trainings/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteTraining:
    # Defines an HTTP API endpoint that calls the main function in delete-training.js
    # - path: url path is /trainings/{id}
    # - method: DELETE request
    handler: training/delete-training.main
    events:
      - http:
          path: trainings/{id}
          method: delete
          cors: true
          authorizer: aws_iam


  ######## SEASON ########
  createSeason:
    handler: season/create-season.main
    events:
      - http:
          path: trainings
          method: post
          cors: true
          authorizer: aws_iam

  getSeason:
    # Defines an HTTP API endpoint that calls the main function in get-season.js
    # - path: url path is /trainings/{id}
    # - method: GET request
    handler: season/get-season.main
    events:
      - http:
          path: trainings/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listSeason:
    # Defines an HTTP API endpoint that calls the main function in list-season.js
    # - path: url path is /trainings
    # - method: GET request
    handler: season/list-season.main
    events:
      - http:
          path: trainings
          method: get
          cors: true
          authorizer: aws_iam

  updateSeason:
    # Defines an HTTP API endpoint that calls the main function in update-season.js
    # - path: url path is /trainings/{id}
    # - method: PUT request
    handler: season/update-season.main
    events:
      - http:
          path: trainings/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteSeason:
    # Defines an HTTP API endpoint that calls the main function in delete-season.js
    # - path: url path is /season/{id}
    # - method: DELETE request
    handler: season/delete-season.main
    events:
      - http:
          path: trainings/{id}
          method: delete
          cors: true
          authorizer: aws_iam


  ######## Exercices ########
  createExercice:
    handler: exercice/create-exercice.main
    events:
      - http:
          path: trainings
          method: post
          cors: true
          authorizer: aws_iam

  getExercice:
    # Defines an HTTP API endpoint that calls the main function in get-exercice.js
    # - path: url path is /exercice/{id}
    # - method: GET request
    handler: exercice/get-exercice.main
    events:
      - http:
          path: trainings/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listExercice:
    # Defines an HTTP API endpoint that calls the main function in list-exercice.js
    # - path: url path is /trainings
    # - method: GET request
    handler: exercice/list-exercice.main
    events:
      - http:
          path: trainings
          method: get
          cors: true
          authorizer: aws_iam

  updateExercice:
    # Defines an HTTP API endpoint that calls the main function in update-exercice.js
    # - path: url path is /exercice/{id}
    # - method: PUT request
    handler: exercice/update-exercice.main
    events:
      - http:
          path: trainings/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteExercice:
    # Defines an HTTP API endpoint that calls the main function in delete-exercice.js
    # - path: url path is /trainings/{id}
    # - method: DELETE request
    handler: exercice/delete-exercice.main
    events:
      - http:
          path: trainings/{id}
          method: delete
          cors: true
          authorizer: aws_iam


# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
