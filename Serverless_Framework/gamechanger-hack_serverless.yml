service:
  name: gcc-te

# use `sls offline start` to launch with dynamodb-local
# You can reduce the clutter generated by serverless-offline with --dontPrintOutput and disable timeouts with --noTimeout.
# serverless webpack --out dist  # To just bundle and see the output result

# https://github.com/serverless-heaven/serverless-webpack

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  # - serverless-step-functions-offline
  - serverless-offline #serverless-offline needs to be last in the list

provider:
  name: aws
  runtime: nodejs8.10
  profile: serverless-admin # https://www.jamestharpe.com/serverless-typescript-getting-started/
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    PARTITION_KEY: 'partition'
    SORT_KEY: 'sort'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.DYNAMODB_TABLE}
            sources: [./offlineSeedData.json]
  serverless-offline:
    httpsProtocol: 'ssl'
    port: 4000

# HOW TO CRON
# https://github.com/serverless/examples/tree/master/aws-node-scheduled-cron

functions:
  cycleColor:
    handler: src/handlers/cycleColor.handler
    events:
      - http:
          method: post
          path: cycleColor
          cors: true

  transactionComplete:
    handler: src/handlers/bitsTransaction.handler
    events:
      - http:
          method: post
          path: transactionComplete
          cors: true

  amazonPayIpnHandler:
    handler: src/handlers/amazonPayIpn.handler
    events:
      - http:
          method: post
          path: amazonPayIpnHandler
          cors: true

  amazonPaySignature:
    handler: src/handlers/amazonPaySignature.handler
    events:
      - http:
          method: get
          path: amazonPaySignature
          cors: true

resources:
  Resources:
    TransactionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.PARTITION_KEY}
            AttributeType: S
          - AttributeName: ${self:provider.environment.SORT_KEY}
            AttributeType: N
        KeySchema:
          - AttributeName: ${self:provider.environment.PARTITION_KEY}
            KeyType: HASH
          - AttributeName: ${self:provider.environment.SORT_KEY}
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
