service: UpworkHackathon
Description: Cognito Auth Demo

custom:
  stage: ${opt:stage, self:provider.stage}
  # Cognito settings
  cognitoPoolName: ${self:custom.stage}-UpworkHackathon-user-pool
  videoTableName: ${self:custom.stage}-VideoTable
  followTableName: ${self:custom.stage}-FollowTable
  s3bucketName: ${self:custom.stage}-videobucket
  pythonRequirements:
    dockerizePip: true


provider:
  name: aws
  runtime: python2.7
  stage: dev
  # profile: muralia # Replace with your name profile or remove to use the default profile.
  region: us-east-1 # N.Virginia. Replace with your a region you prefer.
  logRetentionInDays: 14
  environment:
      USERPOOL_ID:
        Ref: CognitoUserPool
      CLIENT_ID:
        Ref: CognitoUserPoolClient
      REGION:
        ${self:provider.region}
      VIDEOTABLE:
        ${self:custom.videoTableName} 
      FOLLOWTABLE:
        ${self:custom.followTableName} 
      S3BUCKET:
        ${self:custom.s3bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - "Fn::GetAtt": [ FollowTable, Arn ]
        - "Fn::GetAtt": [ VideoTable, Arn ]
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource: 
          "Fn::GetAtt": [ CognitoUserPool, Arn ]
    - Effect: Allow
      Action:
        - s3:*
      Resource: 
          "Fn::GetAtt": [ VideoBucket, Arn ]

plugins:
  - serverless-python-requirements


functions:
  Follow_User:
    name: ${self:custom.stage}-Follow_User
    description: Given a username/email/phone, follow the user.
    handler: src/user_apis.Follow_User
    memorySize: 128
    timeout: 10
    reservedConcurrency: 20
    events:
    - http:
        path: follow
        method: post
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
  Get_Followed_Users_List:
    name: ${self:custom.stage}-Get_Followed_Users_List
    description: Given a username, get all usernames followed.
    handler: src/user_apis.Get_Followed_Users_List
    memorySize: 128
    timeout: 10
    reservedConcurrency: 20
    events:
    - http:
        path: get_followers
        method: get
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
  Unfollow_User:
    name: ${self:custom.stage}-Unfollow_User
    description: Given a username, unfollow them.
    handler: src/user_apis.Unfollow_User
    memorySize: 128
    timeout: 10
    reservedConcurrency: 20
    events:
    - http:
        path: unfollow
        method: post
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
  Upload_Video:
    name: ${self:custom.stage}-Upload_Video
    description: Upload a file to s3.
    handler: src/video_apis.Upload_Video
    memorySize: 128
    timeout: 10
    reservedConcurrency: 20
    events:
    - http:
        path: upload
        method: post
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
  Delete_Video:
    name: ${self:custom.stage}-Delete_Video
    description: Delete a file from s3.
    handler: src/video_apis.Delete_Video
    memorySize: 128
    timeout: 10
    reservedConcurrency: 20
    events:
    - http:
        path: delete
        method: post
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
  Get_Followed_User_Videos_List:
    name: ${self:custom.stage}-Get_Followed_User_Videos_List
    description: Get all videos of users followed by current user.
    handler: src/video_apis.Get_Followed_User_Videos_List
    memorySize: 128
    timeout: 10
    reservedConcurrency: 20
    events:
    - http:
        path: followed_videos
        method: get
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer




package:
  exclude:
    - node_modules/**
    - set_env_vars.sh
    - env_var.yml
    - package.json
    - package-lock.json


resources:
  # DynamoDB
  - ${file(resources/dyndb.yml)}
  # CognitoUserPool
  - ${file(resources/cognito_user_pool.yml)}
  # S3
  - ${file(resources/s3.yml)}