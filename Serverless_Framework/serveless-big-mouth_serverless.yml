service: aws-workshop-icanuti

plugins:
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

custom:
  stage: ${opt:stage, self:provider.stage}
  logLevel:
    prod: INFO
    default: DEBUG

  serverless-iam-roles-per-function:
    defaultInherit: true

provider:
  name: aws
  runtime: nodejs10.x

  environment:
    LOG_LEVEL: ${self:custom.logLevel.${self:custom.stage}, self:custom.logLevel.default}
  tracing:
    apiGateway: true
    lambda: true

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    - Effect: Allow
      Action: dynamodb:scan
      Resource:
        Fn::GetAtt:
          - restaurantsTable
          - Arn
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
    - Effect: Allow
      Action: kinesis:PutRecord
      Resource: 
        Fn::GetAtt:
          - orderEventsStream
          - Arn
    - Effect: Allow
      Action: sns:Publish
      Resource: 
        - Ref: restaurantNotificationTopic
        - Ref: restaurantNotificationRetryTopic
        - Ref: restaurantNotificationDLQTopic

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${opt:region}.amazonaws.com/${opt:stage}/restaurants"
      orders_api:
        Fn::Join:
          - ''
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${opt:region}.amazonaws.com/${opt:stage}/orders"
      cognito_user_pool_id: ${ssm:/workshop-icanuti/${opt:stage}/cognito_user_pool_id}
      cognito_client_id: ${ssm:/workshop-icanuti/${opt:stage}/cognito_web_client_id}
    iamRoleStatements:
      - Effect: Allow
        Action: execute-api:Invoke
        Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants

  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants/
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: ${ssm:/workshop-icanuti/${opt:stage}/table_name}
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource:
          Fn::GetAtt:
            - restaurantsTable
            - Arn

  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:/workshop-icanuti/${opt:stage}/cognito_user_pool_id}
    environment:
      restaurants_table: ${ssm:/workshop-icanuti/${opt:stage}/table_name}
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource:
          Fn::GetAtt:
            - restaurantsTable
            - Arn

  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:/workshop-icanuti/${opt:stage}/cognito_user_pool_id}
    environment:
      order_events_stream: ${ssm:/workshop-icanuti/${opt:stage}/stream_name}
    iamRoleStatements:
      - Effect: Allow
        Action: kinesis:PutRecord
        Resource: 
          Fn::GetAtt:
            - orderEventsStream
            - Arn

  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - stream:
          type: kinesis
          arn: 
            Fn::GetAtt:
              - orderEventsStream
              - Arn
    environment:
      order_events_stream: ${ssm:/workshop-icanuti/${opt:stage}/stream_name}
      restaurant_notification_topic: 
        Ref: restaurantNotificationTopic
      restaurant_notification_retry_topic: 
        Ref: restaurantNotificationRetryTopic
    iamRoleStatements:
      - Effect: Allow
        Action: kinesis:PutRecord
        Resource: 
          Fn::GetAtt:
            - orderEventsStream
            - Arn
      - Effect: Allow
        Action: sns:Publish
        Resource: 
          - Ref: restaurantNotificationTopic
          - Ref: restaurantNotificationRetryTopic

  retry-notify-restaurant:
    handler: functions/retry-notify-restaurant.handler
    events:
      - sns: 
          arn: 
            Ref: restaurantNotificationRetryTopic
          topicName: ${ssm:/workshop-icanuti/${opt:stage}/restaurant_retry_topic_name}
    environment:
      order_events_stream: ${ssm:/workshop-icanuti/${opt:stage}/stream_name}
      restaurant_notification_topic: 
        Ref: restaurantNotificationTopic
    onError: 
      Ref: restaurantNotificationDLQTopic
    iamRoleStatements:
      - Effect: Allow
        Action: kinesis:PutRecord
        Resource: 
          Fn::GetAtt:
            - orderEventsStream
            - Arn
      - Effect: Allow
        Action: sns:Publish
        Resource: 
          - Ref: restaurantNotificationTopic
          - Ref: restaurantNotificationDLQTopic

resources:
  Resources:
    restaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${ssm:/workshop-icanuti/${opt:stage}/table_name}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${ssm:/workshop-icanuti/${opt:stage}/stream_name}
        ShardCount: 1
    restaurantNotificationTopic:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: ${ssm:/workshop-icanuti/${opt:stage}/restaurant_topic_name}
        TopicName: ${ssm:/workshop-icanuti/${opt:stage}/restaurant_topic_name}
    restaurantNotificationRetryTopic:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: ${ssm:/workshop-icanuti/${opt:stage}/restaurant_retry_topic_name}
        TopicName: ${ssm:/workshop-icanuti/${opt:stage}/restaurant_retry_topic_name}

    restaurantNotificationDLQTopic:
      Type: AWS::SNS::Topic
      Properties: 
        DisplayName: ${ssm:/workshop-icanuti/${opt:stage}/restaurant_dlq_topic_name}
        TopicName: ${ssm:/workshop-icanuti/${opt:stage}/restaurant_dlq_topic_name}
