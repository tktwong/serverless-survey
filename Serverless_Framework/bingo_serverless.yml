# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
package: 
  individually: true

plugins:
  - serverless-offline
  - serverless-bundle
service: lambda
# app and org for use with dashboard.serverless.com
app: bingo
org: zynkn

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom:
  bundle:
    linting: false
  secrets: ${file(secrets.json)}
provider:
  name: aws
  runtime: nodejs10.x
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:us-east-1:116859356360:table/bingo.websocket

    - Effect: Allow
      Action:
        - execute-api:ManageConnections
        - execute-api:Invoke
      Resource:
        - arn:aws:execute-api:*:*:**/@connections/*
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**


functions:
  auth:
    handler: authorizer.authorizer
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          authorizer: auth
          cors: 
            origin: http://localhost:3000
            allowCredentials: true
  connectionManager:
    handler: connectionManager.connectionManager
    events:
      - websocket:
          route: $default
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect    
  join:
    handler: websocket/join.join
    events: 
      - websocket:
          route: join
  edit:
    handler: websocket/edit.edit
    events: 
      - websocket:
          route: edit
  getToken:
    handler: getToken.handler
    events:
      - http:
          path: getToken
          method: get
          cors: 
            origin: http://localhost:3000
            allowCredentials: true
  checkToken:
    handler: checkToken.handler
    events:
      - http:
          path: checkToken
          method: get
          cors: 
            origin: http://localhost:3000
            allowCredentials: true
  # auth:
  #   handler: authorizer/handler.authorizer
  # allowCors:
  #   handler: handler.allowCors
  #   events:
  #     - http:
  #         path: allowCors
  #         method: get
  #         cors: true
  # disabledCors:
  #   handler: handler.disabledCors
  #   events:
  #     - http:
  #         path: disabledCors
  #         method: get
  #         cors: false
  # issueToken:
  #   handler: issueToken/handler.issueToken
  #   events:
  #     - http:
  #         path: issueToken
  #         method: post
  #         cors: 
  #           origin: http://localhost:3000
  #           allowCredentials: true
  # hi:
  #   handler: handler.hello
  #   events:
  #     - http:
  #         path: hi
  #         method: get
  #         cors: 
  #           origin: http://localhost:3000
  #           allowCredentials: true
  # hello:
  #   handler: handler.hello
  #   events:
  #     - http:
  #         path: hello
  #         method: post
  #         authorizer: auth
  #         cors: 
  #           origin: http://localhost:3000
  #           allowCredentials: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
