# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: awscodingexcercise
# app and org for use with dashboard.serverless.com
app: awscodingexcercise-app
org: michaelmillsofficial

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:us-east-1:*:*'
    - Action: 
        - s3:GetObject
      Effect: "Allow"
      Resource: 
        Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - "Ref" : "NEOJSONBucket"
            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

plugins:
    - invoke-lambda-dataload

functions:
  loadSampleDataToDynamo:
    handler: ./lambda/loadSampleDataToDynamo/index.handler
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Transform: 
    - AWS::Serverless-2016-10-31
  Parameters: 
    url:
      Type: String
      Description: Link to REST service containing data
      Default: https://ssd-api.jpl.nasa.gov/cad.api?body=ALL
    sampleDataFileName:
      Type: String
      Description: File name to store the sample data as
      Default: sampleData.json
  Resources:
    NEOJSONBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: near-earth-asteroids-${opt:stage, dev}
    NEOTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PROVISIONED
        TableName: "NearEarthAsteroids_${opt:stage, dev}"
        ProvisionedThroughput: 
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        KeySchema:
          - AttributeName: "designation"
            KeyType: HASH
          - AttributeName: "absolute_magnitude"
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: "designation"
            AttributeType: "S"
          - AttributeName: "absolute_magnitude"
            AttributeType: "N"
    DeployToS3:
      Type: AWS::Serverless::Function
      Properties:
        Handler: index.handler
        Runtime: "nodejs12.x"
        Timeout: 300
        Policies:
          - AWSLambdaBasicExecutionRole
          - AmazonS3FullAccess
        # I don't like the idea of an inline function as it would be more difficult to maintain.
        # Ideally this code would be something we would want to have housed in an S3 bucket
        InlineCode: |
          const aws = require('aws-sdk');
          const https = require('https');
          const url = require('url');

          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));

              var response = require('cfn-response');
              if(!event.ResourceProperties && !event.ResourceProperties.url && 
                !event.ResourceProperties.TableName && !event.ResourceProperties.FileName) {
                  response.send(event, context, response.FAILED, "Missing one or more of url, TableName, or FileName!");
                  return;
              }
              
              https.get(url.parse(event.ResourceProperties.url), function(res) {
                  var data = [];
              
                  res.on('data', function(chunk) {
                      data.push(chunk);
                  }).on('end', function() {
                      // Since data is now an array of Buffers,
                      // we can use concat to squish them all together
                      var buffer = Buffer.concat(data);
                      
                      let s3 = new aws.S3();
                      var params = {
                          Body: buffer.toString(),
                          Bucket: event.ResourceProperties.BucketName,
                          Key: event.ResourceProperties.FileName
                      }
                      try {
                        s3.putObject(params).promise();
                        response.send(event, context, response.SUCCESS);
                      } catch(err) {
                        response.send(event, context, response.FAILED, err.stack);
                      }
                  });
              });
          }
  
    DeploymentCustomResource:
      Type: Custom::DeployToS3
      Properties:
        ServiceToken: 
          Fn::GetAtt: 
            - DeployToS3
            - Arn
        url: 
          Ref: url
        BucketName: 
          Ref: NEOJSONBucket
        FileName: 
          Ref: sampleDataFileName