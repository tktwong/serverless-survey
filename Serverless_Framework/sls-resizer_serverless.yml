service: resizer-service

custom:
  stage: ${opt:stage, self:provider.stage}
  settings:
    IMAGE_METADATA_TABLE: ImageMetaData-${self:custom.stage}

provider:
  name: aws
  runtime: rust
  memorySize: 128
  profile: kanji
  region: ap-northeast-1
  stage: dev
  environment: ${self:custom.settings}

plugins:
  - serverless-rust
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

package:
  individually: true

iamRoleStatementsForS3: &iamRoleStatementsForS3
  Effect: "Allow"
  Action:
    - "s3:ListBucket"
    - "s3:GetObject"
    - "s3:PutObject"
  Resource: "arn:aws:s3:::resizer-service-images-kaicoh/*"

iamRoleStatementsForDynamoDB: &iamRoleStatementsForDynamoDB
  Effect: "Allow"
  Action:
    - "dynamodb:Query"
    - "dynamodb:GetItem"
    - "dynamodb:PutItem"
    - "dynamodb:UpdateItem"
    - "dynamodb:DeleteItem"
  Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.settings.IMAGE_METADATA_TABLE}

functions:
  initiator:
    handler: initiator
    events:
      - s3:
          bucket: resizer-service-images-kaicoh
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg
    iamRoleStatementsName: iam-role-for-initiator
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "states:ListStateMachines"
          - "states:StartExecution"
        Resource: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:*
  resizer:
    handler: resizer
    iamRoleStatementsName: iam-role-for-resizer
    iamRoleStatements:
      - <<: *iamRoleStatementsForS3
  cropper:
    handler: cropper
    iamRoleStatementsName: iam-role-for-cropper
    iamRoleStatements:
      - <<: *iamRoleStatementsForS3
  saver:
    handler: saver
    iamRoleStatementsName: iam-role-for-savor
    iamRoleStatements:
      - <<: *iamRoleStatementsForDynamoDB
  thumb_saver:
    handler: thumb_saver
    events:
      - s3:
          bucket: resizer-service-images-kaicoh
          event: s3:ObjectCreated:*
          rules:
            - prefix: thumbnails/
            - suffix: .jpg
    iamRoleStatementsName: iam-role-for-thumb-savor
    iamRoleStatements:
      - <<: *iamRoleStatementsForDynamoDB

stepFunctions:
  stateMachines:
    imageProcessing:
      definition:
        Comment: "Image processing state machine"
        StartAt: Parallel
        States:
          Parallel:
            Type: Parallel
            Next: FinalState
            Branches:
              - StartAt: ResizeImage
                States:
                  ResizeImage:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.stage}-resizer
                    End: true
              - StartAt: SaveImageMetadata
                States:
                  SaveImageMetadata:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.stage}-saver
                    End: true
              - StartAt: CropImage
                States:
                  CropImage:
                    Type: Task
                    Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:custom.stage}-cropper
                    End: true
          FinalState:
            Type: Pass
            End: true

resources:
  Resources:
    ImageMetaDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: ImageId
          AttributeType: S
        KeySchema:
        - AttributeName: ImageId
          KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.settings.IMAGE_METADATA_TABLE}
