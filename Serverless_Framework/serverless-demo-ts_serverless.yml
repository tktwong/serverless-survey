service:
  name: auction-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-dotenv-plugin # https://www.serverless.com/plugins/serverless-dotenv-plugin/

provider:
  name: aws
  runtime: nodejs12.x
  profile: slsuser
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    AUCTIONS_TABE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    SOURCE_EMAIL: ${env:SOURCE_EMAIL}
  iamRoleStatements:
    - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
    - ${file(iam/MailQueueIAM.yml):MailQueueIAM}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: post
          path: auction
          authorizer: ${self:custom.authorizer}

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: get
          path: auctions
          authorizer: ${self:custom.authorizer}

  getAuctionByID:
    handler: src/handlers/getAuction.byID
    events:
      - http:
          method: get
          path: auction/{id}
          authorizer: ${self:custom.authorizer}

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: patch
          path: auction/{id}/bid
          authorizer: ${self:custom.authorizer}

  processAuctions:
    handler: src/handlers/processAuctions.handler
    # keep it commented for development purposes
    # events:
    #   - schedule: rate(1 minute)

resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}

custom:
  authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  # These will be used in IAM files
  MailQueue:
    # Notification service exposes these as OUTPUTS
    # serverless variables help import them. cf is for cloudformation
    arn: ${cf:notification-service-ts-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-ts-${self:provider.stage}.MailQueueUrl}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dotenv:
    logging: false
#
# ${self:provider.stage} : stage is a serverless property, so doesnt need #{}
# #{AWS::Region} : Region is an AWS/Cloudformation property, so needs #{}
