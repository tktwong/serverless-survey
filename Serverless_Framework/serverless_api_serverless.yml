# Welcome to Serverless!
#

service: my-express-application-tata
frameworkVersion: '2'

custom:
  tableName: 'users-table-tata-${self:provider.stage}'
  
provider:
  name: aws
  runtime: nodejs12.x

  stage: dev
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.tableName}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: index.handler
    events:
      - http:
          path: /swapi
          method: get
      - http:
          path: /swapi/{id}
          method: get

      - http:
          path: /usersAll
          method: get
      - http:
          path: /users/{userId}
          method: get
      - http:
          path: /users
          method: post

# you can add CloudFormation resource templates here
resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}




plugins:
  - serverless-offline