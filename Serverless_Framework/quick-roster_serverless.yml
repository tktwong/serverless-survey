# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: quick-roster # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-1
  profile: quick-roster
  environment: ${self:custom.config.environment.common}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Resource: "arn:aws:dynamodb:us-east-1:338257455868:table/*"

    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:us-east-1:338257455868:function:quick-roster-${opt:stage}-*"

plugins:
  - serverless-plugin-crypt
  - serverless-plugin-simulate

custom:
  config: ${file(./config/${opt:stage}.yml):config}
  crypt:
    aws:
      kmsKeyId: ${self:custom.config.kmsKeyId}

package:
 include:
   - src/node_modules
   - src/functions
   - src/common
 exclude:
   - node_modules/**
   - config/**
   - .envrc
   - .gitignore
   - package.json
   - yarn.lock
   - src/yarn.lock
   - src/package.json
   - README.md
   - .eslintrc.yml
   - tests/**
   - coverage/**

functions:
  api-key-authorizer:
    handler: src/functions/authorizer/api-key.handler
    environment: ${self:custom.config.environment.auth}

  event-inbound:
    handler: src/functions/event-inbound/handler.handler
    events:
      - http:
          path: event
          method: post
          cors: true
          authorizer: api-key-authorizer

  event-triage:
    handler: src/functions/event-triage/handler.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - eventStreamTable
              - StreamArn
    
  reducer-userVotes:
    handler: src/functions/reducers/userVotes.handler

resources:
  Resources:
    eventStreamTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: eventStreamTable-${opt:stage}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: createdTimestamp
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: createdTimestamp
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      
    aggregateTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: aggregateTable-${opt:stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: eventuid
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: eventuid
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: NameId
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: name
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
