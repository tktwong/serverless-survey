# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: floodlightapi

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  vpc:
    securityGroupIds:
      - sg-127ad84a
    subnetIds:
      - subnet-06f05e32bbb8a4387
      - subnet-025826c27da3cd8a3
      - subnet-02d0274ea2a10e9e6

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    DB_DIALECT: 'postgres'
    DB_NAME: 'floodlight'
    DB_USERNAME: 'postgres'
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: '5432'

#package:
#  artifact: /builds/floodlight-invest/api/Floodlight.API/bin/release/netcoreapp2.1/deploy-package.zip

functions:
  api:
    handler: app.handler
    timeout: 30
    events:
      - http: 
          path: /
          method: ANY
          cors: true
      - http:
         path: /{proxy+}
         method: ANY
         cors: true
    environment:
        DATABASE_URL: ${env:DATABASE_URL}
        ELASTICSEARCH_URL: ${env:ELASTICSEARCH_URL}
        STRIPE_API_KEY: ${env:STRIPE_API_KEY}
        AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID}
        AUTH0_CLIENT_SECRET: ${env:AUTH0_CLIENT_SECRET}
        AUTH0_AUDIENCE: ${env:AUTH0_AUDIENCE}
        AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
        AUTH0_MANAGEMENT_DOMAIN: ${env:AUTH0_MANAGEMENT_DOMAIN}
        NODE_ENV: production
    warmup:
        enabled: prod
    #  exclude:
    #    - exclude-me.js
    #    - exclude-me-dir/**
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-domain-manager
  - serverless-plugin-warmup
  - serverless-sequelize-migrations

custom:
  customDomain:
    domainName: ${self:provider.stage}-api.floodlightinvest.com
    basePath: ''
    stage: ${self:provider.stage}