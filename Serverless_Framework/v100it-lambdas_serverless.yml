# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: nfd-lambdas

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: serverless.newfrontdoor.org
    basePath: ""
    certificateName: "newfrontdoor.org"
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs10.x

  # stage: ${self:provider.stage}
  region: us-west-2

  profile: newfrontdoor

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ses:SendRawEmail
      Resource: "arn:aws:ses:us-west-2:*:*"
    - Effect: "Allow"
      Action:
        - s3:*
      Resource: "arn:aws:s3:::sermons.crossroadshobart.org"
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  include:
    - handler.js
  exclude:
    - "**/*"

defaultCors: &defaultCors
  origins:
    - "https://vision100it.org"
    - "https://newfrontdoor.org"
    - "https://*.sanity.studio"
    - "http://localhost:*"
  headers:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
  allowCredentials: false

functions:
  bible:
    handler: handler.bible
    events:
      - http:
          path: bible
          method: get
          cors: *defaultCors

  contactUs:
    handler: handler.contactUs
    events:
      - http:
          path: contact-us
          method: post
          cors: *defaultCors

  featureRequest:
    handler: handler.featureRequest
    events:
      - http:
          path: feature-request
          method: post
          cors: *defaultCors

  giveFeedback:
    handler: handler.giveFeedback
    events:
      - http:
          path: give-feedback
          method: post
          cors: *defaultCors

  mailingList:
    handler: handler.mailingList
    events:
      - http:
          path: mailing-list
          method: post
          cors: *defaultCors

  supportRequest:
    handler: handler.supportRequest
    events:
      - http:
          path: support-request
          method: post
          cors: *defaultCors

  sermonUpload:
    handler: handler.getPresignedPostData
    events:
      - http:
          path: sermon-upload
          method: post
          cors: *defaultCors
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2
