# The `service` block is the name of the service
service: badipchecker

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  stage: production
  timeout: 10
  apiGateway:
    shouldStartNameWithService: true
  environment:
    UploadBucket: 'badipchecker'
  lambdaHashingVersion: '20201221'

  # Quickly creating permissions is one of the reasons that I chose serverless for this exercise.
  iamRoleStatements:
    - Effect: "Allow"
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
       - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/badips"

# We are using a layer to provide the ability to run a git clone
# I assumed that 10 minutes to clone the files and update Dynamo would be sufficient
functions:
  badipchecker:
    handler: badipchecker.handler
    events:
      - http:
          path: badipchecker
          method: post
          cors: true
  updatebadip:
    handler: updatebadip.handler
    memorySize: 2048
    timeout: 600
    layers:
      - arn:aws:lambda:${self:provider.region}:553035198032:layer:git-lambda2:8
    events:
      - schedule: rate(24 hours)

resources: # CloudFormation template syntax from here on.
  Resources:
    badips:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: badips
        KeySchema:
          - AttributeName: ipaddress
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: ipaddress
            AttributeType: S
        BillingMode: PAY_PER_REQUEST

# Please remember to install this plugin via npm i serverless-pseudo-parameters --save from wherever you are running
plugins:
  - serverless-pseudo-parameters
