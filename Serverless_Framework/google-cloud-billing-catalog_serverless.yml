service: googlecloudbillingsls
# app and org for use with dashboard.serverless.com

# app: appn ame on serverless.com
# org: org name on serverless.com

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  ServicesTableName: "services"
  SKUsTableName: "skus"
  RatesTableName: "rates"
  S3BucketName: "googlecloudbillingcatalogdump"
  #API key needs to be set before deploying
  GoogleCloudAPIKey: ""

provider:
  name: aws
  runtime: python3.7
  iamRoleStatements:
      - Effect: "Allow"
        Action: 
        # Gives permission to DynamoDB tables in a specific region
          - "dynamodb:DescribeTable"
          - "dynamodb:Query"
          - "dynamodb:Scan"
          - "dynamodb:GetItem"
          - "dynamodb:PutItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:DeleteItem"
        Resource:
          - { "Fn::GetAtt": ["ServicesTable", "Arn"] }
          - { "Fn::GetAtt": ["SKUsTable", "Arn"] }
          - { "Fn::GetAtt": ["RatesTable", "Arn"] }
      - Effect: "Allow"
        Action:
        # gives permission to saving JSON object to S3
          - "s3:PutObject"
          - "s3:PutObjectAcl"
        Resource: { "Fn::Join": ["", ["arn:aws:s3:::${self:custom.S3BucketName}", "/*" ] ] }

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  cataloglambdahandler:
    handler: handler.event_handler
    environment:
      SERVICES_TABLE_NAME: ${self:custom.ServicesTableName}
      SKUS_TABLE_NAME: ${self:custom.SKUsTableName}
      RATES_TABLE_NAME: ${self:custom.RatesTableName}
      GOOGLE_CLOUD_API_KEY: ${self:custom.GoogleCloudAPIKey}
      S3_BUCKET_NAME: ${self:custom.S3BucketName}
    events:
      - schedule: rate(24 hours)
        # - schedule: cron(15 10 * * ? *)  this will run everyday at 10:15 am

resources:
  Resources:
    JSONDumpBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:custom.S3BucketName}
    ServicesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.ServicesTableName}
        AttributeDefinitions:
          - AttributeName: service_id
            AttributeType: S
        KeySchema:
          - AttributeName: service_id
            KeyType: HASH
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SKUsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.SKUsTableName}
        AttributeDefinitions:
          - AttributeName: sku_id
            AttributeType: S
        KeySchema:
          - AttributeName: sku_id
            KeyType: HASH
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    RatesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: ${self:custom.RatesTableName}
        AttributeDefinitions:
          - AttributeName: sku_id
            AttributeType: S
          - AttributeName: start_usage_amount
            AttributeType: N
        KeySchema:
          - AttributeName: sku_id
            KeyType: HASH
          - AttributeName: start_usage_amount
            KeyType: RANGE
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
# Outputs:
#   BucketName:
#     Description: "Name of the bucket"
#     Value:
#       Ref: JSONDumpBucket
