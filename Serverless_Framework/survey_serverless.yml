# serverless.yml
org: richardwardza
app: survey
service: survey-lambda
package:
  exclude:
    - ./**
    - "!node_modules/**"
  include:
    - dist/**
plugins:
  - serverless-offline
  - serverless-dotenv-plugin
provider:
  name: aws
  timeout: 20
  region: eu-west-2
  runtime: nodejs12.x
  profile: richardProfile
  stage: ${env:SERVERLESS_STAGE, 'dev'}
  tracing:
    lambda: true
  environment:
    NODE_ENV: ${env:NODE_ENV}
    VERSION: ${env:VERSION}
    ENGINE_API_KEY: ${env:ENGINE_API_KEY}
    DATABASE_URL: ${env:DATABASE_URL}

custom:
  serverless-offline:
    port: 4000
  stage: ${opt:stage, 'dev'}
  DB_NAME: survey
  VPC_CIDR: 10

resources:
  Resources:
    LambdaRole: ${file(./resource/LambdaRole.yml)}
    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}
    ServerlessSubnet: ${file(./resource/ServerlessSubnet.yml)}
    ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}
    RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}
    RoutePublic: ${file(./resource/RoutePublic.yml)}
    RouteTableAssociationSubnet: ${file(./resource/RouteTableAssociationSubnet.yml)}

functions:
  graphql:
    name: Survey-Lambda
    handler: dist/server.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: ${file(./cors.yml)}
      - http:
          path: graphql
          method: get
          cors: ${file(./cors.yml)}
