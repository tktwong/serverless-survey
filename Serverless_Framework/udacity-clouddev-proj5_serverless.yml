service:
  name: serverless-proj5-luan

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-canary-deployments
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-tracing

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Event API
        description: Serverless diary
    models:
      - name: CreateEventRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: UpdateEventRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}
  serverless-offline:
    httpPort: 5000
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    EVENT_TABLE: Diary-Events-${self:provider.stage}
    EVENT_LOCAL_INDEX: EventLocalIndex
    EVENT_GLOBAL_INDEX: EventGlobalIndex
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"

functions:
  AuthRS256:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetEvents:
    handler: src/lambda/http/getEvents.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE}/index/${self:provider.environment.EVENT_GLOBAL_INDEX}
    events:
      - http:
          authorizer: AuthRS256
          method: get
          path: events
          cors: true

  CreateEvent:
    handler: src/lambda/http/createEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE}
    events:
      - http:
          authorizer: AuthRS256
          method: post
          path: events
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new event
            description: Create a new event
            requestModels:
              "application/json": CreateEventRequest

  UpdateEvent:
    handler: src/lambda/http/updateEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE}
    events:
      - http:
          authorizer: AuthRS256
          method: patch
          path: events/{eventId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a event item
            description: Update a event item
            requestModels:
              "application/json": UpdateEventRequest

  DeleteEvent:
    handler: src/lambda/http/deleteEvent.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE}
    events:
      - http:
          authorizer: AuthRS256
          method: delete
          path: events/{eventId}
          cors: true

resources:
  Resources:
    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EVENT_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EVENT_GLOBAL_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EVENT_LOCAL_INDEX}
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,PATCH,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
