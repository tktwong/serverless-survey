# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: snapnext

# create an optimized package for functions
package:
  individually: true

plugins:
  # - serverless-bundle
  - serverless-offline

custom:
  # imagesBucketName: serverless-pipeline-images
  stage: ${opt:stage, self:provider.stage}
  imagesTableName: ${self:custom.stage}-snapnext-images
  originalsFolderName: originals
  processedFolderName: processed

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

  iamRoleStatements: # IAM permissions granted to all functions
    - Effect: Allow
      Action:
        - S3:GetObject
        - S3:PutObject
        - S3:PutObjectAcl
      Resource:
      - Fn::Join:
        - ""
        - - Fn::GetAtt: [ImagesBucket, Arn]
          - "/*"
    - Effect: Allow
      Action:
        - rekognition:DetectFaces
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynmamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - Fn::Join:
          - ""
          - - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:"
            - "table/${self:custom.imagesTableName}"
        - Fn::Join:
          - ""
          - - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:"
            - "table/${self:custom.imagesTableName}/stream/*"    

  environment:
    # IMAGES_BUCKET_NAME: ${self:custom.imagesBucketName}
    IMAGES_BUCKET_NAME:
      Ref: ImagesBucket
    IMAGES_TABLE_NAME: ${self:custom.imagesTableName}
    ORIGINAL_FOLDER_NAME: ${self:custom.originalsFolderName}
    PROCESSED_FOLDER_NAME: ${self:custom.processedFolderName}


# The `functions` block defines what code to deploy
# functions:
functions:
  # Function to download an image from a URL
  downloadImage:
    handler: functions/downloadImage.handler
    events:
      - http:
          path: images
          method: post

  # Function to analyze an uploaded image
  analyzeImage:
    handler: functions/analyzeImage.handler
    events:
      - s3:
        bucket: 
          Ref: ImagesBucket
        event: s3:ObjectCreated:*
        rules:
          - prefix: originals/
        existing: true

  # Function to crop an uploaded image
  # after facial analysis saved in DynamoDB
  # and save it to S3
  processImage:
    handler: functions/processImage.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - ImagesTable
              - StreamArn

# AWS Resources
resources:
  Resources:
    ImagesBucket:
      Type: AWS::S3::Bucket
    
    # DynamoDB Table
    # "StreamSpecification" is used to specify what
    # kinds of DB updates emit an event.
    # "NEW_AND_OLD_IMAGES" emits an event for both
    # updates to existing items and additions
    # of new items
    ImagesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.imagesTableName}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
  
  Outputs:
    ImagesBucketName:
      Value:
        Ref: ImagesBucket

