# note: variables are enclosed with double brackets, instead of the default single brackets, so we can do bash right
service: helloworld

custom:
  # serverless settings
  stage: ${{env:STAGE, opt:stage, "staging"}} # this way we always have a stage
  objectPrefix: "${{self:service}}-${{self:custom.stage}}" # helloworld-staging
  # cache settings
  defaultCacheTTL: 57600 # 16 hours
  # domain/dns settings
  domain: hbkapps.com
  hostedZone: ${{self:custom.stage}}.${{self:custom.domain}} # staging.hbkapps.com
  s3Bucket: ${{self:service}}.${{self:custom.stage}}.${{self:custom.domain}} # hello-world.staging.hbkapps.com
  fqdn: ${{self:custom.s3Bucket}} # full domain name, which is just the s3bucket
  certArns:
    staging: arn:aws:acm:us-east-1:613658333627:certificate/0c8a4b66-f92d-4fff-beb9-5d7d2482e45e
    production: arn:aws:acm:us-east-1:613658333627:certificate/febe265a-58db-4015-8fb0-2ff5f97c8b17
  aliases:
    production: helloworld.${{self:custom.domain}}
  # deployment scripts
  scripts:
    commands:
      deploy-assets: aws s3 sync www/ s3://${{self:custom.s3Bucket}}/deploys/$(git rev-parse HEAD) --delete --cache-control max-age=${TTL:-0} --acl 'public-read'
      deploy-to-public: aws s3 sync s3://${{self:custom.s3Bucket}}/deploys/${DEPLOY_SHA:-$(git rev-parse HEAD)}/ s3://${{self:custom.s3Bucket}}/public/ --delete --acl 'public-read'
      invalidate-cache: aws cloudfront create-invalidation --distribution-id ${{cf:helloworld-staging.CloudfrontDistributionId}} --paths "/*"
provider:
  name: aws
  runtime: nodejs10.x # Because this runs on CloudFront (lambda@edge) it must be 6.10
  memorySize: 128
  timeout: 1
  stage: ${{self:custom.stage}}
  variableSyntax: "\\${{([\\s\\S]+?)}}"

plugins:
  - serverless-plugin-scripts

package:
  excludeDevDependencies: false
  individually: true
  exclude:
    - "**"
# functions:
#   prPreviewMiddleware:
#     handler: middleware/pr-preview/index.handler
#     package:
#       include:
#         - middleware/pr-preview/**
#     lambdaAtEdge:
#       distribution: "WebsiteDistribution"
#       eventType: "viewer-request"
#       pathPattern: ${{file(./middleware/pr-preview/index.js):pathPattern}}

resources:

  # Surprise tools that will be useful to us later
  Conditions:
    Staging:
      Fn::Equals:
        - ${{self:custom.stage}}
        - staging
    Production:
      Fn::Equals:
        - ${{self:custom.stage}}
        - production
  Mappings:
    ACMCerts:
      staging:
        arn: "${{self:custom.certArns.staging}}"
      production:
        arn: "${{self:custom.certArns.production}}"
  Resources:
      # Bucket hosting the site
    WebsiteBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: "${{self:custom.s3Bucket}}"
        VersioningConfiguration:
          Status: Enabled
        WebsiteConfiguration:
          IndexDocument: "index.html"
          ErrorDocument: "error.html"
    # Configure OAI for s3 bucket, so only cloudfront can get it
    ReadPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Statement:
            - Action: "s3:ListBucket" # CF needs ListBucket permissions to return 404 instead of 403 from S3
              Effect: Allow
              Resource: !Sub "arn:aws:s3:::${WebsiteBucket}"
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            - Action: "s3:GetObject" # 
              Effect: Allow
              Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
    CloudFrontOriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Ref WebsiteBucket


    # Configure DNS record sets
    Dns:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${{self:custom.hostedZone}}.
        RecordSets: 
          - Name: ${{self:custom.fqdn}}
            Type: A
            AliasTarget:
              # Z2FDTNDATAQYW2 is CloudFront's HostedZoneId
              # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: { "Fn::GetAtt": ["WebsiteDistribution", "DomainName"] }

      # Cloudfront distribution
    WebsiteDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          CustomErrorResponses:
            - ErrorCode: 404
              ResponsePagePath: "/index.html"
              ResponseCode: 200
          Aliases:
            # - Fn::If:
            #     - Production
            #     - "${{self:custom.aliases.production}}" @todo fix
            #     - Ref: "AWS::NoValue"
            - ${{self:custom.fqdn}}
          DefaultCacheBehavior:
            TargetOriginId: "${{self:custom.s3Bucket}}"
            ViewerProtocolPolicy: "redirect-to-https"
            DefaultTTL: ${{self:custom.defaultCacheTTL}}
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: "none"
          # CacheBehaviors:
            # # /v/*
            # - TargetOriginId: "${{self:custom.s3Bucket}}"
            #   ViewerProtocolPolicy: "redirect-to-https"
            #   PathPattern: ${{file(./middleware/pr-preview/index.js):pathPattern}}
            #   ForwardedValues:
            #     QueryString: false
            #     Cookies:
            #       Forward: "whitelist"
            #       WhitelistedNames:
            #         - "X-Debug-Log-Enabled"
          DefaultRootObject: "index.html"
          Enabled: true
          PriceClass: "PriceClass_100"
          HttpVersion: "http2"
          ViewerCertificate:
            SslSupportMethod: "sni-only"
            AcmCertificateArn:
              { "Fn::FindInMap": [ACMCerts, "${{self:custom.stage}}", "arn"] }
          Origins:
            - Id: "${{self:custom.s3Bucket}}/public"
              OriginPath: "/public"
              DomainName: { "Fn::GetAtt": ["WebsiteBucket", "DomainName"] }
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
            - Id: "${{self:custom.s3Bucket}}/"
              DomainName: { "Fn::GetAtt": ["WebsiteBucket", "DomainName"] }
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          OriginGroups:
            Quantity: 1
            Items:
              - Id: "${{self:custom.s3Bucket}}"
                FailoverCriteria:
                  StatusCodes:
                    Items:
                      - 404
                    Quantity: 1
                Members:
                  Quantity: 2
                  Items:
                    - OriginId: "${{self:custom.s3Bucket}}/public"
                    - OriginId: "${{self:custom.s3Bucket}}/"

  Outputs:
    CloudfrontDistributionId:
      Description: Cloudfront distribution id.
      Value:
        Ref: WebsiteDistribution
      # Export: 
      #   Name: CloudfrontDistributionId