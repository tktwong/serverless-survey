service: my-website

frameworkVersion: ">=1.1.0 <2.0.0"


plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: data.pratikmathur.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    EXPERIENCE_TABLE: { "Ref": "ExperiencesDynamoDbTable" } 
    PROJECTS_TABLE: { "Ref": "ProjectsDynamoDbTable" } 
    SKILLS_TABLE: { "Ref": "SkillsDynamoDbTable" }
    TECHNOLOGY_TABLE: { "Ref": "TechnologyDynamoDbTable" }
    CONTACT_TABLE: { "Ref": "ContactDynamoTable" }
    EMAIL: "pratikmathur279@gmail.com"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - { "Fn::GetAtt": ["ExperiencesDynamoDbTable", "Arn"] }
        - { "Fn::GetAtt": ["ProjectsDynamoDbTable", "Arn"] }
        - { "Fn::GetAtt": ["SkillsDynamoDbTable", "Arn"] }
        - { "Fn::GetAtt": ["ContactDynamoTable", "Arn"] }
        - { "Fn::GetAtt": ["TechnologyDynamoDbTable", "Arn"] }

    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource: "*"

functions:
#send email
  send:
      handler: email/send.send
      events:
        - http:
            path: email/send
            method: post
            cors: true

# create contact
  createContact:
    handler: contact/create.create
    events:
      - http:
          path: contact
          method: post
          cors: true

# list contact
  listContact:
    handler: contact/list.list
    events:
      - http:
          path: contact
          method: get
          cors: true

# get contact
  getContact:
    handler: contact/get.get
    events:
      - http:
          path: contact/{id}
          method: get
          cors: true

# create experience
  createExperience:
    handler: experiences/create.create
    events:
      - http:
          path: experience
          method: post
          cors: true

# list experience
  listExperience:
    handler: experiences/list.list
    events:
      - http:
          path: experience
          method: get
          cors: true

# get experience
  getExperience:
    handler: experiences/get.get
    events:
      - http:
          path: experience/{id}
          method: get
          cors: true

# create projects
  createProjects:
    handler: projects/create.create
    events:
      - http:
          path: projects
          method: post
          cors: true
# list projects
  listProjects:
    handler: projects/list.list
    events:
      - http:
          path: projects
          method: get
          cors: true

# get projects
  getProjects:
    handler: projects/get.get
    events:
      - http:
          path: projects/{id}
          method: get
          cors: true
 
 # create skills 
  createSkills:
    handler: skills/create.create
    events:
      - http:
          path: skills
          method: post
          cors: true

# create technology 
  createTechnology:
    handler: technology/create.create
    events:
      - http:
          path: technology
          method: post
          cors: true

# list skills
  listSkills:
    handler: skills/list.list
    events:
      - http:
          path: skills
          method: get
          cors: true

# list technology
  listTechnology:
    handler: technology/list.list
    events:
      - http:
          path: technology
          method: get
          cors: true          

# get skills
  getSkills:
    handler: skills/get.get
    events:
      - http:
          path: skills/{id}
          method: get
          cors: true

# get technology
  getTechnology:
    handler: technology/get.get
    events:
      - http:
          path: technology/{id}
          method: get
          cors: true          

#add multiple skills
  addSkills:
    handler: skills/addSkills.addSkills
    events:
      - http:
          path: addskills
          method: post
          cors: true

#add multiple technologies
  addTechnology:
    handler: technology/addTechnology.addTechnology
    events:
      - http:
          path: addTechnology
          method: post
          cors: true

#add multiple experiences
  addExperiences:
    handler: experiences/addExperiences.addExperiences
    events:
      - http:
          path: addexperiences
          method: post
          cors: true

#add multiple projects
  addProjects:
    handler: projects/addProjects.addProjects
    events:
      - http:
          path: addprojects
          method: post
          cors: true

resources:
  Resources:
    ExperiencesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-experiences-data

    ContactDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-contacts-data

    ProjectsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-projects-data

    SkillsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-skills-data

    TechnologyDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-technology-data
