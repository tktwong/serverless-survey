service: imageuploader

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: us-east-2 # Overwrite the default region used. Default is us-east-1


  environment: # you can define service wide environment variables here
    DDB_REGION: ${self:custom.myEnvironment.DYNAMODB_REGION.${self:custom.myStage}}
    DYNAMODB_USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    IS_OFFLINE: ${self:custom.myEnvironment.IS_OFFLINE.${opt:stage}}
  apiKeys:
    - apiKey-${opt:stage}


# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USERS_TABLE}"
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"


plugins:
  - serverless-dynamodb-local
  - serverless-mocha-plugin
  - serverless-plugin-include-dependencies
  - serverless-offline


functions:
  hello:
    handler: handlers/userHandlers.hello

  createUser:
    handler: handlers/userHandlers.insert_user
    events:
      - http:
          path: create
          method: post
          private: true
          cors: true

  getUser:
    handler: handlers/userHandlers.get_user
    events:
      - http:
          path: getUser/{email}
          method: get
          private: true
          cors: true

  insertImage:
    handler: handlers/userHandlers.insert_image
    events:
      - http:
          path: insertImage/{email}
          method: put
          private: true
          cors: true
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello


custom:
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: false
      migrate: true
#    migration:
#      dir: offline/migrations

#  myStage: ${opt:stage, self:provider.stage}
  myStage: ${opt:stage}

  myEnvironment:
    DYNAMODB_REGION:
      prod: "us-east-2"
      dev: "us-east-2"
      local: "localhost"
    
    IS_OFFLINE:
      prod: false
      dev: false
      local: true


# Create your resources with separate CloudFormation templates
resources:
  - ${file(resources/users_table.yml)}


package:
  exclude:
#    - .dynamodb/**
#    - node_modules/**
#    - test/**
    - package-lock.json
    - README.md