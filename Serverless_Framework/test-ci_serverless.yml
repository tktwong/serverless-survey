service: new-service-${ssm:/inspo/databases/aurora/DatabaseName}
#deploy-testing2

plugins: 

  # - serverless-step-functions
  - serverless-pseudo-parameters
provider:
  name: aws
  runtime: nodejs8.10
  role: ${cf:inspo-backend-infrastructure-dev.LambdaRoleARN}
  logRetentionInDays: 14
  deploymentBucket:
    name: serverless-${self:provider.region}-bucket
  environment:
    # ACCOUNTS_DB_HOSTNAME: ${cf:${self:custom.infrastructureStackName}.DocumentDBendpoint}
    # ACCOUNTS_DB_PORT: ${cf:${self:custom.infrastructureStackName}.DocumentDBendpointPort}
    # ACCOUNTS_DB_USER: ${cf:${self:custom.infrastructureStackName}.DocsMasterUser}
    # ACCOUNTS_DB_PASSWORD: ${cf:${self:custom.infrastructureStackName}.DocsMasterPassword}
    # ACCOUNTS_DB_NAME: inspo-${self:provider.stage}
#    APP_SERVICE_GATEWAY: ${${ssm:/inspo/beanstalk/endpoint_url} ,opt:api-gateway, 'http://ma-backend-services-dev.3bnnmpqsj6.us-east-1.elasticbeanstalk.com'}
    APP_SERVICE_GATEWAY: ${opt:api-gateway, 'ssm:/inspo/dev/api/ma-backend-services/app_service_gateway'}
  # apiGateway:
    # restApiId: !Ref MyApiGW
    # restApiRootResourceId:
      # Fn::GetAtt:
        # - MyApiGW
        # - RootResourceId
 # #   restApiRootResourceId: n2owp883r1 # Root resource, represent as / path
    # description: Some Description # optional - description of deployment history


    # restApiId: vtmn150cgi # REST API resource ID. Default is generated by the framework
    # restApiRootResourceId: b9kd7pyq80 # Root resource, represent as / path
    # description: Some Description # optional - description of deployment history
functions:
  # hello22:
    # handler: handler.hello

    # events:
      # - http: get hello
  hello22:
    handler: handler.hello

    events:
      - sns: ${ssm:/inspo/test/sns/some-sns-topic}


custom:
  lambdaArnPrefix: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-

package:
  exclude: 
   - .circleci/**
   
# stepFunctions:
  # stateMachines:
    # TestAliasMachine:
      # name: ${self:service}StateMachine${self:provider.stage}
      # events:
        # - http:
            # path: hello
            # method: GET
      # definition:
        # StartAt: hello
        # States:
          # hello:
            # Type: Task

            # Resource: ${self:custom.lambdaArnPrefix}hello:blabla
            # End: True
# resources:
  # Resources:
    # # MyApiGW:
      # # Type: AWS::ApiGateway::RestApi
      # # Properties:
        # # Name: testapiname
    # # WriteDashPostLogGroup:
      # # Type: AWS::Logs::LogGroup     
    # Subscription:
      # Type: 'AWS::SNS::Subscription'
      # Properties:
        # # Endpoint: !Ref hello22
           # # Fn::GetAtt:
            # # - hello22
            # # - Arn
        # TopicArn: ${ssm:/inspo/test/sns/some-sns-topic}
        # Protocol: lambda

    # AuroraParamsDatabasePassword:
      # Type: "AWS::SSM::Parameter"
      # Properties:
        # Name: "/inspo/databases/aurora/DatabasePassword"
        # Type: "String"
        # Value: !Ref AuroraDatabasePassword

    # ServiceEndpoint:
      # Type: "AWS::SSM::Parameter"
      # Properties:
        # Name: "/inspo/ingestorapigateway
        # Type: "String"
        # Value:
          # Fn::Join:
            # - ""
            # -
              # - "https://"
              # -
                # Ref: "MyApiGW"
              # - ".execute-api.#{AWS::Region}."
              # -
                # Ref: "AWS::URLSuffix"
              # - "/${opt:stage}"
     
  # Outputs:
    # ServiceEndpoint:
      # Description: "URL of the service endpoint"
      # Value:
        # Fn::Join:
          # - ""
          # -
            # - "https://"
            # -
              # Ref: "MyApiGW"
            # - ".execute-api.#{AWS::Region}."
            # -
              # Ref: "AWS::URLSuffix"
            # - "/${opt:stage}"
      # Export:
        # Name: !Sub IngestorApiGateway-${self:provider.stage}