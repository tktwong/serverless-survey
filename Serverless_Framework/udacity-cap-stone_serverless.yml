service:
  name: capstone-jprentl

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  profile: serverless

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TABLE_ALBUMS: Albums-${self:provider.stage}
    TABLE_ALBUMS_SEC_INDEX: Albums-Sec-Idx-${self:provider.stage}
    TABLE_IMAGES: Images-${self:provider.stage}
    TABLE_IMAGES_GLOB_INDEX_ALBUSR: Images-Glob-Idx-AlbUsr-${self:provider.stage}
    TABLE_IMAGES_GLOB_INDEX_IMAGEID: Images-Glob-Idx-Img-${self:provider.stage}
    TABLE_IMAGES_GLOB_INDEX_ALBUMID: Images-Glob-Idx-Alb-${self:provider.stage}
    IMAGES_S3_BUCKET: ${self:service.name}-gallery-${self:provider.stage}
    IMAGES_S3_PATH: 'images/'
    THUMBNAIL_S3_PATH: 'thumbnails/'
    SIGNED_URL_EXPIRATION: 300
    JWKS_URI: 'https://udagram-jprentl-serverless.eu.auth0.com/.well-known/jwks.json'
    AUDIENCE: 'https://udagram-jprentl-serverless.eu.auth0.com/api/v2/'
    TOKEN_ISSUER: 'https://udagram-jprentl-serverless.eu.auth0.com/'



custom:
  topicName: imagesTopic-${self:provider.stage}

  documentation:
    api:
      info:
        version: v1.0.0
        title: Photo gallery API
        description: Serverless application for image storage
    models:
      - name: CreateAlbumRequest
        contentType: application/json
        schema: ${file(models/create-album-request.json)}

functions:

  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    events:
      - s3:
          bucket: !Ref ImagesBucket
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${self:provider.environment.IMAGES_S3_PATH}
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"


  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetAlbums:
    handler: src/lambda/http/getAlbums.handler
    events:
      - http:
          method: get
          path: album
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_ALBUMS}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_ALBUMS}/index/${self:provider.environment.TABLE_ALBUMS_SEC_INDEX}


  GetSingleAlbum:
    handler: src/lambda/http/getSingleAlbum.handler
    events:
      - http:
          method: get
          path: album/{albumId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_IMAGES}/index/${self:provider.environment.TABLE_IMAGES_GLOB_INDEX_ALBUSR}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_ALBUMS}



  CreateAlbum:
    handler: src/lambda/http/createAlbum.handler
    events:
      - http:
          method: put
          path: album
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create an album
            description: Create an album
            requestModels:
              'application/json': CreateAlbumRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_ALBUMS}


  DeleteAlbum:
    handler: src/lambda/http/deleteAlbum.handler
    events:
      - http:
          method: delete
          path: album/{albumId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_ALBUMS}
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_IMAGES}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_IMAGES}/index/${self:provider.environment.TABLE_IMAGES_GLOB_INDEX_ALBUSR}

  GenUploadUrl:
    handler: src/lambda/http/requestUploadUrlImage.handler
    events:
      - http:
          method: post
          path: /album/{albumId}/image
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_IMAGES}

  DeleteImage:
    handler: src/lambda/http/deleteImage.handler
    events:
      - http:
          method: delete
          path: /album/{albumId}/image/{imageId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_IMAGES}


resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AlbumTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: albumId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: albumId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_ALBUMS}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TABLE_ALBUMS_SEC_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL


    ImageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: imageId
            AttributeType: S
          - AttributeName: albumId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: imageId
            KeyType: HASH
          - AttributeName: albumId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_IMAGES}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TABLE_IMAGES_GLOB_INDEX_IMAGEID}
            KeySchema:
              - AttributeName: imageId
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: ${self:provider.environment.TABLE_IMAGES_GLOB_INDEX_ALBUMID}
            KeySchema:
              - AttributeName: albumId
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
          - IndexName: ${self:provider.environment.TABLE_IMAGES_GLOB_INDEX_ALBUSR}
            KeySchema:
              - AttributeName: albumId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL                


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:*'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket

