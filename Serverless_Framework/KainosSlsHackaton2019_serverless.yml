service: searchServerlessService

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: ${env:sls_stage}-hackaton
  environment:
    ALGOLIA_APP_ID: ${env:ALGOLIA_APP_ID}
    ALGOLIA_INDEX_NAME: kainos_LIBRARY

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb-autoscaling
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

functions:

  index:
    name: index-${self:provider.stage}
    handler: index.handler
    memorySize: 128
    environment:
      ALGOLIA_API_KEY: ${env:ALGOLIA_API_KEY}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:GetRecords"
          - "dynamodb:GetShardIterator"
          - "dynamodb:DescribeStream"
          - "dynamodb:ListStreams"
        Resource: arn:aws:dynamodb:*:*:table/${self:resources.Resources.ItemsStore.Properties.TableName}/stream/*
    tags:
      owner: ${self:provider.stage}
    events:
      - stream:
          type: dynamodb
          batchSize: 100
          arn:
            Fn::GetAtt:
              - ItemsStore
              - StreamArn

  search:
    name: search-${self:provider.stage}
    handler: searchAlgolia.handler
    memorySize: 256
    environment:
      STORE_DB_NAME: ${self:resources.Resources.ItemsStore.Properties.TableName}
      ALGOLIA_API_KEY: ${env:ALGOLIA_API_KEY}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:*:*:table/${self:resources.Resources.ItemsStore.Properties.TableName}
    tags:
      owner: ${self:provider.stage}
    events:
      - http:
          path: /search/{query}
          method: get
          integration: lambda
          reqValidatorName: searchrRequestValidator
          request:
            parameters:
              paths:
                query: true
            passThrough: NEVER
            template:
              application/json: '{ "query" : "$input.params(''query'')" }'

resources:  
  Resources:

    searchrRequestValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'searchrRequestValidator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true

    SearchLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "7"

    IndexLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "7"

    ItemsStore:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ItemsStore-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: objectID
            AttributeType: S
        KeySchema:
          - AttributeName: objectID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE

custom:
  capacities:
    - table: ItemsStore
      read:
        minimum: 1
        maximum: 20
        usage: 0.75
      write:
        minimum: 1
        maximum: 5
        usage: 0.75