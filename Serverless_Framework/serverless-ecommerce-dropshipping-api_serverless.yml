service: sed-api-register-product

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  timeout: 30
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  stackName: ${self:provider.stage}-${self:service.name}
  environment: ${file(env.yml):${self:provider.stage}}
  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:provider.stage}-sed-api-gateway-restApiId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:provider.stage}-sed-api-gateway-restApiRootResourceId

functions:
  vendorCreateProduct:
    handler: functions/product.vendorCreate
    events:
      - http:
          path: /products/vendor
          method: post
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  adminCreateProduct:
    handler: functions/product.adminCreate
    events:
      - http:
          path: /products/admin
          method: post
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  getProductPublished:
    handler: functions/product.getPublished
    events:
      - http:
          path: /products/{id}
          method: get
          cors: true
  getAllProductPublished:
    handler: functions/product.getAllPublished
    events:
      - http:
          path: /products
          method: get
          cors: true
  vendorGetProduct:
    handler: functions/product.vendorGet
    events:
      - http:
          path: /products/{id}/vendor
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  vendorGetAllProduct:
    handler: functions/product.vendorGetAll
    events:
      - http:
          path: /products/vendor
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  adminGetProduct:
    handler: functions/product.adminGet
    events:
      - http:
          path: /products/{id}/admin
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  adminGetAllProduct:
    handler: functions/product.adminGetAll
    events:
      - http:
          path: /products/admin
          method: get
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  vendorUpdateProduct:
    handler: functions/product.vendorUpdate
    events:
      - http:
          path: /products/{id}/vendor
          method: put
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  adminUpdateProduct:
    handler: functions/product.adminUpdate
    events:
      - http:
          path: /products/{id}/admin
          method: put
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  vendorDestroyProduct:
    handler: functions/product.vendorDestroy
    events:
      - http:
          path: /products/{id}/vendor
          method: delete
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
  adminDestroyProduct:
    handler: functions/product.adminDestroy
    events:
      - http:
          path: /products/{id}/admin
          method: delete
          cors: true
          authorizer:
            type: CUSTOM
            authorizerId:
              "Fn::ImportValue": ${self:provider.stage}-sed-authorization
