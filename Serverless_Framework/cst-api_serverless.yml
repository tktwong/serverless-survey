service: cst-api

provider:
  name: aws
  runtime: nodejs8.10

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::compression-space-transport/*" ] ]  }

functions:
  authorize:
    handler: auth.authorize

  genToken:
    timeout: 10
    handler: auth.genToken
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          path: users/{subject}/tokens
          method: post
          request:
            parameters:
              paths:
                subject: true
          

  getAllLeases:
    handler: leases.getAll
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: leases/all
          method: get

  getLatestLeases:
    handler: leases.getLatest
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: leases/latest
          method: get

  getOnlineLeases:
    handler: leases.getOnline
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: leases/online
          method: get

  getLeaseStatusForMac:
    handler: leases.getStatusForMac
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: leases/device/{mac}/status
          method: get
          request:
            parameters:
              paths:
                mac: true

  getInterfaceConfig:
    handler: ifconfig.getInterface
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: network/interfaces/{ifName}
          method: get
          request:
            parameters:
              paths:
                ifName: true

  setInterfaceConfig:
    handler: ifconfig.setInterface
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: network/interfaces/{ifName}
          method: post
          request:
            parameters:
              paths:
                ifName: true

  getNmap:
    handler: stats.getNmap
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: network/nmap
          method: get

  getSystemStats:
    handler: stats.getSystem
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: system/stats
          method: get

  getIptstate:
    handler: iptables.getIptstate
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: network/iptables/iptstate
          method: get

  getBlockedRequests:
    handler: iptables.getBlockedRequests
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: network/iptables/blocked
          method: get

  getIptablesRules:
    handler: iptables.getIptablesRules
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: network/iptables/rules
          method: get

  setIptablesRules:
    handler: iptables.setIptablesRules
    events:
      - http:
          response:
            body:
              Content-Type: "'application.json'"
          integration: lambda
          authorizer: authorize
          path: network/iptables/rules
          method: post
