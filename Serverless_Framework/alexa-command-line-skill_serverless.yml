service:
  name: command-line

provider:
  name: aws
  runtime: nodejs8.10
  stackName: ${self:service}-${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: serverless-terminator # The default profile to use with this service
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [ConnectionsDynamoDBTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConnectionsDynamoDBTable, Arn]
              - '*'
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [MachinesDynamoDBTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [MachinesDynamoDBTable, Arn]
              - '*'

  environment:
    CONNECTIONS_TABLE_NAME:
      Ref: ConnectionsDynamoDBTable
    MACHINES_TABLE_NAME:
      Ref: MachinesDynamoDBTable

  # optional
  websocketApiName: ${self:service}-${self:provider.stage}

  # required for websocket apis
  # this selects from your payload what your "routeKey" parameter is
  # from the websocket event types on your function
  websocketApiRouteSelectionExpression: $request.body.action


plugins:
  - serverless-alexa-skills
  - serverless-dotenv-plugin

functions:
  # manage connection and disconnection of clients
  onConnect:
    handler: src/onConnect.handler
    events:
      - websocket: $connect

  onDisconnect:
    handler: src/onDisconnect.handler
    events:
      - websocket: $disconnect

  onIntroduce:
    handler: src/onIntroduce.handler
    events:
      - websocket: introduce

  onPair:
    handler: src/onPair.handler
    events:
      - websocket: pair

  # TODO:
  # just in case we are getting weird / bad data
  # we can react to it with a sane response
  #defaultMessages:
  #  handler: src/handler.defaultMessage
  #  events:
  #    - websocket:
  #        route: $default
  #        routeKey: $default

  skill:
    handler: src/skill.handler
    events:
      - alexaSkill:
          appId: amzn1.ask.skill.d02583d1-3da3-4c52-b1c8-2bea58674ef2
          enabled: true

custom:
  alexa:
    skills:
      - id: amzn1.ask.skill.d02583d1-3da3-4c52-b1c8-2bea58674ef2
        manifest:
          publishingInformation:
            locales:
              en-US:
                name: command-line
          apis:
            custom:
              endpoint:
                uri: arn:aws:lambda:us-east-1:220130740175:function:command-line-dev-skill
          manifestVersion: '1.0'
        models:
          en-US:
            interactionModel:
              languageModel:
                invocationName: command line
                intents:
                - name: AMAZON.CancelIntent
                  samples: []
                - name: AMAZON.HelpIntent
                  samples: []
                - name: AMAZON.StopIntent
                  samples: []
                - name: AMAZON.YesIntent
                  samples: []
                - name: AMAZON.FallbackIntent
                  samples: []
                - name: RunCommand
                  slots:
                  - name: command
                    type: AMAZON.SearchQuery
                    samples:
                    - execute {command}
                    - exec {command}
                    - 'start {command} '
                    - run {command}
                    - "{command}"
                  - name: machine
                    type: AMAZON.SearchQuery
                    samples:
                    - choose {machine}
                    - on {machine}
                    - "{machine}"
                  samples:
                  - execute
                  - start
                  - exec
                  - run
                  - start command
                  - execute command
                  - exec command
                  - run command
                  - run {command}
                  - run command {command}
                  - exec {command}
                  - exec command {command}
                  - execute {command}
                  - execute command {command}
                  - start {command}
                  - start command {command}
                - name: CommandsList
                  slots: []
                  samples:
                  - list
                  - commands
                  - list commands
                  - list avaiable commands
                  - avaiable commands
                  - what commands are avaiable
                  - list of commands avaiable
                - name: AddMachine
                  slots: []
                  samples:
                  - add
                  - add machine
                  - pair
                  - pair machine
                  - assign
                  - assign machine
                  - connect
                  - connect machine
                  - pairing
                  - pairing token
                  - add command line machine
                - name: MachinesList
                  slots: []
                  samples:
                  - list machines
                  - machines
                  - list avaiable machines
                  - avaiable machines
                  - connected machines
                  - what command line machines are avaiable
                - name: AMAZON.NavigateHomeIntent
                  samples: []
                types: []
              dialog:
                intents:
                - name: RunCommand
                  delegationStrategy: SKILL_RESPONSE
                  confirmationRequired: true
                  prompts:
                    confirmation: Confirm.Intent.26118514792
                  slots:
                  - name: command
                    type: AMAZON.SearchQuery
                    confirmationRequired: false
                    elicitationRequired: true
                    prompts:
                      elicitation: Elicit.Slot.26118514792.779052801075
                  - name: machine
                    type: AMAZON.SearchQuery
                    confirmationRequired: false
                    elicitationRequired: true
                    prompts:
                      elicitation: Elicit.Slot.26118514792.841610722621
                delegationStrategy: ALWAYS
              prompts:
              - id: Confirm.Slot.1111395483187.583353785121
                variations:
                - type: PlainText
                  value: Do you want me to run the command on the {machineName} ?
              - id: Elicit.Slot.1111395483187.583353785121
                variations:
                - type: PlainText
                  value: Which machine do you want me to run the command on?
              - id: Confirm.Intent.26118514792
                variations:
                - type: PlainText
                  value: Do you confirm execution of {command} on {machine} ?
                - type: PlainText
                  value: Running {command} on {machine} . Is permission  granted?
                - type: PlainText
                  value: I'm going to run {command} on {machine} . Do you approve?
              - id: Elicit.Slot.26118514792.779052801075
                variations:
                - type: PlainText
                  value: What command do you want to execute?
              - id: Elicit.Slot.26118514792.841610722621
                variations:
                - type: PlainText
                  value: Which machine do you want to run the command on?
                - type: PlainText
                  value: Which machine do you choose?


resources:
  Resources:
    ConnectionsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${env:CONNECTIONS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: ConnectionId
            AttributeType: S
        KeySchema:
          - AttributeName: ConnectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        SSESpecification:
          SSEEnabled: true
    MachinesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${env:MACHINES_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: RecordId
            AttributeType: S
          - AttributeName: MachineId
            AttributeType: S
          - AttributeName: UserId
            AttributeType: S
        KeySchema:
          - AttributeName: RecordId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        SSESpecification:
          SSEEnabled: true
        GlobalSecondaryIndexes:
          - 
            IndexName: "Machine"
            KeySchema: 
              - 
                AttributeName: "MachineId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "5"
              WriteCapacityUnits: "5"
          - 
            IndexName: "User"
            KeySchema: 
              - 
                AttributeName: "UserId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput: 
              ReadCapacityUnits: "5"
              WriteCapacityUnits: "5"
