
service: kokusaibus-scraper

custom:
  defaultProfile: default
  webpack:
    webpackConfig: ./webpack.config.js
    # includeModules: true # Do not exclude any packages.
    includeModules:
      forceExclude:
        - aws-sdk
        - cheerio-httpcli # contains Lambda layer.

frameworkVersion: ">=1.4.0"

provider:
  name: aws
  profile: ${opt:profile, self:custom.defaultProfile}
  runtime: nodejs10.x
  stackName: 'kokusaibus-scraper'
  #apiName: 'kokusaibus-scraper'
  stage: prod
  region: ap-northeast-1
  memorySize: 192
  timeout: 10
  role: ${file(./serverless-env.yml):role}
  deploymentBucket:
    name: ${file(./serverless-env.yml):deploy-bucket}

plugins:
  - serverless-webpack

package:
  excludeDevDependencies: true
  # https://qiita.com/wara_be/items/f3ec38e5be6bdea7c79d
  # コレが大事
  # ref.: https://serverless.com/framework/docs/providers/aws/guide/packaging/#packaging-functions-separately
  individually: true
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  index:
    name: '${self:service}-index'
    handler: src/index.handler
    environment:
      TZ: Asia/Tokyo
      REGION: ap-northeast-1
      TABLE_NAME: ${file(./serverless-env.yml):dynamo-table-name}
    layers:
      - {Ref: LambdalayersLambdaLayer} # ${layerName}LambdaLayer
    events:
      - http:
          path: '/scraper/{proxy+}'
          method: GET
          cors: true
  scrape:
    name: '${self:service}'
    handler: src/scraper.handler
    environment:
      TZ: Asia/Tokyo
      REGION: ap-northeast-1
      DYNAMO_TABLE_NAME: ${file(./serverless-env.yml):dynamo-table-name}
      S3_BUCKET_NAME: ${file(./serverless-env.yml):scraper-bucket}
    # package:
    #   include: # Specify the directories and files which should be included in the deployment package for this specific function.
    #     # - src/**
    #     # - handler.js
    #  - ./src/index.js
    layers:
      - {Ref: LambdalayersLambdaLayer} # ${layerName}LambdaLayer
  cache:
    name: '${self:service}-cache'
    handler: src/cache.handler
    environment:
      # TZ: Asia/Tokyo
      SQS_URL: ${file(./serverless-env.yml):sqs-url}
      S3_REGION: ap-northeast-1
      S3_BUCKET_NAME: ${file(./serverless-env.yml):query-bucket}
      SCRAPER_BASE_URL: ${file(./serverless-env.yml):scraper-base-url}
  hook:
    name: '${self:service}-hook'
    handler: src/hook.handler
    environment:
      # TZ: Asia/Tokyo
      REGION: ap-northeast-1
      DYNAMO_TABLE_NAME: ${file(./serverless-env.yml):dynamo-table-name}
      SQS_URL: ${file(./serverless-env.yml):sqs-url}
    events:
      - schedule: cron(* * * * ? *) # every minutes
      # - cloudwatchLog:
      #     logGroup: '/aws/lambda/${self:service}'
    memorySize: 128
  query:
    name: '${self:service}-query'
    handler: src/query.handler
    environment:
      # TZ: Asia/Tokyo
      S3_REGION: ap-northeast-1
      S3_BUCKET_NAME: ${file(./serverless-env.yml):query-bucket}
    events:
      - http:
          path: '/query/{proxy+}'
          method: GET
          cors: true
    memorySize: 128

layers:
  lambdalayers:
    path: lambda-layers

resources:
  Resources:
    IndexLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 30
    ScrapeLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 30
    CacheLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 30
    HookLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 30
    QueryLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: 30
