service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation


# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  apiGateway:
    shouldStartNameWithService: true

  environment:
    TODOS_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    TODOS_DYNAMODB_USER_INDEX: UserIdIndex
    TODOS_ATTACHMENT_BUCKET: reimagined-todoless-${self:provider.stage}

  tracing:
    lambda: true
    apiGateway: true

custom:
  documentation:
    api:
      info:
        version: '0.1.0'
        title: Reimagined Todoless API
        description: This is the reimagined Todoless API
      tags:
        -
          name: Todoless
          description: Todo item management
    models:
      - name: CreateTodoRequest
        contentType: "application/json"
        description: "Create new todo item"
        schema:
          required:
            - name
            - dueDate
          properties:
            name:
              type: string
              minLength: 1
              maxLength: 100
              pattern: "^(?!\\s*$).+"
            dueDate:
              type: string
              format: "date"
      - name: UpdateTodoRequest
        contentType: "application/json"
        description: "Update existing todo item"
        schema:
          required:
            - name
            - dueDate
            - done
          properties:
            name:
              type: string
              minLength: 1
              maxLength: 100
              pattern: "^(?!\\s*$).+"
            dueDate:
              type: string
              format: "date"
            done:
              type: boolean

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/get/http.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
          cors: true
    iamRoleStatementsName: ${self:service.name}-get-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_DYNAMODB_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_DYNAMODB_TABLE}/index/${self:provider.environment.TODOS_DYNAMODB_USER_INDEX}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_ATTACHMENT_BUCKET}/*

  CreateTodo:
    handler: src/lambda/create/http.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          cors: true
          reqValidatorName: 'onlyBodyValidation'
          documentation:
            summary: "Create todo"
            description: "Create new todo item"
            tags:
              - Todoless
            requestModels:
              "application/json": CreateTodoRequest
    iamRoleStatementsName: ${self:service.name}-create-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_DYNAMODB_TABLE}

  UpdateTodo:
    handler: src/lambda/update/http.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          authorizer: Auth
          cors: true
          reqValidatorName: 'onlyBodyValidation'
          documentation:
            summary: "Update todo"
            description: "Update existing todo item"
            tags:
              - Todoless
            requestModels:
              "application/json": UpdateTodoRequest
    iamRoleStatementsName: ${self:service.name}-update-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_DYNAMODB_TABLE}

  DeleteTodo:
    handler: src/lambda/delete/http.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          authorizer: Auth
          cors: true
    iamRoleStatementsName: ${self:service.name}-delete-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_DYNAMODB_TABLE}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_ATTACHMENT_BUCKET}/*

  GenerateUploadUrl:
    handler: src/lambda/attachmentUpload/http.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatementsName: ${self:service.name}-generate-upload-url-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODOS_DYNAMODB_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_ATTACHMENT_BUCKET}/*


resources:
  Resources:
    TodosTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "todoId"
            AttributeType: "S"
          - AttributeName: "userId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "userId"
            KeyType: "HASH"
          - AttributeName: "todoId"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TODOS_DYNAMODB_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_DYNAMODB_USER_INDEX}
            KeySchema:
              - AttributeName: "userId"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

    TodoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_ATTACHMENT_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "Authorization"
              AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - "*"

    onlyBodyValidation:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-body-validation'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false