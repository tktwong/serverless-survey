service: serverless-notes

custom:
  tableName: MainTable
  tableThroughput: 1
  stage: dev
  
plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: python3.7
  region: eu-west-1
  environment: 
    dynamoTableName: ${self:custom.tableName}

  # Como esta dentro de provider -> le da este role a todas las funciones que definamos en la app
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        # Sobre el recurso que actua es decir la tabla
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/${self:custom.tableName}
       
functions:
  create:
    handler: routes/create.create
    events:
      - http:
          path: note
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: routes/get.get
    events:
      - http:
          path: note/{id}
          method: get
          cors: true
          authorizer: aws_iam
  delete:
    handler: routes/delete.delete
    events:
      - http:
          path: note/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  update:
    handler: routes/update.update
    events:
      - http:
          path: note/{id}
          method: put
          cors: true
          authorizer: aws_iam
  list:
    handler: routes/list.list
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam


# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-mainTable.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
