# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: rf-ui-api

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-2
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::recipefinder-uploads/*"

package:
  include:
   - src/**
  exclude:
   - ./**

functions:
  upload:
    handler: src/handler.upload
    events:
    - http:
        path: recipes/upload
        method: get
        cors: true
        authorizer:
            arn: ${self:custom.cognitoUserPoolArn}
    environment:
        UPLOAD_BUCKET: recipefinder-uploads
    

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: recipefinder-uploads-${self:provider.stage}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"

plugins:
  - serverless-domain-manager

custom:
  cognitoUserPoolArn: ${ssm:/rf/globals/cognito_user_pool_arn}
  certificateArn: ${ssm:/rf/globals/certificate_arn}
  customDomain:
    domainName: ${file(./config.${self:provider.stage}.yml):domainName}
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: "*.recipefinder.io"
    certificateArn: ${self:custom.certificateArn}
    endpointType: regional
    hostedZoneId: recipefinder.io.