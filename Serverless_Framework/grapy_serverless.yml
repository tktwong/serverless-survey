# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: grapy

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
package:
  exclude:
    - ./**
  include:
    - grapy/**

#custom: ${file(algoliasearch.yml)}

provider:
  name: aws
  runtime: python3.8
  timeout: 10 # optional, in seconds, default is 6
  region: eu-west-1
  stage: dev
  apiKeys:
    - ${self:service}-${opt:stage, self:provider.stage}-apiKey
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    ALGOLIA_APP_ID: ${env:ALGOLIA_APP_ID}
    ALGOLIA_API_KEY: ${env:ALGOLIA_API_KEY}
    ALGOLIA_INDEX: ${env:ALGOLIA_INDEX}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeTable
        - dynamodb:BatchWriteItem
      Resource:
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*'

functions:
  listTable:
    handler: grapy/lambdas.list_all # lists all entities on demand
    events:
      - http:
          path: /all/{table}
          method: get
          private: true
          cors: true
  addVendorWine:
    handler: grapy/lambdas.add_vendor_wine # lists all entities on demand
    events:
      - http:
          path: /vendorwines
          method: put
          private: true
          cors: true
  vivinofy:
    handler: grapy/lambdas.vivinofy  # scheduled every 15 minutes
    events:
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-search-schedule
          rate: rate(15 minutes)
          enabled: false # disabled by default
  updateEntities:
    handler: grapy/lambdas.update_all  # should be invoked once a month to update country, region, type, style, grape
    events:
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-update-schedule
          rate: rate(30 days)
          enabled: false # disabled by default

resources:
  Resources:
    GrapyDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: data
            AttributeType: S
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: gsi_1
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: data
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST