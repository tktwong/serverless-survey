service: kette

custom:
  apiKeysTableName: 'apiKeys-table-${self:provider.stage}'
  userIdIndex : 'apiKeys-table-userId-index-${self:provider.stage}'
  usersTableName: 'users-table-${self:provider.stage}'

  encryptionKeyId : ${env:ENCRYPTION_KEYID_${self:provider.stage}} 
  usagePlanId : ${env:USAGEPLANID_${self:provider.stage}} 
  
  dynamodb:
    start:
      migrate: true

package:
  exclude:
    - _end2endTests/**
    - _templates/**
    - resources/**
    - .dynamodb/**
    - API-Documentation.MD
    - LICENSE
    - README.MD

provider:
  name: aws
  apiKeys:	
    - ${self:provider.stage}-forTests
  usagePlan:	
    quota:	
      limit: 50000	
      offset: 0	
      period: MONTH	
    throttle:	
      burstLimit: 200	
      rateLimit: 100
  runtime: nodejs8.10
  region: eu-central-1
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:eu-central-1:*:*"
    - Effect: Allow
      Action: 'apigateway:POST'
      Resource:
        - "arn:aws:apigateway:eu-central-1::/*"
    - Effect: Allow
      Action: 
        - 'kms:Encrypt'
        - 'kms:Decrypt'
      Resource:
        - "arn:aws:kms:eu-central-1:*:key/${self:provider.environment.ENCRYPTION_KEYID}"
  environment:
    APIKEYS_TABLE: ${self:custom.apiKeysTableName}
    APIKEYS_TABLE_USERID_INDEX : ${self:custom.userIdIndex}
    USERS_TABLE: ${self:custom.usersTableName}

    STAGE: ${self:provider.stage}
    
    ENCRYPTION_KEYID: ${self:custom.encryptionKeyId}
    USAGEPLAN_ID: ${self:custom.usagePlanId}
    
plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin
functions:
  check:
    handler: handlerCheck.check
    events:
      - http:
              method: get
              path: check
              cors: true
  getBike:
    handler: handlerGetBike.getBike
    events:
      - http:
              method: get
              path: bikes
              cors: true
  getBikes:
    handler: handlerGetBikes.getBikes
    events:
      - http:
              method: get
              path: bikes/{ethAddress}
              cors: true
  createBike:
    handler: handlerCreateBike.createBike
    events:
      - http:
              method: post
              path: bikes
              cors: true
  getPrice:
    handler: handlerGetPrice.getPrice
    events:
      - http:
              method: get
              path: price
              cors: true
  authCreateApiKey:
    handler: handlerAuthCreateApiKey.createApiKey
    events:
      - http:
              method: post
              path: auth/apiKeys
              cors: true
              authorizer: aws_iam
  authGetApiKeys:
    handler: handlerAuthGetApiKeys.getApiKeys
    events:
      - http:
              method: get
              path: auth/apiKeys
              cors: true
              authorizer: aws_iam
  authCreateBike:
    handler: handlerAuthCreateBike.createBike
    events:
      - http:
              method: post
              path: auth/bikes
              cors: true
              private : true
  authGetBike:
    handler: handlerAuthGetBikes.getBikes
    events:
      - http:
              method: get
              path: auth/bikes/{id}
              cors: true
              private : true
resources:
  - ${file(resources/tables.yml)}
  - ${file(resources/b2b-user-pool.yml)}
  - ${file(resources/b2b-identity-pool.yml)}
