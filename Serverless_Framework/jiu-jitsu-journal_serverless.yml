service: jjj-api

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    USER_TABLE: "${self:provider.stage}-users-${self:service}"
    ACTIVITIES_TABLE: "${self:provider.stage}-activities-${self:service}"
    INSTRUCTOR_TABLE: "${self:provider.stage}-instructor-${self:service}"
    ACADEMY_TABLE: "${self:provider.stage}-academy-${self:service}"
    TECHNIQUE_TABLE: "${self:provider.stage}-technique-${self:service}"
    ALGOLIA_ACADEMY_INDEX: "${self:provider.stage}_academies"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

functions:
  query:
    handler: handler.query
    events:
      - http:
          path: query
          method: post
          cors: true
  image-upload:
    handler: handler.imageUpload
    events:
      - http:
          path: image-upload
          method: post
          cors: true
  graphiql:
    handler: handler.graphiql
    events:
      - http: GET /
        cors: true
resources:
  Resources:
    ActivitiesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: activity_date
            AttributeType: N
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: activity_date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:provider.environment.ACTIVITIES_TABLE}"
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: academy_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: academy_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:provider.environment.USER_TABLE}"
    InstructorTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: first_name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: first_name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:provider.environment.INSTRUCTOR_TABLE}"
    AcademyTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:provider.environment.ACADEMY_TABLE}"
    TechniqueTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:provider.environment.TECHNIQUE_TABLE}"
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
custom:
  webpackIncludeModules: true # enable auto-packing of external modules
  dynamodb:
    start:
      port: 3333
      inMemory: true
      migrate: true
      # Uncomment only if you already have a DynamoDB running locally
      #noStart: true
  serverless-offline:
    port: 3001
