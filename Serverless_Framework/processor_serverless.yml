
service: phos

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"

custom:
  bucket: eos-${self:service}-${self:provider.stage}


# you can add packaging information here
package:
 include:
   - encrypt/**
   # - include-me.py
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:

  reencrypt_on_s3_upload:
    handler: encrypt/on_s3_upload.main
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .jpg

  reencrypt_on_http_request:
    handler: encrypt/on_http.main
    events:
       - http:
           path: reencrypt
           method: get
    environment:
      BUCKET: ${self:custom.bucket}


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: ${self:environment.S3_BUCKET}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
