
service: ${file(config.yml):service}

provider:
  name: aws
  region: ${file(config.yml):region}
  runtime: go1.x
  stage: ${file(config.yml):stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: '*'
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource: '*'
  memorySize: 128
  versionFunctions: false
  environment:
      SERVICETABLENAME: ${self:custom.serviceTableName}
      VERSIONTABLENAME: ${self:custom.versionTableName}
      LAMBDACACHE : true # NOTE! true is String => 'true'
      SWAGGER_BUCKET_NAME: swagger-repository-test
      # AUTHORIZER_CONFIG: |
      #   whitelist_ip:
      #     - 222.229.48.80
  



plugins:
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-go-build

frameworkVersion: ">=1.28.0 <2.0.0"


custom:
  serviceTableName: ${self:service}-${self:provider.stage}-swagger-dynamo-serviceinfo
  versionTableName: ${self:service}-${self:provider.stage}-swagger-dynamo-versioninfo
  documentation: ${file(serverless-documentation.yml):custom.documentation}


  authorizer:
    name: authorizerFuncNodejs
    resultTtlInSeconds: 0 #1800
    identitySource: context.identity.sourceIp #,method.request.header.Authorization
    type: request


  serverless-offline:
    port: 3027

  dynamodb:
    start:
      port: 8027
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: ${self:provider.environment.SERVICETABLENAME}
            sources:
              - ./db/serviceinfo.local.json
          - table: ${self:provider.environment.VERSIONTABLENAME}
            sources:
              - ./db/versioninfo.local.json

package:
  individually: true

functions:

  getService:
    handler: src/getService/main.go
    events:
      - http:
          path: services/{id}
          method: get
          cors: true
          reqValidatorName: onlyParameter
          request:
            parameters:
              paths:
                id: true
          authorizer: ${self:custom.authorizer}

          documentation:
            summary: "get swagger info"
            description: "get swagger info"
            tags:
              - Swagger
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "OK"
                responseModels:
                  "application/json": ServiceEntity
              -
                statusCode: "400"
                responseModels:
                  "application/json": ErrorResponse


  getServiceList:
    handler: src/getServiceList/main.go
    events:
      - http:
          path: services
          method: get
          cors: true
          authorizer: ${self:custom.authorizer}
          documentation:
            summary: "get swagger info"
            description: "get swagger info"
            tags:
              - Swagger
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "OK"
                responseModels:
                  "application/json": ServiceEntityListResponse
              -
                statusCode: "400"
                responseModels:
                  "application/json": ErrorResponse
            
  # deleteService:
  #   handler: src/deleteService/main.go
  #   events:
  #     - http:
  #         path: services/{id}
  #         method: delete
  #         cors: true
  #         request:
  #           parameters:
  #             paths:
  #               id: true

  createService:
    handler: src/createService/main.go
    events:
      - http:
          path: services
          method: post
          cors: true
          authorizer: ${self:custom.authorizer}
          reqValidatorName: onlyBody
          documentation:
            summary: "create swagger"
            description: "Registers new swagger"
            tags:
              - Swagger
            requestModels:
              "application/json": ServiceEntityRequest
            methodResponses:
              -
                statusCode: "201"
                responseBody:
                  description: "Create"
                responseModels:
                  "application/json": ServiceEntity
              -
                statusCode: "400"
                responseModels:
                  "application/json": ErrorResponse
            

  updateService:
    handler: src/updateService/main.go
    events:
      - http:
          path: services/{id}
          method: patch
          cors: true
          authorizer: ${self:custom.authorizer}
          request:
            parameters:
              paths:
                id: true
          reqValidatorName: onlyBody
          documentation:
            summary: "update swagger"
            description: "Update swagger"
            tags:
              - Swagger
            requestModels:
              "application/json": UpdateServiceEntityRequest
            methodResponses:
              -
                statusCode: "204"
                responseBody:
                  description: "NO CONTENT"
              -
                statusCode: "400"
                responseModels:
                  "application/json": ErrorResponse

  getAllVersions:
    handler: src/getAllVersions/main.go
    events:
      - http:
          path: versions/{id}
          method: get
          cors: true
          authorizer: ${self:custom.authorizer}
          reqValidatorName: onlyParameter
          request:
            parameters:
              paths:
                id: true
          documentation:
            summary: "Update Version Record"
            description: "Update Service Record"
            tags:
              - Version
            requestModels:
              "application/json": UpdateVersionEntityRequest
            methodResponses:
              -
                statusCode: '200'
                responseBody:
                  description: OK
                responseModels:
                  "application/json": VersionEntityListResponse
              -
                statusCode: '400'
                responseModels:
                  "application/json": ErrorResponse
              
  updateVersions:
    handler: src/updateVersion/main.go
    events:
      - http:
          path: versions/{id}/versions/{version}
          method: patch
          cors: true
          authorizer: ${self:custom.authorizer}
          reqValidatorName: BodyParameter
          request:
            parameters:
              paths:
                id: true
                version: true

          documentation:
            summary: "Update Version Record"
            description: "Update Service Record"
            tags:
              - Version
            requestModels:
              "application/json": UpdateVersionEntityRequest
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "OK"
                responseModels:
                  "application/json": VersionEntity
              -
                statusCode: "400"
                responseModels:
                  "application/json": ErrorResponse

  uploadSwagger:
    handler: src/uploadVersion/main.go
    events:
      - http:
          path: versions/{id}
          method: put
          cors: true
          authorizer: ${self:custom.authorizer}
          reqValidatorName: BodyParameter
          request:
            parameters:
              paths:
                id: true
          documentation:
            summary: "Upload Swagger Record"
            description: "Upload Swagger Record"
            tags:
              - Version
            requestModels:
              "application/json": UploadVersionEntityRequest
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "OK"
                responseModels:
                  "application/json": VersionEntity
              -
                statusCode: "400"
                responseModels:
                  "application/json": ErrorResponse
  # authorizerFunc:
  #   handler: src/Authorizer/main.go

  authorizerFuncNodejs:
    handler: src/Authorizer/authorizer.handler
    runtime: nodejs8.10
    package:
      exclude:
        - ./**
        - '!src/Authorizer/node_modules/**'
      include:
        - src/Authorizer/authorizer.js
        - src/Authorizer/config.yaml

resources:
  Resources:
    onlyBody:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-body'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    onlyParameter:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-parameter'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: false
        ValidateRequestParameters: true

    BodyParameter:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'body-and-parameter'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true


    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "method.request.header.origin"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseACCESSDENIED:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "method.request.header.origin"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: ACCESS_DENIED
        ResponseTemplates:
          'application/json': |
            {"error": $context.authorizer.authorizeError,"message":$context.error.messageString}
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "method.request.header.origin"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'


    ServiceInfoDynamoDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.serviceTableName}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    VersionInfoDynamoDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.versionTableName}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: version
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
          -
            AttributeName: version
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1