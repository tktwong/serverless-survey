service: rsvp
frameworkVersion: '>=1.1.0 <2.0.0'
provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: '*'
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource:
        - Fn::GetAtt:
            - GuestsDynamoDbTable
            - Arn
        - Fn::Sub: '#{GuestsDynamoDbTable.Arn}/index/*'
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource:
        - Fn::GetAtt:
            - ResponsesDynamoDbTable
            - Arn
        - Fn::Sub: '#{ResponsesDynamoDbTable.Arn}/index/*'
  environment:
    GUESTS_TABLE: '${self:service}-guests-${opt:stage, self:provider.stage}'
    RESPONSES_TABLE: '${self:service}-responses-${opt:stage, self:provider.stage}'
functions:
  submitGuest:
    handler: handler_guest.submitGuest
    description: Submits guest info
    events:
      - http:
          path: guests
          method: post
          cors: true
    environment:
      TABLE_NAME:
        Ref: GuestsDynamoDbTable
      TABLE_ARN:
        Fn::GetAtt:
          - GuestsDynamoDbTable
          - Arn
  listGuests:
    handler: handler_guest.listGuests
    description: Lists all guests
    events:
      - http:
          path: guests
          method: get
          cors: true
    environment:
      TABLE_NAME:
        Ref: GuestsDynamoDbTable
      TABLE_ARN:
        Fn::GetAtt:
          - GuestsDynamoDbTable
          - Arn
  submitResponse:
    handler: handler_response.submitResponse
    description: Submits response
    events:
      - http:
          path: responses/accept
          method: post
          cors: true
      - http:
          path: responses/decline
          method: post
          cors: true
    environment:
      TABLE_NAME:
        Ref: ResponsesDynamoDbTable
      TABLE_ARN:
        Fn::GetAtt:
          - ResponsesDynamoDbTable
          - Arn
  listResponses:
    handler: handler_response.listResponses
    description: Lists all responses
    events:
      - http:
          path: responses
          method: get
          cors: true
    environment:
      TABLE_NAME:
        Ref: ResponsesDynamoDbTable
      TABLE_ARN:
        Fn::GetAtt:
          - ResponsesDynamoDbTable
          - Arn
resources:
  Resources:
    GuestsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GUESTS_TABLE}
    ResponsesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RESPONSES_TABLE}
plugins:
  - serverless-cf-vars