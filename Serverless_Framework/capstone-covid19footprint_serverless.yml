service:
  name: cv19footprint-backend

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  environment:
    HISTORY_TABLE: vphist0-${self:provider.stage}
    HISTORY_IDX_NAME: vphist0-scnd-idx-${self:provider.stage}
    IMAGES_S3_BUCKET: vphist0-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

#  iamRoleStatements:
#    - Effect: Allow
#      Action:
#        - dynamodb:PutItem
#        - dynamodb:Query
#        - dynamodb:DeleteItem
#        - dynamodb:UpdateItem
#      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}
#    - Effect: Allow
#      Action:
#        - dynamodb:Query
#      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}/index/${self:provider.environment.HISTORY_IDX_NAME}
#    - Effect: Allow
#      Action:
#        - s3:PutObject
#        - s3:GetObject
#      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram VPHist API
        description: Serverless application for VPHist
    models:
      - name: CreateVPHistRequest
        contentType: application/json
        schema: ${file(src/requests/create-vp-hist-request.json)}
      - name: UpdateVPHistRequest
        contentType: application/json
        schema: ${file(src/requests/update-vp-hist-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetVPHist:
    handler: src/lambda/http/getVPHist.handler
    events:
      - http:
          method: get
          authorizer: Auth
          path: vphist
          cors: true
    iamRoleStatementsName: get-vphist-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}/index/${self:provider.environment.HISTORY_IDX_NAME}

  # TODO: Configure this function
  CreateVPHist:
    handler: src/lambda/http/createVPHist.handler
    events:
      - http:
          method: post
          path: vphist
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new VPHist
            description: Create a new VPHist
            requestModels:
              'application/json': CreateVPHistRequest
    iamRoleStatementsName: create-vphist-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}

  # TODO: Configure this function
  UpdateVPHist:
    handler: src/lambda/http/updateVPHist.handler
    events:
      - http:
          method: patch
          path: vphist/{historyId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update VPHist
            description: Update VPHist
            requestModels:
              'application/json': UpdateVPHistRequest
    iamRoleStatementsName: update-vphist-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}

  # TODO: Configure this function
  DeleteVPHist:
    handler: src/lambda/http/deleteVPHist.handler
    events:
      - http:
          method: delete
          path: vphist/{historyId}
          authorizer: Auth
          cors: true
    iamRoleStatementsName: delete-vphist-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: vphist/{historyId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatementsName: gen-upload-file-role
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,Access-Control-Allow-Origin,Access-Control-Allow-Credentials,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Request-Headers: "'Content-Type,Authorization,Access-Control-Allow-Origin,Access-Control-Allow-Credentials,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PATCH,DELETE,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,Access-Control-Allow-Origin,Access-Control-Allow-Credentials,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Request-Headers: "'Content-Type,Authorization,Access-Control-Allow-Origin,Access-Control-Allow-Credentials,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PATCH,DELETE,OPTIONS'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi

    VPHistTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: historyId
            AttributeType: S
        KeySchema:
          - AttributeName: historyId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.HISTORY_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.HISTORY_IDX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false