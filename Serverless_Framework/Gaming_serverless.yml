# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: Gaming # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-2
  memorySize: 128
  timeout: 10
  logRetentionDays: 1

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - "arn:aws:dynamodb:eu-west-2:387856001214:table/GamingSession"
        - "arn:aws:dynamodb:eu-west-2:387856001214:table/Audit"
        - "arn:aws:dynamodb:eu-west-2:387856001214:table/GamingTransaction"
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  individually: true
  exclude:
    - node_modules/**

functions:
  GetAccount:
    handler: Texas/handler.getaccount
    events:
      - http:
         path: Texas
         method: post
  Gaming:
    handler: Gaming/handler.handler
    exclude:
      - NYX/**
    events:
      - http:
         path: Gaming
         method: post
  NYX:
    handler: NYX/handler.handler
    exclude:
      - Gaming/**
    events:
      - http:
         path: NYX
         method: get
         integration: lambda
         request:
           template:
             application/json: ${file(NYXgetaccountrequesttemplate.txt)}
         response:
           headers:
              Content-Type: "'text/xml'"
           template: ${file(NYXgetaccountresponsetemplate.txt)}
  Audit:
    handler: Audit/handler.handler
    exclude:
      - Gaming/**
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - GamingSession
              - StreamArn
          batchSize: 10

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    GamingSession:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: SessionToken #Temporary or permamemt token value
            AttributeType: S
        KeySchema:
          - AttributeName: SessionToken # Token is unique
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
        TableName: GamingSession
        #SSESpecification:
        #  SSEEnabled: true
        StreamSpecification:
            StreamViewType: OLD_IMAGE
    GamingTransactions:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: GamingTransactionID #Temporary or permamemt token value
            AttributeType: S
        KeySchema:
          - AttributeName: GamingTransactionID # Token is unique
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
        TableName: GamingTransaction
    Audit:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: AuditId #Temporary or permamemt token value
            AttributeType: S
        KeySchema:
          - AttributeName: AuditId # Token is unique
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
        TableName: Audit
    Account:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: AccountID #Temporary or permamemt token value
            AttributeType: S
        KeySchema:
          - AttributeName: AccountID # Token is unique
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
        TableName: Account
    Customer:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: CustomerID #Temporary or permamemt token value
            AttributeType: S
        KeySchema:
          - AttributeName: CustomerID # Token is unique
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
        TableName: Customer
        #SSESpecification:
        #  SSEEnabled: true


#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
