service: uop-tc-fileapi
custom:
  fileUploadBucket: uop-tc-filestorage
  allowedHeaders: 
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name
provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: dev
  memory: 128
  timeout: 5
  endpointType: regional
  environment:
    fileUploadBucket: ${self:custom.fileUploadBucket}
    
# opt:stage option stage from command line or self:provider.stage
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: '*'
functions:
  health:
    handler: api/health.handler
    description: Health
    events: 
      - http:
          path: health
          method: GET
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  fileUpload:
    handler: api/fileUpload.handler
    description: FileUploadApi
    events: 
      - http:
          path: fileUpload
          method: POST
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  addDb:
    handler: api/addDb.handler
    description: FileUploadApi
    events: 
      - http:
          path: addDb
          method: POST
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  getS3docs:
    handler: api/getS3docs.handler
    description: getS3docs
    events: 
      - http:
          path: getS3docs
          method: GET
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
resources:
  Resources:
    FileUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileUploadBucket}
        AccessControl: PublicRead
# Creating DynamoDB Table