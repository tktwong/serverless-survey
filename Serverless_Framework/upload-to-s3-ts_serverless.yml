service: uploadtos3ts

frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: 'arn:aws:s3:::${env:BUCKET_NAME}/*'
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    BUCKET_NAME: ${env:BUCKET_NAME}
    DB_HOSTNAME:
      Fn::GetAtt:
        - DBInstance
        - Endpoint.Address
    DB_PORT:
      Fn::GetAtt:
        - DBInstance
        - Endpoint.Port
    DB_NAME: '${self:service}_${self:provider.stage}_db'
    DB_USERNAME: 'userpost'
    DB_PASSWORD: '1234567890'
    COGNITO_USER_POOL_ID:
      Ref: UserPool
    COGNITO_CLIENT_ID: 
      Ref: UserPoolClient

functions:
  signup:
    handler: src/signup.handler
    events:
      - http:
          path: signup
          method: post
  signin:
    handler: src/signin.handler
    events:
      - http:
          path: signin
          method: post
  getPresignedPostData:
    handler: src/getPresignedPostData.handler
    events:
      - http:
          path: getPresignedPostData/{fileName}
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getAllImages:
    handler: src/images/getAllImages.handler
    events:
      - http:
          path: 'images/getAll'
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  postImage:
    handler: src/images/postImage.handler
    events:
      - http:
          path: 'images/post'
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  deleteImage:
    handler: src/images/deleteImage.handler
    events:
      - http:
          path: 'images/delete'
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getUsersImages:
    handler: src/images/getUsersImages.handler
    events:
      - http:
          path: 'images/getUsersImages'
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  getAllUsers:
    handler: src/users/getUsers.handler
    events:
      - http:
          path: 'users/getAll'
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer   

resources:
  - ${file(resources/cognito.yml)}
  - ${file(resources/rds.yml)}