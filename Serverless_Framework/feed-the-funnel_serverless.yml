# NOTE: Service name must match the repository name, but replace all '.' with '-' (this is a restriction of Cloudformation naming conventions)
service: feed-the-funnel

plugins:
  - serverless-offline

custom:
  securityHash: ${file(./securityhash.txt)}
  appHash: ${file(./apphash.txt)}

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, env:STAGE}
  environment:
    ACTIVITIES_TABLE: { Ref: ActivitiesTable }
  # NOTE: Codebuild passes the lambda role from the security stack to the serverless deploy command in the live CI/CD pipeline
  role: ${file(./rolearn.txt)}
  region: ${env:AWS_REGION}
  stackTags:
    Type: service

# NOTE: You can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:

  postMessage:
    environment:
      SLACK_APP_AUTH_TOKEN: ${opt:clientSecret}
      VERIFICATION_TOKEN: ${opt:slackToken}
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
    handler: postMessage.handler
    events:
      - http:
          path: activities
          method: post
          cors: true

  getData:
    environment:
      SLACK_BOT_AUTH_TOKEN: ${opt:botToken}
      VERIFICATION_TOKEN: ${opt:slackToken}
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
    handler: getData.handler
    events:
      - http:
          path: activityData
          method: post
          cors: true

  hello:
    environment:
      SECRETS_BUCKET: ${file(./s3.txt)}
      SECURITY_COMMIT_HASH: ${self:custom.securityHash}
      APP_COMMIT_HASH: ${self:custom.appHash}
    handler: index.hello
    events:
      - http:
          path: hello/world
          method: get

#    EXAMPLE: API Gateway Protocol=http, Path=users/create, Method=get
#    events:
#      - http:
#          path: users/create
#          method: get

#    EXAMPLE: Lambda Function environment variables
#    environment:
#      variable2: value2

# TODO: If needed, add additional Lambda Function definitions here
# EXAMPLE: a more complete Lambda Function definitions
# getDynamoDBCloudwatchMetrics:
#   handler: get-dynamodb-cloudwatch-metrics/index.handler
#   events:
#     - schedule: rate(1 hour)
#   package:
#     include:
#       - get-dynamodb-cloudwatch-metrics/**
#   environment:
#     CURRENT_TABLES_TABLE:
#       Ref: CurrentTablesTable

resources:
  Resources:

#    TODO: If needed, add CloudFormation resources
#    EXAMPLE: S3 Bucket 
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket

    ActivitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: '${env:PIPELINE}.${env:STAGE}'
        AttributeDefinitions:
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: userName
            AttributeType: S
        KeySchema:
          - AttributeName: timestamp
            KeyType: HASH
          - AttributeName: userName
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#    TODO: The DynamoTable definition below follows the naming conventions for data access that the security stack expects
#    DynamoTable:
#      Type: 'AWS::DynamoDB::Table'
#      Properties:
#        AttributeDefinitions:
#          -
#            AttributeName: id
#            AttributeType: S
#        KeySchema:
#          -
#            AttributeName: id
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        #Security stack must grant access to this TableName as named below (service.stage)
#        TableName: '${env:PIPELINE}.${env:STAGE}'

  Outputs:

#     TODO: If needed, add Cloudformation Outputs
#     EXAMPLE: Cloudformation Output
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

