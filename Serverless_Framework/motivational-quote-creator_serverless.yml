service:
  name: serverless-quote-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs12.x
  
  # Enable X-Ray and iamRoleStatements for X-Ray
  tracing: 
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    QUOTES_TABLE: exampleDB
    QUOTES_BUCKET: motivationalquotesforeachandeverybucket
    INDEX_NAME: quotesToday
    URL_EXPIRATION_TIME: 300
    AUTH_0_SECRET: process.env.AUTH_0_SECRET

# TODO: Configure custom item with documentation and request validator models
custom: ${file(./custom.json)}
  


functions:

  Auth:
    name: "auth"
    handler: src/lambda/auth/auth0Authorizer.handler

  GetQuotes:
    name: "getquotes"
    handler: src/lambda/http/businessLayer/getQuotes.handler
    events:
      - http:
          method: get
          path: quotes
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
          - xray:PutTraceSegments
        Resource:
          - "*"

  CreateQuote:
    name: "createquote"
    handler: src/lambda/http/businessLayer/createQuote.handler
    events:
      - http:
          method: post
          path: quotes
          cors: true
          authorizer: Auth
          # TODO: Configure documentation, reqValidatorName, and methodResponses
          documentation:
            summary: "Validate requests"
            description: "validates all request bodies for field and type"
            requestModels:
              "applicaton/json": ${self:custom.documentation.models.CreateQuoteRequests}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - xray:PutTraceSegments
        Resource:
          - "*"
  
  UpdateQuote:
    name: "updatequote"
    handler: src/lambda/http/businessLayer/updateQuote.handler
    events:
      - http:
          method: patch
          path: quotes/{quoteId}
          cors: true
          authorizer: Auth
          # TODO: Configure documentation, reqValidatorName, and methodResponses
          documentation:
            summary: "Validate requests"
            description: "validates all request bodies for field and type"
            requestModels:
              "applicaton/json": ${self:custom.documentation.models.UpdateQuoteRequests}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - xray:PutTraceSegments
        Resource:
          - "*"

  DeleteQuote:
    name: "deletequote"
    handler: src/lambda/http/businessLayer/deleteQuote.handler
    events:
      - http:
          method: delete
          path: quotes/{quoteId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - xray:PutTraceSegments
        Resource:
          - "*"

  GenerateUploadUrl:
    name: "generateurl"
    handler: src/lambda/http/businessLayer/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: quotes/{quoteId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:PutObject
          - s3:GetObject
          - dynamodb:UpdateItem
          - xray:PutTraceSegments
        Resource:
          - "*"

resources:
  Resources:

    # Create a RequestValidator resource from ApiGateway
    RequestValidatorUpdate:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: "requestvalidatorupdate"
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    RequestValidatorCreate:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: "requestvalidatorcreate"
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    ExampleBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.QUOTES_BUCKET}
        CorsConfiguration:
          CorsRules: 
            - AllowedHeaders: ["*"]
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ["*"]
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument: 
          Id: MyBucketMyRules
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.QUOTES_BUCKET}/*"
        Bucket: !Ref ExampleBucket

    ExampleDB:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "quoteId"
            AttributeType: "S"
          - AttributeName: "userId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "userId"
            KeyType: HASH
          - AttributeName: "quoteId"
            KeyType: RANGE 
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.QUOTES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: "userId"
                KeyType: HASH
            Projection:
              ProjectionType: ALL