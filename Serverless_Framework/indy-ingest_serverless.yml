service: indy-ingest

frameworkVersion: ">=1.0.0 <2.0.0"

plugins:
#- serverless-export-swagger

custom:
  events: ${file(events.yml)}
  swaggerDestinations:
    s3BucketName: 'indy-ingest-swagger-1'
    s3KeyName: 'swagger/api.json'
    acl: public-read

provider:
  name: aws
  runtime: go1.x
  region: us-east-1
  stage: dev
  environment:
    DATASET_TABLE: "${self:service}-${opt:stage, self:provider.stage}-dataset"
    METADATA_TABLE: "${self:service}-${opt:stage, self:provider.stage}-metadata"
    METADATA_BUCKET: "${self:service}-${opt:stage, self:provider.stage}-metadata"
    SNS_METADATA_CREATED:
      Fn::Join:
      - ""
      - - "arn:aws:sns:"
        - Ref: "AWS::Region"
        - ":"
        - Ref: "AWS::AccountId"
        - ":"
        - ${self:service}
        - "-"
        - ${self:custom.events.metadata-created}
    BASE_URL: { "Fn::Join": ["", [" https://", { "Ref": "ApiGatewayRestApi" }, ".execute-api.${opt:region, self:provider.region}.amazonaws.com/${opt:stage, self:provider.stage}" ] ]  }
  iamRoleStatements:
  - Effect: Allow
    Action:
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:Query
    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DATASET_TABLE}"
  - Effect: Allow
    Action:
    - dynamodb:GetItem
    - dynamodb:PutItem
    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.METADATA_TABLE}"
  - Effect: Allow
    Action:
    - s3:GetObject
    - s3:PutObject
    Resource: "arn:aws:s3:::${self:provider.environment.METADATA_BUCKET}/*"
  - Effect: Allow
    Action:
    - "sns:Publish"
    Resource: "*"

package:
  exclude:
  - ../**
  include:
  - ../bin/**

functions:
  create-dataset:
    handler: bin/create_dataset
    events:
    - http:
        path: dataset
        method: post
  list-datasets:
    handler: bin/list_datasets
    events:
    - http:
        path: dataset
        method: get
  get-dataset:
    handler: bin/get_dataset
    events:
    - http:
        path: dataset/{datasetId}
        method: get
        request:
          parameters:
            paths:
            datasetId: true
  add-metadata:
    handler: bin/add_metadata
    events:
    - http:
        path: dataset/{datasetId}/metadata
        method: post
        request:
          parameters:
            paths:
            datasetId: true
  list-metadata:
    handler: bin/dummy
    events:
    - http:
        path: dataset/{datasetId}/metadata
        method: get
        request:
          parameters:
            paths:
            datasetId: true
  get-metadata:
    handler: bin/get_metadata
    events:
    - http:
        path: dataset/{datasetId}/metadata/{metadataId}
        method: get
        request:
          parameters:
            paths:
              datasetId: true
              metadataId: true
  validate:
    handler: bin/validate
    events:
    - http:
        path: validate
        method: post

resources:
  Resources:
    DatasetDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DATASET_TABLE}
        AttributeDefinitions:
        - AttributeName: owner
          AttributeType: S
        - AttributeName: dataset_id
          AttributeType: S
        KeySchema:
        - AttributeName: owner
          KeyType: HASH
        - AttributeName: dataset_id
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MetadataDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.METADATA_TABLE}
        AttributeDefinitions:
        - AttributeName: dataset_id
          AttributeType: S
        - AttributeName: metadata_id
          AttributeType: S
        KeySchema:
        - AttributeName: dataset_id
          KeyType: HASH
        - AttributeName: metadata_id
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MetadataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.METADATA_BUCKET}
        AccessControl: Private
    S3BucketPermissions:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:provider.environment.METADATA_BUCKET}
        PolicyDocument:
          Statement:
          - Principal: "*"
            Action:
            - s3:GetObject
            Effect: Allow
            Sid: "AddPerm"
            Resource: "arn:aws:s3:::${self:provider.environment.METADATA_BUCKET}/*"
    MetadataCreated:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:custom.events.metadata-created}
