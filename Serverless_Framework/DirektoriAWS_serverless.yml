service:
  name: sls-store-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    STORE_TABLE: store-${self:provider.stage}
    INDEX_NAME: store-name-${self:provider.stage}
    INDEX_CATEGORY: store-category-${self:provider.stage}
    CATEGORY_TABLE: category-${self:provider.stage}
    CAT_INDEX: category-name-${self:provider.stage}
    IMAGE_TABLE: images-${self:provider.stage}
    IMAGE_INDEX: images-${self:provider.stage}
    IMAGES_S3_BUCKET: direktori-store-images-${self:provider.stage}
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    CONNECTIONS_INDEX: ConnectionsIndex
    SIGNED_URL_EXPIRATION: 3000

custom:
  documentation:
    api:
      info:
        version: 1.0.0
        title: Store List API
    models:
      - name: StoreCreateRequest
        contentType: application/json
        schema: ${file(src/models/model-store-create.json)}
      - name: StoreUpdateRequest
        contentType: application/json
        schema: ${file(src/models/model-store-update.json)}
  topicName: imagesTopic-${self:provider.stage}

functions:
  MyAuth:
    handler: src/lambda/auth/auth0Authorizer.handler

  ###############################################################################
  ##  Stores

  GetAllStores:
    handler: src/lambda/http/store/getAllStores.storeGetAll
    events:
      - http:
          method: get
          path: allstores/{lastKey}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}/*

  GetStoresByCategory:
    handler: src/lambda/http/store/getStoresByCategory.storeGetByCategory
    events:
      - http:
          method: get
          path: allstores/category/{categoryId}/{lastKey}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}/*

  GetStores:
    handler: src/lambda/http/store/getStores.storeGetStores
    events:
      - http:
          method: get
          path: stores
          authorizer: MyAuth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}/*

  GetStoreImages:
    handler: src/lambda/http/store/getStoreImages.storeGetStoreImages
    events:
      - http:
          method: get
          path: stores/image/{storeId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}/*

  CreateStore:
    handler: src/lambda/http/store/createStore.storeCreate
    events:
      - http:
          method: post
          path: stores
          authorizer: MyAuth
          cors: true
          documentation:
            summary: Create a new Store
            description: Create a new Store
            requestModels:
              "application/json": StoreCreateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}/*

  GetStore:
    handler: src/lambda/http/store/getStore.getStore
    events:
      - http:
          method: get
          path: stores/{StoreId}
          cors: true
          documentation:
            summary: get a Store
            description: Get a Store
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}/*
  UpdateStore:
    handler: src/lambda/http/store/updateStore.storeUpdate
    events:
      - http:
          method: patch
          path: stores/{StoreId}
          authorizer: MyAuth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a Store
            description: Update a Store
            requestModels:
              "application/json": StoreUpdateRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}/*
  DeleteStore:
    handler: src/lambda/http/store/deleteStore.storeDelete
    events:
      - http:
          method: delete
          path: stores/{StoreId}
          authorizer: MyAuth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}/*

  GenerateUploadUrl:
    handler: src/lambda/http/store/generateUploadUrl.storeUploadURL
    events:
      - http:
          method: post
          path: stores/{StoreId}/attachment
          authorizer: MyAuth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}/*
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

  SendUploadNotification:
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotificationS3.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ":"
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGE_TABLE}/*
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
  ######################################################
  ## ####Category

  GetCategories:
    handler: src/lambda/http/category/getCategory.getCategories
    events:
      - http:
          method: get
          path: categories
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORY_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATEGORY_TABLE}/*
  #######################################################
  ## web socket
  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

#  SyncWithElasticSearch:
#    environment:
#      ES_ENDPOINT: ImageSearch.DomainEndpoint
#    handler: src/lambda/dynamoDb/elasticSearchSync.handler
#    events:
#      - stream:
#          type: dynamodb
#          arn: !GetAtt StoresDynamoDBTable.StreamArn

resources:
  Resources:
    # Store: Add any necessary AWS resources
    StoresDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STORE_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: StoreId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: StoreId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: StoreId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
          - IndexName: ${self:provider.environment.INDEX_CATEGORY}
            KeySchema:
              - AttributeName: categoryId
                KeyType: HASH
              - AttributeName: StoreId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    CategoryDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CATEGORY_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: categoryId
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    ImageDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.IMAGE_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: imageId
            AttributeType: S
          - AttributeName: StoreId
            AttributeType: S
        KeySchema:
          - AttributeName: imageId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_INDEX}
            KeySchema:
              - AttributeName: StoreId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    ConnectionDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
        #          LambdaConfigurations:
        #            - Event: 's3:ObjectCreated:*'
        #              Function: !GetAtt 'SendUploadNotificationLambdaFunction.Arn'
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource: !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic

    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image Bucket Topic
        TopicName: ${self:custom.topicName}

    SendUploadNotificationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref SendUploadNotificationLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket
    GatewayResponseDefault4xx:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Header: "'Content-Type, X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
#    ImageSearch:
#      Type: AWS::Elasticsearch::Domain
#      Properties:
#        ElasticsearchVersion: '6.3'
#        DomainName: images-search-${self:provider.stage}
#        ElasticsearchClusterConfig:
#          DedicatedMasterEnabled: false
#          InstanceCount: '1'
#          ZoneAwarenessEnabled: false
#          InstanceType: t2.small.elasticsearch
#        EBSOptions:
#          EBSEnabled: true
#          Iops: 0
#          VolumeSize: 10
#          VolumeType: 'gp2'

#        AccessPolicies:
#          Version: '2012-10-17'
#          Statement:
#            -
#              Effect: Allow
#              Principal:
#                AWS: '*'
#              Action: 'es:*'
#              Resource: '*'
