service: sns-s3-lambda-example

frameworkVersion: ">=1.1.0 < 2.0.0"

custom:
  sourceBucketName: 
    Fn::Join:
      - '-'
      - - ${self:service}
        - "source"
        - Ref: "AWS::Region"
        - Ref: "AWS::AccountId"
  sourceBucketArn: 
    Fn::Join:
      - ''
      - - "arn:aws:s3:::"
        - ${self:custom.sourceBucketName}

  targetBucketName:
    Fn::Join:
      - '-'
      - - ${self:service}
        - target
        - Ref: "AWS::Region"
        - Ref: "AWS::AccountId"

  targetBucketArn: 
    Fn::Join:
      - ''
      - - "arn:aws:s3:::"
        - ${self:custom.targetBucketName}

  sourceDataAddedTopicName: ${self:service}-data-added
  sourceDataAddedTopicArn:
    Fn::Join:
      - ":"
      - - "arn:aws:sns"
        - Ref: "AWS::Region"
        - Ref: "AWS::AccountId"
        - ${self:custom.sourceDataAddedTopicName}

  fetchDataLambdaRoleName: ${self:service}-lambda-fetch-data-role
  fetchDataLambdaRoleArn: 
    Fn::Join:
      - ":"
      - - "arn:aws:lambda"
        - Ref: "AWS::Region"
        - Ref: "AWS::AccountId"
        - function
        - ${self:custom.fetchDataLambdaRoleName}
  
provider:
  name: aws
  stage: ${opt:stage}
  runtime: nodejs6.10
  region: eu-central-1
  environment:
    # The DEBUG environment variable is used by the javascript package 'debug'
    DEBUG: app:*
    REGION: ${self:provider.region}

functions:
  fetchData:
    handler: src/handler.fetchData
    role: FetchDataLambdaRole
    environment:
      TARGET_BUCKET_NAME: ${self:custom.targetBucketName}
    # Here we subscribe to the SNS event
    # The arn will simply execute Ref: SourceDataAddedTopic as described in the custom section above
    events:
      - sns:
          arn: ${self:custom.sourceDataAddedTopicArn}
          topicName: ${self:custom.sourceDataAddedTopicName} 
  

# Order of deployment:
# 1. Deploy SNS topics
# 2. Deploy SNS topic policies
# 3. Deploy Buckets
# 4. Deploy Lambda policy

resources:
  Resources:
    SourceDataAddedTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "New data has been added to the source bucket"
        TopicName: ${self:custom.sourceDataAddedTopicName}
    
    # Allow the source bucket to use the SNS topic
    SourceDataAddedTopicPolicy:
      DependsOn: SourceDataAddedTopic
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action:
                - sns:Publish
              Resource:
                Ref: SourceDataAddedTopic
              Condition:
                ArnLike:
                  aws:SourceArn:
                    ${self:custom.sourceBucketArn}
        Topics:
          - Ref: SourceDataAddedTopic

    SourceBucket:
      DependsOn: 
        - SourceDataAddedTopic
        - SourceDataAddedTopicPolicy
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 
          ${self:custom.sourceBucketName}
        NotificationConfiguration:
          TopicConfigurations:
            - Topic: ${self:custom.sourceDataAddedTopicArn}
              Event: "s3:ObjectCreated:*"

    TargetBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 
          ${self:custom.targetBucketName}

    FetchDataLambdaRole:
      # DependsOn: 
      #   - SourceBucket
      #   - TargetBucket
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.fetchDataLambdaRoleName}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: SourceBucket-Get
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetObject
                  Resource: ${self:custom.sourceBucketArn}
          - PolicyName: TargetBucket-Put
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource: ${self:custom.targetBucketArn}
          - PolicyName: CreateLogGroup
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:*:*:*"
