# Edit this according to your needs
service: ${file(./service.json):name}

frameworkVersion: ">=1.14.0 <1.15.0"

# Custom configuration for the app
custom:
  # Edit this according to your needs
  hostedZone: ${file(./service.json):hostedZone}

  stage: ${opt:stage, self:provider.stage}
  bucketName: ${self:service}-${self:custom.stage}
  bucketDomain:
    # Parse the domain from the website URL, such as http://xxxxx.s3-website-us-east-1.amazonaws.com/
    # Split if with '/' character and pick the 3rd item (index = 2)
    Fn::Select:
      - 2
      - Fn::Split:
        - "/"
        - Fn::GetAtt: [ S3BucketForURLs, WebsiteURL ]
  # Custom domains for stages. If missing, we use the defaultStageDomain
  stageDomains:
    prod: ${self:custom.hostedZone}
  defaultStageDomain: "${self:custom.stage}.${self:custom.hostedZone}"
  stageDomain: ${self:custom.stageDomains.${self:custom.stage}, self:custom.defaultStageDomain}
  apiDomain: "api.${self:custom.stageDomain}"
  stageOrigin: "https://${self:custom.stageDomain}"

plugins:
  # Plugin for uploading the static assets to the S3 buckets on deployment
  - assets-upload

provider:
  name: aws
  runtime: nodejs6.10
  # NOTE: Certitificates won't work on other regions!
  region: us-east-1
  stage: dev

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::${self:custom.bucketName}"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::${self:custom.bucketName}/*"

  # Environment variables for all the functions
  environment:
    S3_BUCKET: ${self:custom.bucketName}
    S3_REGION: ${self:provider.region}
    DOMAIN: ${self:custom.stageDomain}
    ALLOWED_ORIGIN: ${self:custom.stageOrigin}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  shortenUrl:
    handler: handler.shortenUrl
    events:
      - http:
          path: /urls
          method: post
          cors:
            origins:
              - ${self:custom.stageOrigin}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
            allowCredentials: true
resources:
  Resources:
    # S3 bucket for storing the URL resources
    S3BucketForURLs:
      Type: 'AWS::S3::Bucket'
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:custom.bucketName}
        WebsiteConfiguration:
          # This does not matter as it cannot be reached
          IndexDocument: index.html
    # Make contents of the bucket public for everyone
    S3BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: ${self:custom.bucketName}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: AddPerm
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
    # CloudFront distribution for the API gateway
    ApiCloudFrontDistrib:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.apiDomain}
          Origins:
            - DomainName:
                Fn::Join:
                  - ''
                  - [{ Ref: ApiGatewayRestApi }, ".execute-api.${self:provider.region}.amazonaws.com" ]
              OriginPath: /${self:custom.stage}
              Id: OriginAPIGW
              CustomOriginConfig:
                OriginProtocolPolicy: match-viewer
          Comment: >-
            CloudFront distribution used as a front end to the URL shortener API gateway
          Enabled: true
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              Headers:
                - Origin
                - Referer
              QueryString: false
            TargetOriginId: OriginAPIGW
            ViewerProtocolPolicy: https-only
          ViewerCertificate:
            AcmCertificateArn:
              Ref: DomainCertificate
            SslSupportMethod: sni-only
    # CloudFront distribution for the S3 website
    CloudFrontDistrib:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.stageDomain}
          Origins:
            - DomainName: ${self:custom.bucketDomain}
              Id: OriginRedirect
              OriginPath: /u
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
            - DomainName: ${self:custom.bucketDomain}
              Id: OriginStatic
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
          Comment: >-
            CloudFront distribution used as a front end to the URL shortener S3 website
          Enabled: true
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: false
            TargetOriginId: OriginRedirect
            ViewerProtocolPolicy: allow-all
          CacheBehaviors:
            - ForwardedValues:
                QueryString: false
              TargetOriginId: OriginStatic
              ViewerProtocolPolicy: redirect-to-https
              PathPattern: /static/*
          ViewerCertificate:
            AcmCertificateArn:
              Ref: DomainCertificate
            SslSupportMethod: sni-only
    # Set up the DNS for the API
    ApiDNS:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${self:custom.hostedZone}.
        Comment: Domain for the CloudFront distribution mapped to the API
        RecordSets:
        - Name: ${self:custom.apiDomain}.
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName:
              Fn::GetAtt: [ ApiCloudFrontDistrib, DomainName ]
    # Set up the DNS for the S3 website
    DNS:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${self:custom.hostedZone}.
        Comment: Domain for the CloudFront distribution mapped to the S3 website.
        RecordSets:
        - Name: ${self:custom.stageDomain}.
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName:
              Fn::GetAtt: [ CloudFrontDistrib, DomainName ]
    # Certificate for the SSL
    DomainCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.stageDomain}
        SubjectAlternativeNames:
          - ${self:custom.apiDomain}

  Outputs:
    ApiCloudFrontDomain:
      Description: "API CloudFront distribution domain name"
      Value:
        Fn::GetAtt: [ ApiCloudFrontDistrib, DomainName ]
    WebsiteCloudFrontDomain:
      Description: "Website CloudFront distribution domain name"
      Value:
        Fn::GetAtt: [ CloudFrontDistrib, DomainName ]
    S3BucketWebsiteDomain:
      Description: "Domain of the hosted website of the S3 bucket"
      Value: ${self:custom.bucketDomain}
