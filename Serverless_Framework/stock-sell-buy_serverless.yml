org: faisalorg
app: stock-sell-buy
service: stock-sell-buy

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  iamRoleStatements:
  - Effect: Allow
    Action: "*"
    Resource: "*"

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /hello
          method: get

  # getaccounts:
  #   handler: handler.accountprofile
  #   events:
  #     - http:
  #         path: /users/{userid}
  #         method: get
  #         request:
  #           passThrough: NEVER
  #           parameters:
  #             # paths: 
  #             #   userid: true
  #             querystrings:
  #               userid: true
  #               # activityid: true
  #           template:
  #             application/json: '{ "userid":"$input.params(''userid'')"}'
  #         response:
  #           headers:
  #             Content-Type: "'application/json'"
          # request: 
          #   parameters: 
          #     paths: 
          #       userid: true
  
  listorders:
    handler: handler.listorders
    events:
      - http:
          path: /stocks/orders
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              # paths: 
              #   userid: true
              querystrings:
                userid: true
                # activityid: true
          response:
            headers:
              Content-Type: "'application/json'"

  buysellorders:
    handler: handler.buysellorders
    events:
      - http:
          path: /stocks/buysellorders
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              # paths: 
              #   userid: true
              querystrings:
                userid: true
                side: true
                # limit: true
                # activityid: true
          response:
            headers:
              Content-Type: "'application/json'"

  listspecificorder:
    handler: handler.listspecificorder
    events:
      - http:
          path: /stocks/orders/{orderid}
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              paths: 
                orderid: true
              querystrings:
                userid: true
                # activityid: true
            template:
              application/json: '{ "userid":"$input.params(''userid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"


  cancelallorder:
    handler: handler.cancelallorder
    events:
      - http:
          path: /stocks/cancelorders
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"

  cancelspecificorder:
    handler: handler.cancelspecificorder
    events:
      - http:
          path: /stocks/cancelorders/{orderid}
          method: post
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              paths: 
                orderid: true
          response:
            headers:
              Content-Type: "'application/json'"
  

  listpositions:
    handler: handler.listpositions
    events:
      - http:
          path: /stocks/positions
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              # paths: 
              #   userid: true
              querystrings:
                userid: true
                # activityid: true
            template:
              application/json: '{ "userid":"$input.params(''userid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"

  listspecificposition:
    handler: handler.listspecificposition
    events:
      - http:
          path: /stocks/positions/{ticker}
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              paths: 
                ticker: true
              querystrings:
                userid: true
                # activityid: true
          response:
            headers:
              Content-Type: "'application/json'"

  showrecommendedbid:
    handler: handler.showrecommendedbid
    events:
      - http:
          path: /stocks/bid/{ticker}
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            parameters:
              paths:
                ticker: true
              querystrings:
                userid: true
            # template:
            #   application/json: '{ "userid":"$input.params(''userid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"
 

  createorder:
    handler: handler.createorder
    events:
      - http:
          path: /stocks/createorder
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"


  showaccountdetails:
    handler: handler.showaccountdetails
    events:
      - http:
          path: /stocks/accountdetails
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                userid: true
            template:
              application/json: '{ "userid":"$input.params(''userid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"


  showaccountactivites:
    handler: handler.showaccountactivites
    events:
      - http:
          path: /stocks/accountactivites
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                userid: true
            template:
              application/json: '{ "userid":"$input.params(''userid'')"}'
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/get-tickers-polygon')
# def getTickersPolygon
  get_tickers_polygon:
    handler: handler.getTickersPolygon
    events:
      - http:
          path: /polygon/get-tickers-polygon
          method: post
          integration: lambda
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/get-tickers')
# def getTickers
  getTickers:
    handler: handler.getTickers
    events:
      - http:
          path: /polygon/get-tickers
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                lastticker: true
                limit: true
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/get-ticker')
# def getTicker
  getTicker:
    handler: handler.getTicker
    events:
      - http:
          path: /polygon/get-ticker
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                ticker: true
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/get-ticker-details')
# def getTickersDetails
  getTickersDetails:
    handler: handler.getTickersDetails
    events:
      - http:
          path: /polygon/get-ticker-details
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              querystrings:
                ticker: true
          response:
            headers:
              Content-Type: "'application/json'"
  getalpacaassetDetails:
    handler: handler.getalpacaassetDetails
    events:
      - http:
          path: /stocks/get-alpaca-asset-details/{ticker}
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              paths:
                ticker: true
          response:
            headers:
              Content-Type: "'application/json'"

# @app.route('/finhub/get-fillings')
# def getfinhubfilings(event,context):
  getfinhubfilings:
    handler: handler.getfinhubfilings
    events:
      - http:
          path: /finhub/get-fillings/{ticker}
          method: get
          integration: lambda
          reqValidatorName: xMyRequestValidator
          request:
            passThrough: NEVER
            parameters:
              paths:
                ticker: true
              querystrings:
                limit: true
                offset: true
          response:
            headers:
              Content-Type: "'application/json'"
custom:
  wsgi:
    app: handler.app
    pythonBin: python # Some systems with Python3 may require this
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

package:
  exclude:
    - node_modules/**
    - venv/**

resources:
  Resources:
    xMyRequestValidator:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'my-req-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true 