service: starsnow-request
app: starsnow-request
#org: starschema

plugins:
  - serverless-snowflake-external-function-plugin


provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true

  stage: dev
  region: us-west-2


custom:
  snowflake:
    role: ${env:SNOWFLAKE_ROLE}
    account: ${env:SNOWFLAKE_ACCOUNT}
    username: ${env:SNOWFLAKE_USERNAME}
    password: ${env:SNOWFLAKE_PASSWORD}
    warehouse: ""
    database: ${env:SNOWFLAKE_DATABASE}
    schema: ${env:SNOWFLAKE_SCHEMA}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - snowflake-conf.sh
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:

  starsnow_request:
    handler: handler.starsnowRequest
    snowflake:
      argument_signature: (url VARCHAR2, params OBJECT)
      data_type: variant
    events:
      - http:
          path: starsnow_request 
          method: post 
          authorizer: aws_iam


  starsnow_request_get:
    handler: handler.starsnowRequestGet
    snowflake:
      argument_signature: (url VARCHAR)
      data_type: VARCHAR
    events:
      - http:
          path: starsnow_request_get
          method: post 
          authorizer: aws_iam

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
