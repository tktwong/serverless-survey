# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ruelette-api

provider:
  name: aws
  stage: dev
  region: us-east-1
  timeout: 40 # optional, default is 6
  runtime: nodejs4.3
  memorySize: 128

custom:
  variables:
    stage: ${opt:stage, self:provider.stage}
    region: ${opt:region, self:provider.region}
    project: ${self:service}

  standardResponseTemplate: "{\"success\":true, \"data\": $input.json('$') }"
  errorResponseTemplate: "#set($inputRoot = $input.path('$.errorMessage')){\"success\":false, \"error\": $inputRoot }"
  standardResponses:
    headers:
      Content-Type: "'application/json'"
    template: ${self:custom.standardResponseTemplate}
    statusCodes:
      200:
        pattern: ''
        template:
          application/json: ${self:custom.standardResponseTemplate}
      400:
        template:
          application/json: ${self:custom.errorResponseTemplate}
        pattern: '.*\[400\].*'
      404:
        template:
          application/json: ${self:custom.errorResponseTemplate}
        pattern: '.*\[404\].*'
      500:
        template:
          application/json: ${self:custom.errorResponseTemplate}
        pattern: '.*\[500\].*'


  writeEnvVars:
    DOMAIN: api.ruelette.com
    NODE_ENV: ${self:custom.variables.stage}
    STAGE: ${self:custom.variables.stage}
    PROJECT: ${self:custom.variables.project}
#    ENCRYPTION_PASSPHRASE: ${env:ENCRYPTION_PASSPHRASE}
    ENCRYPTION_JWT_PASSPHRASE: ${env:ENCRYPTION_JWT_PASSPHRASE}
#    DEPLOY_SHA: ${env:CIRCLE_SHA1}
    OAUTH_TRIPIT_CLIENT_KEY: ${env:OAUTH_TRIPIT_CLIENT_KEY}
    OAUTH_TRIPIT_CLIENT_SECRET: ${env:OAUTH_TRIPIT_CLIENT_SECRET}
#    OAUTH_DROPBOX_CLIENT_KEY: ${env:OAUTH_DROPBOX_CLIENT_KEY}
#    OAUTH_DROPBOX_CLIENT_SECRET: ${env:OAUTH_DROPBOX_CLIENT_SECRET}
#    OAUTH_GOOGLE_CLIENT_KEY: ${env:OAUTH_GOOGLE_CLIENT_KEY}
#    OAUTH_GOOGLE_CLIENT_SECRET: ${env:OAUTH_GOOGLE_CLIENT_SECRET}
#    OAUTH_SKYDRIVE_CLIENT_KEY: ${env:OAUTH_SKYDRIVE_CLIENT_KEY}
#    OAUTH_SKYDRIVE_CLIENT_SECRET: ${env:OAUTH_SKYDRIVE_CLIENT_SECRET}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
package:
  include:
    - lib
    - functions
  exclude:
    - tmp
    - .git

functions:
  test:
    handler: handler.test
    events:
      - http:
          path: test
          method: get
          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true
      - http:
          path: test
          method: post
          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true

  connect:
    handler: handler.link_connect
    events:
      - http:
          path: connect/{serviceType}
          method: get
          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true

  callback:
    handler: handler.link_callback
    events:
      - http:
          path: callback/{serviceType}
          method: get
          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true
      - http:
          path: callback/{serviceType}
          method: post
          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true

  externalTripitFindAllTrips:
    handler: handler.externalTripitFindAllTrips
    events:
      - http:
          path: external/tripit/trips
          method: get
          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true

  externalTripitFindOneTrip:
    handler: handler.externalTripitFindOneTrip
    events:
      - http:
          path: external/tripit/trips/{tripId}
          method: get
          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true

  externalAirbnbSearch:
    handler: handler.externalAirbnbSearch
    events:
      - http:
          path: external/airbnb/search
          method: get
          response: ${self:custom.standardResponses}
          integration: lambda
          cors: true

#    you can add any of the following events
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic

# you can add CloudFormation resource templates here
resources:
  Resources:
    $ref: ./cloudformation-resources.json

plugins:
  - serverless-plugin-write-env-vars