service: fargate-infra

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1

resources:
  Resources:
    ExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Join ['', ['fargate-infra', ExecutionRole]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: 'sts:AssumeRole'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
    TaskRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Join ['', ['fargate-infra', TaskRole]]
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: 'sts:AssumeRole'
    ecs:
      Type: AWS::ECS::TaskDefinition
      Properties:
        RequiresCompatibilities:
          - "FARGATE"
        TaskRoleArn: !Ref TaskRole
        ContainerDefinitions: 
          -
            Name: app
            Image: 063754174791.dkr.ecr.us-east-1.amazonaws.com/node-fargate:latest
            PortMappings:
              - ContainerPort: 3000
        Cpu: 256
        Memory: 512
        NetworkMode: awsvpc
        ExecutionRoleArn: !Ref ExecutionRole
    ContainerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: !Join ['', ['fargate-infra', ContainerSecurityGroup]]
        VpcId: vpc-fc8d1f87
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3000
            ToPort: 3000
            SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: !Join ['', ['fargate-infra', LoadBalancerSecurityGroup]]
        VpcId: vpc-fc8d1f87
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 3000
            CidrIp: 0.0.0.0/0
    LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing
        SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
        Subnets:
          - subnet-824b55e6
          - subnet-88595ca7
        Type: application
    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref TargetGroup
            Type: forward
        LoadBalancerArn: !Ref LoadBalancer
        Port: 80
        Protocol: HTTP
    TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Port: 3000
        Protocol: HTTP
        TargetType: ip
        VpcId: vpc-fc8d1f87
    service:
      Type: AWS::ECS::Service
      DependsOn:
      - Listener
      Properties:
        Cluster: default
        DesiredCount: 1
        TaskDefinition: !Ref ecs
        LaunchType: FARGATE
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            Subnets:
              - subnet-824b55e6
              - subnet-88595ca7
            SecurityGroups:
            - !Ref ContainerSecurityGroup
        LoadBalancers:
          - ContainerName: app
            ContainerPort: 3000
            TargetGroupArn: !Ref TargetGroup
