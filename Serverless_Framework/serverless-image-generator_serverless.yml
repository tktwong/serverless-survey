# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-image-generator

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  cfLogs: true
  timeout: 60
  stage: dev
  region: eu-west-1

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

#
# functions:
#   thumbnail:
#     handler: index.handler
#     events:
#       - http:
#           path: /thumbnail
#           method: post
#           integration: lambda
#           request:
#             passThrough: WHEN_NO_TEMPLATES
#             template:
#               image/png: '{ "operation" : "thumbnail", "base64Image" : "$input.body" }'
functions:
  availability:
    handler: availability/index.availability
    events:
      - http:
          path: images/availability
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                critical: true
                major: true
                minor: true
                planned: true
                total: true
                bg: true
                fg: true
            template:
              application/json: '{
                "critical" : "$input.params(''critical'')",
                "major" : "$input.params(''major'')",
                "minor" : "$input.params(''minor'')",
                "planned" : "$input.params(''planned'')",
                "total" : "$input.params(''total'')",
                "bg" : "$input.params(''bg'')",
                "fg" : "$input.params(''fg'')"
              }'
          response:
            headers:
              Content-Type: "'image/svg+xml'"
            template: $input.path('$.body')


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
