service: tasks-backup-api
frameworkVersion: '2'

provider:
  name: aws
  runtime: java8
  region: eu-west-2
  profile: serverless
  timeout: 15 # optional, in seconds, default is 6
  plugins:
   - serverless-iam-roles-per-function
  iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - ses:SendEmail            
          - ses:SendRawEmail          
        Resource: '*'
  environment:
   DB_HOST: ${file(./config.dev.json):DB_HOST}
   DB_NAME: ${file(./config.dev.json):DB_NAME}
   DB_USER: ${file(./config.dev.json):DB_USER}
   DB_PASSWORD: ${file(./config.dev.json):DB_PASSWORD}
    
package:
  artifact: target/more-clean-water-dev.jar
functions:

 # API for the purpose of learning different approaches of architecture
  tasks-api: 
    handler: com.techreturners.mcw.learning.Handler # Reference to class handler
    events: # All events associated with this function
      - http:
          path: tasks/getall
          method: get
      - http:
          path: tasks/create
          method: post
      - http:
          path: tasks/update/{user_id}
          method: put
          request:
            parameters:
              paths:
                user_id: true
      - http:
          path: tasks/delete/{delId}
          method: delete
          request:
            parameters:
              paths:
                delid: true

# APIs for User Management Module
  users-list-api: 
    handler: com.techreturners.mcw.handler.UserListHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /users/list
          method: get
          cors: true # <-- CORS!
  users-get-api:
    handler: com.techreturners.mcw.handler.UserInfoHandler # Reference to class handler
    events: # Get the specific user details
      - http:
          path: /users/{userId}
          method: get
          cors: true # <-- CORS!
  users-add-api:
    handler: com.techreturners.mcw.handler.UserAddHandler # Reference to class handler
    events: # Create user
      - http:
          path: /users/add
          method: post
          cors: true # <-- CORS!
  users-edit-api:
    handler: com.techreturners.mcw.handler.UserEditHandler # Reference to class handler
    events: # Update user
      - http:
          path: /users/edit/{userId}
          method: put
          cors: true # <-- CORS!
  users-deactivate-api:
    handler: com.techreturners.mcw.handler.UserDeleteHandler # Reference to class handler
    events: # Deactivate user
      - http:
          path: /users/delete/{userId}
          method: get
          cors: true # <-- CORS!
  login-user-api: 
    handler: com.techreturners.mcw.handler.UserLoginHandler # Reference to class handler
    events: # Authentication
      - http:
          path: /users/login
          method: put
          cors: true # <-- CORS!
  users-passchange-api:
    handler: com.techreturners.mcw.handler.ChangePasswordHandler # Reference to class handler
    events: # change password
      - http:
          path: /users/passchange/{userId}
          method: get
          cors: true # <-- CORS!

  # APIs for Station Management Module
  stations-list-api: 
    handler: com.techreturners.mcw.handler.StationListHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /stations/list
          method: get
          cors: true # <-- CORS!
  stations-add-api:
    handler: com.techreturners.mcw.handler.StationAddHandler # Reference to class handler
    events: # Create user
      - http:
          path: /stations/add
          method: post
          cors: true # <-- CORS!
  stations-edit-api:
    handler: com.techreturners.mcw.handler.StationEditHandler # Reference to class handler
    events: # Update user
      - http:
          path: /stations/edit/{stationId}
          method: put
          cors: true # <-- CORS!
  stations-disable-api:
    handler: com.techreturners.mcw.handler.StationDisableHandler # Reference to class handler
    events: # Deactivate user
      - http:
          path: /stations/delete/{stationId}
          method: get
          cors: true # <-- CORS!
  stations-activate-api:
    handler: com.techreturners.mcw.handler.StationActivateHandler # Reference to class handler
    events: # Deactivate user
      - http:
          path: /stations/activate/{stationId}
          method: get
          cors: true # <-- CORS!

# APIs for Awareness Management Module
  sections-list-api: 
    handler: com.techreturners.mcw.handler.SectionListHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /sections/list
          method: get
          cors: true # <-- CORS!
  sections-add-api:
    handler: com.techreturners.mcw.handler.SectionAddHandler # Reference to class handler
    events: # Create user
      - http:
          path: /sections/add
          method: post
          cors: true # <-- CORS!
  sections-disable-api:
    handler: com.techreturners.mcw.handler.SectionDeleteHandler # Reference to class handler
    events: # Deactivate user
      - http:
          path: /sections/delete/{id}
          method: delete
          cors: true # <-- CORS!

# APIs for Events Management Module
  events-list-api: 
    handler: com.techreturners.mcw.handler.EventListHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /events/list
          method: get
          cors: true # <-- CORS!
  events-add-api:
    handler: com.techreturners.mcw.handler.EventAddHandler # Reference to class handler
    events: # Create user
      - http:
          path: /events/add
          method: post
          cors: true # <-- CORS!

  events-cancel-api:
    handler: com.techreturners.mcw.handler.EventCancelHandler # Reference to class handler
    events: # Deactivate user
      - http:
          path: /events/cancel/{eventId}
          method: get
          cors: true # <-- CORS!
  events-edit-api:
    handler: com.techreturners.mcw.handler.EventEdithandler # Reference to class handler
    events: # Update user
      - http:
          path: /events/edit/{eventId}
          method: put
          cors: true # <-- CORS!
   
# APIs for water shortage

  shortage-list-api: 
    handler: com.techreturners.mcw.handler.WaterShortageList # Reference to class handler
    events: # Get the user list
      - http:
          path: /shortage/list
          method: get
          cors: true # <-- CORS!
  dirtywater-list-api: 
    handler: com.techreturners.mcw.handler.DirtyWaterHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /dirty/list
          method: get
          cors: true # <-- CORS!

# APIs for Mics Services

  county-list-api: 
    handler: com.techreturners.mcw.handler.CountyListHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /county/list
          method: get
          cors: true # <-- CORS!
  deactivate-user-api: 
    handler: com.techreturners.mcw.handler.DeactivateUserHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /users/deactivate/{userId}
          method: delete
          cors: true # <-- CORS!
  unsubscribe-user-api: 
    handler: com.techreturners.mcw.handler.UnsubscribeUser # Reference to class handler
    events: # Get the user list
      - http:
          path: /users/unsubscribe/{userId}
          method: put
          cors: true # <-- CORS!
  subscribe-user-api: 
    handler: com.techreturners.mcw.handler.SubscribeUserHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /users/subscribe/{userId}
          method: put
          cors: true # <-- CORS!
  alert-user-api: 
    handler: com.techreturners.mcw.handler.UserAlertHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /users/alert/{userId}
          method: get
          cors: true # <-- CORS!
  read-alert-api: 
    handler: com.techreturners.mcw.handler.ReadAlertHandler # Reference to class handler
    events: # Get the user list
      - http:
          path: /read/alert/{alertId}
          method: put
          cors: true # <-- CORS!