# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding! 

service: serveless-dynamo-Service # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=1.28.0 <2.0.0"

custom:
  McTableName: ${self:service}-${self:provider.stage}-mc
  McTableArn: # ARNs are addresses of deployed services in AWS space
    Fn::Join:
    - ":"
    - - arn
      - aws
      - dynamodb
      - Ref: AWS::Region
      - Ref: AWS::AccountId
      - table/${self:custom.McTableName}
  bucketName: pci-3
  region: us-east-1
  XAuth: 8C478DB22187
  serverless-offline:
    port: 4000

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, env:AWS_STAGE, 'dev'}
  region: ${opt:region, env:AWS_REGION, 'us-east-1'}
  XAuth: ${opt:XAuth, env:XAuth, '8C478DB22187988CEA4D'}

  environment:
    REGION: ${self:provider.region}
    BUCKET: { Ref: Uploads }
    XAutherization: '8C478DB2218EA0F7488CEA4D'
    webhook_post_url: 'https://webhook.site/1148c616-4ee7-4aed-8163-46a53c51fe07'
    MC_TABLE_NAME: ${self:custom.McTableName}
  versionFunctions: false
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "s3:*"
    Resource: "*"

  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: 
      - ${self:custom.McTableArn}
  
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  upload: # on upload to S3
    handler: bin/upload
    events:
      - http:
          path: upload
          method: post

  postEvent:  # on upload triggrer enpoint to process
    handler: bin/event
    events:
      - http:
          path: postEvent
          method: post 
  
  addEvent:
    handler: bin/handlers/addEvent
    package:
      include:
        - ./bin/handlers/addEvent
    events:
      - http:
          path: events
          method: post
          cors: true

  listEvents:
    handler: bin/handlers/listEvents
    package:
     include:
       - ./bin/handlers/listEvents
    events:
      - http:
          path: events
          method: get
          cors: true

          
resources:
  Resources:
    Uploads:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "Authorization"
              AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - "*"    
    McTable: # Define a new DynamoDB Table resource to store todo items
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.McTableName}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
