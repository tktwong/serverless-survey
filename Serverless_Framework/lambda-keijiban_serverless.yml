service: kani-keijiban-v2
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: test
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    imageUploadBucket: ${self:custom.imageUploadBucket}
    region: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - s3:PutObject
        - s3:DeleteObject
        - s3:PutObjectAcl
      Resource: 
        - !GetAtt KaniKeijibanDB.Arn
        - !Join
          - ''
          - - !GetAtt ImageUploadBucket.Arn
            - '/*'
        
plugins:
  - serverless-sync-s3buckets
  - serverless-webpack

package: 
  individually: true

custom:
  webpack:
    packager: 'yarn'
    webpackConfig: 'sls.webpack.config.js'
  siteName: yuuki-aws-dev.work
  adminSiteName: admin.yuuki-aws-dev.work
  imageUploadBucket: keijiban-image-upload-bucket-1218
  aliasCloudFrontId: Z2FDTNDATAQYW2
  hostedZoneId: Z1VE5MFYDL6VU
  aliasCloudFrontName: !GetAtt CloudFrontDistribution.DomainName
  adminAliasCloudFrontName: !GetAtt AdminCloudFrontDistribution.DomainName
  authAliasCloudFrontName: dv0xr1eg6kdkg.cloudfront.net
  syncS3Buckets:
    - bucketRef: KaniKeijibanWebSitev2
      localDir: dist/public
    - bucketRef: KaniKeijibanAdminWebSite
      localDir: dist/auth
  tableName: KaniPosts

functions:
  getKeijibanPosts:
    handler: lambdas/endpoints/getKeijibanPosts.handler
    events:
      - http:
          path: api/posts/{id}
          method: get
          cors: true
  createKeijibanPosts:
    handler: lambdas/endpoints/createKeijibanPosts.handler
    events:
      - http:
          path: api/posts
          method: post
          cors: true
  updateKeijibanPosts:
    handler: lambdas/endpoints/updateKeijibanPosts.handler
    events:
      - http:
          path: api/posts/{id}
          method: put
          cors: true
  updateKeijibanComments:
    handler: lambdas/endpoints/updateKeijibanComments.handler
    events:
      - http:
          path: api/posts/comments/{id}
          method: put
          cors: true
  deleteKeijibanPosts:
    handler: lambdas/endpoints/deleteKeijibanPosts.handler
    events:
      - http:
          path: api/posts/{id}
          method: delete
          cors: true
  scanKeijibanPosts:
    handler: lambdas/endpoints/scanKeijibanPosts.handler
    events:
      - http:
          path: api/posts
          method: get
          cors: true
  adminDeleteKeijibanPosts:
    handler: lambdas/endpoints/adminDeleteKeijibanPosts.handler
    events:
      - http:
          path: admin/delete/{id}
          method: delete
          cors: true
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
resources:
 Resources:
  ImageUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.imageUploadBucket}
      AccessControl: PublicRead
  KaniKeijibanWebSitev2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.siteName}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  KaniKeijibanWebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: KaniKeijibanWebSitev2
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 
              - s3:GetObject
            Resource:
              !Join
                - ''
                - - "arn:aws:s3:::"
                  - Ref: KaniKeijibanWebSitev2
                  - '/*'
  KaniKeijibanAdminWebSite:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.adminSiteName}
      AccessControl: Private
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: false
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  KaniKeijibanAdminWebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: KaniKeijibanAdminWebSite
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 
              - s3:GetObject
            Resource:
              !Join
                - ''
                - - "arn:aws:s3:::"
                  - Ref: KaniKeijibanAdminWebSite
                  - '/*'
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - ${self:custom.siteName}
        Origins:
          - DomainName: ${self:custom.siteName}.s3-website-${self:provider.region}.amazonaws.com
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: ${env:ACM_ARN}
          SslSupportMethod: sni-only
  AdminCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - ${self:custom.adminSiteName}
        Origins:
          - DomainName: ${self:custom.adminSiteName}.s3-website-${self:provider.region}.amazonaws.com
            Id: S3AdminOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3AdminOrigin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: ${env:ACM_ARN}
          SslSupportMethod: sni-only
  DnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: ${self:custom.aliasCloudFrontName}
        HostedZoneId: ${self:custom.aliasCloudFrontId}
      HostedZoneId: ${self:custom.hostedZoneId}
      Name:
        Ref: KaniKeijibanWebSitev2
      Type: 'A'
  AdminDnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: ${self:custom.adminAliasCloudFrontName}
        HostedZoneId: ${self:custom.aliasCloudFrontId}
      HostedZoneId: ${self:custom.hostedZoneId}
      Name:
        Ref: KaniKeijibanAdminWebSite
      Type: 'A'
  AuthDnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: ${self:custom.authAliasCloudFrontName}
        HostedZoneId: ${self:custom.aliasCloudFrontId}
      HostedZoneId: ${self:custom.hostedZoneId}
      Name: auth.${self:custom.siteName}
      Type: 'A'
  KaniKeijibanDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.tableName}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:provider.stage}-keijiban-user-pool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: true
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:provider.stage}-keijiban-user-pool-client
      UserPoolId:
        Ref: CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders: 
        - COGNITO
      AllowedOAuthFlows: 
        - implicit
      AllowedOAuthScopes: 
        - openid
      CallbackURLs: 
        - https://${self:custom.adminSiteName}
      LogoutURLs: 
        - https://${self:custom.adminSiteName}
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      CustomDomainConfig: 
        CertificateArn: ${env:ACM_ARN}
      Domain: auth.${self:custom.siteName}
      UserPoolId: 
        Ref: CognitoUserPool
  CognitoUserIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ${self:provider.stage}-keijiban-identity-pool
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId:
            Ref: CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
  IdentityPoolRoleAttachment: 
    Type: AWS::Cognito::IdentityPoolRoleAttachment 
    Properties: 
      IdentityPoolId: !Ref CognitoUserIdentityPool
      Roles: 
        authenticated: !GetAtt AuthenticatedRole.Arn 
        unauthenticated: !GetAtt UnAuthenticatedRole.Arn 
  UnauthenticatedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - mobileanalytics:PutEvents
          - cognito-sync:*
          Resource:
          - "*"
  UnAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: "sts:AssumeRoleWithWebIdentity"
          Principal:
            Federated: cognito-identity.amazonaws.com
          Condition:
            StringEquals:
              "cognito-identity.amazonaws.com:aud":
                Ref: CognitoUserIdentityPool
            ForAnyValue:StringLike:
              "cognito-identity.amazonaws.com:amr": unauthenticated
      ManagedPolicyArns:
      - Ref: UnauthenticatedPolicy
  AuthenticatedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - mobileanalytics:PutEvents
          - cognito-sync:*
          - cognito-identity:*
          Resource:
          - "*"
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: "sts:AssumeRoleWithWebIdentity"
          Principal:
            Federated: cognito-identity.amazonaws.com
          Condition:
            StringEquals:
              "cognito-identity.amazonaws.com:aud":
                Ref: CognitoUserIdentityPool
            ForAnyValue:StringLike:
              "cognito-identity.amazonaws.com:amr": authenticated
      ManagedPolicyArns:
      - Ref: AuthenticatedPolicy
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: ApiGatewayAuthorizer
      RestApiId:
        Ref: ApiGatewayRestApi
      IdentitySource: method.request.header.Authorization
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn