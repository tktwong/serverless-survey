# Welcome to Serverless!
#
# Happy Coding!

service: awsCourse
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8

  stage: ${opt:stage, 'dev'}
  region: eu-central-1

  environment:
    CLIENT_ID:
      Ref: awsCoursePoolClient

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-central-1:846728304019:table/awsCourse"
  endpointType: REGIONAL
  apiName: apiCourse-${self:provider.stage}
  apiKeys:
    - api-course-${self:provider.stage}
  usagePlan:
    quota:
      limit: 1000
      offset: 0
      period: DAY
    throttle:
      burstLimit: 200
      rateLimit: 100

functions:
  login:
    handler: login.handler
    events:
      - http:
          path: login
          method: post
          private: true
          cors: true
  signup:
    handler: signup.handler
    events:
      - http:
          path: signup
          method: post
          private: true
          cors: true
  confirmSignup:
    handler: confirmSignup.handler
    events:
      - http:
          path: confirmSignup
          method: post
          private: true
          cors: true
  listStudents:
    handler: listStudents.handler
    events:
      - http:
          path: users
          method: get
          private: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref awsCourseAuthorizer
  getStudent:
    handler: getStudent.handler
    events:
      - http:
          path: users/{id}
          method: get
          private: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref awsCourseAuthorizer
  deleteStudent:
    handler: deleteStudent.handler
    events:
      - http:
          path: users/{id}
          method: delete
          private: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref awsCourseAuthorizer
  createStudent:
    handler: createStudent.handler
    events:
      - http:
          path: users
          method: post
          private: true
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref awsCourseAuthorizer
  updateStudent:
    handler: updateStudent.handler
    events:
      - http:
          path: users/{id}
          method: put
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref awsCourseAuthorizer

resources:
  Resources:
    awsCourse:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: awsCourse
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    awsCoursePool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: awsCoursePool-${self:provider.stage}
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: 15
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        EmailVerificationMessage: 'Your verify code is {####}'
        EmailVerificationSubject: 'Welcome to awsCourse'
        MfaConfiguration: OFF
        UserPoolTags:
          Env: ${self:provider.stage}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          InviteMessageTemplate:
            EmailMessage: 'This is the password of your account {username} to awsCourse: {####}'
            EmailSubject: 'Welcome to awsCourse'
        UsernameConfiguration:
          CaseSensitive: false

    awsCoursePoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: awsCoursePoolClient-${self:provider.stage}
        ExplicitAuthFlows:
          - USER_PASSWORD_AUTH
        RefreshTokenValidity: 30
        UserPoolId:
          Ref: awsCoursePool

    awsCourseAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: awsCourseAuthorizer-${self:provider.stage}
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt awsCoursePool.Arn
        IdentitySource: method.request.header.Authorization