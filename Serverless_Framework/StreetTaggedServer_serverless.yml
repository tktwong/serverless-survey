# serverless.yml

Globals:
    Api:
        BinaryMediaTypes:
            - "*~1*"

service: street-tagged-server

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-domain-manager
  - serverless-apigw-binary
  - serverless-apigwy-binary
  - serverless-offline-dotenv

custom:
  domain:
    dev: api-dev.streettagged.com
    prod: api.streettagged.com
  customDomain:
    basePath: ''
    domainName:  ${self:custom.domain.${opt:stage}}
    stage: ${opt:stage}
    createRoute53Record: true
    certificateName: "*.streettagged.com"
  apigwBinary:
    types:
      - 'multipart/form-data'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    MONGO_DB: ${ssm:MONGO_DB_${opt:stage}}
    REGION: us-east-1
    USER_GROUP: ${ssm:Cognito_${opt:stage}}
    STREAM_KEY: ${ssm:STREAM_KEY_${opt:stage}}
    STREAM_SECRET: ${ssm:STREAM_SECRET_${opt:stage}}
    STREAM_APP_ID: ${ssm:STREAM_APP_ID_${opt:stage}}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

  getArt:
    handler: index.handler
    events:
      - http: 'GET /items/{proxy+}'
        cors: true

  getArtForReview:
    handler: index.handler
    events:
      - http: 'GET /images/review'
        cors: true

  getArtReviewUpdate:
    handler: index.handler
    events:
      - http: 'PUT /images/review'
        cors: true

  getModelData:
    handler: index.handler
    events:
      - http: 'PUT /images/data'
        cors: true

  getArtAll:
    handler: index.handler
    events:
      - http: 'GET /items'
        cors: true
    authorizer:
        type: COGNITO_USER_POOLS
        authorizerId:
            Ref: ApiGatewayAuthorizer

  uploadImage:
    handler: index.handler
    events:
      - http: 'POST /images'
        cors: true

  searchArt:
    handler: index.handler
    events:
      - http: 'POST /items/search'
        cors: true

  createArt:
    handler: index.handler
    events:
      - http: 'POST /items'
        cors: true
    authorizer:
        type: COGNITO_USER_POOLS
        authorizerId:
            Ref: ApiGatewayAuthorizer

  pingAuth:
    handler: index.handler
    events:
      - http: 'GET /ping'
        cors: true
    authorizer:
        type: COGNITO_USER_POOLS
        authorizerId:
            Ref: ApiGatewayAuthorizer

  createFavorite:
    handler: index.handler
    events:
      - http: 'POST /favorites'
        cors: true

  deleteFavorite:
    handler: index.handler
    events:
      - http: 'DELETE /favorites'
        cors: true

  getFavorite:
    handler: index.handler
    events:
      - http: 'GET /favorites'
        cors: true

  getStreamToken:
    handler: index.handler
    events:
      - http: 'POST /stream/token'
        cors: true
    authorizer:
        type: COGNITO_USER_POOLS
        authorizerId:
            Ref: ApiGatewayAuthorizer

  getStreamTags:
    handler: index.handler
    events:
      - http: 'GET /stream/tags'
        cors: true

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: sa${self:provider.stage}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: sa${self:provider.stage}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
