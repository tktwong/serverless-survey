# serverless.yml for the aws-passthrough service

service: aws-passthrough

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  iamManagedPolicies:
    - 'arn:aws:iam::aws:policy/AdministratorAccess'

custom:

  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

functions:
  passthrough:
    handler: handler.passthrough
    name: passthrough
    role: PassthroughRole
    events:
      - http:
          path: passthrough/get
          method: get
          cors: true

# CloudFormation resource templates
resources:

  - Resources:

      # IAM role used for the passthrough function
      PassthroughRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: 'Allow'
              Principal:
                Service: 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
          ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/AdministratorAccess'


  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}

