service: artistas # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  #profile: saulo
  deploymentBucket: deploy-serverles    
  stage: ${opt:stage, 'desa'}
  timeout: 30
  environment:
      RDS_HOSTNAME: ${file(./env.yml):custom.RDS_HOSTNAME}
      RDS_USERNAME: ${file(./env.yml):custom.RDS_USERNAME}
      RDS_PASSWORD: ${file(./env.yml):custom.RDS_PASSWORD}
      RDS_PORT1: ${file(./env.yml):custom.RDS_PORT1}
      RDS_DATABASE: ${file(./env.yml):custom.RDS_DATABASE}

package:
    exclude:
      - /node_modules

functions:
  findAfiliado:
    handler: crud/afiliado.findAll
    events:
      - http:
          path: afiliado
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Requested-With
  findAll:
    handler: crud/artistas.findAll
    events:
      - http:
          path: artistas
          method: get          
          cors:
            origin: '*'           
            headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
            - X-Amz-User-Agent
            - X-Requested-With
                 
  findOne:
      handler: crud/artistas.findOne
      events:
        - http:
            path: artistas/{artista}
            method: get
            request:
            parameters:
              paths:
                artista: true
  create:
      handler: crud/artistas.create
      events:
        - http:
            path: artistas
            method: post
  update:
    handler: crud/artistas.update
    events:
      - http:
          path: artistas/{artista}
          method: put
   
  delete:
    handler: crud/artistas.delete
    events:
      - http:
          path: artistas/{artista}
          method: delete
  
   

 

 

plugins:
  - serverless-offline
  
#   The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


