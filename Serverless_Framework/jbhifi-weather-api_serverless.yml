service: jbhifi-weather-api
useDotenv: true
provider:
  name: aws
  stage: ${env:STAGE}
  region: ap-southeast-2
  runtime: nodejs12.x
  timeout: 28
  environment:
    NODE_ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    API_KEY_DDB_TABLE: 'jbhifi-weather-api-key'
    WEATHER_API_KEY: 'c78709b7a991e8b3f65962ed11e5761e'
  apiKeys:
    - ${self:service}-${self:provider.stage}-x-api-key1
    - ${self:service}-${self:provider.stage}-x-api-key2
    - ${self:service}-${self:provider.stage}-x-api-key3
    - ${self:service}-${self:provider.stage}-x-api-key4
    - ${self:service}-${self:provider.stage}-x-api-key5
plugins:
  - serverless-offline
custom:
  serverless-offline:
    port: 4000
resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: '${self:service}-${self:provider.stage}-api'
    JBWeatherApiRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-lambda-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:service}-cloudwatch-policy-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                  Resource:
                    - arn:aws:logs:${self:provider.region}:${env:ACCOUNT_ID}:log-group:*:*:*
          - PolicyName: ${self:service}-dynamodb-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:*"
                  Resource: "arn:aws:dynamodb:${self:provider.region}:${env:ACCOUNT_ID}:table/${self:provider.environment.API_KEY_DDB_TABLE}"
functions:
  getWeather: 
    handler: weather-handler.getWeatherHandler
    role: JBWeatherApiRole
    events:
      - http:
          method: get
          path: /
          cors: true
          private: true
