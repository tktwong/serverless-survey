service: salimDemo # NOTE: update this with your service name

plugins:
  - serverless-webpack
  - serverless-offline



provider:
  name: aws
  runtime: nodejs8.10
  stage: production
  region: eu-west-1
  environment:
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${self:custom.environment.stripeSecretKey}

custom:
  # Our stage is based on what is passed in when running serverless
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-notes
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

resources:
  - ${file(resources/api-gateway-errors.yml)}

functions:
  create:
    handler: addClient.main
    events:
      - http:
          path: client
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: getClient.main
    events:
      - http:
          path: client/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: listClients.main
    events:
      - http:
          path: client
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: updateClient.main
    events:
      - http:
          path: client/{id}
          method: put
          cors: true
          authorizer: aws_iam
  
  delete:
    handler: deleteClient.main
    events:
      - http:
          path: client/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
