service: Create-Api-AutoScaling-dynamodb
custom:
  pythonRequirements:
    dockerizePip: non-linux
  OPENCV_PROCESS_BUCKET: image-bucket-uploads
  OPENCV_OUTPUT_BUCKET: image-bucket-recognized
provider:
  name: aws
  runtime: python3.8
  iamRoleStatements: # roles de permissões no bucket e dynamodb
    - Effect: Allow
      Action:
         - 's3:GetObject'
         - 's3:ListBucket'
         - 's3:PutObject'
         - 's3:PutObjectTagging'
         - 's3:*'
         - dynamodb:DescribeTable
         - dynamodb:Scan
         - dynamodb:GetItem
         - dynamodb:PutItem
         - dynamodb:UpdateItem
         - dynamodb:DeleteItem
      Resource:
        - arn:aws:s3:::${self:custom.OPENCV_PROCESS_BUCKET}/*
        - arn:aws:s3:::${self:custom.OPENCV_OUTPUT_BUCKET}/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/Logs
        - arn:aws:s3:::*
        - arn:aws:s3:::*/*
        
functions: # métodos da api 
 client_upload:
    handler: handler.client_upload
    events:
    - http:
        path: /client_upload/
        method: put
 download_client_images:
     handler: handler.download_client_images
     events:
     - http:
         path: /download_client_images/{bucket}
         method: get

 delete_client_images:
    handler: handler.delete_client_images
    events:
    - http:
        path: /delete_client_images/{bucket}/{file}
        method: delete

 
# vincula a função à esses eventos no s3 bucket selecionado
 put_log_dynamo: 
    handler: handler.put_log_dynamo
    events:
      - s3:
          bucket: ${self:custom.OPENCV_OUTPUT_BUCKET}
          events:  
            - s3:ObjectCreated:*
            - s3:ObjectRemoved:*
          existing: true

resources:
  - ${file(resources/create_table.yml)} # create table dynamodb
  - ${file(resources/instances_ec2.yml)} # create ec2 app servers
