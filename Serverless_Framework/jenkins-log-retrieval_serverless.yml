service: "jlr-${env:ENV}"

provider:
  name:               aws
  runtime:            nodejs6.10
  stage:              ${opt:stage}
  region:             ${env:AWS_DEFAULT_REGION, 'us-west-2'}
  logRetentionInDays: 7
  memorySize:         128
  timeout:            10

  environment:
    ALLOW_CIDR:   "${env:ALLOW_CIDR, 'x.x.x.x'}"
    ENV_NAME:     "${env:ENV}"
    JENKINS_HOST: "${env:JENKINS_HOST, 'http://jenkins.url/jenkins'}"
    JENKINS_PORT: "${env:JENKINS_PORT, '80'}"

  vpc:
    securityGroupIds:
      - { Ref: lambdaVpcSecurityGroup }
    subnetIds: { Fn::Split: [ "\t" , "${env:VPC_SUBNETS}" ] }

package:
  include:
    - node_modules/*
    - src/*.js
  exclude:
    - venv

functions:
  console:
    handler: src/console.console
    events:
      - http:
          path:   jlr/retrieve/console
          method: post
          cors:   yes

resources:
  Resources:
    lambdaVpcSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupName:        "${self:service}-${opt:stage}-vpc-sg"
        GroupDescription: 'allow lambda function to access vpc'
        VpcId:            "${env:VPC_ID}"
        SecurityGroupIngress:
          - IpProtocol: tcp
            CidrIp:     0.0.0.0/0
            FromPort:   "${self:provider.environment.JENKINS_PORT}"
            ToPort:     "${self:provider.environment.JENKINS_PORT}"
    lambdaVpcRole:
      Type: 'AWS::IAM::Role'
      Properties:
        Path:     /
        RoleName: "${self:service}-${opt:stage}-lambda-vpc"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Action: 'sts:AssumeRole'
              Principal:
                Service:
                  - lambda.amazonaws.com
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
