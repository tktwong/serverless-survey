# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: 'serverless-flask-${self:provider.stage}'

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-dynamodb-local
  - serverless-offline

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  db:
    users: 'users-${self:provider.stage}'
  serverless-offline:
    port: 4000
  dynamodb:
    start:
      port: 8000
  defaultStage: dev
  defaultRegion: ap-northeast-1
  defaultProfile: serverless

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  environment:
    USERS_TABLE: ${self:custom.db.users}
    S3_BUCKET_NAME: ${file(./env/${self:provider.stage}.yml):S3_BUCKET_NAME}
    SQS_QUEUE_NAME: ${file(./env/${self:provider.stage}.yml):SQS_QUEUE_NAME}
    ACCOUNT_ID: ${file(./env/${self:provider.stage}.yml):ACCOUNT_ID}
  name: aws
  runtime: python3.6
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, self:custom.defaultRegion}
  profile: ${opt:profile, self:custom.defaultProfile}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:GetQueueUrl
      Resource: "arn:aws:sqs::${self:provider.region}::${self:provider.environment.ACCOUNT_ID}::${self:provider.environment.SQS_QUEUE_NAME}"
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
# package:
#   include:
#     - users/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

# functions:
#   hello:
#     handler: handler.hello
#     events:
#       - http:
#           path: /hello
#           method: get

functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  sqs:
    handler: sqs.handler
    events:
      - sqs: "arn:aws:sqs:${self:provider.region}:${self:provider.environment.ACCOUNT_ID}:${self:provider.environment.SQS_QUEUE_NAME}"

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here

#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    SampleQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:provider.environment.SQS_QUEUE_NAME}
    S3BucketToDashboard:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${file(./env/${self:provider.stage}.yml):S3_BUCKET_NAME}"

    S3IamPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: S3BucketToDashboard-s3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: s3:*
              Resource: "arn:aws:s3:::${file(./env/${self:provider.stage}.yml):S3_BUCKET_NAME}/*"
        Roles:
          - Ref: IamRoleLambdaExecution

    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.db.users}
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
