service:
  name: serverless-library-project

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Library API
        description: Serverless application for Library
    models:
      - name: BookCreateRequest
        contentType: application/json
        schema: ${file(models/create-book.json)}
      # - name: TodoUpdateRequest
      #   contentType: application/json
      #   schema: ${file(models/update-todo.json)}
plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

provider:

  
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment: 
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    LIBRARY_TABLE: LIBRARY-${self:provider.stage}
    INDEX_NAME: userIdIndex
    IMAGES_S3_BUCKET: serverless-library-images-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300;
    
    # "Sid": "AllowXRay",
    # "Resource": "*",
    # "Action": [
    #     "xray:PutTraceSegments",
    #     "xray:PutTelemetryRecords"
    # ],
    # "Effect": "Allow"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - '*'
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Scan
  #       - dynamodb:PutItem
  #       - dynamodb:GetItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #       - dynamodb:Query
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LIBRARY_TABLE}
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LIBRARY_TABLE}/index/${self:provider.environment.INDEX_NAME}
    # - Effect: Allow
    #   Action:
    #     - s3:PutObject
    #     - s3:GetObject
    #   Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetAllBooks:
    handler: src/lambda/http/getAllBooks.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LIBRARY_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
      
    events:
      - http:
          method: get
          authorizer: Auth
          path: books
          cors: true

  GetBook:
    handler: src/lambda/http/getBook.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LIBRARY_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
      
    events:
      - http:
          method: get
          authorizer: Auth
          path: books/{bookId}
          cors: true
      
                  

  # TODO: Configure this function
  CreateBook:
    handler: src/lambda/http/createBook.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LIBRARY_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords  
        Resource: "*"

    events:
      - http:
          method: post
          path: books
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Creat new todo
            description: Create new todo
            requestModels:
              'application/json': BookCreateRequest

  # TODO: Configure this function
  UpdateBook:
    handler: src/lambda/http/updateBook.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LIBRARY_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

    events:
      - http:
          method: patch
          authorizer: Auth
          cors: true
          path: book/{bookId}

  # TODO: Configure this function
  DeleteBook:
    handler: src/lambda/http/deleteBook.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.LIBRARY_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
    events:
      - http:
          method: delete
          authorizer: Auth
          cors: true
          path: books/{bookId}

  # TODO: Configure this function
  GU:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
    events:
      - http:
          method: post
          authorizer: Auth
          cors: true
          path: books/{bookId}/attachment

resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
        
    LibraryDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.LIBRARY_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
              
        
    
    # TODO: Add any necessary AWS resources

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000    
      
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi