# serverless.ymlのリファレンス
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: aoyama-slstest1222

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-1
  logs:
    restApi: true  # API Gatewayの実行ログとアクセスログを有効にする
  logRetentionInDays: 30  # ログの保持期間。指定できる値が限られているので注意。https://qiita.com/koshilife/items/cca9b38ee999bd672da2
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.dynamoDB_table_name}
    TZ: Asia/Tokyo
  memorySize: 2048
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoDB_table_name}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamoDB_table_name}/index/*

custom:
  dynamoDB_table_name: ${self:service}-${self:provider.stage}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"
# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  batch:
    description: バッチ処理
    handler: handlers/batch.handler
    events:
      - schedule: rate(1 minute)
  bye:
    description: GET /bye
    handler: handlers/bye.handler
    events:
      - http:
          path: bye
          method: get
          cors: true
  hello:
    description: GET /hello
    handler: handlers/hello.handler
    events:
      - http:
          path: hello
          method: get
          cors:
            # CORSを詳細に設定したい場合はこう書く
            # https://www.serverless.com/framework/docs/providers/aws/events/apigateway/#request-parameters
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - Access-Token
            allowCredentials: false

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  # serverlessの値への参照はParametersで解決する。
  Parameters:
    LogRetentionInDays:
      Type: Number
      Default: 30
  Resources:
    # DynamoDBの構築
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        # キーの型を指定
        AttributeDefinitions:
          -
            AttributeName: pk
            AttributeType: S
          -
            AttributeName: sk
            AttributeType: S
        # キーの種類を指定（ハッシュorレンジキー）
        KeySchema:
          -
            AttributeName: pk
            KeyType: HASH
          -
            AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        ## プロビジョニングするキャパシティーユニットの設定
        #ProvisionedThroughput:
        #  ReadCapacityUnits: 1
        #  WriteCapacityUnits: 1
        # テーブル名の指定
        TableName: ${self:custom.dynamoDB_table_name}
