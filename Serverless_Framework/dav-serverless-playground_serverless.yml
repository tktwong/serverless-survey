service: auction-service

plugins:
  - serverless-bundle
  - serverless-pseudo-parameters

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
  iamRoleStatements:
    - ${file(iam/AuctionsTable.yml):AuctionsTableIAM}
    - ${file(iam/MailQueueIAM.yml):MailQueueIAM}
    - ${file(iam/AuctionsBucketIAM.yml):AuctionsBucketIAM}
  apiGateway:
    shouldStartNameWithService: true

resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/AuctionsBucket.yml):AuctionsBucketPolicy}


functions: ${file(functions/functions.yml):Functions}

custom:
  Auth:
    authorizer: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:dav-serverless-auth0-${self:provider.stage}-auth
  AuctionsTable:
    name: !Ref AuctionsTable
    arn: !GetAtt AuctionsTable.Arn
  MailQueue:
    arn: ${cf:dav-serverless-notifications-${self:provider.stage}.MailQueueArn}
    url: ${cf:dav-serverless-notifications-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: auctions-bucket-8f52k3d4242d0-${self:provider.stage}

# <linking: false> is not recommended for production or if you collaborate with your team
#custom:
#  bundle:
#    linting: false
