service: g

plugins:
  - serverless-apigw-binary
  - serverless-domain-manager

custom:
  apigwBinary:
    types:
      - '*/*'
  customDomain:
    domainName: ${file(./config.js):getEnv.CUSTOM_DOMAIN_NAME}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: false
    certificateName: ${file(./config.js):getEnv.CERTIFICATE_NAME}
    endpointType: regional

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - Fn::GetAtt: [ DynamoDbGMapTable, Arn ]
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        Fn::Join:
          - ''
          - - Fn::GetAtt:
              - S3GBucket
              - Arn
            - /*
  environment:
    G_MAP_TABLE: ${file(./config.js):getEnv.G_MAP_TABLE}
    G_BUCKET: ${file(./config.js):getEnv.G_BUCKET}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    DynamoDbGMapTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: ri
            AttributeType: S
        KeySchema:
          -
            AttributeName: ri
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${file(./config.js):getEnv.G_MAP_TABLE}
    S3GBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${file(./config.js):getEnv.G_BUCKET}
