# NOTE: update this with your service name
service: health-track-app-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-2

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-2:*:*"

functions:
  # FunctionName for API endpoint
  #   handler: Path to method to be called for API endpoint
  #     events:
  #       path: URL path to for API
  #       method: Request method (ex: PUT, GET, etc.)
  #       cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross domain api call
  #       authorizer: authenticate using the AWS IAM role

  # NOTES Methods
  createNote:
    handler: src/notes/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  getNote:
    handler: src/notes/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listNotes:
    handler: src/notes/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  updateNote:
    handler: src/notes/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  removeNote:
    handler: src/notes/remove.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  # CONFIGS methods
  listConfigs:
    handler: src/configs/list.main
    events:
      - http:
          path: configs
          method: get
          cors: true
          authorizer: aws_iam
  updateConfigs:
    handler: src/configs/update.main
    events:
      - http:
          path: configs
          method: put
          cors: true
          authorizer: aws_iam

  # GOALS methods
  createGoal:
    handler: src/goals/create.main
    events:
      - http:
          path: goals
          method: post
          cors: true
          authorizer: aws_iam
  removeGoal:
    handler: src/goals/remove.main
    events:
      - http:
          path: goals/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  getGoalProgress:
    handler: src/goals/progress.main
    events:
      - http:
          path: goals/progress
          method: get
          cors: true
          authorizer: aws_iam
  getGoalSummary:
    handler: src/goals/summary.main
    events:
      - http:
          path: goals/summary
          method: get
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
