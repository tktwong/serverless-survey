service: ${env:PROJECT_NAME}

provider:
  name: aws
  runtime: python3.8
  region: ${env:AWS_REGION}
  memorySize: 256
  timeout: 10
  versionFunctions: false
  environment:
    DJANGO_SETTINGS_MODULE: ${env:DJANGO_SETTINGS}
    MAILGUN_USER: ${env:MAILGUN_USER}
    MAILGUN_PASSWORD: ${env:MAILGUN_PASSWORD}
    BUCKET_NAME: ${env:BUCKET_NAME}
    CDN_DOMAIN: ${env:CDN_DOMAIN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:DeleteObject
      Resource: arn:aws:s3:::*
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
      Resource: arn:aws:logs:${env:AWS_REGION}:*:log-group:*
    - Effect: Allow
      Action:
        - logs:DescribeLogStreams
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: arn:aws:logs:${env:AWS_REGION}:*:log-group:*:*:*

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

plugins:
  - serverless-apigw-binary
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-wsgi

custom:
  apigwBinary:
    types:
      - '*/*'
  customDomain:
    domainName: ${env:PROJECT_NAME}.${env:HOST_NAME}
  pythonRequirements:
    dockerizePip: non-linux
  wsgi:
    app: srvls.wsgi.application
    packRequirements: false

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${env:BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - '*'
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${env:CDN_DOMAIN}
          DefaultCacheBehavior:
            TargetOriginId: ${env:PROJECT_NAME}
            ViewerProtocolPolicy: 'redirect-to-https'
            DefaultTTL: 2592000
            ForwardedValues:
              Headers:
                - Origin
              QueryString: false
          Enabled: true
          Origins:
            - Id: ${env:PROJECT_NAME}
              DomainName: ${env:BUCKET_NAME}.s3.amazonaws.com
              S3OriginConfig:
                OriginAccessIdentity: ''
          PriceClass: PriceClass_200
          ViewerCertificate:
            AcmCertificateArn: ${env:CERTIFICATE_ARN}
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only
    Route53RecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${env:HOST_NAME}.
        RecordSets:
        - Name: ${env:CDN_DOMAIN}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt [CloudFrontDistribution, DomainName]
        - Name: ${env:CDN_DOMAIN}
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt [CloudFrontDistribution, DomainName]
