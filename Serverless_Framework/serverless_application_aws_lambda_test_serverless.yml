# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: python-test-20200123
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  region: ap-northeast-1

# you can overwrite defaults here
#  stage: dev

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**


# Lambdaを構築
functions:
  # 関数名を指定
  helloPost:
    # handler関数を指定
    handler: handler.hello
    timeout: 200
    # Lambdaのイベントトリガーを設定
    events:
      # トリガーとしてAPIGatewayを構築
      - http:
          # リソースを指定
          path: sample/test
          # メソッドを指定
          method: post
          # 統合サービスをLambdaにする
          integration: lambda
          # カスタムリクエストの作成
          request:
            # カスタムテンプレートの作成
            template:
              application/octet-stream:
                '{"headers":{
                  #foreach($key in $input.params().header.keySet())
                  "$key": "$input.params().header.get($key)"#if($foreach.hasNext),#end
                  #end
                  }
                  }'
          # カスタムレスポンスの作成
          response:
            # ヘッダーとテンプレートの指定
            headers:
              Content-Type: "'application/octet-stream'"
            template: $input.path('$')
            # カスタムレスポンスコードの設定
            statusCodes:
              # デフォルトのステータスコード
              200:
                pattern: ''
              # カスタムステータスコード
              401:
                pattern: '.*"statusCode": 401,.*'
                template: $input.path("$.errorMessage")
                headers:
                  Content-Type: "'application/octet-stream'"
  # 関数名を指定
  helloGet:
    # handler関数を指定
    handler: handler.get
    timeout: 200
    # Lambdaのイベントトリガーを設定
    events:
      # トリガーとしてAPIGatewayを構築
      - http:
          # リソースを指定
          path: sample/test
          # メソッドを指定
          method: get
          # 統合サービスをLambdaにする
          integration: lambda
          # カスタムリクエストの作成
          request:
            # カスタムテンプレートの作成
            template:
              application/octet-stream:
                '{"headers":{
                  #foreach($key in $input.params().header.keySet())
                  "$key": "$input.params().header.get($key)"#if($foreach.hasNext),#end
                  #end
                  },
                  "body": {
                  #foreach($key in $input.params())
                  "$key": "$input.params().get($key)"#if($foreach.hasNext),#end
                  #end
                  }
                  }'
          # カスタムレスポンスの作成
          response:
            # ヘッダーとテンプレートの指定
            headers:
              Content-Type: "'application/octet-stream'"
            template: $input.path('$')
            # カスタムレスポンスコードの設定
            statusCodes:
              # デフォルトのステータスコード
              200:
                pattern: ''
              # カスタムステータスコード
              401:
                pattern: '.*"statusCode": 401,.*'
                template: $input.path("$.errorMessage")
                headers:
                  Content-Type: "'application/octet-stream'"
# リソースの構築
resources:
  Resources:
    # DynamoDBの構築
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        # キーの型を指定
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: type
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
          -
            AttributeName: type
            KeyType: RANGE
        # プロビジョニングするキャパシティーユニットの設定
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        # テーブル名の指定
        TableName: TableName1