service: book-catalog

plugins:
  - serverless-iam-roles-per-function

package:
  exclude:
    - node_modules/**
    - .idea/**
    - img/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - yarn.lock
    - buildspec.yml
    - build.sh
    - LICENSE
    - test*
  
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}  
  region: ap-southeast-1
  environment:
      DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
      
functions:
  list:
    handler: functions/list.handler
    events:
      - http:
         method: get
         path: /books
         cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Scan
        Resource: 
        - "Fn::Join": ["", ["arn:aws:dynamodb:" , {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"} , ":table/${self:provider.environment.DYNAMODB_TABLE}"] ]

  get:
    handler: functions/get.handler
    events:
      - http:
         method: get
         path: /books/{id}
         cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: 
        - "Fn::Join": ["", ["arn:aws:dynamodb:" , {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"} , ":table/${self:provider.environment.DYNAMODB_TABLE}"] ]

  create:
    handler: functions/create.handler
    events:
      - http:
          method: post
          path: /book
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: 
        - "Fn::Join": ["", ["arn:aws:dynamodb:" , {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"} , ":table/${self:provider.environment.DYNAMODB_TABLE}"] ]

  edit:
    handler: functions/edit.handler
    events:
      - http:
          method: put
          path: /books/{id}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource: 
        - "Fn::Join": ["", ["arn:aws:dynamodb:" , {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"} , ":table/${self:provider.environment.DYNAMODB_TABLE}"] ]

  delete:
    handler: functions/delete.handler
    events:
      - http:
          method: delete
          path: /books/{id}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource: 
        - "Fn::Join": ["", ["arn:aws:dynamodb:" , {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"} , ":table/${self:provider.environment.DYNAMODB_TABLE}"] ]
    
resources:
  Resources:
    BookCatalogDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}