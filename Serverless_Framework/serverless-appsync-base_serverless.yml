service: serverless-appsync-base # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  #profile: serverless-test
  stage: ${${opt:stage}, "dev"}
  #role: arn:aws:iam::496696589696:role/daas_lambda_function

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-appsync-plugin
  - serverless-appsync-offline
  #- serverless-offline-assume-role
  - serverless-offline

functions:
  greeting:
    handler: resolvers/queries/greeting.handler

package:
  individually: true

custom:
  webpack:
    webpackConfig: "webpack.config.js" # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: "yarn" # Packager that will be used to package your external modules
  appSync:
    name: ${self:service}-${self:provider.stage}
    authenticationType: API_KEY
    # logConfig:
    #   loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
    #   level: ALL # Logging Level: NONE | ERROR | ALL
    mappingTemplates:
      - dataSource: lambda_query_greeting
        type: Query #Query, Mutation, Subscription
        field: greeting
        request: query-greeting-request.vtl
        response: query-greeting-response.vtl
    schema: "schema.graphql"
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: lambda_query_greeting
        description: "Lambda DataSource"
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GreetingLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
          functionName: greeting
  appsync-emulator:
    # when using serverless-webpack it (by default) outputs all the build assets to `<projectRoot>/.webpack/service`
    # this will let appsync-offline know where to find those compiled files
    buildPrefix: ".webpack/service"
  appsync-offline:
    port: 62222
    dynamodb:
      server:
        port: 8001

resources:
  Resources:
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "${self:service}-${self:provider.stage}-Lambda-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "${self:service}-${self:provider.stage}-Lambda-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-*"
