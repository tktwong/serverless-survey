service: aws-try 

provider:
  name: aws
  runtime: nodejs10.x
  profile: default
  region: us-east-1
  stage: dev

functions:
  hello:
    handler: handler.hello

plugins:
  - serverless-offline
  - serverless-appsync-plugin

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

custom:
  appSync:
    name: defaults
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: us-east-1
      defaultAction: ALLOW
      userPoolId: s-east-1_M49IpON4g
    # logConfig:
    #   loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
    #   level: ERROR 
    # mappingTemplatesLocation: # defaults to mapping-templates
    # mappingTemplates:
    #   - dataSource: # data source name
    #     type: # type name in schema (e.g. Query, Mutation, Subscription)
    #     field: getUserInfo
    #     request: # request mapping template name
    #     response: # response mapping template name
    #   - ${file({fileLocation}.yml)} # link to a file with arrays of mapping templates
    # schema: # schema file or array of files to merge, defaults to schema.graphql
    # dataSources:
    #   - type: AMAZON_DYNAMODB
    #     name: # data source name
    #     description: # DynamoDB Table Description
    #     config:
    #       tableName: { Ref: MyTable } # Where MyTable is a dynamodb table defined in Resources
    #       serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] } # Where AppSyncDynamoDBServiceRole is an IAM role defined in Resources
    #       iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
    #         - Effect: "Allow"
    #           Action:
    #             - "dynamodb:GetItem"
    #           Resource:
    #             - "arn:aws:dynamodb:{REGION}:{ACCOUNT_ID}:myTable"
    #             - "arn:aws:dynamodb:{REGION}:{ACCOUNT_ID}:myTable/*"

    #       region: # Overwrite default region for this data source
    #   - type: RELATIONAL_DATABASE
    #     name: # data source name
    #     description: # data source description
    #     config:
    #       dbClusterIdentifier: { Ref: RDSCluster } # The identifier for RDSCluster. Where RDSCluster is the cluster defined in Resources
    #       awsSecretStoreArn: { Ref: RDSClusterSecret } # The RDSClusterSecret ARN. Where RDSClusterSecret is the cluster secret defined in Resources
    #       serviceRoleArn: { Fn::GetAtt: [RelationalDbServiceRole, Arn] } # Where RelationalDbServiceRole is an IAM role defined in Resources
    #       databaseName: # optional database name
    #       schema: # optional database schema
    #       iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
    #         - Effect: "Allow"
    #           Action:
    #             - "rds-data:DeleteItems"
    #             - "rds-data:ExecuteSql"
    #             - "rds-data:GetItems"
    #             - "rds-data:InsertItems"
    #             - "rds-data:UpdateItems"
    #           Resource:
    #             - "arn:aws:rds:{REGION}:{ACCOUNT_ID}:cluster:mydbcluster"
    #             - "arn:aws:rds:{REGION}:{ACCOUNT_ID}:cluster:mydbcluster:*"
    #         - Effect: "Allow"
    #           Action:
    #             - "secretsmanager:GetSecretValue"
    #           Resource:
    #             - "arn:aws:secretsmanager:{REGION}:{ACCOUNT_ID}:secret:mysecret"
    #             - "arn:aws:secretsmanager:{REGION}:{ACCOUNT_ID}:secret:mysecret:*"

    #       region: # Overwrite default region for this data source
    #   - type: AMAZON_ELASTICSEARCH
    #     name: # data source name
    #     description: 'ElasticSearch'
    #     config:
    #       endpoint: # required # "https://{DOMAIN}.{REGION}.es.amazonaws.com"
    #       serviceRoleArn: { Fn::GetAtt: [AppSyncESServiceRole, Arn] } # Where AppSyncESServiceRole is an IAM role defined in Resources
    #       iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
    #         - Effect: "Allow"
    #           Action:
    #             - "es:ESHttpGet"
    #           Resource:
    #             - "arn:aws:es:{REGION}:{ACCOUNT_ID}:{DOMAIN}"
    #   - type: AWS_LAMBDA
    #     name: # data source name
    #     description: 'Lambda DataSource'
    #     config:
    #       functionName: graphql # The function name in your serverless.yml. Ignored if lambdaFunctionArn is provided.
    #       lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
    #       serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] } # Where AppSyncLambdaServiceRole is an IAM role defined in Resources
    #       iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
    #         - Effect: "Allow"
    #           Action:
    #             - "lambda:invokeFunction"
    #           Resource:
    #             - "arn:aws:lambda:{REGION}:{ACCOUNT_ID}:myFunction"
    #             - "arn:aws:lambda:{REGION}:{ACCOUNT_ID}:myFunction:*"
    #   - type: HTTP
    #     name: # data source name
    #     description: 'Http endpoint'
    #     config:
    #       endpoint: # required # "https://{DOMAIN}/{PATH}"
    #   - ${file({dataSources}.yml)} # link to a file with an array or object of datasources
    # substitutions: # allows to pass variables from here to velocity templates
    #   # ${exampleVar1} will be replaced with given value in all mapping templates
    #   exampleVar1: "${self:service.name}"
    #   exampleVar2: {'Fn::ImportValue': 'Some-external-stuff'}