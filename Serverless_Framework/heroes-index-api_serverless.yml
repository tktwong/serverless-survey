service: heroes-data-api

plugins:
  - serverless-domain-manager

custom:
  LATEST_VERSION: v1
  STAGE: ${opt:stage, 'dev'}
  CUSTOM_DOMAIN_ENABLED_dev: false
  CUSTOM_DOMAIN_ENABLED_production: true
  WEBSITE_CLOUDFRONT_ALIASES_dev: []
  WEBSITE_CLOUDFRONT_ALIASES_production: ${file(variables.yml):website_aliases_production}
  ASSETS_CLOUDFRONT_ALIASES_dev: []
  ASSETS_CLOUDFRONT_ALIASES_production: ${file(variables.yml):assets_aliases_production}
  VIEWER_CERT_dev:
    CloudFrontDefaultCertificate: 'true'
  VIEWER_CERT_production:
    AcmCertificateArn: ${file(variables.yml):cert_arn}
    SslSupportMethod: sni-only
  S3_BUCKET_NAME: ${file(variables.yml):data_bucket_base_name}.${self:custom.STAGE}
  S3_ASSET_BUCKET_NAME: ${file(variables.yml):assets_bucket_base_name}.${self:custom.STAGE}
  S3_LOGGING_BUCKET_NAME: ${file(variables.yml):logging_bucket_base_name}.${self:custom.STAGE}
  S3_WEBSITE_BUCKET_NAME: ${file(variables.yml):website_bucket_base_name}.${self:custom.STAGE}
  VERSION_INDEX_FILE_NAME: index.json
  VERSIONS_FILE_NAME: versions.json
  customDomain:
    domainName: ${file(variables.yml):api_domain_name_production}
    stage: ${self:custom.STAGE}
    basePath: ""
    certificateArn: ${file(variables.yml):cert_arn}
    createRoute53Record: true
    enabled: ${self:custom.CUSTOM_DOMAIN_ENABLED_${self:custom.STAGE}}

provider:
  name: aws
  runtime: nodejs8.10
  profile: admin
  stage: ${self:custom.STAGE}
  region: us-east-1
  memorySize: 128
  timeout: 30
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: arn:aws:s3:::${self:custom.S3_BUCKET_NAME}/*
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: arn:aws:s3:::${self:custom.S3_BUCKET_NAME}
  environment:
    STAGE: ${self:provider.stage}
    LATEST_VERSION: ${self:custom.LATEST_VERSION}
    S3_BUCKET_NAME: ${self:custom.S3_BUCKET_NAME}
    S3_ASSET_BUCKET_NAME: ${self:custom.S3_ASSET_BUCKET_NAME}
    S3_DELIMITER: "/"
    VERSION_INDEX_FILE_NAME: ${self:custom.VERSION_INDEX_FILE_NAME}
    VERSIONS_FILE_NAME: ${self:custom.VERSIONS_FILE_NAME}

package:
  include:
    - handler.js
    - src/**
    - docs/**

functions:
  api:
    handler: handler.api
    timeout: 30
    events:
      - http:
          path: "/"
          method: any
          cors: true
      - http:
          path: "/{proxy+}"
          method: any
          cors: true

  updateVersionList:
    handler: handler.updateVersionList
    events:
      - s3:
          bucket: ${self:custom.S3_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - suffix: ${self:custom.VERSION_INDEX_FILE_NAME}
      - s3:
          bucket: ${self:custom.S3_BUCKET_NAME}
          event: s3:ObjectRemoved:*
          rules:
            - suffix: ${self:custom.VERSION_INDEX_FILE_NAME}
resources:
  Resources:
    loggingBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.S3_LOGGING_BUCKET_NAME}
    assetBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.S3_ASSET_BUCKET_NAME}
        AccessControl: PublicRead
    websiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.S3_WEBSITE_BUCKET_NAME}
        AccessControl: PublicRead
        WebsiteConfiguration:
          ErrorDocument: index.html
          IndexDocument: index.html
    websiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: websiteBucket
        PolicyDocument:
          Statement:
            -
              Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.S3_WEBSITE_BUCKET_NAME}/*
    assetBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: assetBucket
        PolicyDocument:
          Statement:
            -
              Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.S3_ASSET_BUCKET_NAME}/*
    websiteCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            -
              DomainName: ${self:custom.S3_WEBSITE_BUCKET_NAME}.s3-website-${self:provider.region}.amazonaws.com
              Id: website-${self:custom.STAGE}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: true
          Aliases: ${self:custom.WEBSITE_CLOUDFRONT_ALIASES_${self:custom.STAGE}}
          DefaultRootObject: index.html
          CustomErrorResponses:
            -
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - OPTIONS
              - HEAD
            TargetOriginId: website-${self:custom.STAGE}
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate: ${self:custom.VIEWER_CERT_${self:custom.STAGE}}
          Logging:
            Bucket: ${self:custom.S3_LOGGING_BUCKET_NAME}.s3.amazonaws.com
            Prefix: websiteCloudFront/
    assetCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            -
              DomainName: ${self:custom.S3_ASSET_BUCKET_NAME}.s3.amazonaws.com
              Id: assets-${self:custom.STAGE}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: true
          Aliases: ${self:custom.ASSETS_CLOUDFRONT_ALIASES_${self:custom.STAGE}}
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - OPTIONS
              - HEAD
            TargetOriginId: assets-${self:custom.STAGE}
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate: ${self:custom.VIEWER_CERT_${self:custom.STAGE}}
          Logging:
            Bucket: ${self:custom.S3_LOGGING_BUCKET_NAME}.s3.amazonaws.com
            Prefix: assetsCloudFront/
  Outputs:
    websiteCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ websiteCloudFrontDistribution, DomainName ]
    assetCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ assetCloudFrontDistribution, DomainName ]
