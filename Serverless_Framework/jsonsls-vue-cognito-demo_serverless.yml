# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service:
  name: ${self:custom.appconfig.stackName}
plugins:
  - serverless-cloudside-plugin
  - serverless-offline

package:
  individually: false
  excludeDevDependencies: true
  include:
    - config/
    - dist/
    - node_modules/
custom:
  file: ${file(./config/serverlessconfig.json)}
  appconfig: ${file(./config/appconfig.json)}
  serverless-offline:
    resourceRoutes: true
provider:
  stage: ${opt:stage, 'dev'}
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.file.awsRegion, 'eu-central-1'}
  stackTags: # Tags that will be added to each of the deployment resources
    jsonsls: ${self:custom.file.stackName}
  environment:
    NODE_ENV: ${self:provider.stage}
    s3Bucket: ${self:custom.file.s3Bucket}
    s3File: ${self:custom.file.s3File}
    basePath: ${self:custom.file.basePath}
    COGNITO_USER_POOL_ID:
      Ref: CognitoUserPool
    region: ${self:provider.region}

  apiGateway: # Optional API Gateway global config
    binaryMediaTypes: # Optional binary media types the API might return
      - "*/*"
  apiKeys:
    - ${self:service}.${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${self:custom.file.s3Bucket}/*"

# The `functions` block defines what code to deploy
functions:
  app:
    timeout: 15
    handler: ./dist/handler.handler
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: /
          method: ANY
          private: ${self:custom.appconfig.enableApiKeyAuth}
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
      - http:
          path: "{proxy+}"
          method: ANY
          private: ${self:custom.appconfig.enableApiKeyAuth}
          cors:
            origin: "*" # <-- Specify allowed origin
            headers: # <-- Specify allowed headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
resources:
  Resources:
    # S3 Bucket
    s3BucketStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.file.s3Bucket}
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:service}.${self:provider.stage}-user
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:service}.${self:provider.stage}-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

  # Print out the Id of the User Pool that is created
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
