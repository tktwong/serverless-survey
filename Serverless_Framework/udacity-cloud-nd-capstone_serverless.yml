service:
  name: serverless-capstone-project

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    SUPERHEROS_TABLE: Hero-${self:provider.stage}
    IMAGE_TABLE: Hero-imgs-${self:provider.stage}
    SUPERHERO_ID_INDEX: HeroIdIndex
    SUPERHERO_USER_INDEX: HeroUserIndex
    IMAGES_S3_BUCKET: serverless-babalola-capstone-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    CERTIFICATE_DOWNLOAD_URL: https://dev-babalola.eu.auth0.com/.well-known/jwks.json

  tracing:
    lambda: true
    apiGateway: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udacity Cloud ND serverless
        description: Serverless capstone project

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetSuperHero:
    handler: src/lambda/http/getSuperHero.handler
    events:
      - http:
          method: get
          path: superhero
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUPERHEROS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUPERHEROS_TABLE}/index/${self:provider.environment.SUPERHERO_USER_INDEX}

  CreateSuperHero:
    handler: src/lambda/http/createSuperHero.handler
    events:
      - http:
          method: post
          path: superhero
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(src/models/create-superhero-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUPERHEROS_TABLE}

  UpdateSuperHero:
    handler: src/lambda/http/updateSuperHero.handler
    events:
      - http:
          method: patch
          path: superhero/{superheroId}
          authorizer: Auth
          cors: true
          request:
            schema:
              application/json: ${file(src/models/update-superhero-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUPERHEROS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUPERHEROS_TABLE}/index/${self:provider.environment.SUPERHERO_ID_INDEX}
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*

  DeleteSuperHero:
    handler: src/lambda/http/deleteSuperHero.handler
    events:
      - http:
          method: delete
          path: superhero/{superheroId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUPERHEROS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUPERHEROS_TABLE}/index/${self:provider.environment.SUPERHERO_ID_INDEX}
      - Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*:*:*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: superhero/{superheroId}/attachment
          authorizer: Auth
          cors: true
    # IAMRole definitions below are possible because of the use of serverless-iam-roles-per-function
    # They are an alternative to defining roles as individual resources
    # role: CustomRoleForS3Access
    # iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service.name}-generate-url-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUPERHEROS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

resources:
  Resources:
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy1:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: GetPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket

    SuperHeroDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: superheroId
            AttributeType: S
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: superheroId
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SUPERHEROS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.SUPERHERO_ID_INDEX}
            KeySchema:
              - AttributeName: superheroId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
