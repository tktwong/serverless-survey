service: manikmdu-util-mail-sender
plugins:
  - serverless-step-functions

custom:
  description:
    serviceName: KIID Dissimination Service
    teamName: API Store Team
  teamNamePrefix: manikmdu
  stackNameInfix: mailsender
  serviceName: mailsubscriber
  stage: '${opt:stage, self:provider.stage}'
  docTableName: MANIKMDU_DOC_STORE_TABLE
  docTableIndexName: dT_dST_cty_loc-index
  tags:
    Squad: APIStore
    Application: APICache
  Tags:
    -
      Key: Squad
      Value: APIStore
    -
      Key: Application
      Value: APICache
      
  dev:
    #role: "arn:aws:iam::974521262434:role/apistore-email-sender-role"
    role: "arn:aws:iam::130154230810:role/mani-email-sender-role"
    proxy: ""
    proxyPort: null
    cfnRole: 'arn:aws:iam::130154230810:role/apicache-gitlabrunner'
    resourcePolicy: null

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stackName: ${self:custom.teamNamePrefix}-${self:custom.stackNameInfix}-${self:custom.stage}
  role: '${self:custom.${self:custom.stage}.role}'
  #cfnRole: '${self:custom.${self:custom.stage}.cfnRole}'
  environment:
    stage: '${self:custom.stage}'
    docTableName: '${self:custom.docTableName}'
    docTableIndexName: '${self:custom.docTableIndexName}'
    defaultPeriod: 'THIS_MONTH'
    #API_USERNAME: 'apistore.fund-allocation-api.${self:custom.stage}.api-username'
    #DYNAMODB_TABLE: ${self:custom.teamNamePrefix}.${self:custom.serviceName}.${self:custom.stage}
    #DENODO_ENDPOINT: 'https://%s:%s@${self:custom.${self:custom.stage}.denodo.host}:${self:custom.${self:custom.stage}.denodo.port}${self:custom.${self:custom.stage}.denodo.path}'
    #DENODO_USERNAME: '${self:custom.${self:custom.stage}.denodo.username}'
    #proxy: '${self:custom.${self:custom.stage}.proxy}'
    #sqsMTrackerQueueUrl: '${self:custom.sqsMTrackerQueueUrl}'
    #delete: true
  tags: '${self:custom.tags}'
  #resourcePolicy: '${self:custom.${self:custom.stage}.resourcePolicy}'


functions:
  sendMailWithAttachment:  
    name: ${self:custom.teamNamePrefix}-${self:custom.stackNameInfix}-sendMail-${self:custom.stage}
    handler: src/mailSenderSQSDataSrc.send
    tags: '${self:custom.tags}'
    

  prepareDownloadS3Object:  
    name: ${self:custom.teamNamePrefix}-${self:custom.stackNameInfix}-prepareDocArchive-${self:custom.stage}
    handler: src/prepareDocArchive.handler
    timeout: 120
    memorySize: 2028
    tags: '${self:custom.tags}'

  docChangeIdentifier:
    name: ${self:custom.teamNamePrefix}-${self:custom.stackNameInfix}-docChangeIdentifier-${self:custom.stage}
    handler: src/docChangeIdentifier.handler
    tags: '${self:custom.tags}'
    events:
      - schedule:
          name: CH_ALL_DATA_CHANGE_SCHEDULE_DAILY_RUN
          rate: rate(60 minutes)
          enabled: true
          input:
            - country: CH
            - lang: ALL
            - docType: Fund_Documents
            - docSubType: KIID
stepFunctions:
  stateMachines:
    SampleStateMachine:
      name: SampleStateMachine
      definition:
        StartAt: InputDefinition
        States:
          InputDefinition:
            Type: Pass
            Result:
              country: CH
              language: de
              docType: Fund_Documents
              docSubType: KIID
              period: LAST_WEEK
              emailAddress: manikmdu@me.com
            ResultPath: "$.data"
            Next: FetchDocChanges
          FetchDocChanges:
            Type: Task
            Resource: arn:aws:lambda:eu-west-1:130154230810:function:manikmdu-mailsender-docChangeIdentifier-dev
            ResultPath: "$.docChangeData"
            Next: CheckDocChanges
          CheckDocChanges:
            Type: Choice
            Choices:
            - Variable: "$.docChangeData.docChangeExist"
              BooleanEquals: true
              Next: PrepareZip
            Default: NoDocChange
          PrepareZip:
            Type: Task
            Resource: arn:aws:lambda:eu-west-1:130154230810:function:manikmdu-mailsender-prepareDocArchive-dev
            ResultPath: "$.docArchiveData"
            Next: PrepareEmailToSendAndQueue
          PrepareEmailToSendAndQueue:
            Type: Task
            Resource: arn:aws:lambda:eu-west-1:130154230810:function:manikmdu-mailsender-sendMail-dev
            End: true
          NoDocChange:
            Type: Pass
            End: true

resources:
  Description: The ${self:custom.description.serviceName} of the ${self:custom.description.teamName}
  Resources:
    BucketForKiidDoc:
      Type: AWS::S3::Bucket
      Properties:
        Tags: '${self:custom.Tags}'
        BucketName: manikmdu.test.nnip.dev.doc.kiid
    DocStoreDynomoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: docId
            AttributeType: S
          -
            AttributeName: dT_dST_cty_loc
            AttributeType: S
          -
            AttributeName: publishedDate
            AttributeType: S
        KeySchema:
          -
            AttributeName: docId
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: dT_dST_cty_loc-index
            KeySchema:
              -
                AttributeName: dT_dST_cty_loc
                KeyType: HASH
              -
                AttributeName: publishedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits:  5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        SSESpecification:
          SSEEnabled: true
        TableName: MANIKMDU_DOC_STORE_TABLE
    # LambdaInvokePermissionForFn1:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     FunctionName: ${self:custom.teamNamePrefix}-${self:custom.stackNameInfix}-sendMail-${self:custom.stage}
    #     Action: 'lambda:InvokeFunction'
    #     Principal: states.amazonaws.com
    #     SourceArn:  arn:aws:states:::apistore*
    # LambdaInvokePermissionForFn2:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     FunctionName: ${self:custom.teamNamePrefix}-${self:custom.stackNameInfix}-prepareDocArchive-${self:custom.stage}
    #     Action: 'lambda:InvokeFunction'
    #     Principal: states.amazonaws.com
    #     SourceArn: arn:aws:states:::apistore*
    # LambdaInvokePermissionForFn3:
    #   Type: AWS::Lambda::Permission
    #   Properties:
    #     FunctionName: ${self:custom.teamNamePrefix}-${self:custom.stackNameInfix}-docChangeIdentifier-${self:custom.stage}
    #     Action: 'lambda:InvokeFunction'
    #     Principal: states.amazonaws.com
    #     SourceArn: arn:aws:states:::apistore*