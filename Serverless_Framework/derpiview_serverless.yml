service: derpiview
provider:
  region: us-east-1
  stage: lgs
  credentials: ${secrets:lgs-aws}
  name: aws
  runtime: nodejs8.10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DescribeTable
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - "arn:aws:dynamodb:*:*:table/items-${self:provider.stage}"
        - "arn:aws:dynamodb:*:*:table/items-${self:provider.stage}/index/*"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - 'arn:aws:s3:::service-constants/*'

tenant: jeremy
app: lgs

plugins:
  - '@serverless/enterprise-plugin'

custom:
  safeguards: false

functions:
  getPostDerpi:
    handler: getPost.getPostDerpi
    environment:
      TABLE_NAME: items-${self:provider.stage}
    events:
      - http:
          path: '/derpi/post/{postId}/representations/{size}'
          method: GET
  getPostBooru:
    handler: getPost.getPostBooru
    environment:
      TABLE_NAME: items-${self:provider.stage}
    events:
      - http:
          path: '/booru/{booruDomain}/post/{postId}/sample'
          method: GET
  notify:
    handler: notify.notify
    environment:
      TABLE_NAME: items-${self:provider.stage}
    events:
      - stream:
          type: dynamodb
          arn:
            'Fn::GetAtt':
              - Table
              - StreamArn

resources:
  Resources:
    CloudFrontDistribution:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Comment: LGS public API Distro
          Aliases:
            - 'view.littlegirl.show'
          ViewerCertificate:
            AcmCertificateArn: 'arn:aws:acm:us-east-1:137419601692:certificate/bf491102-d34d-487f-ad22-6f7decad90fe'
            SslSupportMethod: sni-only
          DefaultCacheBehavior:
            TargetOriginId: DerpiviewApi
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 14400
            ForwardedValues:
              QueryString: true
              Headers: []
          Enabled: true
          Origins:
            - Id: DerpiviewApi
              DomainName:
                'Fn::Join':
                  - .
                  - - Ref: ApiGatewayRestApi
                    - execute-api.${self:provider.region}.amazonaws.com
              OriginPath: /${self:provider.stage}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
    DistributionCustomDomain:
      Type: 'AWS::Route53::RecordSet'
      Properties:
        Comment: Cache-backed domain for Derpiview
        Type: A
        HostedZoneName: littlegirl.show.
        Name: view.littlegirl.show.
        AliasTarget:
          DNSName:
            'Fn::GetAtt':
              - CloudFrontDistribution
              - DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
    Table:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: items-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: priPart
            AttributeType: S
          - AttributeName: priSort
            AttributeType: S
        KeySchema:
          - AttributeName: priPart
            KeyType: HASH
          - AttributeName: priSort
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          Enabled: true
          AttributeName: ttl
        StreamSpecification:
          StreamViewType: NEW_IMAGE
