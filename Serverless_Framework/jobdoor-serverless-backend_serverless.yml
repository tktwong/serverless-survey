service:
  name: jobdoor
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    IMAGES_S3_BUCKET: jobdoor-images-${self:provider.stage}
    JOBPOSTS_TABLE: JobPosts-${self:provider.stage}
    JOBPOSTS_POST_ID_INDEX: JobPosts-PostId-index-${self:provider.stage}
    JOBDOOR_USER_TABLE: JobDoorUser-${self:provider.stage}
    JOBDOOR_USER_ID_INDEX: JobDoorUser-UserId-index-${self:provider.stage}
    AUTH_0_SECRET_ID: Auth0Secret-Jobdoor-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0SecretJobDoor
    # AUTH_0_SECRET_FIELD: R4a8UXJucA9lE1O6jlzZD4OZkHk5fwosX89cDKPsEcRAsGVZvE3ZWFhs1iZwiah7
    JOBPOSTS_BY_POSTER_ID_INDEX: JobPostsByPosterId-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 5000

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref Auth0Secret
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn

  GetJobPosts:
    handler: src/lambda/http/getJobPosts.handler
    events:
      - http:
          method: get
          path: jobposts
          request:
            parameters:
              paths:
                locationId:true
                userType:true
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBPOSTS_TABLE}

  CreateUser:
    handler: src/lambda/http/createUser.handler
    events:
      - http:
          method: post
          path: user
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/validators/CreateUserRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBDOOR_USER_TABLE}

  GetUser:
    handler: src/lambda/http/getUser.handler
    events:
      - http:
          method: get
          path: user
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBDOOR_USER_TABLE}/index/${self:provider.environment.JOBDOOR_USER_ID_INDEX}


  CreateJobPost:
    handler: src/lambda/http/createJobPost.handler
    events:
      - http:
          method: post
          path: jobpost
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/validators/CreateJobPostRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBPOSTS_TABLE}

  GetJobPost:
    handler: src/lambda/http/getJobPost.handler
    events:
      - http:
          method: get
          path: jobpost/{jobId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBPOSTS_TABLE}/index/${self:provider.environment.JOBPOSTS_POST_ID_INDEX}

  DeleteJobPost:
    handler: src/lambda/http/deleteJobPost.handler
    events:
      - http:
          method: delete
          path: jobpost/{jobId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBPOSTS_TABLE}/index/${self:provider.environment.JOBPOSTS_POST_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBPOSTS_TABLE}



  GetCandidates:
    handler: src/lambda/http/getCandidates.handler
    events:
      - http:
          method: get
          path: candidates
          request:
            parameters:
              paths:
                jobId:true
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBPOSTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBDOOR_USER_TABLE}

  GetImageUploadUrl:
    handler: src/lambda/http/getUploadImageUrl.handler
    events:
      - http:
          method: get
          path: imageurl
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBDOOR_USER_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBDOOR_USER_TABLE}/index/${self:provider.environment.JOBDOOR_USER_ID_INDEX}


  ApplyForJob:
    handler: src/lambda/http/applyForJob.handler
    events:
      - http:
          method: put
          path: jobpost
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/validators/ApplyForJobRequest.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBPOSTS_TABLE}

  EditJobPost:
    handler: src/lambda/http/editJobPost.handler
    events:
      - http:
          method: put
          path: jobpost/edit
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/validators/UpdateJobPostRequest.json)}

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBPOSTS_TABLE}


resources:
  Resources:

    JobPostsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: locationCode
            AttributeType: S
          - AttributeName: jobId
            AttributeType: S
        KeySchema:
          - AttributeName: locationCode
            KeyType: HASH
          - AttributeName: jobId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.JOBPOSTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.JOBPOSTS_POST_ID_INDEX}
            KeySchema:
            - AttributeName: jobId
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    JobDoorUserDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: locationCode
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: locationCode
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.JOBDOOR_USER_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.JOBDOOR_USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    # if authorization fails this response is snet by default

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi


    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-jobdoor-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey
