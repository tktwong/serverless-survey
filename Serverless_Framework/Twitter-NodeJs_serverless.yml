service: aws-node-dynamo

custom: 
  settings:
    USER_TABLE: users2

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  environment: ${self:custom.settings}
  region: eu-north-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.USER_TABLE}"

functions:
  createUser:
    handler: handler.createUser
    events:
    - http:
        path: /users
        method: post
        cors: true
  getAllUsers:
    handler: handler.getAllUsers
    events:
    - http:
        path: /users
        method: get
        cors: true
  getUser:
    handler: handler.getUser
    events:
    - http:
        path: /users/{id}
        method: get
        cors: true
  updateUser:
    handler: handler.updateUser
    events:
    - http:
        path: /users/{id}
        method: put
        cors: true
  deleteUser:
    handler: handler.deleteUser
    events:
    - http:
        path: /users/{id}
        method: delete
        cors: true
  makeTweet:
    handler: tweetsHandler.makeTweet
    events:
    - http:
        path: /users/{id}/tweet
        method: put
        cors: true
  getTweets:
    handler: tweetsHandler.getTweets
    events:
    - http:
        path: /users/{id}/tweets
        method: get
        cors: true
  
resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.USER_TABLE}
