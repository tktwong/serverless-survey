service: nat-sls

provider:
  name: aws
  region: eu-west-1
  stage: dev
  memorySize: 256
  runtime: nodejs12.x
  role: LambdaRole
  environment:

package:
  individually: true

resources:
  Conditions:
    IsProd:
      Fn::Equals:
        - ${opt:stage, self:provider.stage}
        - prod
    IsDev:
      Fn::Equals:
        - ${opt:stage, self:provider.stage}
        - dev
  Resources:
    LambdaRole: ${file(./resource/LambdaRole.yml)}
    LambdaSecurityGroup: ${file(./resource/LambdaSecurityGroup.yml)}
    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}
    ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(./resource/ServerlessSubnetB.yml)}
    ServerlessSubnetC: ${file(./resource/ServerlessSubnetC.yml)}
    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
    OutgoingRouteTable: ${file(./resource/OutgoingRouteTable.yml)}
    OutgoingRoute: ${file(./resource/OutgoingRoute.yml)}
    PublicSubnet: ${file(./resource/PublicSubnet.yml)}
    PublicSubnetAssociation: ${file(./resource/PublicSubnetAssociation.yml)}
    NatInstance: ${file(./resource/NatInstance.yml)}
    NatInstanceSG: ${file(./resource/NatInstanceSG.yml)}
    NatRoute: ${file(./resource/NatRoute.yml)}
    PrivateSRTA: ${file(./resource/PrivateSRTA.yml)}
    PrivateSRTB: ${file(./resource/PrivateSRTB.yml)}
    PrivateSRTC: ${file(./resource/PrivateSRTC.yml)}
    PrivateRouteTable: ${file(./resource/PrivateRouteTable.yml)}

    NatEIP: ${file(./resource/NatEIP.yml)}
    NatGateway: ${file(./resource/NatGateway.yml)}
    NatGatewayRoute: ${file(./resource/NatGatewayRoute.yml)}

functions:
  nat:
    vpc:
      securityGroupIds:
        - !GetAtt LambdaSecurityGroup.GroupId
      subnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
    handler: src/index.handler
    events:
      - http:
          path: /nat
          method: get
          cors: true
