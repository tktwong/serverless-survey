# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: household-finance-backend
org: jaakkoeranen
provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-west-1
  environment:
    GROUPS: ${self:service}-groups-${opt:stage, self:provider.stage}
    SHOPPING_LIST: ${self:service}-shopping-list-${opt:stage, self:provider.stage}
    FINANCE: ${self:service}-finance-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"

functions:
  - '${file(src/handlers/groups/groups.serverless.yml)}'
  - '${file(src/handlers/shoppingList/shoppingList.serverless.yml)}'
  - '${file(src/handlers/finance/finance.serverless.yml)}'

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin

package:
  individually: true
  excludeDevDependencies: false
  exclude:
    - .dynamodb/**
    - node_modules/**
    - '!node_modules/dotenv/**'
    - '!node_modules/dotenv-expand/**'

resources:
  Resources:
    Groups:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.GROUPS}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ShoppingList:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SHOPPING_LIST}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Finance:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FINANCE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

custom:
  serverless-offline:
    httpPort: 3000
    port: 3000
    host: 0.0.0.0
    resourceRoutes: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations