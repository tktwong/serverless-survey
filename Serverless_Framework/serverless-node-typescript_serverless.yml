service: serverless-node-typescript
custom:
    version: 1.0.0
    appName: serverless-node-typescript
    webpack:
      webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
      includeModules: true   # Node modules configuration for packaging
      packager: 'npm'   # Packager that will be used to package your external modules
      excludeFiles: test/**/*.js # Provide a glob for files to ignore
    # note I have disabled the plugin from generating code by commenting out default: true
    # serverless-plugin-warmup keeps throwing an error when compiling
    # I have opened an issue here to address: https://github.com/FidelLimited/serverless-plugin-warmup/issues/85
    # If it ever gets resolved we can comment the code in and get rid of our hacks.
    warmup:
      folderName: '_warmup' # Name of the folder created for the generated warmup
      cleanFolder: false
      memorySize: 256
      vpc: true
      events:
        - schedule: 'cron(0/1 8-17 ? * MON-FRI *)' # Run WarmUp every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
      timeout: 20
      prewarm: true # Run WarmUp immediately after a deploymentlambda
      concurrency: 5 # Warm up 5 concurrent instances
    alerts:
      topics:
        alarm:
          topic: ${self:service}-alerts-alarm
          notifications:
            - protocol: email
              endpoint: ${opt:alert-email}
        alarms:
            - functionErrors
            - functionDuration
            - functionThrottles
plugins:
    - serverless-webpack
    - serverless-offline
    - serverless-plugin-aws-alerts
    - serverless-plugin-bind-deployment-id
    - serverless-plugin-tracing
    - serverless-plugin-warmup
    - serverless-plugin-canary-deployments

provider:
    name: aws
    runtime: nodejs8.10
    memorySize: 512
    tracing: true
    region: ${opt:region, 'us-west-2'}
    profile: ${opt:profile, 'default'}
    environment:
        API_VERSION: '${self:custom.version}'
        APP_NAME: '${self:custom.appName}'
    iamRoleStatements:
        -
            Effect: Allow
            Action: ['codedeploy:*']
            Resource: "*"
        -
            Effect: Allow
            Action: ['xray:PutTraceSegments', 'xray:PutTelemetryRecords']
            Resource: '*'
        -
            Effect: Allow
            Action: ['ec2:CreateNetworkInterface']
            Resource: '*'
# Example permissions for API Gateway
#        -
#            Effect: Allow
#            Action: ['apigateway:POST', 'apigateway:PUT', 'apigateway:PATCH', 'apigateway:DELETE', 'apigateway:GET', 'apigateway:HEAD', 'apigateway:OPTIONS']
#            Resource: 'arn:aws:execute-api:*:*:ApiGatewayRestApi/*'
# Example permissions for an S3 bucket
#        -
#            Effect: Allow
#            Action: ['s3:GetObject']
#            Resource:
#              - Fn::GetAtt: [ AutoCompleteS3Bucket, Arn ]
#              - Fn::Join: ['', [ Fn::GetAtt: [ AutoCompleteS3Bucket, Arn ], "/*" ]]
        -
            Effect: Allow
            Action: ['lambda:InvokeFunction']
            Resource:
              - Fn::Join:
                - ':'
                - - arn:aws:lambda
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - function:${self:service}-*

package:
    excludeDevDependencies: true
    exclude:
        - '.git/**'
        - '.circleci/**'
        - 'test/**'
        - 'dist'
        - .gitignore
        - .npmignore
        - tsconfig.json
        - webpack.config.js
    include:
        - 'apiSpec.json'
functions:
    Handler:
      handler: src/index.handler
      warmup: true
#        environment:
#          JWT_SECRET: ${opt:jwt-secret}
#        vpc:
#          securityGroupIds:
#            - ${opt:vpc-security-group}
#          subnetIds:
#            - ${opt:vpc-subnet-a}
#            - ${opt:vpc-subnet-b}
      deploymentSettings:
        type: Linear10PercentEvery1Minute
        alias: Live
#          alarms:
#           - <%- your Alamrm %>
#          preTrafficHook: <%- your lambda function %>
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#      events:
#        - http:
#            path: /
#            method: get
#            cors:
#              origin: '*'
#            headers:
#                - Content-Type
#                - Authorization
#                - x-amzn-trace-id
#       - websocket: $connect
#       - s3: ${env:BUCKET}
#       - schedule: rate(10 minutes)
#       - sns: greeter-topic
#       - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#       - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#       - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#       - iot:
#          sql: "SELECT * FROM 'some_topic'"
#       - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#       - cloudwatchLog: '/aws/lambda/hello'
#       - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    AutoCompleteS3Bucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
