# NOTE: update this with your service name
service: ekiee-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: eu-west-2
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}


  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${env:TABLE_NAME}
    stripeSecretKey: ${env:STRIPE_TEST_SECRET_KEY}

   # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: src/create.main
    events:
      - http:
          path: blogs
          method: post
          cors: true
          authorizer: aws_iam
  getPost:
    handler: src/get.main
    events:
      - http:
          path: blogs/{id}
          method: get
          cors: true
          authorizer: aws_iam
  myList:
    handler: src/myList.main
    events:
      - http:
          path: blogs/mylist
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: src/update.main
    events:
      - http:
          path: blogs/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: src/delete.main
    events:
      - http:
          path: blogs/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billing:
    handler: src/billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
