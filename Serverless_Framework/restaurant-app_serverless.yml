# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: restaurant-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-pseudo-parameters

custom:
  bundle:
    linting: true
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  versionFunctions: false

  # you can overwrite defaults here
  stage: dev
  region: ap-southeast-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource:
        Fn::GetAtt:
          - restaurantsTable
          - Arn
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
    - Effect: Allow
      Action: kinesis:PutRecord
      Resource:
        Fn::GetAtt:
          - orderEventsStream
          - Arn

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  get-index:
    handler: src/get-index/index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: ApiGatewayRestApi
            - '.execute-api.${opt:region, self:provider.region}.amazonaws.com/${opt:stage, self:provider.stage}/restaurants'
      place_order_api:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: ApiGatewayRestApi
            - '.execute-api.${opt:region, self:provider.region}.amazonaws.com/${opt:stage, self:provider.stage}/orders'
      cognito_user_pool_id: ${ssm:/${self:service}/${opt:stage, self:provider.stage}/cognito_user_pool_id}
      cognito_client_id: ${ssm:/${self:service}/${opt:stage, self:provider.stage}/cognito_web_client_id}
  get-restaurants:
    handler: src/get-restaurants/index.handler
    events:
      - http:
          path: /restaurants/
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: ${ssm:/${self:service}/${opt:stage, self:provider.stage}/table_name}
  search-restaurants:
    handler: src/search-restaurants/index.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:/${self:service}/${opt:stage, self:provider.stage}/cognito_user_pool_id}
    environment:
      restaurants_table: ${ssm:/${self:service}/${opt:stage, self:provider.stage}/table_name}
  place-order:
    handler: src/place-order/index.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:/${self:service}/${opt:stage, self:provider.stage}/cognito_user_pool_id}
    environment:
      order_events_stream: ${ssm:/${self:service}/${opt:stage, self:provider.stage}/stream_name}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    restaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${ssm:/${self:service}/${opt:stage, self:provider.stage}/table_name}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${ssm:/${self:service}/${opt:stage, self:provider.stage}/stream_name}
        ShardCount: 1
