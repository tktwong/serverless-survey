service:
  name: serverless-trip-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    TRIPS_TABLE: jw-trips-table-${self:provider.stage}
    INDEX_NAME: tripId
    S3_BUCKET: jw-udacity-trips-bucket-${self:provider.stage}
    ROUTE_API_KEY: 5b3ce3597851110001cf62487a65e678a2e54ec181caf798e4271d99
    WEATHER_API_KEY: 378b9931e4515a61c129b705606052bc


custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Trips API
        description: Serverless application for tracking 'trips'
    models:
      - name: TripRequest
        contentType: application/json
        schema: ${file(src/models/create-trip-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TRIP: Configure this function
  GetTrips:
    handler: src/lambda/http/getTrips.handler
    events:
      - http:
          method: get
          path: trips
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPS_TABLE}/index/${self:provider.environment.INDEX_NAME}

  # TRIP: Configure this function
  CreateTrip:
    handler: src/lambda/http/createTrip.handler
    events:
      - http:
          method: post
          path: trips
          cors: true
          authorizer: Auth
    request:
      # Schema that will be used to validate incoming requests
      schema:
        application/json: ${file(src/models/create-trip-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPS_TABLE}

  # TRIP: Configure this function
  UpdateTrip:
    handler: src/lambda/http/updateTrip.handler
    events:
      - http:
          method: patch
          path: trips/{tripId}
          cors: true
          authorizer: Auth
    request:
      # Schema that will be used to validate incoming requests
      schema:
        application/json: ${file(src/models/create-trip-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPS_TABLE}/index/${self:provider.environment.INDEX_NAME}


  # TRIP: Configure this function
  DeleteTrip:
    handler: src/lambda/http/deleteTrip.handler
    events:
      - http:
          method: delete
          path: trips/{tripId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRIPS_TABLE}/index/${self:provider.environment.INDEX_NAME}


  # TRIP: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: trips/{tripId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements: 
      - Action: 
          - s3:PutObject
          - s3:GetObject
        Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*

resources:
  Resources:
    # TRIP: Add any necessary AWS resources
    GatewayResponseDefault4XX: 
      Properties: 
        ResponseParameters: 
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type, X-Amz-Date,Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: ApiGatewayRestApi
      Type: "AWS::ApiGateway::GatewayResponse"
    TripTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: tripId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tripId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TRIPS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    AttachmentsBucket: 
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration: 
          CorsRules: 
            - AllowedOrigins: 
                - "*"
              AllowedHeaders: 
                - "*"
              AllowedMethods: 
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy: 
      Type: AWS::S3::BucketPolicy
      Properties: 
        Bucket: !Ref AttachmentsBucket
        PolicyDocument: 
          Id: MyPolicy
          Statement: 
            - Action: 
                - "s3:GetObject"
                - "s3:PutObject"
              Effect: Allow
              Principal: "*"
              Resource: "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"
              Sid: PublicReadWriteBucketPolicy
          Version: "2012-10-17"
