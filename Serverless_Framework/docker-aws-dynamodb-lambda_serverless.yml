service: dynamodb-lambda

plugins:
  - serverless-offline

custom:
  env:
    development:
      DB_TABLE: users-develop
      AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${env:AWS_REGION}
      DYNAMO_LOCAL_ENDPOINT: ${env:DYNAMO_LOCAL_ENDPOINT}

    staging:
      DB_TABLE: users-staging

    production:
      DB_TABLE: users

provider:
  name: aws
  runtime: nodejs6.10
  region: ${env:AWS_REGION}
  environment: ${self:custom.env.${opt:stage}}
  timeout: 60

functions:
  users:
    handler: handler.api
    events:
      - http:
          path: users/{email}
          method: get
          cors: '*'

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.env.${opt:stage}.DB_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: arn:aws:dynamodb:*:*:table/${self:custom.env.${opt:stage}.DB_TABLE}
        Roles:
          - Ref: IamRoleLambdaExecution
