org: andriyzin
app: webgl-experiments-backend

service:
  name: webgl-experiments-backend

provider:
  name: aws
  region: eu-central-1
  stage: ${opt:stage,'dev'}
  memorySize: 256
  runtime: nodejs12.x
  role: LambdaRole
  vpc: ${self:custom.vpc}
  environment:
    SECRET: hello-world
    #postgresql
    POSTGRESQL_HOST: ${self:custom.POSTGRESQL.HOST.${self:provider.stage}}
    POSTGRESQL_PORT: ${self:custom.POSTGRESQL.PORT.${self:provider.stage}}
    #common
    DB_NAME: ${self:custom.DB_NAME.${self:provider.stage}}
    USERNAME: ${self:custom.USERNAME.${self:provider.stage}}
    PASSWORD: ${self:custom.PASSWORD.${self:provider.stage}}

custom:
  vpc:
    securityGroupIds:
      - Fn::GetAtt: [ServerlessSecurityGroup, GroupId]
    subnetIds:
      - Ref: ServerlessSubnetA
      - Ref: ServerlessSubnetB
      - Ref: ServerlessSubnetC
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  DB_NAME:
    local: postgres
    dev: webglexperiments
  USERNAME:
    local: postgres
    dev: master
  PASSWORD:
    local: root
    dev: password223
  VPC_CIDR: 10
  POSTGRESQL:
    HOST:
      local: localhost
      dev:
        Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Address]
    PORT:
      local: 5432
      dev:
        Fn::GetAtt: [PostgreSqlRDSInstance, Endpoint.Port]

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-pseudo-parameters

resources:
  Resources:
    LambdaRole: ${file(./resource/LambdaRole.yml)}
    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
    ServerlessVPCGA: ${file(./resource/ServerlessVPCGA.yml)}
    ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(./resource/ServerlessSubnetB.yml)}
    ServerlessSubnetC: ${file(./resource/ServerlessSubnetC.yml)}
    ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}
    ServerlessSecurityGroup: ${file(./resource/ServerlessSecurityGroup.yml)}
    RouteTablePublic: ${file(./resource/RouteTablePublic.yml)}
    RoutePublic: ${file(./resource/RoutePublic.yml)}
    RouteTableAssociationSubnetA: ${file(./resource/RouteTableAssociationSubnetA.yml)}
    RouteTableAssociationSubnetB: ${file(./resource/RouteTableAssociationSubnetB.yml)}
    RouteTableAssociationSubnetC: ${file(./resource/RouteTableAssociationSubnetC.yml)}
    PostgreSqlRDSInstance: ${file(./resource/PostgreSqlRDSInstance.yml)}

functions:
  getUserById:
    handler: handler._getUserById
    events:
      - http:
          method: get
          path: user/{id}
          cors: true
  login:
    handler: handler._login
    events:
      - http:
          method: post
          path: login
          cors: true
  register:
    handler: handler._register
    events:
      - http:
          method: post
          path: register
          cors: true
