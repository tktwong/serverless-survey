# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myUploader

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-plugin-include-dependencies
  - serverless-external-s3-event
#  - serverless-offline

provider:
  name: aws
  runtime: nodejs6.10
# you can overwrite defaults here
  stage: prod
  region: us-west-2
  versionFunctions: true # optional, default is true
  timeout: 15
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutBucketNotification"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::meshphoto"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:GetObjectAcl"
        - "s3:PutObjectAcl"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::*"
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:ListTables"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:dynamodb:'
            - Ref: 'AWS::Region'
            - ':'
            - '780139254791'
            - ':table/*'
    - Effect: "Allow"
      Action:
        - "dynamodb:DeleteItem"
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:dynamodb:'
            - Ref: 'AWS::Region'
            - ':'
            - '780139254791'
            - ':table/photo_tmp'

#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::mesh-upload-tmp"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - src/**
    - node_modules/aws-sdk
  include:
    - handler.js
  excludeDevDependencies: true # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true

custom:
  bucket: meshphoto
  dev-bucket: meshphoto-dev

functions:
  uploadService:
    handler: handler.main
    name: prod-uploader
    description: upload process function
    events:
      - s3:
          bucket: ${self:custom.bucket}-tmp
          event: s3:ObjectCreated:*
          rules:
            - prefix: ""
            - suffix: ""

  uploadService-dev:
    handler: handler.main
    name: dev-uploader
    description: upload process function
    events:
      - s3:
          bucket: ${self:custom.dev-bucket}-tmp
          event: s3:ObjectCreated:*
          rules:
            - prefix: ""
            - suffix: ""

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders:
            - "*"
            AllowedMethods:
            - PUT
            AllowedOrigins:
            - "*"
        VersioningConfiguration:
          Status: Suspended
        Tags:
        - Key: STAGE
          Value: prod

    UploadBucketDev:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.dev-bucket}
        AccessControl: PublicRead
        VersioningConfiguration:
          Status: Suspended

    S3CDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
          - cdn.mira.menu
          Enabled: true
          IPV6Enabled: true
          PriceClass: PriceClass_200
          HttpVersion: http2          
          DefaultCacheBehavior:
            TargetOriginId:
              Fn::Join:
                - ''
                - - 'S3-'
                  - Fn::GetAtt:
                    - UploadBucket
                    - DomainName
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: 0
            AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
            CachedMethods:
            - HEAD
            - GET
            - OPTIONS
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
          Origins:
          - DomainName: 
              Fn::GetAtt: 
                - UploadBucket
                - DomainName
            Id: 
              Fn::Join:
                - ''
                - - 'S3-'
                  - Fn::GetAtt:
                    - UploadBucket
                    - DomainName
            S3OriginConfig: {}
          Restrictions:
            GeoRestriction:
              RestrictionType: none
              Locations: []
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:780139254791:certificate/3c611926-098e-409b-be52-4399ad1a0529
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.1_2016

    S3DNS:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        Comment: S3 CDN
        HostedZoneName: mira.menu.
        RecordSets:
        - Name: cdn.mira.menu.
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: 
              Fn::GetAtt: 
                - S3CDN
                - DomainName
        - Name: cdn.mira.menu.
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: 
              Fn::GetAtt: 
                - S3CDN
                - DomainName

  Outputs:
    S3BucketSecureURL:
      Value: 
        Fn::Join: 
          - ''
          - - 'https://'
            - Fn::GetAtt: 
              - UploadBucket
              - DomainName
      Description: Name of S3 bucket to hold website content
    CloudFrontURL:
      Value: 
        Fn::GetAtt:
          - S3CDN
          - DomainName

