# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-triggers-example # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  region: us-east-1

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: "<arn-of-sns-topic>"

#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  apiGatewayTriggered:
    handler: handler.apiGatewayTriggered
    events:
      - http:
          path: eventApiGateway
          method: get
  s3UploadTriggered:
    handler: handler.s3UploadTriggered
    events:
      - s3:
          bucket: <bucket-name>
          event: s3:ObjectCreated:*
  dynamoDBStreamTriggered:
    handler: handler.dynamoDBStreamTriggered
    events:
      - stream: <arn-dynamo-stream>
  snsLambdaPublisher:
    handler: handler.snsLambdaPublisher
    events:
      - http:
          path: snsPublisher
          method: get
  snsLamdbaTriggered:
    handler: handler.snsLamdbaTriggered
    events:
      - sns: <sns-topic-name>
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
resources:
  Resources:
    testDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: testDynamoTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: KEYS_ONLY
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
