service: spark # NOTE: update this with your service name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-terraform-outputs
  - serverless-iam-roles-per-function

custom:
  stage: ${opt:stage, self:provider.stage}
  tf_workspace: spark-${self:custom.stage}
  webpack:
    includeModules: true

provider:
  name: aws
  region: us-west-2
  runtime: nodejs8.10
  stage: stage

  environment:
    RUNDECK_STAGE: ${self:custom.stage}
    RUNDECK_REPO_BUCKET: ${terraform:${self:custom.tf_workspace}:s3_spark_repo_bucket.value}
    RUNDECK_SIGN_QUEUE: {Ref: SqsSignQueue}
    RUNDECK_MANIFEST_QUEUE: {Ref: SqsManifestQueue}
    RUNDECK_ARTIFACT_TABLE: ${terraform:${self:custom.tf_workspace}:aws_dynamodb_table_spark_artifacts_id.value.id}
    COGNITO_USER_POOL: ${terraform:${self:custom.tf_workspace}:spark_cognito_pool_id.value}

  iamRoleStatements:
  - Effect: Allow
    Action:
    - "sqs:GetMessage"
    - "sqs:SendMessage"
    - "sqs:DeleteMessage"
    Resource:
    - {Fn::GetAtt: ["SqsSignQueue", "Arn"]}
    - {Fn::GetAtt: ["SqsManifestQueue", "Arn"]}
  - Effect: Allow
    Action:
    - "s3:PutObject"
    - "s3:GetObject"
    - "s3:ListBucket"
    - "s3:DeleteObject"
    - "s3:ListBucket"
    Resource:
    - arn:aws:s3:::${terraform:${self:custom.tf_workspace}:s3_spark_repo_bucket.value}
    - arn:aws:s3:::${terraform:${self:custom.tf_workspace}:s3_spark_repo_bucket.value}/*
  - Effect: Allow
    Action:
    - cognito-identity:*
    - cognito-idp:*
    Resource: "*"

functions:
  check-repository-artifact:
    handler: src/Handler.CheckArtifact
    events:
    - sqs:
        arn: ${terraform:${self:custom.tf_workspace}:sqs_queue_spark_artifact_upload.value.arn}
    iamRoleStatements:
    - Effect: Allow
      Action: ["sqs:ReceiveMessage", "sqs:DeleteMessage", "sqs:GetQueueAttributes"]
      Resource: ${terraform:${self:custom.tf_workspace}:sqs_queue_spark_artifact_upload.value.arn}
    - Effect: Allow
      Action:
      - "sqs:ReceiveMessage"
      - "sqs:SendMessage"
      Resource: {Fn::GetAtt: ["SqsSignQueue", "Arn"]}
    - Effect: Allow
      Action:
      - "s3:GetObject"
      - "s3:ListBucket"
      Resource:
      - arn:aws:s3:::${terraform:${self:custom.tf_workspace}:s3_spark_repo_bucket.value}
      - arn:aws:s3:::${terraform:${self:custom.tf_workspace}:s3_spark_repo_bucket.value}/*

  sign-and-save:
    handler: src/Handler.SignAndSave
    events:
    - sqs:
        arn: {Fn::GetAtt: ["SqsSignQueue", "Arn"]}
    iamRoleStatements:
    - Effect: Allow
      Action: ["sqs:ReceiveMessage", "sqs:DeleteMessage", "sqs:GetQueueAttributes"]
      Resource: {Fn::GetAtt: ["SqsSignQueue", "Arn"]}
    - Effect: Allow
      Action: kms:Decrypt
      Resource: arn:aws:kms:*:*:key/e0dbcaae-c2e5-41b9-b44c-892f07bb9076
    - Effect: Allow
      Action:
      - "ssm:GetParametersByPath"
      Resource: arn:aws:ssm:us-west-2:749603222950:parameter/spark/${self:custom.stage}/sign-and-save/
    - Effect: Allow
      Action: ["s3:PutObject", "s3:GetObject"]
      Resource: arn:aws:s3:::${terraform:${self:custom.tf_workspace}:s3_spark_repo_bucket.value}/*

  save-artifact-db:
    handler: src/Handler.SaveArtifactDb
    events:
    - sqs:
        arn: ${terraform:${self:custom.tf_workspace}:sqs_queue_spark_artifact_signed.value.arn}
    iamRoleStatements:
    - Effect: Allow
      Action: ["sqs:ReceiveMessage", "sqs:DeleteMessage", "sqs:GetQueueAttributes"]
      Resource: ${terraform:${self:custom.tf_workspace}:sqs_queue_spark_artifact_signed.value.arn}
    - Effect: Allow
      Action: [dynamodb:GetItem, dynamodb:PutItem, dynamodb:UpdateItem]
      Resource: ${terraform:${self:custom.tf_workspace}:aws_dynamodb_table_spark_artifacts_id.value.arn}
    - Effect: Allow
      Action: s3:GetObject
      Resource: arn:aws:s3:::${terraform:${self:custom.tf_workspace}:s3_spark_repo_bucket.value}/*
    - Effect: Allow
      Action: "sqs:SendMessage"
      Resource: {Fn::GetAtt: ["SqsManifestQueue", "Arn"]}

  generate-manifest:
    handler: src/Handler.GenerateManifest
    events:
    - sqs:
        arn: {Fn::GetAtt: ["SqsManifestQueue", "Arn"]}
    iamRoleStatements:
    - Effect: Allow
      Action: ["sqs:ReceiveMessage", "sqs:DeleteMessage", "sqs:GetQueueAttributes"]
      Resource: {Fn::GetAtt: ["SqsManifestQueue", "Arn"]}
    - Effect: Allow
      Action:
      - "ssm:GetParametersByPath"
      Resource: arn:aws:ssm:us-west-2:749603222950:parameter/spark/${self:custom.stage}/generate-manifest/
    - Effect: Allow
      Action: [dynamodb:GetItem, dynamodb:Scan]
      Resource: ${terraform:${self:custom.tf_workspace}:aws_dynamodb_table_spark_artifacts_id.value.arn}
    - Effect: Allow
      Action: s3:PutObject
      Resource: arn:aws:s3:::${terraform:${self:custom.tf_workspace}:s3_spark_repo_bucket.value}/*

  artifact-post:
    handler: src/Handler.PostArtifact
    events:
    - http:
        path: artifact
        method: post
    iamRoleStatements:
    - Effect: Allow
      Action: ssm:GetParametersByPath
      Resource: arn:aws:ssm:us-west-2:749603222950:parameter/spark/${self:custom.stage}/artifact-post/

  admin-create-spark-user:
    handler: src/Handler.AdminCreateSparkUser
    events:
    - http:
        path: users/create
        method: post

  admin-add-cognito-app:
    handler: src/Handler.AdminAddCognitoApp
    events:
    - http:
        path: app/create
        method: post

  context-test:
    handler: src/Handler.ContextTest
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "ssm:GetParametersByPath"
      Resource: arn:aws:ssm:us-west-2:749603222950:parameter/spark/${self:custom.stage}/context-test/

resources:
  Resources:
    SqsSignQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-spark-sign-queue
    SqsManifestQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-spark-generate-manifest