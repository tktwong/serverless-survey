service: www-api-marco-marassi-com

provider:
    name: aws
    region: eu-west-1
    runtime: provided
    httpApi:
        payload: '1.0'
    environment:
        APP_DEBUG: false
        APP_ENVIRONMENT: production
        # Logging to stderr allows the logs to end up in Cloudwatch
        LOG_CHANNEL: stderr
        # We cannot store sessions to disk: if you don't need sessions (e.g. API) then use `array`
        # If you write a website, use `cookie` or store sessions in database.
        SESSION_DRIVER: array
        SQS_QUEUE:
            Ref: AlertQueue
        VIEW_COMPILED_PATH: /tmp/storage/framework/views

    iamRoleStatements:
        # Allows our code to interact with SQS
        -   Effect: Allow
            Action: [sqs:SendMessage, sqs:DeleteMessage]
            Resource:
                Fn::GetAtt: [ AlertQueue, Arn ]

plugins:
    - ./vendor/bref/bref

package:
  exclude:
    - node_modules/**
    - public/storage
    - resources/assets/**
    - storage/**
    - tests/**

functions:
    website:
        handler: public/index.php
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-74-fpm}
        events:
            - httpApi: '*'
    artisan:
        handler: artisan
        timeout: 120 # in seconds
        layers:
            - ${bref:layer.php-74} # PHP
            - ${bref:layer.console} # The "console" layer
    worker:
        handler: worker.php
        layers:
            - ${bref:layer.php-74}
        events:
            # Declares that our worker is triggered by jobs in SQS
            -   sqs:
                    arn:
                        Fn::GetAtt: [ AlertQueue, Arn ]
                    # If you create the queue manually, the line above could be:
                    # arn: 'arn:aws:sqs:us-east-1:1234567890:my_sqs_queue'
                    # Only 1 item at a time to simplify error handling
                    batchSize: 1

resources:
    Resources:
        # Failed jobs will go into that SQS queue to be stored, until a developer looks at these errors
        DeadLetterQueue:
            Type: AWS::SQS::Queue
            Properties:
                MessageRetentionPeriod: 1209600 # maximum retention: 14 days
        # The SQS queue
        AlertQueue:
            Type: AWS::SQS::Queue
            Properties:
                RedrivePolicy:
                    maxReceiveCount: 3 # jobs will be retried up to 3 times
                    # Failed jobs (after the retries) will be moved to the other queue for storage
                    deadLetterTargetArn:
                        Fn::GetAtt: [ DeadLetterQueue, Arn ]
