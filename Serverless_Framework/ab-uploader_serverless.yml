service: ab-uploader
app: ab-uploader
org: aflcio

provider:
  name: aws
  runtime: python3.7
  environment:
    S3_UPLOAD_BUCKET: ${self:service}-${opt:stage, self:provider.stage}-uploads
    AB_LOGIN: ${param:ab_login}
    AB_PASSWORD: ${param:ab_pass}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        - 'arn:aws:s3:::${self:provider.environment.S3_UPLOAD_BUCKET}/*'

plugins:
  - serverless-python-requirements
  - serverless-step-functions
  - serverless-iam-roles-per-function

custom:
  pythonRequirements:
    dockerizePip: non-linux
    slim: true
    layer: true

layers:
  chrome:
    path: chromelayer

package:
  individually: false
  include:
    - '!./**'
    - 'upload.py'
    - 'handler.py'
    - 'bin/**'
    - 'lib/**'
  exclude:
    - '**'

functions:
  s3_trigger:
    handler: handler.s3_handler
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    timeout: 60
    environment:
      stateMachineArn: ${self:resources.Outputs.UploadMachine.Value}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:GetObject"
        Resource:
          - 'arn:aws:s3:::${self:provider.environment.S3_UPLOAD_BUCKET}/*'
      - Effect: "Allow"
        Action:
          - "states:StartExecution"
        Resource:
          - ${self:resources.Outputs.UploadMachine.Value}
    events:
      - s3:
          bucket: ${self:provider.environment.S3_UPLOAD_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .csv
  start_upload:
    handler: handler.start_upload
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
      - { Ref: ChromeLambdaLayer }
    timeout: 500
  check_status:
    handler: handler.check_upload_status
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
      - { Ref: ChromeLambdaLayer }
    timeout: 30

stepFunctions:
  stateMachines:
    uploadFunc:
      id: AbUploadMachine
      name: abUploadMachine-${opt:stage}
      definition:
        Comment: "Handles Action Builder uploads"
        StartAt: StartUpload
        States:
          StartUpload:
            Type: Task
            Resource:
              Fn::GetAtt: [start_upload, Arn]
            Next: WaitForUpload
          WaitForUpload:
            Type: Wait
            SecondsPath: "$.wait_time"
            Next: CheckUploadStatus
          CheckUploadStatus:
            Type: Task
            Resource:
              Fn::GetAtt: [check_status, Arn]
            Next: UploadStatusChoice
          UploadStatusChoice:
            Type: Choice
            Choices:
            - And:
                - Variable: $.upload_status
                  StringEquals: Complete
                - Variable: $.upload_type
                  StringEquals: people
              Next: UploadInfo
            - Variable: "$.upload_status"
              StringEquals: Complete
              Next: AllSet
            - Variable: "$.retries_left"
              NumericGreaterThan: 0
              Next: WaitForUpload
            Default: GiveUp
          UploadInfo:
            Type: Pass
            Result: info
            ResultPath: "$.upload_type"
            Next: StartUpload
          GiveUp:
            Type: Fail
            Cause: "Upload never finished"
          AllSet:
            Type: Succeed


resources:
  Outputs:
    UploadMachine:
      Description: The ARN of the uploader state machine
      Value:
        Ref: AbUploadMachine
