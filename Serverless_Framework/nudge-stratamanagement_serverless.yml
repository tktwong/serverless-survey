##
##  Name: nudge-strata
##  Purpose: AppSync Strata API
##
##  Created By:
##    Author: Stefano Picozzi
##    Email: spicozzi@emergile.com
##    Date: OCT-2019
##

service: nudge-strata

plugins:
  - serverless-appsync-plugin
  - serverless-offline
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-dotenv-plugin
  - serverless-deployment-bucket

provider:
  versionFunctions: false
  deploymentBucket:
    name: nudge-${env:RELEASE}-deployments
    serverSideEncryption: AES256
  release: ${env:RELEASE}
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'stage0'}
  region: ap-southeast-2
  # profile: ${opt:profile, 'admin'}  
  logRetentionInDays: 1
  apiname: ${env:RELEASE}-${self:provider.stage}-${self:service.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: arn:aws:dynamodb:#{AWS::Region}:*:*
    - Effect: "Allow"
      Action:
        - "ses:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "mobiletargeting:*"
        - "mobileanalytics:*"
      Resource: "*"

custom:
  dotenv:
      basePath: ../../
  stage: ${opt:stage, self:provider.stage}
  accountId: { Ref: AWS::AccountId }
  appSync:
    name: ${env:RELEASE}-${self:provider.stage}-${self:service.name}
    region: ${self:provider.region}
    authenticationType: API_KEY
    logConfig:
      level: ALL
    schema: schema.graphql
    serviceRole: AppSyncServiceRole
    dataSources:

      - type: AWS_LAMBDA
        name: ApplyRule
        description: "Lambda DynamoDB applyRule"
        config:
          lambdaFunctionArn: ${env:LOCAL_STRATACUSTOM}-applyRule
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

      - type: AMAZON_DYNAMODB
        name: Machines
        description: "DynamoDB Machines Table"
        config:
          tableName: ${env:MACHINES_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
      - type: AMAZON_DYNAMODB
        name: Activities
        description: "DynamoDB Activities Table"
        config:
          tableName: ${env:ACTIVITIES_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }

      - type: AMAZON_DYNAMODB
        name: Actors
        description: "DynamoDB Actors Table"
        config:
          tableName: ${env:STRATA_ACTORS_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
      - type: AMAZON_DYNAMODB
        name: Txns
        description: "DynamoDB Txns Table"
        config:
          tableName: ${env:STRATA_TXNS_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
      - type: AMAZON_DYNAMODB
        name: Personas
        description: "DynamoDB Personas Table"
        config:
          tableName: ${env:STRATA_PERSONAS_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
      - type: AMAZON_DYNAMODB
        name: Plans
        description: "DynamoDB Plans Table"
        config:
          tableName: ${env:STRATA_PLANS_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
      - type: AMAZON_DYNAMODB
        name: Users
        description: "DynamoDB Users Table"
        config:
          tableName: ${env:STRATA_USERS_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
      - type: AMAZON_DYNAMODB
        name: Devices
        description: "DynamoDB Devices Table"
        config:
          tableName: ${env:STRATA_DEVICES_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }
      - type: AMAZON_DYNAMODB
        name: Attachments
        description: "DynamoDB Attachments Table"
        config:
          tableName: ${env:STRATA_ATTACHMENTS_TABLE}
          serviceRoleArn: { Fn::GetAtt: [ DynamoDBRole, Arn ] }

      - type: HTTP
        name: abr
        description: 'Http endpoint'
        config:
          endpoint: "http://abr.business.gov.au"

    mappingTemplatesLocation: mapping-templates
    mappingTemplates:

      # Rules
      - dataSource: ApplyRule
        type: Query
        field: applyRule
        request: "request/Rule/applyRule.vtl"
        response: "response/item.vtl"

      # User 
      - dataSource: Devices
        type: User
        field: devices
        request: "request/User/devices.vtl"
        response: "response/items.vtl"
      - dataSource: Personas
        type: User
        field: personas
        request: "request/User/personas.vtl"
        response: "response/items.vtl"
      - dataSource: Users
        type: Query
        field: getUser
        request: "request/getItem.vtl"
        response: "response/item.vtl"
      - dataSource: Users
        type: Query
        field: getUsers
        request: "request/getItems.vtl"
        response: "response/items.vtl"
      - dataSource: Users
        type: Query
        field: listUsers
        request: "request/listItems.vtl"
        response: "response/item.vtl"
      - dataSource: Users
        type: Mutation
        field: createUser
        request: "request/User/putItem.vtl"
        response: "response/item.vtl"
      - dataSource: Users
        type: Mutation
        field: deleteUser
        request: "request/deleteItem.vtl"
        response: "response/item.vtl"
      - dataSource: Users
        type: Mutation
        field: updateUser
        request: "request/updateItem.vtl"
        response: "response/item.vtl"

      # Actor
      - dataSource: Txns
        type: Actor
        field: txn
        request: "request/Actor/txn.vtl"
        response: "response/item.vtl"
      - dataSource: Plans
        type: Actor
        field: plan
        request: "request/Actor/plan.vtl"
        response: "response/item.vtl"
      - dataSource: Personas
        type: Actor
        field: persona
        request: "request/Actor/persona.vtl"
        response: "response/item.vtl"
      - dataSource: Users
        type: Actor
        field: user
        request: "request/Actor/user.vtl"
        response: "response/item.vtl"
      - dataSource: Actors
        type: Query
        field: getActor
        request: "request/getItem.vtl"
        response: "response/item.vtl"
      - dataSource: Actors
        type: Query
        field: getActors
        request: "request/getItems.vtl"
        response: "response/items.vtl"
      - dataSource: Actors
        type: Query
        field: listActors
        request: "request/listItems.vtl"
        response: "response/item.vtl"
      - dataSource: Actors
        type: Mutation
        field: createActor
        request: "request/Actor/putItem.vtl"
        response: "response/item.vtl"
      - dataSource: Actors
        type: Mutation
        field: deleteActor
        request: "request/deleteItem.vtl"
        response: "response/item.vtl"
      - dataSource: Actors
        type: Mutation
        field: updateActor
        request: "request/updateItem.vtl"
        response: "response/item.vtl"

      # Persona
      - dataSource: Actors
        type: Persona
        field: actors
        request: "request/Persona/actors.vtl"
        response: "response/items.vtl"
      - dataSource: Personas
        type: Query
        field: getPersona
        request: "request/getItem.vtl"
        response: "response/item.vtl"
      - dataSource: Personas
        type: Query
        field: getPersonas
        request: "request/getItems.vtl"
        response: "response/items.vtl"
      - dataSource: Personas
        type: Query
        field: listPersonas
        request: "request/listItems.vtl"
        response: "response/item.vtl"
      - dataSource: Personas
        type: Mutation
        field: createPersona
        request: "request/Persona/putItem.vtl"
        response: "response/item.vtl"
      - dataSource: Personas
        type: Mutation
        field: deletePersona
        request: "request/deleteItem.vtl"
        response: "response/item.vtl"
      - dataSource: Personas
        type: Mutation
        field: updatePersona
        request: "request/updateItem.vtl"
        response: "response/item.vtl"

      # Attachment
      - dataSource: Attachments
        type: Query
        field: getAttachment
        request: "request/getItem.vtl"
        response: "response/item.vtl"
      - dataSource: Attachments
        type: Query
        field: getAttachments
        request: "request/getItems.vtl"
        response: "response/items.vtl"
      - dataSource: Attachments
        type: Query
        field: listAttachments
        request: "request/listItems.vtl"
        response: "response/item.vtl"
      - dataSource: Attachments
        type: Mutation
        field: createAttachment
        request: "request/putItem.vtl"
        response: "response/item.vtl"
      - dataSource: Attachments
        type: Mutation
        field: deleteAttachment
        request: "request/deleteItem.vtl"
        response: "response/item.vtl"
      - dataSource: Attachments
        type: Mutation
        field: updateAttachment
        request: "request/updateItem.vtl"
        response: "response/item.vtl"

      # Txn
      - dataSource: Machines
        type: Txn
        field: machines
        request: "request/Txn/machines.vtl"
        response: "response/items.vtl"
      - dataSource: Activities
        type: Txn
        field: activities
        request: "request/Txn/activities.vtl"
        response: "response/items.vtl"
      - dataSource: Attachments
        type: Txn
        field: attachments
        request: "request/Txn/attachments.vtl"
        response: "response/items.vtl"
      - dataSource: Plans
        type: Txn
        field: plan
        request: "request/Txn/plan.vtl"
        response: "response/item.vtl"
      - dataSource: Actors
        type: Txn
        field: actors
        request: "request/Txn/actors.vtl"
        response: "response/items.vtl"
      - dataSource: Plans
        type: Txn
        field: subplans
        request: "request/Txn/subplans.vtl"
        response: "response/item.vtl"
      - dataSource: Txns
        type: Query
        field: getTxn
        request: "request/getItem.vtl"
        response: "response/item.vtl"
      - dataSource: Txns
        type: Query
        field: getTxns
        request: "request/getItems.vtl"
        response: "response/items.vtl"
      - dataSource: Txns
        type: Query
        field: listTxns
        request: "request/listItems.vtl"
        response: "response/item.vtl"
      - dataSource: Txns
        type: Mutation
        field: deleteTxn
        request: "request/deleteItem.vtl"
        response: "response/item.vtl"
      - dataSource: Txns
        type: Mutation
        field: updateTxn
        request: "request/updateItem.vtl"
        response: "response/item.vtl"
      - dataSource: Txns
        type: Mutation
        field: createTxn
        request: "request/Txn/putItem.vtl"
        response: "response/item.vtl"

      # Plan 
      - dataSource: Actors
        type: Plan
        field: actors
        request: "request/Plan/actors.vtl"
        response: "response/items.vtl"
      - dataSource: Txns
        type: Plan
        field: txns
        request: "request/Plan/txns.vtl"
        response: "response/items.vtl"
      - dataSource: Plans
        type: Plan
        field: subplans
        request: "request/Plan/subplans.vtl"
        response: "response/items.vtl"
      - dataSource: Plans
        type: Query
        field: getPlan
        request: "request/getItem.vtl"
        response: "response/item.vtl"
      - dataSource: Plans
        type: Query
        field: getPlans
        request: "request/getItems.vtl"
        response: "response/items.vtl"
      - dataSource: Plans
        type: Query
        field: listPlans
        request: "request/listItems.vtl"
        response: "response/item.vtl"
      - dataSource: Plans
        type: Mutation
        field: createPlan
        request: "request/Plan/putItem.vtl"
        response: "response/item.vtl"
      - dataSource: Plans
        type: Mutation
        field: deletePlan
        request: "request/deleteItem.vtl"
        response: "response/item.vtl"
      - dataSource: Plans
        type: Mutation
        field: updatePlan
        request: "request/updateItem.vtl"
        response: "response/item.vtl"

      # Device
      - dataSource: Users
        type: Device
        field: user
        request: "request/Device/user.vtl"
        response: "response/item.vtl"
      - dataSource: Devices
        type: Query
        field: getDevice
        request: "request/getItem.vtl"
        response: "response/item.vtl"
      - dataSource: Devices
        type: Query
        field: getDevices
        request: "request/getItems.vtl"
        response: "response/items.vtl"
      - dataSource: Devices
        type: Query
        field: listDevices
        request: "request/listItems.vtl"
        response: "response/item.vtl"
      - dataSource: Devices
        type: Mutation
        field: createDevice
        request: "request/Device/putItem.vtl"
        response: "response/item.vtl"
      - dataSource: Devices
        type: Mutation
        field: deleteDevice
        request: "request/deleteItem.vtl"
        response: "response/item.vtl"
      - dataSource: Devices
        type: Mutation
        field: updateDevice
        request: "request/updateItem.vtl"
        response: "response/item.vtl"

      # Integration APIs
      - dataSource: abr
        type: Query
        field: AbnDetails
        request: "request/abr/AbnDetails.vtl"
        response: "response/abr/AbnDetails.vtl"

functions:
  hello:
    handler: handler.main
    name: ${env:RELEASE}-${self:provider.stage}-${self:service.name}-hello

resources:
  Resources:
    # IAM Policy to allow working with DynamoDB
    AppSyncDynamoDBPolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        Description: "Managed Policy to allow AWS AppSync to access tables in DynamoDB"
        Path: /appsync/
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - arn:aws:dynamodb:#{AWS::Region}:*:table/* 
                - arn:aws:dynamodb:#{AWS::Region}:*:table/*/* 

    # IAM Role for implementing the AppSync / DynamoDB policy
    DynamoDBRole:
      Type: "AWS::IAM::Role"
      Description: "IAM Role for allowing AppSync to access DynamoDB"
      DependsOn:
        - AppSyncDynamoDBPolicy
      Properties:
        RoleName: ${self:provider.apiname}-dynamodb-role
        ManagedPolicyArns:
          - Ref: AppSyncDynamoDBPolicy
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - appsync.amazonaws.com

    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:provider.apiname}-lambda-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-${self:service.name}-${self:provider.stage}-serviceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - 
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:#{AWS::Region}:*:function:*"
                    - "arn:aws:lambda:#{AWS::Region}:*:function:*:"

