# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-mixed-lang
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  lambdaHashingVersion: 20201221
  apiGateway:
    apiKeys:
      - test-api-key-1st
      - name: second-key
        value: test-api-key-2nd
    #usagePlan:
    #    quota:
    #      limit: 100
    #      offset: 1
    #      period: DAY
    #    throttle:
    #      burstLimit: 3
    #      rateLimit: 2

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - ./**
  include:
    - ./bin/**
    - ./js/**
    - ./py/**

functions:
  go-world-by-id:
    handler: bin/world
    runtime: go1.x
    events:
      - http:
          # test with `curl localhost:4566/restapis/<rest-api-id>/local/_user_request/go-world`
          path: /go-world/{id}
          method: get
          integration: lambda
          operationId: GoWorldByID
          private: true
          request:
            parameters:
              paths:
                id: true
  go-world:
    handler: bin/world
    runtime: go1.x
    events:
      - http:
          # test with `curl localhost:4566/restapis/<rest-api-id>/local/_user_request/go-world`
          path: /go-world
          method: post
          integration: lambda
          operationId: GoWorld
          request:
            schema:
              application/json: ${file(json_schema/go_world.json)}
  js-world:
    handler: js/handler.hello
    runtime: nodejs12.x
    events:
      - http:
          path: /js-world
          method: post
          integration: lambda
          operationId: JSWorld
          private: true
  py-world:
    handler: py.handler.hello
    runtime: python3.8
    events:
      - http:
          path: /py-world/{id}
          method: delete
          integration: lambda
          operationId: PythonWorld
          request:
            parameters:
              paths:
                id: true


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
    #- serverless-plugin-typescript
  - serverless-localstack

custom:
  localstack:
    stages:
      - local
    host: http://localhost  # optional - LocalStack host to connect to
    edgePort: 4566  # optional - LocalStack edge port to connect to
