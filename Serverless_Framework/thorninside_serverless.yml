# serverless.yml

service: report-fetcher

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    REPORT_API_BASE_URL: https://rex2hkddx4.execute-api.us-east-1.amazonaws.com/prod/
    USE_ML_PREDICTION_SCORE: TRUE
    PREDICT_ENDPOINT: https://realtime.machinelearning.us-east-1.amazonaws.com
    ML_MODEL_ID: ml-kNmn5ZT7X18
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - machinelearning:Predict
        - machinelearning:DescribeMLModels
      Resource: "arn:aws:machinelearning:us-east-1:770206509958:mlmodel/${self:provider.environment.ML_MODEL_ID}"

functions:
  app:
    handler: handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
      - schedule: rate(12 hours)

# We had errors trying to update the lambda after the initial creation of the dynamo table, so we had to comment
#  the following out:
resources:
  Resources:
    ThornReportsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: reportId
            AttributeType: N
        KeySchema:
          -
            AttributeName: reportId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
