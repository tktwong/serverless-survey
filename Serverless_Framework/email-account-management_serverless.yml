service: ${self:custom.serviceName}

custom: ${file(config.${self:provider.stage}.json)}

# Where the service will be deployed
provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.awsRegion}
  profile: ${self:custom.awsProfile}
  memorySize: 128
  timeout: 3
  environment:
    stage: ${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:PutObjectAcl"
        - "s3:DeleteObject"
        - "s3:ListBucket" #ListBucket enabled 404 responses for failed GetObject calls
      Resource:
        - arn:aws:s3:::${self:custom.bucketName}
        - arn:aws:s3:::${self:custom.bucketName}/*
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource:
        - ${self:custom.awsSesArn}

package:
  include:
    - handler.js
    - config.${self:provider.stage}.json
  exclude:
    - .git/**
    - .gitignore
    - README.md
    - LICENSE
    - config.*.json
    - handler.coffee

# Export some cloud formation information
resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
  Outputs:
    S3BucketName:
      Description: The ARN for the S3 bucket
      Value:
        "Fn::GetAtt": [ S3Bucket, Arn ]
      Export:
        Name: ${self:service}:${self:provider.stage}:S3BucketName


# Deployable functions
functions:
  addEmail:
    handler: handler.addEmail
    description: Request to add a users email
    events:
      - http:
          path: accounts
          method: post
          cors: true
          request:
            parameters:
              template:
                application/json: '{ "email" : "$input.params(''email'')" }'
  confirmEmail:
    handler: handler.confirmEmail
    description: Confirm the email address is valid
    events:
      - http:
          path: accounts/{email}/confirm
          method: get
          cors: true
          request:
            parameters:
              paths:
                email: true
              querystrings:
                token: true
  removeEmail:
    handler: handler.removeEmail
    description: Remove the email address
    events:
      - http:
          path: accounts/{email}/remove
          method: get
          cors: true
          request:
            parameters:
              paths:
                email: true
              querystrings:
                token: false
