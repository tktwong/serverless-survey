service: forms-api

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-add-api-key

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-north-1
  endpointType: regional
  logs:
    restApi: true
  tracing:
    apiGateway: true
    lambda: true

  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}
  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:custom.stage}-ExtApiGatewayRestApiId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId
    restApiResources:
      forms:
        "Fn::ImportValue": ${self:custom.stage}-ExtApiGatewayResourceForms

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem

      Resource:
        - "Fn::ImportValue": ${self:custom.resourcesStage}-FormsTableArn

functions:
  getFormList:
    handler: lambdas/getFormList.main
    events:
      - http:
          path: /forms
          method: get
          cors: true
          private: true

  getForm:
    handler: lambdas/getForm.main
    events:
      - http:
          path: /forms/{formId}
          method: get
          cors: true
          private: true

  createForm:
    handler: lambdas/createForm.main
    events:
      - http:
          path: /forms
          method: post
          cors: true
          private: true

  updateForm:
    handler: lambdas/updateForm.main
    events:
      - http:
          path: /forms/{formId}
          method: put
          cors: true
          private: true


  deleteForm:
    handler: lambdas/deleteForm.main
    events:
      - http:
          path: /forms/{formId}
          method: delete
          cors: true
          private: true

