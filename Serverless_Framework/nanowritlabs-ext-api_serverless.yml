service: nanowritlabs-ext-patreon-api

plugins:
  - serverless-bundle
  - serverless-offline

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-west-2
  tracing:
    apiGateway: true
    lambda: true

  # apiGateway:
  #   restApiId:
  #     'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiId
  #   restApiRootResourceId:
  #     'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stage: ${self:custom.stage}
    resourcesStage: ${self:custom.resourcesStage}

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ''
          -
            - 'arn:aws:ssm:'
            - Ref: AWS::Region
            - ':'
            - Ref: AWS::AccountId
            - ':parameter/**/*'
        # Fn::Join:
        #   - ''
        #   -
        #     - 'arn:aws:ssm:'
        #     - Ref: AWS::Region
        #     - ':'
        #     - Ref: AWS::AccountId
        #     - ':parameter/patreonSecretKey/*'

    # - Effect: Allow
    #   Action:
    #     - sns:Publish
    #   Resource:
    #     - Ref: PatreonOAuth

functions:
  # Defines an HTTP API endpoint that calls the main function in patreon.js
  # - path: url path is /patreon
  # - method: POST request
  patreon:
    handler: patreon.main
    events:
      - http:
          path: patreon-connect/
          request:
            template:
              application/json: '{ "code" : "$input.params(''code'')" }'
          method: get
          cors: true
          authorizer: aws_iam
    layers: arn:aws:lambda:us-west-2:785638267171:layer:patreon:2
      # - { Ref: PatreonLambdaLayer }

# layers:
#   patreon:
#     path: layer
#     name: ${self:custom.stage}-PatreonLayer
#     allowedAccounts:
#       - '*'

resources:
  # API Gateway Errors
  - ${file(../resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(../resources/cognito-policy.yml)}

Outputs:
  ApiGatewayRestApiId:
    Value:
      Ref: ApiGatewayRestApi
    Export:
      Name: ${self:custom.stage}-ExtPatreonApiId

  ApiGatewayRestApiRootResourceId:
    Value:
       Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId 
    Export:
      Name: ${self:custom.stage}-ExtPatreonApiRootResourceId
