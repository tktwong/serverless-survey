service:
  name: less-cms

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  timeout: 300
  vpc:
    securityGroupIds:
      - Fn::GetAtt: [DatabaseVpcSecurityGroup, GroupId]
    subnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
  environment:
    DATABASE_URL: { Fn::GetAtt: [Database, Endpoint.Address] }
    DATABASE_NAME: ${self:custom.dbName}
    DATABASE_USERNAME: ${self:custom.dbUserName}
    DATABASE_PASSWORD: ${self:custom.dbPassword}

plugins:
  - serverless-appsync-plugin

custom:
  poolName: ${self:provider.stage}LessCMS
  dbName: "lesscms"
  dbUserName: "root"
  dbPassword: "Password"
  systemUserEmail: "mail@markus-hoelzle.de"
  appSync:
    region: ${self:provider.region}
    name: ${self:service.name}-${self:provider.stage}
    authenticationType: AWS_IAM
    serviceRole: "${self:service.name}-AppSyncServiceRole"
    userPoolConfig:
      awsRegion: "${self:provider.region}"
      userPoolId: ${self:service.name}.${self:provider.stage}
      defaultAction: ALLOW
    mappingTemplates:
      - type: Query
        dataSource: LambdaSource
        field: getPosts
        request: "Query-getPosts-request.vtl"
        response: "Query-getPosts-response.vtl"
#      - type: Post
#        dataSource: LambdaSource
#        field: author
#        request: "Query-author-request.vtl"
#        response: "Query-author-response.vtl"
#      - type: Mutation
#        field: addPost
#        request: Mutation-addPost-request.vtl
#        response: common-response.vtl
#        kind: PIPELINE
#        functions:
#          - addPost
#          - sendNotification
#      - type: Mutation
#        dataSource: LambdaSource
#        field: deletePost
#        request: Mutation-deletePost-request.vtl
#        response: common-response.vtl
#    functionConfigurations:
#      - dataSource: LambdaSource
#        name: "addPost"
#        request: "Function-addPost-request.vtl"
#        response: "common-response.vtl"
#      - dataSource: LambdaSource
#        name: "sendNotification"
#        request: "Function-sendNotification-request.vtl"
#        response: "Function-sendNotification-response.vtl"
    dataSources:
      - type: AWS_LAMBDA
        name: LambdaSource
        description: "Lambda DataSource"
        config:
          functionName: graphql
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

functions:
  graphql:
    handler: handler.graphqlHandler

resources:
  #appSync data source role
  - ${file(resources/appsync.yml)}
  # rds
  - ${file(resources/rds.yml)}
  # Cognito
  - ${file(resources/cognito.yml)}
