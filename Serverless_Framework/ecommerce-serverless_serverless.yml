# NOTE: update this with your service name
service: ecommerce-serverless

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-pseudo-parameters
  - serverless-webpack # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  TABLE_NAME: ${self:service}-${self:custom.stage}-skus
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    includeModules: true
    excludeFiles: src/**/*.test.js

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  project: ecommerce-serverless
  profile: shashi.golash@gmail.com
  timeout: 30
  custom:
    serverlessTerminationProtection:
      stages:
        - prod
        - dev

  environment:
    TABLE_NAME: ${self:custom.TABLE_NAME}
    region: ${self:provider.region}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::GetAtt': [SkuTable, Arn]

functions:
  - ${file(resources/functions/transactions.yml)}

resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
