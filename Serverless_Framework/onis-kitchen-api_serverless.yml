service: onis-kitchen-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-west-2

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:us-west-2:387481796442:*'
    # To load environment variables externally
    # rename env.example to env.yml and uncomment
    # the following line. Also, make sure to not
    # commit your env.yml.
    #
    #environment: ${file(env.yml):${self:provider.stage}}

functions:
  createRecipe:
    handler: functions/createRecipe.main
    events:
      - http:
          path: recipes
          method: post
          cors: true
          authorizer: aws_iam
  getRecipes:
    handler: functions/getRecipes.main
    events:
      - http:
          path: recipes
          method: get
          cors: true
          authorizer: aws_iam
  getRecipe:
    handler: functions/getRecipe.main
    events:
      - http:
          path: recipes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listRecipes:
    handler: functions/listRecipes.main
    events:
      - http:
          path: recipes/search/{value}
          method: get
          cors: true
          authorizer: aws_iam
  updateRecipe:
    handler: functions/updateRecipe.main
    events:
      - http:
          path: recipes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  deleteRecipe:
    handler: functions/deleteRecipe.main
    events:
      - http:
          path: recipes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  createUserRecipeData:
    handler: functions/user-recipe-data/createUserRecipeData.main
    events:
      - http:
          path: user-recipe-data
          method: post
          cors: true
          authorizer: aws_iam
  getUserRecipeData:
    handler: functions/user-recipe-data/getUserRecipeData.main
    events:
      - http:
          path: user-recipe-data/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updateUserRecipeData:
    handler: functions/user-recipe-data/updateUserRecipeData.main
    events:
      - http:
          path: user-recipe-data/{id}
          method: put
          cors: true
          authorizer: aws_iam
  createUser:
    handler: functions/users/createUser.main
    events:
      - http:
          path: users
          method: post
          cors: true
  updateUser:
    handler: functions/users/updateUser.main
    events:
      - http:
          path: users
          method: options
          cors: true
      - http:
          path: users
          method: put
          cors: true
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
