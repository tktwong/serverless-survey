# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sims-backbone-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  timeout: 300
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: "*"
  environment:
    POSTGRES_USER: ${file(../config.${self:provider.stage}.json):db_user}
    POSTGRES_DB: ${file(../config.${self:provider.stage}.json):database}
    POSTGRES_PASSWORD: ${file(../config.${self:provider.stage}.json):db_password}
    POSTGRES_PORT: ${file(../config.${self:provider.stage}.json):db_port}
    POSTGRES_HOST:
      Fn::GetAtt: [ ServerlessRDSCluster, Endpoint.Address ]
    AUTH_PROFILE_URL: ${file(../config.${self:provider.stage}.json):auth_profile}
    PYTHON_PATH: '.:../server:../server/bb_server'
  vpc:
    securityGroupIds:
      - "Fn::GetAtt": ServerlessSecurityGroup.GroupId
    subnetIds:
      - Ref: PublicSubnetA
      - Ref: PublicSubnetB
      - Ref: PublicSubnetC

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

plugins:
      - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**
package:
    exclude:
        - requirements.txt
        - serverless.yml
        - node_modules/**
        - venv/**
        - package.json
        - package-lock.json
        - endpoints.txt
        - updateall.sh
        - ../../server/backbone_server/connect.py
    include:
        - metadata/handler.py
        - studies/handler.py
        - ../../server/bb_server/**
        - ../../server/backbone_server/**/**
        - auth/**
        - ../util/**
        - ../client_secrets.${self:provider.stage}.json

functions:
  authFunc:
    handler: auth/handler.auth
    vpc:
        securityGroupIds:
          - "Fn::GetAtt": ServerlessAuthSecurityGroup.GroupId
        subnetIds:
          - Ref: ServerlessSubnetA
          - Ref: ServerlessSubnetB
          - Ref: ServerlessSubnetC

  getCountryMetadata:
    handler: metadata/handler.get_country_metadata
    events:
      - http:
          path: sims-backbone-service/v1/metadata/country/{country_id}
          method: get
          cors: true
          authorizer:
            name: authFunc
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
            parameters:
              paths:
                country_id: true

  getAttrTypes:
    handler: metadata/handler.get_attr_types
    events:
      - http:
          path: sims-backbone-service/v1/metadata/attr_types
          method: get
          cors: true
          authorizer:
            name: authFunc
            type: request
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                parent_type: false

  getLocationAttrTypes:
    handler: metadata/handler.get_location_attr_types
    events:
      - http:
          path: sims-backbone-service/v1/metadata/location_attr_types
          method: get
          cors: true
          authorizer:
            name: authFunc
            type: request
            identitySource: method.request.header.Authorization

  getTaxonomyMetadata:
    handler: metadata/handler.get_taxonomy_metadata
    events:
      - http:
          path: sims-backbone-service/v1/metadata/taxonomy
          method: get
          cors: true
          authorizer:
            name: authFunc
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
  createTaxonomy:
    handler: metadata/handler.create_taxonomy
    events:
      - http:
          path: sims-backbone-service/v1/metadata/taxonomy
          method: post
          cors: true
          authorizer:
            name: authFunc
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*

  downloadStudies:
    handler: studies/handler.download_studies
    events:
      - http:
          path: sims-backbone-service/v1/studies
          method: get
          cors: true
          authorizer:
            name: authFunc
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
            parameters:
              query:
                start: false
                count: false

  downloadStudy:
    handler: studies/handler.download_study
    events:
      - http:
          path: sims-backbone-service/v1/study/{study_name}
          method: get
          cors: true
          authorizer:
            name: authFunc
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
            parameters:
              paths:
                study_name: true
  updateStudy:
    handler: studies/handler.update_study
    events:
      - http:
          path: sims-backbone-service/v1/study/{study_name}
          method: put
          cors: true
          authorizer:
            name: authFunc
            type: request
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
          request:
            parameters:
              paths:
                study_name: true

resources:
  Resources:
    #Causes OPTIONS request to fail
#    ApiGatewayRestApi:
#      Type: "AWS::ApiGateway::RestApi"
#      Properties:
#        Name: ${self:provider.stage}-${self:service}
#        BinaryMediaTypes:
#          - "application/json"
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
    ServerlessSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.1.0/24"
    ServerlessSubnetB:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: "10.0.2.0/24"
    ServerlessSubnetC:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: "10.0.3.0/24"
    PublicSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: "10.0.4.0/24"
        MapPublicIpOnLaunch: True
    PublicSubnetB:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: "10.0.5.0/24"
    PublicSubnetC:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: "10.0.6.0/24"
    InternetGateway:
      Type: "AWS::EC2::InternetGateway"
    NatEIPA:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    NatGatewayA:
      Type: AWS::EC2::NatGateway
      DependsOn: VPCGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
          - NatEIPA
          - AllocationId
        SubnetId:
          Ref: PublicSubnetA
    NatEIPB:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    NatGatewayB:
      Type: AWS::EC2::NatGateway
      DependsOn: VPCGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
          - NatEIPB
          - AllocationId
        SubnetId:
          Ref: PublicSubnetB
    NatEIPC:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    NatGatewayC:
      Type: AWS::EC2::NatGateway
      DependsOn: VPCGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
          - NatEIPC
          - AllocationId
        SubnetId:
          Ref: PublicSubnetC
    ServerlessSubnetARouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    ServerlessSubnetARoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGateway
      Properties:
        RouteTableId:
          Ref: ServerlessSubnetARouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGatewayA
    SubnetRouteTableServerlessSubnetA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: ServerlessSubnetA
        RouteTableId:
          Ref: ServerlessSubnetARouteTable
    ServerlessSubnetBRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    ServerlessSubnetBRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGateway
      Properties:
        RouteTableId:
          Ref: ServerlessSubnetBRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGatewayB
    SubnetRouteTableServerlessSubnetB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: ServerlessSubnetB
        RouteTableId:
          Ref: ServerlessSubnetBRouteTable
    ServerlessSubnetCRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    ServerlessSubnetCRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGateway
      Properties:
        RouteTableId:
          Ref: ServerlessSubnetCRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGatewayB
    SubnetRouteTableServerlessSubnetC:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: ServerlessSubnetC
        RouteTableId:
          Ref: ServerlessSubnetCRouteTable
    PublicRouteTableA:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    PublicRouteA:
      Type: AWS::EC2::Route
      DependsOn: VPCGateway
      Properties:
        RouteTableId:
          Ref: PublicRouteTableA
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    SubnetRouteTablePublicA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnetA
        RouteTableId:
          Ref: PublicRouteTableA
    PublicRouteTableB:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    PublicRouteB:
      Type: AWS::EC2::Route
      DependsOn: VPCGateway
      Properties:
        RouteTableId:
          Ref: PublicRouteTableB
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    SubnetRouteTablePublicB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnetB
        RouteTableId:
          Ref: PublicRouteTableB
    PublicRouteTableC:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
    PublicRouteC:
      Type: AWS::EC2::Route
      DependsOn: VPCGateway
      Properties:
        RouteTableId:
          Ref: PublicRouteTableC
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    SubnetRouteTablePublicC:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnetC
        RouteTableId:
          Ref: PublicRouteTableC
    VPCGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId:
          Ref: InternetGateway
        VpcId:
          Ref: ServerlessVPC
    ServerlessAuthSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
    ServerlessSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
    ServerlessStorageSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Memcached Cluster & RDS Instance
        VpcId:
          Ref: ServerlessVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: '0.0.0.0/0'
    ServerlessRDSSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
    ServerlessRDSCluster:
      DependsOn: ServerlessStorageSecurityGroup
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: Postgres
        DBName: ${file(../config.${self:provider.stage}.json):database}
        MasterUsername: ${file(../config.${self:provider.stage}.json):db_user}
        MasterUserPassword: ${file(../config.${self:provider.stage}.json):db_password}
        DBInstanceClass: db.t2.micro
        PubliclyAccessible: False
        AllocatedStorage: 10
        VPCSecurityGroups:
        - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: ServerlessRDSSubnetGroup
    AuthFuncLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    GetCountryMetadataLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    GetAttrTypesLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    GetLocationAttrTypesLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    GetTaxonomyMetadataLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    CreateTaxonomyLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    DownloadStudiesLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    DownloadStudyLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
    UpdateStudyLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "30"
  Outputs:
      ServerlessVPCOutput:
        Value:
          Ref: ServerlessVPC
        Export:
          Name: ${self:service}:ServerlessVPC-${self:provider.stage}
      PublicSubnetAOutput:
        Value:
          Ref: PublicSubnetA
        Export:
          Name: ${self:service}:PublicSubnetA-${self:provider.stage}
      PublicRouteTableAOutput:
        Value:
          Ref: PublicRouteTableA
        Export:
          Name: ${self:service}:PublicRouteTableA-${self:provider.stage}
      PublicSubnetBOutput:
        Value:
          Ref: PublicSubnetB
        Export:
          Name: ${self:service}:PublicSubnetB-${self:provider.stage}
      PublicRouteTableBOutput:
        Value:
          Ref: PublicRouteTableB
        Export:
          Name: ${self:service}:PublicRouteTableB-${self:provider.stage}
      PublicSubnetCOutput:
        Value:
          Ref: PublicSubnetC
        Export:
          Name: ${self:service}:PublicSubnetC-${self:provider.stage}
      PublicRouteTableCOutput:
        Value:
          Ref: PublicRouteTableC
        Export:
          Name: ${self:service}:PublicRouteTableC-${self:provider.stage}
      ServerlessSecurityGroupOutput:
        Value:
          Ref: ServerlessSecurityGroup
        Export:
          Name: ${self:service}:ServerlessSecurityGroup-${self:provider.stage}
      DbHostOutput:
        Value:
          Fn::GetAtt: [ ServerlessRDSCluster, Endpoint.Address ]
        Export:
          Name: ${self:service}:DbHost-${self:provider.stage}
      ApiGatewayRestApi:
        Value:
          Ref: 'ApiGatewayRestApi'
        Export:
          Name: ${self:service}:ApiGatewayRestApi-${self:provider.stage}
      ApiGatewayRestApiRootResource:
        Value:
          Ref: "ApiGatewayResourceSimsDashbackboneDashserviceV1"
        Export:
          Name: ${self:service}:ApiGatewayRestApiRootResource-${self:provider.stage}
      AuthFunc:
        Value:
          Fn::GetAtt: [ "AuthFuncLambdaFunction", "Arn" ]
        Export:
          Name: ${self:service}:AuthFunc-${self:provider.stage}

