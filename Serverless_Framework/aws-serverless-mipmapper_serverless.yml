service: mipmapper

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    MIPMAPPER_S3_BUCKET: ${self:resources.Resources.imageStorage.Properties.BucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:ListBucket
        - s3:GetObject
      Resource: arn:aws:s3:::${self:resources.Resources.imageStorage.Properties.BucketName}/*

package:
  artifact: mipmapper.zip

functions:
  getUploadUrl:
    handler: handler.getUploadUrl # required, handler set in AWS Lambda
    name: ${self:provider.stage}-get_upload_url # optional, Deployed Lambda name
    description: Gets a presigned URL for uploading an image # optional, Description to publish to AWS
    memorySize: 512
    timeout: 10
    events:
      - http:
          path: images
          method: POST
          cors: true

resources:
  Resources:
    imageStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-mipmapper-image-storage
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
    imageStorageReadonlyPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:resources.Resources.imageStorage.Properties.BucketName}
        PolicyDocument: |
          {
            "Statement": [
              {
                "Sid":"AddPerm",
                "Effect":"Allow",
                "Principal": "*",
                "Action":["s3:GetObject"],
                "Resource":["arn:aws:s3:::${self:resources.Resources.imageStorage.Properties.BucketName}/*"]
              }
            ]
          }
