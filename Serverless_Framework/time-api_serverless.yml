
service: time-api

plugins:
  - serverless-secrets
  - serverless-webpack

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
  userTimerTableName: time-api-userTimer-${self:custom.stage}
  userTimerLogTableName: time-api-userTimerLog-${self:custom.stage}

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-west-2
  environment:
    stage: ${self:custom.stage}
    userTimerTableName: ${self:custom.userTimerTableName}
    userTimerLogTableName: ${self:custom.userTimerLogTableName}
  environmentSecrets:
    AUTH0_TIME_CERTIFICATE: /time-api/${self:custom.stage}/AUTH0_TIME_CERTIFICATE
    IFTTT_SERVICE_KEY: /time-api/${self:custom.stage}/IFTTT_SERVICE_KEY
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

functions:
  status:
    handler: src/ifttt/iftttLambda.status
    events:
      - http:
          method: GET
          path: ifttt/v1/status
          cors: true
  userInfo:
    handler: src/ifttt/iftttLambda.userInfo
    events:
      - http:
          method: GET
          path: ifttt/v1/user/info
          cors: true
  iftttStartTimer:
    handler: src/ifttt/iftttLambda.timerStart
    events:
      - http:
          method: POST
          path: ifttt/v1/actions/timer_start
          cors: true
  iftttStopTimer:
    handler: src/ifttt/iftttLambda.timerStop
    events:
      - http:
          method: POST
          path: ifttt/v1/actions/timer_stop
          cors: true
  getMyTimers:
    handler: src/timer/controller/timerLambda.getMyTimers
    events:
      - http:
          method: GET
          path: /timers
          cors: true
  getMyTimerLogs:
    handler: src/timer/controller/timerLambda.getMyTimerLogs
    events:
      - http:
          method: GET
          path: /timers/{timerId}/logs
          cors: true
  saveTimer:
    handler: src/timer/controller/timerLambda.saveTimer
    events:
      - http:
          method: POST
          path: /timers
          cors: true
  startTimer:
    handler: src/timer/controller/timerLambda.startTimer
    events:
      - http:
          method: POST
          path: /timers/{timerId}/start
          cors: true
  stopTimer:
    handler: src/timer/controller/timerLambda.stopTimer
    events:
      - http:
          method: POST
          path: /timers/{timerId}/stop
          cors: true
  deleteTimerLog:
    handler: src/timer/controller/timerLambda.deleteLog
    events:
      - http:
          method: DELETE
          path: /timers/{timerId}/logs
          cors: true
  saveTimerLog:
    handler: src/timer/controller/timerLambda.saveLog
    events:
      - http:
          method: POST
          path: /timers/{timerId}/logs
          cors: true


resources:
  Resources:
    userTimerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTimerTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timerId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timerId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userTimerLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTimerLogTableName}
        AttributeDefinitions:
          - AttributeName: userTimerId
            AttributeType: S
          - AttributeName: time
            AttributeType: S
        KeySchema:
          - AttributeName: userTimerId
            KeyType: HASH
          - AttributeName: time
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
