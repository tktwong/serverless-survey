# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: Restaurant

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  private: ${file(../private.yml)}

provider:
  name: aws
  deploymentBucket: ${self:custom.private.deploymentBucket}
  runtime: nodejs6.10
  stage: ${self:custom.private.stage}
  region: ${self:custom.private.region}
  profile: ${self:custom.private.profile}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: arn:aws:dynamodb:${self:custom.private.region}:${self:custom.private.zeatAccountId}:table/${opt:stage, self:custom.private.stage}-*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
           Fn::Join:
             - ""
             - - "arn:aws:s3:::zeatitdev"
               - "/*"
functions:
  createRestaurant:
    handler: restaurant.create
    environment:
      TABLE_RESTAURANT: ${opt:stage, self:custom.private.stage}-Restaurants
      GOOGLE_API_KEY: ${self:custom.private.googleApiKey}
    events:
      - http:
          path: /
          method: post
          cors: true
          authorizer:
            name: dev-Owner
            arn: arn:aws:cognito-idp:${self:custom.private.region}:${self:custom.private.zeatAccountId}:userpool/${self:custom.private.devOwnerPool}
  searchRestaurant:
    handler: restaurant.search
    environment:
      TABLE_RESTAURANT: ${opt:stage, self:custom.private.stage}-Restaurants
    events:
      - http:
          path: /search
          method: get
          cors: true
  createMenu:
    handler: restaurant.createMenu
    environment:
      TABLE_RESTAURANT: ${opt:stage, self:custom.private.stage}-Restaurants
      MENU_BASE_URL: ${self:custom.private.menuBaseUrl}
      S3_BUCKET: ${self:custom.private.s3Bucket}


    events:
      - http:
          path: /{restaurantId}/menus
          method: post
          cors: true
          authorizer:
            name: dev-Owner
            arn: arn:aws:cognito-idp:${self:custom.private.region}:${self:custom.private.zeatAccountId}:userpool/${self:custom.private.devOwnerPool}
  createDiningTable:
    handler: restaurant.createDiningTable
    environment:
      TABLE_RESTAURANT: ${opt:stage, self:custom.private.stage}-Restaurants
    events:
      - http:
          path: /{restaurantId}/tables
          method: post
          cors: true
          authorizer:
            name: dev-Owner
            arn: arn:aws:cognito-idp:${self:custom.private.region}:${self:custom.private.zeatAccountId}:userpool/${self:custom.private.devOwnerPool}
  listOrders:
    handler: restaurant.listOrders
    environment:
      TABLE_RESTAURANT_ORDER: ${opt:stage, self:custom.private.stage}-RestaurantOrders
      TABLE_DINER: ${opt:stage, self:custom.private.stage}-Diners
      TABLE_ORDER: ${opt:stage, self:custom.private.stage}-Orders
      DEBUG: '*'
    events:
      - http:
          path: /{restaurantId}/orders
          method: get
          cors: true
  getRestaurantDetails:
    handler: restaurant.getRestaurantDetails
    environment:
      TABLE_RESTAURANT: ${opt:stage, self:custom.private.stage}-Restaurants
    events:
      - http:
          path: /{restaurantId}/
          method: get
          cors: true

