# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: famas
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  profile: adminUser
  stage: dev
  region: ap-northeast-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${self:provider.region}"
plugins:
  - serverless-webpack
package:
  individually: true
custom:
  dynamodb:
  TableName: Users

  # you can add statements to the Lambda function's IAM Role here
  #  iamRoleStatements:
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:ListBucket"
  #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:PutObject"
  #      Resource:
  #        Fn::Join:
  #          - ""
  #          - - "arn:aws:s3:::"
  #            - "Ref" : "ServerlessDeploymentBucket"
  #            - "/*"

  # you can define service wide environment variables here

  # you can add packaging information here
  #package:
  #  include:
  #    - include-me.js
  #    - include-me-dir/**
  #  exclude:
  #    - exclude-me.js
  #    - exclude-me-dir/**

functions:
  hello:
    handler: hello.handler
    events:
      - http:
          path: hello/
          method: post
          cors: ture
  environment:
      KAKAO_SECRET: ${file(./config/config.js):USER_DATA_CONFIG.dev.KAKAO_SECRET}
      
  getMsg:
    handler: Messages/endpoint/getMsg.handler
    events:
      - http:
          path: get-msg/{msgId}
          method: get
          cors: ture

  getMsgs:
    handler: Messages/endpoint/getMsgs.handler
    events:
      - http:
          path: get-msg/
          method: get
          cors: ture

  postMsg:
    handler: Messages/endpoint/postMsg.handler
    events:
      - http:
          path: post-msg/
          method: post
          cors: ture
          authorizer: validate

  modifyMsg:
    handler: Messages/endpoint/modifyMsg.handler
    events:
      - http:
          path: update-msgData/{msgId}
          method: post
          cors: ture
          authorizer: validate

  deleteMsgData:
    handler: Messages/endpoint/deleteMsgData.handler
    events:
      - http:
          path: delete-msgData/{msgId}
          method: post
          cors: ture

  addLike:
    handler: Messages/endpoint/addLike.handler
    events:
      - http:
          path: addLike/{msgId}
          method: post
          cors: ture

  addComment:
    handler: Messages/endpoint/addComment.handler
    events:
      - http:
          path: addComment/{msgId}
          method: post
          cors: ture
          authorizer: validate

  validate:
    handler: Utils/validate.handler
    environment:
      JWT_SECRET: ${file(./config/config.js):USER_DATA_CONFIG.dev.JWT_SECRET}

  signup:
    handler: Users/endpoint/signup.handler
    events:
      - http:
          path: post-user/
          method: post
          cors: ture
    environment:
      USER_PW_SALT: ${file(./config/config.js):USER_DATA_CONFIG.dev.USER_PW_SALT}
      HASH_METHOD: ${file(./config/config.js):USER_DATA_CONFIG.dev.HASH_METHOD}
      DIGEST: ${file(./config/config.js):USER_DATA_CONFIG.dev.DIGEST}

  kakaoSignIn:
    handler: Users/endpoint/kakaoSignIn.handler
    events:
      - http:
          path: kakaoSignIn/{userId}
          method: post
          cors: ture
    environment:
      JWT_SECRET: ${file(./config/config.js):USER_DATA_CONFIG.dev.JWT_SECRET}

  kakaoSignUp:
    handler: Users/endpoint/kakaoSignUp.handler
    events:
      - http:
          path: kakaoSignUp/
          method: post
          cors: ture

  signin:
    handler: Users/endpoint/signin.handler
    events:
      - http:
          path: signin-user/
          method: post
          cors: ture
    environment:
      USER_PW_SALT: ${file(./config/config.js):USER_DATA_CONFIG.dev.USER_PW_SALT}
      HASH_METHOD: ${file(./config/config.js):USER_DATA_CONFIG.dev.HASH_METHOD}
      DIGEST: ${file(./config/config.js):USER_DATA_CONFIG.dev.DIGEST}
      JWT_SECRET: ${file(./config/config.js):USER_DATA_CONFIG.dev.JWT_SECRET}

  modifyUser:
    handler: Users/endpoint/modifyUser.handler
    events:
      - http:
          path: update-userData/
          method: post
          cors: ture
          authorizer: validate
    environment:
      USER_PW_SALT: ${file(./config/config.js):USER_DATA_CONFIG.dev.USER_PW_SALT}
      HASH_METHOD: ${file(./config/config.js):USER_DATA_CONFIG.dev.HASH_METHOD}
      DIGEST: ${file(./config/config.js):USER_DATA_CONFIG.dev.DIGEST}

  deleteUserData:
    handler: Users/endpoint/deleteUserData.handler
    events:
      - http:
          path: delete-userData/
          method: post
          cors: ture
          authorizer: validate
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"
# resources:
#   Resources:
#     usersTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: "userId"
#           - AttributeType: "S"
#         KeySchema:
#           - AttributeName: "userId"
#             keyType: "HASH"
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: Users
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
