# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service:
  name: bot-selfserve-escalation
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  stage: dev

# you can overwrite defaults here
#  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
      #Resource: "arn:aws:dynamodb:us-east-1:040420900284:table/integratedApps"
      # Resource: "arn:aws:dynamodb:us-east-1:040420900284:table/${self:custom.dynamoDbAppIdTableName}"
      Resource:
        - 'Fn::Join':
          - ":"
          -
            - "arn:aws:dynamodb"
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - "table/${self:custom.dynamoDbAppIdTableName}"

#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

plugins:
  - serverless-python-requirements

custom:
  dynamoDbAppIdTableName: "${self:service.name}-${self:provider.stage}-integratedApps"
  botEndpoint: "pipelineAppUserEvent"

# you can add packaging information here
package:
#  include:
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - minimal_widget.html
    - payloads.json
    - package-lock.json
    - node_modules/**

functions:
  userMessage:
    handler: handler.pipelineAppUserEvent
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: ${self:custom.botEndpoint}
          method: post
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
    environment:
      appTableName: ${self:custom.dynamoDbAppIdTableName}
      botStage: ${self:provider.stage}
      botEndpoint: ${self:custom.botEndpoint}
      # planeBodyUrl: ${ssm:planeBodyUrl}

# you can add CloudFormation resource templates here
resources:
  # DynamoDB
  - ${file(dynamodb-table.yml)}
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
