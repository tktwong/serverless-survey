# NOTE: update this with your service name
service: minion-store-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
   tableName: ${env:DYNAMO_TABLE_NAME}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:662176293706:table/reservations"
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource: "*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /reservations
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: reservations
          method: post
          cors: true
          authorizer: aws_iam
  
  # Defines an HTTP API endpoint that calls the main function in get.js
  # - path: url path is /reservations/{id}
  # - method: GET request
  get:
    handler: get.main
    events:
      - http:
          path: reservations/{id}
          method: get
          cors: true
          authrorizer: aws_iam

  # Defines an HTTP API endpoint that calls the main function in list.js
  # - path: url path is /reservations
  # - method: GET request        
  list:
    handler: list.main
    events:
      - http:
          path: reservations
          method: get
          cors: true
          authorizer: aws_iam

  sendEmail:
    handler: sendEmail.main
    events:
      - http:
          path: send-mail
          method: post
          cors: true

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}