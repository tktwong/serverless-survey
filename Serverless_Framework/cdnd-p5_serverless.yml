service:
  name: serverless-experimentlogbook-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    EXPERIMENTS_TABLE: Experiments-${self:provider.stage}
    EXPERIMENTS_BY_USER_INDEX: ExperimentsByUserIndex
    ATTACHMENTS_TABLE: Attachments-${self:provider.stage}
    ATTACHMENT_ID_INDEX: AttachmentIdIndex
    ATTACHMENTS_S3_BUCKET: experimentsattachments-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH0_JWKSURL: https://dev-w3cr2kre.auth0.com/.well-known/jwks.json

  # Enabling AWS X-Ray Tracking
  tracing:
    lambda: true
    apiGateway: true

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Experiments Logbook app
        description: Experiments Logbook app
    models:
      - name: CreateExperimentRequest
        contentType: application/json
        schema: ${file(src/models/createexperimentrequest.json)}
      - name: UpdateExperimentRequest
        contentType: application/json
        schema: ${file(src/models/updateexperimentrequest.json)}

functions:
  # TODO: Configure this function

  # auth0Authorizer
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # getExperiments
  GetExperiments:
    handler: src/lambda/http/getExperiments.handler
    events:
      - http:
          method: get
          path: experiments
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPERIMENTS_TABLE}/index/${self:provider.environment.EXPERIMENTS_BY_USER_INDEX}
          
  # createExperiments
  CreateExperiment:
    handler: src/lambda/http/createExperiment.handler
    events:
      - http:
          method: post
          path: experiments
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create new Experiment
            description: Create new Experiment
            requestModels:
              'application/json': CreateExperimentRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPERIMENTS_TABLE}

  # updateExperiment
  UpdateExperiment:
    handler: src/lambda/http/updateExperiment.handler
    events:
      - http:
          method: patch
          path: experiments/{experimentId}
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update Experiment
            description: Update Experiment
            requestModels:
              'application/json': UpdateExperimentRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPERIMENTS_TABLE}

  # deleteExperiment
  DeleteExperiment:
    handler: src/lambda/http/deleteExperiment.handler
    events:
      - http:
          method: delete
          path: experiments/{experimentId}
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPERIMENTS_TABLE}

  # generateUploadUrl
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: experiments/{experimentId}/attachment
          authorizer: Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPERIMENTS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*

resources:
  Resources:
    # TODO: Add any necessary AWS resources

    # API Gateway
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # DynamoDB Tables
    ExperimentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: experimentId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: experimentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EXPERIMENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EXPERIMENTS_BY_USER_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    #S3 Bucket
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    # Request Validator
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false