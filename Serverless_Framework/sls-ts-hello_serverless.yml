service:
  name: ts-api-test-tom

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-appsync-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  appSync:
    name: ${self:custom.stage}-cognito-api
    authenticationType: API_KEY
    mappingTemplates:
      - dataSource: GetMobileUserByPhone
        type: Query
        field: getMobileUserByPhone
        request: 'getMobileUserByPhone-request.vtl'
        response: 'getMobileUserByPhone-response.vtl'
      # - dataSource: SetPassword
      #   type: Mutation
      #   field: setPassword
      #   request: 'setPassword-request.vtl'
      #   response: 'setPassword-response.vtl'
    dataSources:
      - type: AWS_LAMBDA
        name: GetMobileUserByPhone
        config:
          functionName: getMobileUserByPhone

provider:
  name: aws
  runtime: nodejs8.10
  stage: test
  region: ap-northeast-1
  memorySize: 256
  timeout: 10

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'cognito-idp:ListUsers'
      Resource:
        - 'arn:aws:cognito-idp:ap-northeast-1:461716780826:userpool/ap-northeast-1_iH1FAARf3'
        # - "arn:aws:cognito-idp:ap-southeast-1:461716780826:userpool/ap-southeast-1_ntfECmrjH"

functions:
  tsHelloFunc:
    handler: handler.helloTsFunc
    events:
      - http:
          method: get
          path: hello

  jsAddFunc:
    handler: jsadd.addus
    events:
      - http:
          path: math/js-add
          method: post
          cors: true

  tsAddFunc:
    handler: tsadd.tsAddUs
    events:
      - http:
          path: math/ts-add
          method: post
          cors: true

  getMobileUserByPhone:
    handler: functions/getMobileUserByPhone.handler

resources:
  Resources:
    AppSyncServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'LambdaInvokePolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'lambda:invokeFunction'
                  Resource:
                    - 'arn:aws:${self:custom.region}:*:function:${self:service}-${self:custom.stage}-graphql'
                    - 'arn:aws:${self:custom.region}:*:function:${self:service}-${self:custom.stage}-graphql:*'
