service:
  name: property-mogul-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    PROPERTIES_TABLE: Properties-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex-${self:provider.stage}
    GENERATED_URL_EXPIRATION: 300
    PROPERTY_IMAGES_S3_BUCKET: serverless-property-images-${self:provider.stage}

custom:
  topicName: propertyImagesTopic-${self:provider.stage}

  documentation:
    api:
      info:
        version: v1.0.0
        title: Property Comparison App API
        description: Serverless application for creating and updated real estate properties
    models:
      - name: CreateUpdatePropertyRequest
        contentType: application/json
        schema: ${file(models/create-update-property-request.json)}
  
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetProperties:
    handler: src/lambda/http/getProperties.handler
    events:
      - http:
          method: get
          path: properties
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROPERTIES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROPERTIES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROPERTIES_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
        
  CreateProperty:
    handler: src/lambda/http/createProperty.handler
    events:
      - http:
          method: post
          path: properties
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new property
            description: Create a new property
            requestModels:
              'application/json': CreateUpdatePropertyRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROPERTIES_TABLE}

  UpdateProperty:
    handler: src/lambda/http/updateProperty.handler
    events:
      - http:
          method: patch
          path: properties/{propertyId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update property details
            description: Update property details
            requestModels:
              'application/json': CreateUpdatePropertyRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROPERTIES_TABLE}
      
  DeleteProperty:
    handler: src/lambda/http/deleteProperty.handler
    events:
      - http:
          method: delete
          path: properties/{propertyId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROPERTIES_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: properties/{propertyId}/attachment
          cors: true
          authorizer: Auth

  UpdateImageUrl:
    handler: src/lambda/s3/updateImageUrl.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROPERTIES_TABLE}
      
resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    PropertiesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: propertyId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: propertyId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PROPERTIES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PROPERTY_IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref PropertyImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.PROPERTY_IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref PropertyImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.PROPERTY_IMAGES_S3_BUCKET}
        Topics:
          - !Ref PropertyImagesTopic

    PropertyImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Property Images bucket topic
        TopicName: ${self:custom.topicName}

