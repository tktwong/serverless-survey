service: stag

frameworkVersion: '2'

custom:
  tableName: shopify-data-table
  bucketName: popup-config-bucket
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  serverless-offline:
    httpPort: 3001

provider:
  name: aws
  runtime: nodejs12.x
  profile: stagUser
  region: eu-west-3
  environment: 
    tableName: ${self:custom.tableName}  
    bucketName: ${self:custom.bucketName}
    dynamoPort: ${self:custom.dynamodb.start.port}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - s3:PutObject
        - s3:GetObject
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: 
        - arn:aws:s3:::${self:provider.environment.bucketName}/*
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.tableName}
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

package:
  individually: true

functions:
  write:
    handler: lambdas/endpoints/write-db.handler
    events:
      - http:
          path: /ddb/{PK}
          method: POST
          cors: true

  get:
    handler: lambdas/endpoints/read-db.handler
    events:
      - http:
          path: /ddb/{PK}
          method: GET
          cors: true
      - http:
          path: /ddb
          method: GET
          cors: true

  delete-item-db:
    handler: lambdas/endpoints/delete-db.handler
    events:
      - http:
          path: /ddb/{PK}
          method: DELETE
          cors: true

  update-item-db:
    handler: lambdas/endpoints/update-db.handler
    events:
      - http:
          path: /ddb/{PK}
          method: PUT
          cors: true

  writeS3:
    handler: lambdas/endpoints/write-s3.handler
    events:
      - http:
          path: s3/{fName}
          method: POST
          cors: true

  getS3:
    handler: lambdas/endpoints/read-s3.handler
    events:
      - http:
          path: s3/{fName}
          method: GET
          cors: true

resources:
  Resources:
    serviceBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    serviceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST


