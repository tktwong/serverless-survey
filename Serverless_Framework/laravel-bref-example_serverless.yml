service: laravel-bref

provider:
  name: aws
  region: eu-north-1
  stage: ${opt:stage, 'dev'} # defaults to dev, can be overridden with --stage <stage> on the commandline
  runtime: provided

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
      Resource:
        - !GetAtt Cache.Arn
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
      Resource:
        - !GetAtt Queue.Arn

  environment:
    APP_ENV: production
    APP_KEY: "base64:+iTro5CgvnG6vFjPo06vGEpyBZHIezyuTfVcU/LDN7c="
    APP_STORAGE: /tmp
    # Serve static assets via CloudFront
    ASSET_URL: ${self:custom.asset_url}
    # Store cache in a DynamoDB table
    CACHE_DRIVER: dynamodb
    DYNAMODB_CACHE_TABLE: !Ref Cache
    # Log to stderr to get CloudWatch Logs to pick it up
    LOG_CHANNEL: stderr
    # Store session in a DynamoDB table
    QUEUE_CONNECTION: sqs
    SESSION_DRIVER: dynamodb
    SESSION_STORE: dynamodb
    SQS_QUEUE: !Ref Queue
    SQS_PREFIX: https://sqs.eu-north-1.amazonaws.com/148530641072
    VIEW_COMPILED_PATH: /tmp/storage/framework/views

plugins:
  - ./vendor/bref/bref
  - serverless-s3-sync

custom:
  s3Sync:
    # Sync public dir with assets to the assets bucket
    - bucketName: laravel-bref-dev-assets-uyfgsjfv
      localDir: public
      deleteRemoved: true
      acl: public-read
  asset_url: !Join
    - ''
    - - 'https://'
      - !GetAtt CDN.DomainName

package:
  excludeDevDependencies: false
  exclude:
    - ./**
  include:
    - app/**
    - bootstrap/**
    - config/**
    - database/**
    - public/index.php
    - public/mix-manifest.json
    - resources/lang/**
    - resources/views/**
    - routes/**
    - vendor/**
    - artisan
    - queue-handler.php

functions:
  website:
    handler: public/index.php
    description: ''
    memorySize: 2048
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-74-fpm}
    events:
      # Using HTTP API
      - httpApi: '*'

  artisan:
    handler: artisan
    description: 'Artisan console'
    layers:
      - ${bref:layer.php-74} # PHP
      - ${bref:layer.console} # The "console" layer
    events:
      - schedule:
          description: Running the Laravel Scheduler (schedule:run) each minute
          rate: rate(1 minute)
          input:
            cli: schedule:run

  worker:
    handler: queue-handler.php
    description: Laravel Queue Handler
    timeout: 60
    memorySize: 1024
    environment:
      BREF_LOOP_MAX: 10 # handle 25 jobs before this process exits, Only runs the Laravel Boot for the first execution
      LOG_STDERR_FORMATTER: "\\App\\Lambda\\LambdaLogFormatter" # Use a different formatter for the log message to be easier parsed by CloudWatch Logs
    layers:
      - ${bref:layer.php-74} # PHP
    events:
      - sqs:
          enabled: true
          arn: !GetAtt Queue.Arn
          batchSize: 1

resources:
  Resources:
    Cache:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: laravel-bref-${self:provider.stage}-cache
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH

    Queue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: laravel-bref-${self:provider.stage}-queue
        ReceiveMessageWaitTimeSeconds: 20
        VisibilityTimeout: 120

    Assets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: laravel-bref-${self:provider.stage}-assets-uyfgsjfv

    CDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          PriceClass: PriceClass_100
          HttpVersion: http2
          Origins:
            - Id: Assets
              DomainName: !GetAtt Assets.RegionalDomainName
              S3OriginConfig: {}
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD]
            TargetOriginId: Assets
            #DefaultTTL: 0
            #MinTTL: 0
            #MaxTTL: 0
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none # Forward cookies to use them in PHP
            ViewerProtocolPolicy: redirect-to-https
          CustomErrorResponses:
            # Do not cache HTTP errors
            - ErrorCode: 500
              ErrorCachingMinTTL: 0
            - ErrorCode: 504
              ErrorCachingMinTTL: 0
