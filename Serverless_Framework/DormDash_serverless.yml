service: dormdash

plugins:
  - serverless-stage-manager
  - serverless-webpack
  - serverless-offline
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}
  region: us-east-1

  environment:
    EXECUTION_STAGE: ${self:provider.stage}
    AWS_DEPLOYMENT_REGION: ${self:provider.region}
    GOOGLE_AUTH_WEB_CLIENT_ID: ${file(./secrets.json):${self:provider.stage}.GOOGLE_AUTH_WEB_CLIENT_ID}
    GOOGLE_AUTH_WEB_CLIENT_SECRET: ${file(./secrets.json):${self:provider.stage}.GOOGLE_AUTH_WEB_CLIENT_SECRET}
    DB_HOST: ${file(./secrets.json):${self:provider.stage}.DB_HOST}
    DB_USER: ${file(./secrets.json):${self:provider.stage}.DB_USER}
    DB_PASSWORD: ${file(./secrets.json):${self:provider.stage}.DB_PASSWORD}
    DB_NAME: ${file(./secrets.json):${self:provider.stage}.DB_NAME}

custom:
  stages:
    - dev
    - stable

  serverless-offline:
    port: 3000
    stage: ${self:provider.stage}

  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'yarn'
    includeModules: true

functions:
  test:
    handler: src/routes/test.handler
    events:
      - http:
          path: /test
          method: get
          cors: true

  authorizer:
    handler: src/authorizer/authorizer.handler

  getDiningHalls:
    handler: src/routes/dining-hall/getHalls.handler
    events:
      - http:
          path: /admin/dining-hall
          method: get
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  createDiningHallTable:
    handler: src/routes/dining-hall-table/addTable.handler
    events:
      - http:
          path: /admin/dining-hall-table
          method: post
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  deleteDiningHallTable:
    handler: src/routes/dining-hall-table/deleteTable.handler
    events:
      - http:
          path: /admin/dining-hall-table
          method: delete
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  updateDiningHallTable:
    handler: src/routes/dining-hall-table/updateTable.handler
    events:
      - http:
          path: /admin/dining-hall-table
          method: put
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  createDiningHall:
    handler: src/routes/dining-hall/createHall.handler
    events:
      - http:
          path: /admin/dining-hall
          method: post
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  deleteDiningHall:
    handler: src/routes/dining-hall/deleteHall.handler
    events:
      - http:
          path: /admin/dining-hall
          method: delete
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  joinQueue:
    handler: src/routes/queue/joinQueue.handler
    events:
      - http:
          path: /queue
          method: post
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token
            
  checkGroup:
    handler: src/routes/queue/checkGroup.handler
    events:
      - http:
          path: /checkGroup
          method: get
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token 

  getQueueSize:
    handler: src/routes/queue/getQueueSize.handler
    events:
      - http:
          path: /queue/size
          method: get
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  attemptAdmit:
    handler: src/routes/admit/attemptAdmit.handler
    events:
      - http:
          path: /admit
          method: post
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  leaveHall:
    handler: src/routes/admit/leaveHall.handler
    events:
      - http:
          path: /admit/leave
          method: post
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  arriveAtHall:
    handler: src/routes/admit/arriveAtHall.handler
    events:
      - http:
          path: /admit/arrive
          method: post
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  getRecommendation:
    handler: src/routes/recommendation-system/getRecommendation.handler
    events:
      - http:
          path: /recommendation
          method: post
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  getActivity:
    handler: src/routes/admit/getActivity.handler
    events:
      - http:
          path: /admit/activity
          method: get
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token

  leaveQueue:
    handler: src/routes/queue/leaveQueue.handler
    events:
      - http:
          path: /queue/leave
          method: post
          cors: true
          authorizer:
            name: authorizer
            identitySource: method.request.header.Authorization
            type: token