service: farm-app-api
# Deployment ready
# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  # Stage is based on what is passed in when running serverless
  # commands. Or fallsback to what has been set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so it can be used while testing locally
  # Change table name to farms
  tableName: ${self:custom.stage}-farms
  # Set DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  attachmentsBucket: studistics-livestock-csv-attachments-${self:custom.stage}
  # Load webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load secret environment variables based on current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${self:custom.environment.stripeSecretKey}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      # Restrict IAM role permissions to
      # the specific table for the stage
      Resource:
        # Changed to LivestockTable to test building new DynamoDB
        - "Fn::GetAtt": [ LivestockTable, Arn ]
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::${self:custom.attachmentsBucket}/*"

functions:
  csvHandler:
    # Defines a S3 Bucket that calls the main function in csvHandler.js
    # Defines an HTTP API endpoint that calls the main function in csvHandler.js
    # - path: url path is /farms/{id}
    # - method: POST request
    handler: csvHandler.main
    events:
      - s3:
          timeout: 12
          bucket: attachments
          events: s3:ObjectCreated:*
          rules:
            - suffix: .csv
      - http:
          path: farms/{id}
          method: post
          cors: true
          authorizer: aws_iam
  dataFetch:
    handler: dataFetch.main
    events:
      - http:
          path: farms/{id}
          method: get
          cors: true
          authorizer: aws_iam


# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}