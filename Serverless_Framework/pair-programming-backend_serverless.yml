# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: pair-programming-server
# app and org for use with dashboard.serverless.com
app: pair-programming-server-app
org: ethanroy395

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  profile: admin
  timeout: 30
  environment:
    DATA_TABLE: ${self:service}-data2
    USER_TABLE: ${self:service}-userTable
  iamRoleStatements:
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "dynamodb:*"

functions:

  setData:
    handler: handler.setData
    events:
      - http:
          path: setData
          method: post
          cors: true

  getData:
    handler: handler.getData
    events:
      - http:
          path: getData/{id}
          method: get
          cors: true

  updateData:
    handler: handler.updateData
    events:
      - http:
          path: updateData/{id}
          method: put
          cors: true

  updateLastEdit:
    handler: handler.updateLastEdit
    events:
      - http:
          path: updateLastEdit/{id}
          method: put
          cors: true

  updateName:
    handler: handler.updateName
    events:
      - http:
          path: updateName/{id}
          method: put
          cors: true

  getName:
    handler: handler.getName
    events:
      - http:
          path: getName/{id}
          method: get
          cors: true

  updateRunCount:
    handler: handler.updateRunCount
    events:
      - http:
          path: updateRunCount/{id}
          method: put
          cors: true

  updateConfusionCount:
    handler: handler.updateConfusionCount
    events:
      - http:
          path: updateConfusionCount/{id}
          method: put
          cors: true

  updateToggleCount:
    handler: handler.updateToggleCount
    events:
      - http:
          path: updateToggleCount/{id}
          method: put
          cors: true

  updateCommentCount:
    handler: handler.updateCommentCount
    events:
      - http:
          path: updateCommentCount/{id}
          method: put
          cors: true

  updateTimeStamps:
    handler: handler.updateTimeStamps
    events:
      - http:
          path: updateTimeStamps/{id}
          method: put
          cors: true

  updateChat:
    handler: handler.updateChat
    events:
      - http:
          path: updateChat/{id}
          method: put
          cors: true

  updateSessionLength:
    handler: handler.updateSessionLength
    events:
      - http:
          path: updateSessionLength/{id}
          method: put
          cors: true

  updateChildren:
    handler: handler.updateChildren
    events:
      - http:
          path: updateChildren/{id}
          method: put
          cors: true

  updateSessions:
    handler: userHandler.updateSessions
    events:
      - http:
          path: updateSessions/{id}
          method: put
          cors: true

  getSessions:
    handler: homeHandler.getSessions
    events:
      - http:
          path: getSessions/{id}
          method: get
          cors: true

  getChildren: 
    handler: homeHandler.getChildren
    events:
      - http:
          path: getChildren/{id}
          method: get
          cors: true 

  getLastEdit: 
    handler: homeHandler.getLastEdit
    events:
      - http:
          path: getLastEdit/{id}
          method: get
          cors: true 


resources: # CloudFormation template syntax from here on.
  Resources:
    codeDynamoDBTable: 
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - 
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DATA_TABLE}
    userDyanamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - 
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USER_TABLE}


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
