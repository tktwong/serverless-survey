service: sls-appsync-backend

plugins:
   - serverless-appsync-plugin
   - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs8.10
  profile: default

functions:
  graphql:
    handler: handler.graphql
  addItemsToStory:
    handler: addItemsToStory.handler

custom:
  accountId: 021764565112
  appSync:
    name: sls-appsync-api
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion:  us-west-1
      defaultAction: ALLOW
      userPoolId:  us-east-1_YucIGGiHp 
    mappingTemplates:
      - dataSource: awsLambdaDataSource
        type: Query #Query, Mutation, Subscription
        field: helloWorld
        request: "helloWorld-request-mapping-template.txt"
        response: "helloWorld-response-mapping-template.txt"
      - dataSource: storyDataSource
        type: Mutation
        field: createStory
        request: "createStory-request-mapping-template.txt"
        response: "createStory-response-mapping-template.txt"
      - dataSource: storyDataSource
        type: Query
        field: getStories
        request: "getStories-request-mapping-template.txt"
        response: "getStories-response-mapping-template.txt"
      - type: Story
        field: items
        request: "getStoryItems-request.txt"
        response: "getStoryItems-response.txt"
        kind: PIPELINE
        functions:
          - getStory
          - getItemsFromId
      #- dataSource: storyDataSource
      #  type: Mutation
      #  field: addItemsToStory
      #  request: "addItemsToStory-request-mapping-template.txt"
      #  response: "addItemsToStory-response-mapping-template.txt"
      - dataSource: addItemsToStoryLambdaDataSource
        type: Mutation
        field: addItemsToStory
        request: "addItemsToStory-request-mapping-template.txt"
        response: "addItemsToStory-response-mapping-template.txt"
      - dataSource: itemDataSource
        type: Query
        field: getItems
        request: "getItems-request-mapping-template.txt"
        response: "getItems-response-mapping-template.txt"
      - dataSource: itemDataSource
        type: Mutation
        field: createItem
        request: "createItem-request-mapping-template.txt"
        response: "createItem-response-mapping-template.txt"
    functionConfigurations:
      - dataSource: storyDataSource
        name: getStory
        request: "function-getStory-request.txt"
        response: "function-getStory-response.txt"
      - dataSource: itemDataSource
        name: getItemsFromId
        request: "function-getItems-request.txt"
        response: "function-getItems-response.txt"
    schema: # defaults schema.graphql
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: awsLambdaDataSource
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: addItemsToStoryLambdaDataSource
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [AddItemsToStoryLambdaFunction, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: storyDataSource
        description: 'Stories table'
        config:
          tableName: 'stories'
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: itemDataSource
        description: 'Items table'
        config:
          tableName: 'items'
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoServiceRole, Arn] }

resources:
  Resources:
    StoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stories
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ItemTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: items
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: cognito_sls_appsync_user_pool
    # Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: cognito_sls_appsync_client
        UserPoolId:
          Ref: CognitoUserPool
    # Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: cognito_sls_appsync_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: cognito_sls_appsync_appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: cognito_sls_appsync_appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
    # AppSync lambda role
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "Lambda-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:us-west-1:021764565112:function:${self:service}-dev-graphql"
                    - "arn:aws:lambda:us-west-1:021764565112:function:${self:service}-dev-graphql:*"
                    - "arn:aws:lambda:us-west-1:021764565112:function:${self:service}-dev-addItemsToStory"
                    - "arn:aws:lambda:us-west-1:021764565112:function:${self:service}-dev-addItemsToStory:*"
    AppSyncDynamoServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Dynamo-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:BatchGetItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "arn:aws:dynamodb:us-east-1:*:table/stories"
                    - "arn:aws:dynamodb:us-east-1:*:table/stories/*"
                    - "arn:aws:dynamodb:us-east-1:*:table/items"
                    - "arn:aws:dynamodb:us-east-1:*:table/items/*"