#serverless.yml
service: SailingWeb
provider: 

  memorySize: 1024
  name: aws
  runtime: nodejs10.x
  environment:
  role: arn:aws:iam::118983564982:role/sailingweb
  websocketsApiName: sailingWebSocket
  websocketsApiRouteSelectionExpression: $request.body.action
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
      Resource:
        - Fn::GetAtt: [WebSocketTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [WebSocketTable, Arn]
              - '*'
resources:
  Resources:
    WebSocketTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: WebSocketTable

        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH         
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1   
    BoatData:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1   
        AttributeDefinitions:
          - AttributeName: boatName
            AttributeType: S
          - AttributeName: crew
            AttributeType: N
        KeySchema:
          - AttributeName: boatName
            KeyType: HASH
          - AttributeName: crew
            KeyType: RANGE
        TableName: BoatData
    Races:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: type_id
            AttributeType: S
          - AttributeName: eventTimeStamp
            AttributeType: N
        LocalSecondaryIndexes:
          - IndexName: eventId-eventTimeStamp-index
            KeySchema: 
              - AttributeName: eventId
                KeyType: HASH
              - AttributeName: eventTimeStamp
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: type_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: Races
        
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
custom: 
  dynamodb: 
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: BoatData
            sources: [./__tests__/seed/BoatData.json]
          - table: Races
            sources: [./__tests__/seed/Races.json]
  webpack:
    webpackConfig: './webpack.config.js'   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging
    packager: 'yarn'   # Packager that will be used to package your external modules
  serverless-offline:
    exec: "yarn run test"
functions:

  # manage connection and disconnection of clients
  connectionManager:
    handler: src/handler.connectionManager
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  # just in case we are getting weird / bad data
  # we can react to it with a sane response
  defaultMessages:
    handler: src/handler.defaultMessage
    events:
      - websocket:
          route: $default

  # handle chat app messages
  sendMessage:
    handler: src/handler.sendMessage
    events:
      - websocket:
          route: sendMessage


  # handle broadcasting all events
  # we do this by listening the dynamodb table stream for messages or disconnects
  # could even be done by sub-systems directly to dynamodb
  broadcast:
    handler: src/handler.broadcast
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [Races, StreamArn]
  query:
    handler: src/graphql.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true 