# serverless.yml

service: music-cloud

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-finch

custom:
  tableName: 'track-table-${self:provider.stage}'
  bucketName: 'track-bucket-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true
  client:
    bucketName: music-cloud-client-bucket
    distributionFolder: client/dist/

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:us-east-1:195711764773:table/track-table-dev

    - Effect: Allow
      Action:
        - s3:UploadFileObj
        - s3:PutObject
        - s3:DeleteObject
        - s3:GetObject
        - s3:*
      Resource:
        - arn:aws:s3:::*/*

    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - arn:aws:logs::us-east-1:195711764773:*


  environment:
    TRACK_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  postSong:
    handler: wsgi.handler
    events:
      - http:
          path: songs
          method: post
          cors: true
  getSongs:
    handler: wsgi.handler
    events:
      - http:
          path: songs
          method: get
          cors: true
  downloadSong:
    handler: wsgi.handler
    events:
      - http:
          path: songs/{song_id}
          method: get
          cors: true
  updateSong:
    handler: wsgi.handler
    events:
      - http:
          path: songs/{song_id}
          method: put
          cors: true
  deleteSong:
    handler: wsgi.handler
    events:
      - http:
          path: songs/{song_id}
          method: delete
          cors: true
  recommendSong:
    handler: wsgi.handler
    events:
      - http:
          path: recommend/{song_id}
          method: get
          cors: true

resources:
  Resources:
    DynamoDBTableTracks:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: songId
            AttributeType: S
        KeySchema:
          -
            AttributeName: songId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

    S3Tracks:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000


