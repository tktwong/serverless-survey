service: python-api

plugins:
  - serverless-prune-plugin

# Create an optimized package for our functions
package:
  # individually: true # this was making the uploads larger and multiplied by the number of functions
  include:
    - functions/**
    - functions_cognito/**
  exclude:
    - get_config_values.sh
    - package-lock.json
    - README.md
    - node_modules/**
    - resources/**
    - testData/**

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  usersTableName: ${self:custom.stage}-Users
  notesTableName: ${self:custom.stage}-Notes
  prune:
    automatic: true
    includeLayers: true
    number: 3

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: us-east-1
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    usersTableName: ${self:custom.usersTableName}
    notesTableName: ${self:custom.notesTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [NotesTable, Arn]
        - "Fn::GetAtt": [UsersTable, Arn]
        - Fn::Join:
            - ""
            - - Fn::GetAtt: [UsersTable, Arn]
              - "/index/*"
    - Effect: Allow
      Action:
        - cognito-idp:ListUsers
        - cognito-idp:ListGroups
        - cognito-idp:ListUsersInGroup
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminListGroupsForUser
        - cognito-idp:CreateGroup
        - cognito-idp:DeleteGroup
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:AdminAddUserToGroup
        - cognito-idp:AdminRemoveUserFromGroup
        - cognito-idp:AdminDeleteUser
      Resource:
        - "Fn::GetAtt": [CognitoUserPool, Arn]
    - Effect: Allow
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource:
        - Fn::Join:
            - ""
            - - Fn::GetAtt: [CacheBucket, Arn]
              - "/*"
    - Effect: Allow
      Action:
        - "ssm:GetParameter"
        - "ssm:PutParameter"
      Resource:
        - "Fn::Join":
            - ":"
            - - "arn:aws:ssm"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "parameter/exportUsersJson-${self:custom.stage}"

functions:
  createNote:
    handler: functions.createNote.main
    memorySize: 128 # optional, in MB, default is 1024
    events:
      - http:
          path: notes/{userid}
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  getNote:
    handler: functions.getNote.main
    memorySize: 128 # optional, in MB, default is 1024
    events:
      - http:
          path: notes/default/{noteId}
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: notes/{userid}/{noteId}
          method: get
          cors: true
          authorizer: aws_iam

  listNotes:
    handler: functions.listNotes.main
    memorySize: 128 # optional, in MB, default is 1024
    events:
      - http:
          path: listnotes
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: listnotes/{userid}
          method: get
          cors: true
          authorizer: aws_iam

  updateNote:
    handler: functions.updateNote.main
    memorySize: 128 # optional, in MB, default is 1024
    events:
      - http:
          path: notes/default/{noteId}
          method: put
          cors: true
          authorizer: aws_iam
      - http:
          path: notes/{userid}/{noteId}
          method: put
          cors: true
          authorizer: aws_iam

  deleteNote:
    handler: functions.deleteNote.main
    memorySize: 128 # optional, in MB, default is 1024
    events:
      - http:
          path: notes/default/{noteId}
          method: delete
          cors: true
          authorizer: aws_iam
      - http:
          path: notes/{userid}/{noteId}
          method: delete
          cors: true
          authorizer: aws_iam

  listUsers:
    handler: functions_cognito.listUsers.main
    memorySize: 192 # optional, in MB, default is 1024
    timeout: 15 # optional, in seconds, default is 6
    environment:
      user_pool_id:
        Ref: CognitoUserPool
      cache_bucket:
        Ref: CacheBucket
    events:
      - http:
          path: admin/users/all
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: admin/users/all/{page}
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: admin/users/{filter}
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: admin/users/{filter}/{page}
          method: get
          cors: true
          authorizer: aws_iam

  listPhysicians:
    handler: functions_cognito.listPhysicians.main
    memorySize: 128 # optional, in MB, default is 1024
    environment:
      user_pool_id:
        Ref: CognitoUserPool
    events:
      - http:
          path: listphysicians
          method: get
          cors: true
          authorizer: aws_iam

  createUser:
    handler: functions_cognito.createUser.main
    memorySize: 128 # optional, in MB, default is 1024
    environment:
      user_pool_id:
        Ref: CognitoUserPool
      cache_bucket:
        Ref: CacheBucket
      exportUsersJson_param:
        Ref: exportUsersJson
    events:
      - http:
          path: signup
          method: post
          cors: true
      - http:
          path: createuser
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: edituser/{userid}
          method: post
          cors: true
          authorizer: aws_iam

  getUser:
    handler: functions_cognito.getUser.main
    memorySize: 128 # optional, in MB, default is 1024
    environment:
      user_pool_id:
        Ref: CognitoUserPool
    events:
      - http:
          path: getuser
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: getuser/{userid}
          method: get
          cors: true
          authorizer: aws_iam

  reports:
    handler: functions.reports.main
    memorySize: 128 # optional, in MB, default is 1024
    environment:
      cache_bucket:
        Ref: CacheBucket
      user_pool_id:
        Ref: CognitoUserPool
    events:
      - http:
          path: getReports
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: getReport/{reportId}
          method: get
          cors: true
          authorizer: aws_iam

  userTableToJson:
    handler: functions_cognito.userTableToJson.main
    memorySize: 192 # optional, in MB, default is 1024
    timeout: 120 # optional, in seconds, default is 6
    reservedConcurrency: 1
    environment:
      cache_bucket:
        Ref: CacheBucket
      exportUsersJson_param:
        Ref: exportUsersJson
    events:
      - schedule:
          name: userTableToJson_Schedule_${self:custom.stage}
          description: Schedule for userTableToJson ${self:custom.stage}
          rate: cron(0 * * * ? *) # hourly

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # SSM Parameter Store
  - ${file(resources/ssm-parameter-store.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
