# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: secslice-backend # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "=1.2.1"

provider:
  name: aws
  runtime: nodejs4.3

# you can overwrite defaults here
stage: "dev"
region: "us-east-1"

custom:
  currentStage: test
  currentRegion: us-west-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
writeEnvVars:
    SERVERLESS_STAGE: ${self:custom.currentStage}
    SERVERLESS_REGION: ${self:custom.currentRegion}
    SERVERLESS_PROJECT: "Secure Slice"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createClass:
    handler: restApi/class/createClass/handler.handler
    name: ${self:custom.currentStage}-classService-createClass
    description: SecSlice Create Class Service
    endpoints:
      - http:
          path: class/create
          method: POST
          type: AWS
          authorizationType: none
          authorizerFunction: false
          apiKeyRequired: false
          requestTemplates: ${self:custom.apiRequestTemplate}
          responses: ${self:custom.responseTemplate}
    events:
      - http:
          integration: ${self:custom.integration}
          path: class/create
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  getClassesBySchool:
    handler: restApi/class/getClassesBySchool/handler.handler
    name: ${self:custom.currentStage}-classService-getClassesBySchool
    description: SecSlice Get Class Service
    events:
      - http:
          integration: ${self:custom.integration}
          path: class/schoolcode
          method: get
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  createInstitution:
    handler: restApi/institution/createInstitution/handler.handler
    name: ${self:custom.currentStage}-institutionService-createInstitution
    description: API to create a new institution
    events:
      - http:
          integration: ${self:custom.integration}
          path: institution/create
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  getInstitution:
    handler: restApi/institution/getInstitution/handler.handler
    name: ${self:custom.currentStage}-institutionService-getInstitution
    description: API to get an institution By shortcode
    events:
      - http:
          integration: ${self:custom.integration}
          path: institution/shortcode
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  createSchool:
    handler: restApi/school/createSchool/handler.handler
    name: ${self:custom.currentStage}-schoolService-createSchool
    description: API to create a new school
    events:
      - http:
          integration: ${self:custom.integration}
          path: school/create
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  getSchoolsByInstitution:
    handler: restApi/school/getSchoolsByInstitution/handler.handler
    name: ${self:custom.currentStage}-schoolService-getSchoolsByInstitution
    description: API to get schools By institution shortcode
    events:
      - http:
          integration: ${self:custom.integration}
          path: institution/schools
          method: get
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  createTables:
    handler: restApi/superadmin/createtables/handler.handler
    name: ${self:custom.currentStage}-superAdminService-createTables
    description: Tables Create API
    events:
      - http:
          integration: ${self:custom.integration}
          path: superadmin/createtables
          method: put
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  promoteToSuperAdmin:
    handler: restApi/superadmin/promote/handler.handler
    name: ${self:custom.currentStage}-superAdminService-promote
    description: User Promote to superadmin API
    events:
      - http:
          integration: ${self:custom.integration}
          path: superadmin/promote
          method: put
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  createUser:
    handler: restApi/users/create/handler.handler
    name: ${self:custom.currentStage}-userService-create
    description: User Create API
    events:
      - http:
          integration: ${self:custom.integration}
          path: users/create
          method: put
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
  token:
    handler: restApi/users/token/handler.handler
    name: ${self:custom.currentStage}-userService-token
    description: Get Access token request
    events:
      - http:
          # integration: ${self:custom.integration}
          path: users/token
          method: post
          # see http://forum.serverless.com/t/serverless-v1-0-cors-methods-with-any-http-method/580
          cors: ${self:custom.cors}
          requestTemplates: "$${apiRequestTemplate}"
          responses: "$${responseTemplate}"

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-offline
  - serverless-plugin-write-env-vars
  # - serverless-optimizer-plugin
  # - serverless-lambda-prune-plugin
  # - serverless-cors-plugin

# resources: ${file(./components/resources.yml)}

