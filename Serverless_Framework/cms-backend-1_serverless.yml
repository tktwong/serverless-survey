service: cms-backend

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  postsTableName: ${self:custom.stage}-blogPosts
  commentsTableName: ${self:custom.stage}-blogPostComments
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    postsTableName: ${self:custom.postsTableName}
    commentsTableName: ${self:custom.commentsTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ BlogPostsTable, Arn ]
        - "Fn::GetAtt": [ BlogPostCommentsTable, Arn ]

functions:
  ping:
    handler: ping.main
    events:
      - http:
          path: ping
          method: get
          cors: true

  # Defines an HTTP API endpoint that calls the main function in posts/create.js
  # - path: url path is /blogPosts
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createPost:
    handler: posts/create.main
    events:
      - http:
          path: blogPosts
          method: post
          cors: true
          authorizer: aws_iam

  getPost:
    # Defines an HTTP API endpoint that calls the main function in posts/get.js
    # - path: url path is /blogPosts/{id}
    # - method: GET request
    handler: posts/get.main
    events:
      - http:
          path: blogPosts/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  getSpecifiedPost:
    # Defines an HTTP API endpoint that calls the main function in posts/getSpecified.js
    # - path: url path is /blogPostForUser/{userId}/{blogPostId}
    # - method: GET request
    handler: posts/getSpecified.main
    events:
      - http:
          path: blogPostForUser/{userId}/{blogPostId}
          method: get
          cors: true

  listPosts:
    # Defines an HTTP API endpoint that calls the main function in posts/list.js
    # - path: url path is /blogPosts
    # - method: GET request
    handler: posts/list.main
    events:
      - http:
          path: blogPosts
          method: get
          cors: true
          authorizer: aws_iam

  listSpecifiedPosts:
    # Defines an HTTP API endpoint that calls the main function in posts/listSpecified.js
    # - path: url path is /blogPostsForUser/{userId}
    # - method: GET request
    handler: posts/listSpecified.main
    events:
      - http:
          path: blogPostsForUser/{userId}
          method: get
          cors: true    

  updatePost:
    # Defines an HTTP API endpoint that calls the main function in posts/update.js
    # - path: url path is /blogPosts/{id}
    # - method: PUT request
    handler: posts/update.main
    events:
      - http:
          path: blogPosts/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deletePost:
    # Defines an HTTP API endpoint that calls the main function in posts/delete.js
    # - path: url path is /blogPosts/{id}
    # - method: DELETE request
    handler: posts/delete.main
    events:
      - http:
          path: blogPosts/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  # Defines an HTTP API endpoint that calls the main function in comments/create.js
  # - path: url path is /blogPostComments/{id}
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createComment:
    handler: comments/create.main
    events:
      - http:
          path: blogPostComments/{id}
          method: post
          cors: true

  listComments:
    # Defines an HTTP API endpoint that calls the main function in comments/list.js
    # - path: url path is /blogPostComments/{id}
    # - method: GET request
    handler: comments/list.main
    events:
      - http:
          path: blogPostComments/{id}
          method: get
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
