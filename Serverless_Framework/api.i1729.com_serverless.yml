service: cryptocredentials-backend-v1

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
#  - serverless-webpack

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  bundle:
    ignorePackages:
      - electron

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev 
  region: us-east-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    awAccessKey: ${ssm:/awAccessKey~true}
    awwSecretKey: ${ssm:/awwSecretKey~true}
    twitterBearerToken: ${ssm:/twitterBearerToken~true}
    twitterOauthConsumerKey: ${ssm:/twitterOauthConsumerKey~true}
    twitterOauthConsumerSecret: ${ssm:/twitterOauthConsumerSecret~true}
    twitterOauthAccessToken: ${ssm:/twitterOauthAccessToken~true}
    twitterOauthAccessTokenSecret: ${ssm:/twitterOauthAccessTokenSecret~true}
    ethereumRopstenPrivateKey: ${ssm:/ethereumRopstenPrivateKey~true}

functions:
  check1729:
    handler: check1729.main
    events:
      - http:
          path: check1729/{id}
          method: get 
          cors: true
          private: false 
  sign1729:
    handler: sign1729.main
    timeout: 480
    events:
      - http:
          path: sign1729/{id}
          method: get 
          cors: true
          private: false 
  getRssFeed:
    handler: getRss.main
    events:
      - http:
          path: rssfeed
          method: get
          cors: true
          private: false 
  getFeed:
    handler: getFeed.main
    events:
      - http:
          path: feed
          method: get
          cors: true
          private: false 
  getSheets:
    handler: getSheets.main
    events:
      - http:
          path: sheets/{id}
          method: get
          cors: true
          private: false 
  getTwitterUser:
    handler: getTwitterUser.main
    events:
      - http:
          path: user/{id}
          method: get
          cors: true
          private: false 
  oauth:
    handler: oauth.main
    events:
      - http:
          path: oauth 
          method: get
          cors: true
          private: false 
  oauthCallback:
    handler: oauthCallback.main
    events:
      - http:
          path: oauth/callback 
          method: get
          cors: true
          private: false 
  home:
    handler: home.main
    events:
      - http:
          path: home  
          method: get
          cors: true
          private: false 


# Create our resources with seperate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
