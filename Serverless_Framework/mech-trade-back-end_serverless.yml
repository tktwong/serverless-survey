service: mech-trade-back-end

frameworkVersion: ">=1.2.0 <2.0.0"

custom:
  corsOrigin: '*'
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    migration:
      dir: offline/migrations
    seed:
      test:
        sources:
          - table: ${self:provider.environment.DYNAMODB_LISTINGS_TABLE}
            sources: [offline/seed.json]
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-webpack

provider:
  apiGateway:
    binaryMediaTypes:
      - '*/*'
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    COGNITO_USER_POOL:
      Ref: CognitoUserPool
    COGNITO_USER_POOL_CLIENT:
      Ref: CognitoUserPoolClient
    CORS_ORIGIN: ${self:custom.corsOrigin}
    DYNAMODB_LISTINGS_TABLE: ${self:service}-listings-table-${opt:stage, self:provider.stage}
    DYNAMODB_LISTINGS_TABLE_GSI1: ${self:service}-listings-table-gsi1-${opt:stage, self:provider.stage}
    DYNAMODB_LISTINGS_TABLE_GSI2: ${self:service}-listings-table-gsi2-${opt:stage, self:provider.stage}
    # DYNAMODB_USERS_TABLE: ${self:service}-users-table-${opt:stage, self:provider.stage}
    # DYNAMODB_USERS_TYPE_GSI: ${self:service}-users-table-type-gsi-${opt:stage, self:provider.stage}
    ENVIRONMENT: ${opt:stage, self:provider.stage}
    S3_BUCKET: ${self:service}-s3-bucket-${opt:stage, self:provider.stage}
    # WEBSOCKET_API_ENDPOINT: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', '${opt:region, self:provider.region}', '.amazonaws.com/', '${opt:stage, self:provider.stage}/']]
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  stage: dev

package:
  individually: true
  exclude:
    - "node_modules/**"

functions:
  addListingImages:
    description: Adds images to a listing
    name: lambda-${self:service}-addListingImages-${opt:stage, self:provider.stage}
    handler: src/handler.addListingImages
    events:
      - http:
          authorizer: aws_iam
          cors: true
          method: post
          operationId: addListingImages
          path: listing/{id}/images
  createComment:
    description: Creates a new comment
    name: lambda-${self:service}-createComment-${opt:stage, self:provider.stage}
    handler: src/handler.createComment
    events:
      - http:
          authorizer: aws_iam
          cors: true
          method: post
          operationId: createComment
          path: comment
  createListing:
    description: Creates a new listing
    name: lambda-${self:service}-createListing-${opt:stage, self:provider.stage}
    handler: src/handler.createListing
    events:
      - http:
          authorizer: aws_iam
          cors: true
          method: post
          operationId: createListing
          path: listing
  getAllListings:
    description: Get all listings
    name: lambda-${self:service}-getAllListings-${opt:stage, self:provider.stage}
    handler: src/handler.getAllListings
    events:
      - http:
          authorizer: aws_iam
          cors: true
          method: get
          operationId: getAllListings
          path: listings
  getListing:
    description: Get a listing using id
    name: lambda-${self:service}-getListing-${opt:stage, self:provider.stage}
    handler: src/handler.getListing
    events:
      - http:
          authorizer: aws_iam
          cors: true
          method: get
          operationId: getListing
          path: listing/{id}
  createUser:
    description: Creates a new user
    name: lambda-${self:service}-createUser-${opt:stage, self:provider.stage}
    handler: src/handler.createUser
    events:
      - http:
          authorizer: aws_iam
          cors: true
          method: post
          operationId: createUser
          path: user
  # Order and Payment APIs
  captureOrder:
    description: Capture an order
    name: lambda-${self:service}-test-${opt:stage, self:provider.stage}
    handler: src/handler.captureOrder
    events:
      - http:
          authorizer: aws_iam
          cors: true
          method: post
          operationId: captureOrder
          path: order/capture/{id}
  createOrder:
    description: Create an order
    name: lambda-${self:service}-test-${opt:stage, self:provider.stage}
    handler: src/handler.createOrder
    events:
      - http:
          authorizer: aws_iam
          cors: true
          method: post
          operationId: createOrder
          path: order/listing/{id}

resources:
  # Cognito
  - ${file(src/services/cognito.yml)}
  # DynamoDB
  - ${file(src/services/dynamodb.yml)}
  # S3
  - ${file(src/services/s3.yml)}