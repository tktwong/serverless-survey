# NOTE: update this with your service name
service: mobile-serverless-app

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}

iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  PutUsuario:
    handler: handler.PutUsuario
    events:
      - http:
          path: put-usuario
          method: post
          cors: true
          authorizer: aws_iam

  GetUsuario:
    handler: handler.GetUsuario
    events:
      - http:
          path: get-usuario/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  PutEvento:
    handler: handler.PutEvento
    events:
      - http:
          path: put-evento
          method: post
          cors: true
          authorizer: aws_iam

  GetEvento:
    handler: handler.GetEvento
    events:
      - http:
          path: get-evento/{id}/{criador}
          method: get
          cors: true
          authorizer: aws_iam

  ListEventos:
    handler: handler.ListEventos
    events:
      - http:
          path: list-evento/{idCriador}
          method: get
          cors: true
          authorizer: aws_iam
  
  DeleteEvento:
    handler: handler.DeleteEvento
    events:
      - http:
          path: delete-evento/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  PutConvidado:
    handler: handler.PutConvidado
    events:
      - http:
          path: put-convidado
          method: post
          cors: true
          authorizer: aws_iam

  ListConvidados:
    handler: handler.ListConvidados
    events:
      - http:
          path: list-convidados/{id}
          method: get
          cors: true
          authorizer: aws_iam

  PutMeusConvites:
    handler: handler.PutMeusConvites
    events:
      - http:
          path: put-meus-convites
          method: post
          cors: true
          authorizer: aws_iam

  ListMeusConvites:
    handler: handler.ListMeusConvites
    events:
      - http:
          path: list-meus-convites/{id}
          method: get
          cors: true
          authorizer: aws_iam

  RespostaConvite:
    handler: handler.RespostaConvite
    events:
      - http:
          path: resposta-convite
          method: post
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}