# NOTE: update this with your service name
service: crear-activa-backend

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:us-east-1:*:*'
    - Effect: Allow
      Action:
        - cloudformation:DescribeStackResource
      Resource: "*"

functions:
  #posts
  create-post:
    handler: create-post.main
    events:
      - http:
          path: posts
          method: post
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  list-posts:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list-posts.main
    events:
      - http:
          path: posts
          method: get
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  list-post:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: list-post.main
    events:
      - http:
          path: posts/{id}
          method: get
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  update-post:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update-post.main
    events:
      - http:
          path: posts/{id}
          method: put
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  delete-post:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete-post.main
    events:
      - http:
          path: posts/{id}
          method: delete
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  #feeds
  create-feed:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: create-feed.main
    events:
      - http:
          path: feeds
          method: post
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  list-feeds:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list-feeds.main
    events:
      - http:
          path: feeds
          method: get
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  delete-feed:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete-feed.main
    events:
      - http:
          path: feeds/{id}
          method: delete
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
#comments
  create-comment:
    handler: create-comment.main
    events:
      - http:
          path: comments
          method: post
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  list-comments:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list-comments.main
    events:
      - http:
          path: comments
          method: get
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  update-comment:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update-comment.main
    events:
      - http:
          path: comments/{id}
          method: put
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
  delete-comment:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete-comment.main
    events:
      - http:
          path: comments/{id}
          method: delete
          authorizer: aws_iam
          cors: true
          integration: LAMBDA
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
