service: sls-examples

plugins:
  - serverless-express
  - serverless-webpack
  - serverless-plugin-warmup
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline

custom:
  # configure API GW with proxies and base path, plus A/AAAA records with R53
  customDomain:
    domainName: api.leontanner.dev
    stage: ${self:provider.stage}
    basePath: ""
    certificateName: "leontanner.dev"
    createRoute53Record: true
  # add webpack to build pipeline, ahead of zipping contents
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  warmup:
    enabled: false # Kill switch
    events:
      # Run WarmUp every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
      - schedule: 'cron(0/5 8-17 ? * MON-FRI *)'
  # local dynamodb config
  dynamodb:
    start:
      migrate: true
  # local vars
  functionsPath: "src/functions"
  tableNameUsers: "users-table-${self:provider.stage}"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-2
  iamRoleStatements:
    # dynamoDB
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
    # warmup
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: "*"
  environment:
    USERS_TABLE: ${self:custom.tableNameUsers}

# note the mix of path options, for reference only
functions:
  hi:
    handler: ${self:custom.functionsPath}/index.api
    events:
      - http:
          path: /
          method: get
    warmup: false
  bye:
    handler: ${self:custom.functionsPath}/index.api
    events:
      - http: "GET /bye"
  getUser:
    handler: ${self:custom.functionsPath}/index.api
    events:
      - http: "GET /users/{proxy+}"
  createUser:
    handler: ${self:custom.functionsPath}/index.api
    events:
      - http: "POST /users"

resources:
  # CloudFormation structure beneath
  Resources:
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNameUsers}
