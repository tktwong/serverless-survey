# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: satads-auth-service
app: satads-auth-service
org: andersoncontreira

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  region: sa-east-1
  # stage: dev
  environment:
    ROOT_PATH: "/satads/auth"
    AUTH_DYNAMODB_TABLE: "satads-auth-${opt:stage, self:provider.stage}"


  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # table for auth
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.AUTH_DYNAMODB_TABLE}"
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  handler:
    handler: handler.handler

# https://stackoverflow.com/questions/41620437/how-to-continue-deploy-if-dynamodb-table-already-exists
## you can add CloudFormation resource templates here
#resources:
#  Resources:
#    AuthDynamoDbTable:
#      Type: 'AWS::DynamoDB::Table'
#      DeletionPolicy: Retain
#      Properties:
#        AttributeDefinitions:
#          -
#            AttributeName: email
#            AttributeType: S
#        KeySchema:
#          -
#            AttributeName: email
#            KeyType: HASH
#        ProvisionedThroughput:
#          ReadCapacityUnits: 5
#          WriteCapacityUnits: 5
#        TableName: ${self:provider.environment.AUTH_DYNAMODB_TABLE}
