service: tone-analyzer-api-2

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-entries

environment:
  tableName: ${self:custom.tableName}
  stripeSecretKey: ${env:STRIPE_SECRET_KEY}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-2

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:*
    Resource: '*'
  - Effect: Allow
    Action:
    - lambda:InvokeFunction
    Resource: '*'


functions:
  # Defines an HTTP API endpoint that calls the main function in createEntry.js
  # - path: url path is /entries
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createEntry:
    handler: createEntry.main
    events:
      - http:
          path: entries
          method: post
          cors: true
          authorizer: aws_iam

  getEntry:
    # Defines an HTTP API endpoint that calls the main function in getEntry.js
    # - path: url path is /entries/{id}
    # - method: GET request
    handler: getEntry.main
    events:
      - http:
          path: entries/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listEntries:
    # Defines an HTTP API endpoint that calls the main function in listEntries.js
    # - path: url path is /entries
    # - method: GET request
    handler: listEntries.main
    events:
      - http:
          path: entries
          method: get
          cors: true
          authorizer: aws_iam

  updateEntry:
    # Defines an HTTP API endpoint that calls the main function in updateEntry.js
    # - path: url path is /entries/{id}
    # - method: PUT request
    handler: updateEntry.main
    events:
      - http:
          path: entries/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteEntry:
    # Defines an HTTP API endpoint that calls the main function in deleteEntry.js
    # - path: url path is /entries/{id}
    # - method: DELETE request
    handler: deleteEntry.main
    events:
      - http:
          path: entries/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  analyzeEntry:
    # Defines an HTTP API endpoint that calls the main function in analyzeEntry.js
    # - path: url path is /entries/analyzeEntry
    # - method: POST request
    handler: analyzeEntry.main
    events:
      - http:
          path: entries/analyzeEntry
          method: post
          cors: true
          authorizer: aws_iam


# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}






