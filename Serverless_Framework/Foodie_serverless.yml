service:
  name: Foodie

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  models:
    - name: CreateCuisineRequest
      contentType: application/json
      schema: ${file(models/create-cuisine-request.json)}
    - name: CreateRestaurantRequest
      contentType: application/json
      schema: ${file(models/create-restaurant-request.json)}
    - name: CreateReviewRequest
      contentType: application/json
      schema: ${file(models/create-review-request.json)}
    - name: DeleteRestaurantRequest
      contentType: application/json
      schema: ${file(models/delete-restaurant-request.json)}
    - name: GenerateUrlRequest
      contentType: application/json
      schema: ${file(models/generate-url-request.json)}

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true
  
  logs:
    restApi: true

  environment:
    CUISINES_TABLE: Cuisines-${self:provider.stage}
    RESTAURANTS_TABLE: Restaurants-${self:provider.stage}
    REVIEWS_TABLE: Reviews-${self:provider.stage}
    IMAGES_S3_BUCKET: foodie-images-spenu-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET_ID: Auth0Secret-foodie-spenu-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref Auth0Secret
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn
  
  GetCuisines:
    handler: src/lambda/http/getCuisines.handler
    events:
      - http:
          method: get
          path: cuisines
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CUISINES_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'

  GetRestaurants:
    handler: src/lambda/http/getRestaurants.handler
    events:
      - http:
          method: get
          path: cuisines/{cuisineId}/restaurants
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANTS_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'

  GetReviews:
    handler: src/lambda/http/getReviews.handler
    events:
      - http:
          method: get
          path: restaurants/{restaurantId}/reviews
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'

  CreateCuisine:
    handler: src/lambda/http/createCuisine.handler
    events:
      - http:
          method: post
          path: cuisines
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new cuisine
            description: Create a new cuisine
            requestModels:
              'application/json': CreateCuisineRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CUISINES_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'

  CreateRestaurant:
    handler: src/lambda/http/createRestaurant.handler
    events:
      - http:
          method: post
          path: restaurants
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new restaurant
            description: Create a new restaurant
            requestModels:
              'application/json': CreateRestaurantRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANTS_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'

  CreateReview:
    handler: src/lambda/http/createReview.handler
    events:
      - http:
          method: post
          path: reviews
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new review
            description: Create a new review
            requestModels:
              'application/json': CreateReviewRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'

  DeleteRestaurant:
    handler: src/lambda/http/deleteRestaurant.handler
    events:
      - http:
          method: post
          path: restaurants/{restaurantId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Delete a restaurant
            description: Delete a restaurant
            requestModels:
              'application/json': DeleteRestaurantRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RESTAURANTS_TABLE}
      - Effect: Allow
        Action: 
          - dynamodb:Query
          - dynamodb:DeleteItem
          - dynamodb:BatchWriteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
      - Effect: Allow
        Action:
          - s3:DeleteObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: reviews/attachment
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Generate upload url
            description: Generate upload url
            requestModels:
              'application/json': GenerateUrlRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'

  CreateThumbnail:
    handler: src/lambda/s3/createThumbnail.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:*
        Resource:
          - '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
      
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    CuisinesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CUISINES_TABLE}
    
    RestaurantsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: cuisineId
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: cuisineId
            KeyType: HASH
          - AttributeName: restaurantId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RESTAURANTS_TABLE}
    
    ReviewsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S
          - AttributeName: reviewId
            AttributeType: S
        KeySchema:
          - AttributeName: restaurantId
            KeyType: HASH
          - AttributeName: reviewId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.REVIEWS_TABLE}
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt CreateThumbnailLambdaFunction.Arn
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    CreateThumbnailPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref CreateThumbnailLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket


    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'    

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-foodie-spenu-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey
