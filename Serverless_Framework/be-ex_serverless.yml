service: celeb-api-transaction

plugins:
  - serverless-offline-ssm
  - serverless-offline
  - serverless-plugin-warmup
  - serverless-plugin-split-stacks

custom:
  stage: ${opt:stage, 'dev'}
  # klaytn: ${file(../env.yml):${self:custom.stage}.klaytn, file(../env.yml):dev.klaytn}
  layer: 
    stack: ${file(../env.yml):layer.stack}
    name:
      libs: ${file(../env.yml):layer.name.libs}
      nodejs: ${file(../env.yml):layer.name.nodejs}
  lambdaCognitoAuthorizer: 
    userTokenAuthorizerId: !ImportValue ${self:custom.stage}-celeb-User-Token-AuthorizerId
  warmup:
    name: ${self:custom.stage}-celeb-api-transaction-warmer
    events:
      - schedule:
          rate: cron(0/10 * * * ? *)
    payload:
      source: 'transaction-warmer'
  serverless-offline:
    port: ${file(../credentials.yml):port.transaction}
  serverless-offline-ssm: 
    /dev/celebdb/host: ${file(../credentials.yml):ssm-keys.dev.celebdb.host}
    /dev/celebdb/user: ${file(../credentials.yml):ssm-keys.dev.celebdb.user}
    /dev/celebdb/password: ${file(../credentials.yml):ssm-keys.dev.celebdb.password}
    /dev/celebdb/database: ${file(../credentials.yml):ssm-keys.dev.celebdb.database}
    /staging/celebdb/host: ${file(../credentials.yml):ssm-keys.staging.celebdb.host}
    /staging/celebdb/user: ${file(../credentials.yml):ssm-keys.staging.celebdb.user}
    /staging/celebdb/password: ${file(../credentials.yml):ssm-keys.staging.celebdb.password}
    /staging/celebdb/database: ${file(../credentials.yml):ssm-keys.staging.celebdb.database}
  splitStacks:
    perFunction: false
    perType: false
    perGroupFunction: false

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: ap-northeast-2

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-celeb-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-celeb-ApiGatewayRestApiRootResourceId

  # These environment variables are made available to our functions under process.env.
  # environment:
  #   KLAYTN_CELEBPROTOCOL_ADDRESS: ${self:custom.klaytn.celebPlusAddress}
  #   KLAYTN_CELEBTOKEN_ADDRESS: ${self:custom.klaytn.celebTokenAddress}
  #   STAGE: ${self:custom.stage}

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-sync:*
        - cognito-identity:*
      Resource: arn:aws:cognito-identity:*:*:*
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource: arn:aws:cognito-idp:*:*:*
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"

package:
  exclude:
    # - ./node_modules/**
    - README.md
    - yarn.lock
    - package-lock.json

functions:
  - ${file(./resources/function-transaction.yml)}
