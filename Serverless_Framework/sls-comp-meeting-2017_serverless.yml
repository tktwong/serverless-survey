# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: sls-comp-meeting-2017-be

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  profile: sw
  region: eu-west-1

custom:
  myStage: ${opt:stage, self:provider.stage}
  dynamodb:
      start:
        port: 8000
        inMemory: true
        migrate: true
        seed: true
  webpackIncludeModules: true # enable auto-packing of external modules
  externals: [nodeExternals()]
  lambda_messages: ${self:service}-${self:provider.stage}-messages
  lambda_users: ${self:service}-${self:provider.stage}-users
  table_messages: ${self:provider.stage}-messages
  table_users: ${self:provider.stage}-users

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list

functions:
  messages:
    handler: index.messages
    environment:
        Messages_Table: ${self:provider.stage}-messages
    events:
      - http:
          path: messages
          method: POST
          integration: lambda
          cors: true
          request:
            parameters:
              paths:
                id: true
  users:
    handler: index.users
    environment:
        Users_Table: ${self:provider.stage}-users
        Messages_Lambda: ${self:custom.lambda_messages}
        Messages_Lambda_Local: messages
    events:
      - http:
          path: users
          method: POST
          integration: lambda
          cors: true
          request:
            parameters:
              paths:
                id: true
#  messages_reducer:
#      handler: src/messages.reducer
#      environment:
#              IOT_Endpoint: a31ovqfkmg1ev8.iot.eu-west-1.amazonaws.com
#              State_Topic: $aws/things/dev-cadec-messagesX/state
#              Lambdas: "${self:custom.lambda_users}/${self:custom.lambda_messages}"
#      events:
#        - http:
#            path: reducer
#            method: POST
#            integration: lambda
#            cors: true

resources:
  Resources:
    UsersDynamo:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.stage}-users
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MessagesDynamo:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.stage}-messages
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: MessagesDynamo
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Scan
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*
        Roles:
          - Ref: IamRoleLambdaExecution
