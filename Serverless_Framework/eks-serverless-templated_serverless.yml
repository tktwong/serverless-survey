service: aws-eks-spot-serverless-demo

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  region: eu-west-2

functions:
  VideoUploadLambdaFunction:
    handler: upload_video.handler
    events:
      - s3:
          bucket: "${self:service}-${self:provider.stage}-uploads"
          event: s3:ObjectCreated:*

  VideoThumbnailLambdaFunction:
    handler: upload_thumbnail.handler
    events:
      - s3:
          bucket: "${self:service}-${self:provider.stage}-thumbnails"
          event: s3:ObjectCreated:*
resources:
  Resources:
    KubernetesClusterVPC:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: "10.0.0.0/16"
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - 
            Key: Name
            Value: ${self:service}-${self:provider.stage}

    KubernetesClusterSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: KubernetesClusterVPC
        CidrBlock: 10.0.0.0/24
        AvailabilityZone: "eu-west-2a"
        Tags:
          -
            Key: Name
            Value: ${self:service}-${self:provider.stage}

    KubernetesClusterSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: KubernetesClusterVPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: "eu-west-2b"
        Tags:
          -
            Key: Name
            Value: ${self:service}-${self:provider.stage}

    KubernetesClusterInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          -
            Key: Name
            Value: ${self:service}-${self:provider.stage}

    KubernetesClusterInternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        InternetGatewayId:
          Ref: KubernetesClusterInternetGateway
        VpcId:
          Ref: KubernetesClusterVPC

    KubernetesClusterInternetGatewayRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        VpcId:
          Ref: KubernetesClusterVPC
        Tags:
          -
            Key: Name
            Value: ${self:service}-${self:provider.stage}

    KubernetesClusterInternetGatewayToInternetRoute:
      Type: AWS::EC2::Route
      DependsOn: KubernetesClusterInternetGateway
      Properties:
        RouteTableId:
          Ref: KubernetesClusterInternetGatewayRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: KubernetesClusterInternetGateway

    KubernetesClusterSubnetAtoInternetRouteAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId:
          Ref: KubernetesClusterInternetGatewayRouteTable
        SubnetId:
          Ref: KubernetesClusterSubnetA

    KubernetesClusterSubnetBtoInternetRouteAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId:
          Ref: KubernetesClusterInternetGatewayRouteTable
        SubnetId:
          Ref: KubernetesClusterSubnetB
    
    EksKubernetesServiceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: EksKubernetesServiceRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - eks.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
          - 'arn:aws:iam::aws:policy/AmazonEKSServicePolicy'

    KubernetesClusterMasterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow EKS Cluster communication with worker nodes
        VpcId:
          Ref: KubernetesClusterVPC
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: 0
            ToPort: 0
            CidrIp: 0.0.0.0/0
        Tags:
          -
            Key: Name
            Value: ${self:service}-${self:provider.stage}

    KubernetesClusterMasterFromWorkstationSecurityGroupRule:
      Type: AWS::EC2::SecurityGroupIngress
      Properties: 
        CidrIp: 86.8.110.145/32
        Description: Allow workstation to communicate with the EKS cluster API Server
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
        GroupId:
          Ref: KubernetesClusterMasterSecurityGroup  

    KubernetesCluster:
      Type: "AWS::EKS::Cluster"
      Properties:
        Name: ${self:service}-${self:provider.stage}
        ResourcesVpcConfig:
          SecurityGroupIds:
            - Ref: KubernetesClusterMasterSecurityGroup
          SubnetIds:
            - Ref: KubernetesClusterSubnetA
            - Ref: KubernetesClusterSubnetB
        RoleArn:
          Fn::GetAtt: [ EksKubernetesServiceRole, Arn ]

# bellow this line we add the spot instances which will be unwound later for fargate

    NodeInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action: sts:AssumeRole
        Path: "/"
        Policies:
          - 
            PolicyName: node
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:Describe*
                    - ecr:GetAuthorizationToken
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - ecr:GetRepositoryPolicy
                    - ecr:DescribeRepositories
                    - ecr:ListImages
                    - ecr:BatchGetImage
                  Resource: "*"
          - 
            PolicyName: cni
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - 
                  Effect: Allow
                  Action:
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DescribeInstances
                    - ec2:CreateNetworkInterface
                    - ec2:AttachNetworkInterface
                    - ec2:DeleteNetworkInterface
                    - ec2:DetachNetworkInterface
                    - ec2:ModifyNetworkInterfaceAttribute
                    - ec2:AssignPrivateIpAddresses
                    - tag:TagResources
                  Resource: "*"
          - 
            PolicyName: eks
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - 
                  Effect: Allow
                  Action:
                    - eks:DescribeCluster
                  Resource: "*"
          - 
            PolicyName: s3-management
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - 
                  Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:DeleteObject
                  Resource:
                    - Fn::GetAtt: [ S3BucketAwseksspotserverlessdemodevuploads, Arn ]
                    - Fn::Join:
                        - "/"
                        -
                          - Fn::GetAtt: [ S3BucketAwseksspotserverlessdemodevuploads, Arn ]
                          - "*"
                - 
                  Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:DeleteObject
                  Resource:
                    - Fn::GetAtt: [ S3BucketAwseksspotserverlessdemodevthumbnails, Arn ]
                    - Fn::Join:
                        - "/"
                        -
                          - Fn::GetAtt: [ S3BucketAwseksspotserverlessdemodevthumbnails, Arn ]
                          - "*"
                - 
                  Effect: Allow
                  Action:
                    - s3:HeadBucket
                  Resource: '*'
          - 
            PolicyName: ClusterAutoscaler
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Action:
                    - ec2:DescribeRegions
                    - ec2:DescribeInstances
                  Resource: "*"
                -
                  Effect: Allow
                  Action:
                    - ecr:GetAuthorizationToken
                    - ecr:BatchCheckLayerAvailability
                    - ecr:GetDownloadUrlForLayer
                    - ecr:GetRepositoryPolicy
                    - ecr:DescribeRepositories
                    - ecr:ListImages
                    - ecr:BatchGetImage
                  Resource: "*"
                -
                  Effect: Allow
                  Action:
                    - autoscaling:DescribeAutoScalingGroups
                    - autoscaling:DescribeAutoScalingInstances
                    - autoscaling:DescribeLaunchConfigurations
                    - autoscaling:SetDesiredCapacity
                    - autoscaling:DescribeTags
                    - autoscaling:TerminateInstanceInAutoScalingGroup
                  Resource: "*"

    NodeInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
          - Ref: NodeInstanceRole

    NodeSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for all nodes in the EKS cluster
        VpcId:
          Ref: KubernetesClusterVPC
        Tags:
          -
            Key: Name
            Value: ${self:service}-${self:provider.stage}

    NodeSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow node to communicate with each other
        GroupId:
          Ref: NodeSecurityGroup
        SourceSecurityGroupId:
          Ref: NodeSecurityGroup
        IpProtocol: '-1'
        FromPort: 0
        ToPort: 65535

    NodeSecurityGroupFromWorkstationIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow workstation to connect to EC2 nodes (for debugging)
        GroupId:
          Ref: NodeSecurityGroup
        IpProtocol: 'tcp'
        FromPort: 22
        ToPort: 22
        CidrIp: 86.8.110.145/32

    NodeSecurityGroupFromControlPlaneIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
        GroupId:
          Ref: NodeSecurityGroup
        SourceSecurityGroupId:
          Ref: KubernetesClusterMasterSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535

    KubernetesClusterMasterSecurityGroupIngressFromNodes:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow pods to communicate with the cluster API Server
        GroupId:
          Ref: KubernetesClusterMasterSecurityGroup
        SourceSecurityGroupId:
          Ref: NodeSecurityGroup
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
    
    SpotNodeLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        AssociatePublicIpAddress: true
        # https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
        ImageId: ami-0a2f2347f9d9afafa
        InstanceType: m3.medium
        IamInstanceProfile:
          Ref: NodeInstanceProfile
        KeyName: 'eks-spot-key'
        # Maximum Spot instance price (not launch if more)
        SpotPrice: 1
        SecurityGroups:
          - Ref: NodeSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Join:
              - ""
              -
                - "#!/bin/bash -xe\n"
                - "CA_CERTIFICATE_DIRECTORY=/etc/kubernetes/pki"
                - "\n"
                - "CA_CERTIFICATE_FILE_PATH=$CA_CERTIFICATE_DIRECTORY/ca.crt"
                - "\n"
                - "MODEL_DIRECTORY_PATH=~/.aws/eks"
                - "\n"
                - "MODEL_FILE_PATH=$MODEL_DIRECTORY_PATH/eks-2017-11-01.normal.json"
                - "\n"
                - "mkdir -p $CA_CERTIFICATE_DIRECTORY"
                - "\n"
                - "mkdir -p $MODEL_DIRECTORY_PATH"
                - "\n"
                - Fn::Join:
                  - ""
                  -
                    - "aws eks describe-cluster --region=$self:provider.region --name="
                    - Ref: KubernetesCluster
                    - " --query 'cluster.certificateAuthorityData: certificateAuthority.data, endpoint: endpoint' > /tmp/describe_cluster_result.json"
                - "\n"
                - "cat /tmp/describe_cluster_result.json | grep certificateAuthorityData | awk 'print $2' | sed 's/[,\"]//g' | base64 -d >  $CA_CERTIFICATE_FILE_PATH"
                - "\n"
                - "MASTER_ENDPOINT=$(cat /tmp/describe_cluster_result.json | grep endpoint | awk 'print $2' | sed 's/[,\"]//g')"
                - "\n"
                - "INTERNAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)"
                - "\n"
                - "sed -i s,MASTER_ENDPOINT,$MASTER_ENDPOINT,g /var/lib/kubelet/kubeconfig"
                - "\n"
                - Fn::Join:
                  - ""
                  -
                    - "sed -i s,CLUSTER_NAME,"
                    - Ref: KubernetesCluster
                    - ",g /var/lib/kubelet/kubeconfig"
                - "\n"
                - "sed -i s,REGION,$AWS::Region,g /etc/systemd/system/kubelet.service"
                - "\n"
                - "sed -i s,MAX_PODS,'12 --node-labels lifecycle=Ec2Spot',g /etc/systemd/system/kubelet.service"
                - "\n"
                - "sed -i s,INTERNAL_IP,$INTERNAL_IP,g /etc/systemd/system/kubelet.service"
                - "\n"
                - "DNS_CLUSTER_IP=10.100.0.10"
                - "\n"
                - "if [[ $INTERNAL_IP == 10.* ]] ; then DNS_CLUSTER_IP=172.20.0.10; fi"
                - "\n"
                - "sed -i s,DNS_CLUSTER_IP,$DNS_CLUSTER_IP,g  /etc/systemd/system/kubelet.service"
                - "\n"
                - "sed -i s,CERTIFICATE_AUTHORITY_FILE,$CA_CERTIFICATE_FILE_PATH,g /var/lib/kubelet/kubeconfig"
                - "\n"
                - "sed -i s,CLIENT_CA_FILE,$CA_CERTIFICATE_FILE_PATH,g  /etc/systemd/system/kubelet.service"
                - "\n"
                - "systemctl daemon-reload"
                - "\n"
                - "systemctl restart kubelet"
                - "\n"
                - "/opt/aws/bin/cfn-signal -e $? "
                - "         --stack $self:service-$self:provider.region "
                - "         --resource NodeGroup "
                - "         --region $self:provider.region"
    
    SpotNodeGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        DesiredCapacity: 1
        LaunchConfigurationName:
          Ref: SpotNodeLaunchConfig
        # To allow rolling updates
        MinSize: 0
        MaxSize: 2
        VPCZoneIdentifier:
          - Ref: KubernetesClusterSubnetA
          - Ref: KubernetesClusterSubnetB
        Tags:
          -
            Key: Name
            Value: $self:service-$self:provider.stage
            PropagateAtLaunch: true
          - Key:
              Fn::Join:
                - "/"
                -
                  - "kubernetes.io"
                  - "cluster"
                  - "$self:service-$self:provider.stage"
            Value: 'owned'
            PropagateAtLaunch: 'true'
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstancesInService: 0
          MaxBatchSize: 1

  Outputs:
    KubernetesClusterName:
      Description: "EKS Cluster Name"
      Value:
        Ref: KubernetesCluster
    KubernetesClusterEndpoint:
      Description: "EKS Cluster Endpoint"
      Value:
        Fn::GetAtt: [ KubernetesCluster, Endpoint ]
    KubernetesClusterCertificateAuthorityData:
      Description: "EKS Cluster Certificate Authority Data"
      Value:
        Fn::GetAtt: [ KubernetesCluster, CertificateAuthorityData ]
    KubernetesClusterNodesRoleArn:
      Description: "EKS Cluster Nodes Role Arn"
      Value:
        Fn::GetAtt: [ NodeInstanceRole, Arn ]


