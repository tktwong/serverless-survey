service:
  name: feywild-days-jtg72006
frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-offline
  - serverless-dynamodb-local
provider:
  apiGateway:
    shouldStartNameWithService: true

  tracing:
    lambda: true
    apiGateway: true
    
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region,'us-west-2'}

  environment:
    EXAMPLE_VARIABLE: sans-server-todo-jtg72006-${self:provider.stage}
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    PHOTO_BUCKET: sans-server-feywild-${self:provider.stage}
    BUCKET_EXPIRATION: 600
    HARPTOS_TABLE: HarptosDB-${self:provider.stage}
    FEYWILD_TABLE: FeywildDB-${self:provider.stage}
    HARPTOS_INDEX: HarptosIndex
    FEYWILD_INDEX: FeywildIndex

  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: "8000"
      inMemory: true
      migrate: true
  serverless-offline:
    httpPort: 3000
  documentation:
    api:
      info:
        version: v0.1.0
        title: JTG Harptos
        description: Serverless Database for Harptos.

functions:

  Auth:
    handler: src/01Lambda/auth/auth0Authorizer.handler

  OnlineCheck:
    handler: src/01Lambda/onlineCheck.handler
    events:
      - http:
          method: get
          cors: true
          path: test
  # Harptos CRUD
  CreateHarptos:
    handler: src/01Lambda/httpHarptos/createHarptos.handler
    events:
      - http:
          method: post
          cors: true
          path: harptos/
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validation/harptos/createHarptos.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HARPTOS_TABLE}'
  RetrieveHarptos:
    handler: src/01Lambda/httpHarptos/retrieveHarptos.handler
    events:
      - http:
          method: get
          cors: true
          path: harptos/{harptosID}
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HARPTOS_TABLE}'
  UpdateHarptos:
    handler: src/01Lambda/httpHarptos/updateHarptos.handler
    events:
      - http:
          method: patch
          cors: true
          path: harptos/{harptosID}
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validation/harptos/updateHarptos.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HARPTOS_TABLE}'
  DeleteHarptos:
    handler: src/01Lambda/httpHarptos/deleteHarptos.handler
    events:
      - http:
          method: delete
          cors: true
          path: harptos/{harptosID}
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.HARPTOS_TABLE}' 

  # Feywild CRUD
  CreateFeywild:
    handler: src/01Lambda/httpFeywild/createFeywild.handler
    events:
      - http:
          method: post
          cors: true
          path: feywild
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validation/fey/createFey.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEYWILD_TABLE}'
  RetrieveFeywild:
    handler: src/01Lambda/httpFeywild/getFeywild.handler
    events:
      - http:
          method: get
          cors: true
          path: feywild/{feywildID}
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEYWILD_TABLE}'
  RetrieveAllFeywilds:
    handler: src/01Lambda/httpFeywild/getAllFeywilds.handler
    events:
      - http:
          method: get
          cors: true
          path: feywild
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEYWILD_TABLE}/index/${self:provider.environment.FEYWILD_INDEX}'
  UpdateFeywild:
    handler: src/01Lambda/httpFeywild/updateFeywild.handler
    events:
      - http:
          method: patch
          cors: true
          path: feywild/{feywildID}
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validation/fey/updateFey.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEYWILD_TABLE}'
  DeleteFeywild:
    handler: src/01Lambda/httpFeywild/deleteFeywild.handler
    events:
      - http:
          method: delete
          cors: true
          path: feywild/{feywildID}
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEYWILD_TABLE}'
  GetUploadURL:
    handler: src/01Lambda/httpS3/getUploadURL.handler
    events:
      - http:
          method: post
          cors: true
          path: feywild/images/{feywildID}
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/validation/fey/imageFey.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: 'arn:aws:s3:::${self:provider.environment.PHOTO_BUCKET}/*'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FEYWILD_TABLE}'

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    FeyImages:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.PHOTO_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: Photobucket-Policy-1
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*'
              Action: 
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.PHOTO_BUCKET}/*'
        Bucket: !Ref FeyImages
    # Harptos Database
    HaprtosTable:
      Type: AWS::DynamoDB::Table
      Properties:
          AttributeDefinitions:
            - AttributeName: harptosID
              AttributeType: S
            - AttributeName: userID
              AttributeType: S
          KeySchema:
            - AttributeName: harptosID
              KeyType: HASH
            - AttributeName: userID
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:provider.environment.HARPTOS_TABLE}
  
    # Feywild Database
    FeywildTable:
      Type: AWS::DynamoDB::Table
      Properties:
          AttributeDefinitions:
            - AttributeName: feywildID
              AttributeType: S
            - AttributeName: userID
              AttributeType: S
          KeySchema:
            - AttributeName: feywildID
              KeyType: HASH
            - AttributeName: userID
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:provider.environment.FEYWILD_TABLE}
          GlobalSecondaryIndexes:
            - IndexName: ${self:provider.environment.FEYWILD_INDEX}
              KeySchema:
                - AttributeName: userID
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
    