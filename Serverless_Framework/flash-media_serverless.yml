
service: flash-media

frameworkVersion: "=1.44.1"

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, env:stage, 'dev'}
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource:
        - arn:aws:s3:::growme-flash-${self:provider.stage}-media/*
  environment:
    stage: ${self:provider.stage}

functions:
  resize:
    handler: resizeHandler.resize
    events:
      - s3: UserImages

resources:
  Resources:

    S3BucketUserImages:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: growme-flash-${self:provider.stage}-media
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
                - GET
              AllowedOrigins: ${file(./serverless.${self:provider.stage}.yml):cors.allowedOrigins}
              MaxAge: 3000

    ManagedPolicyS3BucketAccess:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: S3 bucket upload access
        ManagedPolicyName: growme-flash-media-${self:provider.stage}-s3-access
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource:
                - !Join
                  - ''
                  - - !GetAtt S3BucketUserImages.Arn
                    - '/${'
                    - 'cognito-identity.amazonaws.com:sub}/*'
        Roles:
          - growme_auth_${self:provider.stage}_identity_pool_auth_role

    ResizeLambdaPermissionUserImagesS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt ResizeLambdaFunction.Arn
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: 863138142000
        SourceArn: arn:aws:s3:::growme-flash-${self:provider.stage}-media
