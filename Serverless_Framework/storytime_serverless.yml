# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.4.0 <2.0.0"

service: stories-v1

provider:
  name: aws
  runtime: nodejs4.3

# you can overwrite defaults here
  stage: dev
  region: us-west-2
  memorySize: 128

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"

#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  status:
    handler: handler.getStatus
    description: Evokes a cheerful greeting
    events:
      - http:
          path: status
          method: get
          cors: true
  getStories:
    handler: handler.getSummaries
    description: Returns list of story summaries
    events:
      - http:
          path: stories
          method: get
          cors: true
  createStory:
    handler: handler.createStory
    description: Creates a new story with a unique key
    events:
      - http:
          path: stories
          method: post
          cors: true
  getStory:
    handler: handler.getStory
    description: Returns story summary given a key
    events:
      - http:
          path: stories/{storyId}
          method: get
          cors: true
  updateStory:
    handler: handler.updateStory
    description: Modifies an existing story
    events:
      - http:
          path: stories/{storyId}
          method: put
          cors: true
  getChapters:
    handler: handler.getChapters
    description: Returns chapters of the given story
    events:
      - http:
          path: stories/{storyId}/chapters
          method: get
          cors: true
  createChapter:
    handler: handler.createChapter
    description: Creates a new story with a unique key
    events:
      - http:
          path: stories/{storyId}/chapters
          method: post
          cors: true
  getChapter:
    handler: handler.getChapter
    description: Returns given chapter of given story key
    events:
      - http:
          path: stories/{storyId}/chapters/{chapterId}
          method: get
          cors: true
  updateChapter:
    handler: handler.updateChapter
    description: Modifies an existing chapter
    events:
      - http:
          path: stories/{storyId}/chapters/{chapterId}
          method: put
          cors: true
  # updateSignPost:
  #   handler: handler.updateChapterSignPost
  #   description: Replaces the next options for given chapter
  #   events:
  #     - http:
  #         path: stories/{storyId}/chapter/{chapterId}
  #         method: put
  #         cors: true

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    storiesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stories_v1
        AttributeDefinitions:
          - AttributeName: storyId
            AttributeType: S
        KeySchema:
          - AttributeName: storyId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    chaptersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: chapters_v1
        AttributeDefinitions:
          - AttributeName: storyId
            AttributeType: S
          - AttributeName: chapterId
            AttributeType: S
        KeySchema:
          - AttributeName: storyId
            KeyType: HASH
          - AttributeName: chapterId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
