---
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: week3
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
    name: aws
    runtime: python3.7
    stage: dev
    region: ap-south-1
    timeout: 60
    apiGateway:
        binaryMediaTypes:
            - '*/*'
            - multipart/form-data
    iamRoleStatements:
        - Effect: Allow
          Action:
              - s3:getObject
          Resource: arn:aws:s3:::eva4-p2/*

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

custom:
    pythonRequirements:
        dockerizePip: true
        zip: true
        slim: true
        strip: false
        noDeploy:
            - docUtils
            - jmespath
            - pip
            - python-dateutil
            - setuptools
            - six
            - tensorboard
        useStaticCache: true
        useDownloadCache: true
        cacheLocation: ./cache
# you can add packaging information here
package:
    individually: false
    exclude:
        - package.json
        - package-lock.json
        - node_modules/**
        - cache/**
        - test/**
        - __pycache__/**
        - .pytest_cache/**
        - test/**
        - .venv/**
        - .vscode/**
        - .serverless/**
        - .gitignore
        - .editorconfig
        - .DS_Store
        - Readme.md


functions:
    hello:
        handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
        events:
            - http:
                  path: week1-dev-hello
                  method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
    face_swap:
        handler: handler.face_swap
        memorySize: 3008
        timeout: 60
        events:
            - http:
                  path: face_swap
                  method: post
                  cors: true
    face_mask:
        handler: handler.face_mask
        memorySize: 3008
        timeout: 60
        events:
            - http:
                  path: face_mask
                  method: post
                  cors: true
    face_align:
        handler: handler.face_align
        memorySize: 3008
        timeout: 60
        events:
            - http:
                  path: face_align
                  method: post
                  cors: true
plugins:
    - serverless-python-requirements
    - serverless-sam
    - serverless-offline
