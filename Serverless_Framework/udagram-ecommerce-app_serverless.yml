service:
  name: udagram-ecommerce-app-backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  topicName: ecommerceTopic-${self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    JWTS_URL: https://dev-ckdxh0zt.us.auth0.com/.well-known/jwks.json
    SIGNED_URL_EXPIRATION: 600
    BRANDS_TABLE: Brands-${self:provider.stage}
    BRAND_ADMINS_TABLE: Brand-Admins-${self:provider.stage}
    ITEMS_TABLE: Items-${self:provider.stage}
    ITEM_IMAGES_TABLE: ItemImages-${self:provider.stage}
    ADMINS_TABLE: Admins-${self:provider.stage}
    MEMBERS_TABLE: Members-${self:provider.stage}
    INVOICES_TABLE: Invoices-${self:provider.stage}
    OAUTH_TABLE: Oauth-${self:provider.stage}
    ADMIN_ID_INDEX: adminIdIndex
    ITEM_ID_INDEX: itemIdIndex
    MEMBER_ID_INDEX: memberIdIndex
    BRAND_ID_INDEX: brandIdIndex
    BRAND_ID_SORTED_INDEX: brandIdSortedIndex
    BRAND_ADMIN_JWTSUB_INDEX: brandAdminJWTSubIndex
    BRAND_ADMIN_BRAND_ID_INDEX: brandAdminBrandIdIndex
    BRAND_ADMIN_ADMIN_ID_INDEX: brandAdminAdminIdIndex
    OAUTH_ID_INDEX: oauthIdIndex
    INVOICE_ID_INDEX: IndexIdIndex
    INVOICE_STAGE_INDEX: InvoiceStageIndex
    INVOICE_ID_SORTED_INDEX: IndexIdSortedIndex
    MEMBER_ID_SORTED_INDEX: memberIdSortedIndex
    IMAGES_S3_BUCKET: serverless-udagram-ecommerce-images-andrcha3-${self:provider.stage}
    THUMBNAILS_S3_BUCKET: serverless-udagram-ecommerce-thumbnail-andrcha3-${self:provider.stage}

    
functions:
  hello:
    handler: handler.hello
    events:
      - http:
          method: get
          path: hello

  getDecode:
    handler: src/lambda/http/auth/getDecode.handler
    events:
      - http:
          method: get
          path: decode
          cors: true

  postAdmin:
    handler: src/lambda/http/admin/postAdmin.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADMINS_TABLE} 
    events:
      - http:
          method: post
          path: admin
          cors: true

  getAdmin:
    handler: src/lambda/http/admin/getAdmin.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADMINS_TABLE} 
    events:
      - http:
          method: get
          path: admin
          cors: true

  postBrand:
    handler: src/lambda/http/brand/postBrand.handler 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADMINS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRANDS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRAND_ADMINS_TABLE} 
    events:
      - http:
          method: post
          path: brand
          cors: true

  patchBrand:
    handler: src/lambda/http/brand/patchBrand.handler 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADMINS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRANDS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRAND_ADMINS_TABLE} 
    events:
      - http:
          method: patch
          path: brand
          cors: true

  getBrand:
    handler: src/lambda/http/brand/getBrand.handler 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRANDS_TABLE} 
    events:
      - http:
          method: get
          path: brand/{brandId}
          cors: true

  getAllBrands:
    handler: src/lambda/http/brand/getAllBrands.handler 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRANDS_TABLE} 
    events:
      - http:
          method: get
          path: allBrands
          cors: true

  getBrandsPrByBrID:
    handler: src/lambda/http/brandAdmin/getBrandAdminByBrandId.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRAND_ADMINS_TABLE} 
    events:
      - http:
          method: get
          path: brandAdminPair/brandId/{brandId}
          cors: true

  getMyBrands:
    handler: src/lambda/http/brand/getBrandsByAdmin.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRAND_ADMINS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRANDS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADMINS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRAND_ADMINS_TABLE}/index/${self:provider.environment.BRAND_ADMIN_ADMIN_ID_INDEX}
    events:
      - http:
          method: get
          path: myBrands
          cors: true

  getAllBrAdItems:
    handler: src/lambda/http/item/getItemsByBrandAdmin.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADMINS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}/index/${self:provider.environment.BRAND_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRAND_ADMINS_TABLE}/index/${self:provider.environment.BRAND_ADMIN_ADMIN_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_IMAGES_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRANDS_TABLE} 
    events:
      - http:
          method: get
          path: items/jwtSub
          cors: true

  postItem:
    handler: src/lambda/http/item/postItem.handler 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_IMAGES_TABLE} 
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: item
          cors: true

  getItemDetail:
    handler: src/lambda/http/item/getItem.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRANDS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_IMAGES_TABLE}/index/${self:provider.environment.ITEM_ID_INDEX}
    events:
      - http:
          method: get
          path: item/{itemId}
          cors: true

  patchItemDetail:
    handler: src/lambda/http/item/patchItem.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BRANDS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE} 
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_IMAGES_TABLE}/index/${self:provider.environment.ITEM_ID_INDEX}
    events:
      - http:
          method: patch
          path: item/{itemId}
          cors: true

  getImageDocs:
    handler: src/lambda/http/itemImage/getImageDocs.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_IMAGES_TABLE}/index/${self:provider.environment.ITEM_ID_INDEX} 
    events:
      - http:
          method: get
          path: itemImages/{itemId}
          cors: true

  postImage:
    handler: src/lambda/http/itemImage/postImage.handler 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_IMAGES_TABLE} 
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: itemImage
          cors: true

  deleteImage:
    handler: src/lambda/http/itemImage/deleteImage.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_IMAGES_TABLE} 
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*
    events:
      - http:
          method: delete
          path: itemImage/{imageId}
          cors: true

  ResizeImage:
    handler: src/lambda/sns/resizeImage.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}

resources:
  Resources:
    BrandsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BRANDS_TABLE}
        AttributeDefinitions:
          - AttributeName: brandId
            AttributeType: S
        KeySchema:
          - AttributeName: brandId
            KeyType: HASH

    AdminsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ADMINS_TABLE}
        AttributeDefinitions:
          - AttributeName: adminId
            AttributeType: S
          - AttributeName: jwtSub
            AttributeType: S
        KeySchema:
          - AttributeName: jwtSub
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ADMIN_ID_INDEX}
            KeySchema:
              - AttributeName: adminId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    BrandAdminsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BRAND_ADMINS_TABLE}
        AttributeDefinitions:
          - AttributeName: adminId
            AttributeType: S
          - AttributeName: brandId
            AttributeType: S
          - AttributeName: pairId
            AttributeType: S
        KeySchema:
          - AttributeName: pairId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BRAND_ADMIN_BRAND_ID_INDEX}
            KeySchema:
              - AttributeName: brandId
                KeyType: HASH
              - AttributeName: adminId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.BRAND_ADMIN_ADMIN_ID_INDEX}
            KeySchema:
              - AttributeName: adminId
                KeyType: HASH
              - AttributeName: brandId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
              
    MembersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.MEMBERS_TABLE}
        AttributeDefinitions:
          - AttributeName: memberId
            AttributeType: S
          - AttributeName: oauthId
            AttributeType: S
        KeySchema:
          - AttributeName: memberId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.OAUTH_ID_INDEX}
            KeySchema:
              - AttributeName: oauthId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ItemImagesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ITEM_IMAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
        KeySchema:
          - AttributeName: imageId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ITEM_ID_INDEX}
            KeySchema:
              - AttributeName: itemId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    ItemsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ITEMS_TABLE}
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: brandId
            AttributeType: S
          - AttributeName: latestUpdateDatetime
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.BRAND_ID_INDEX}
            KeySchema:
              - AttributeName: brandId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.BRAND_ID_SORTED_INDEX}
            KeySchema:
              - AttributeName: brandId
                KeyType: HASH
              - AttributeName: latestUpdateDatetime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    InvoicesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.INVOICES_TABLE}
        AttributeDefinitions:
          - AttributeName: invoiceId
            AttributeType: S
          - AttributeName: memberId
            AttributeType: S
          - AttributeName: invoiceStage
            AttributeType: S
          - AttributeName: latestAddedDatetime
            AttributeType: S
        KeySchema:
          - AttributeName: invoiceId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INVOICE_STAGE_INDEX}
            KeySchema:
              - AttributeName: memberId
                KeyType: HASH
              - AttributeName: invoiceStage
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.INVOICE_ID_SORTED_INDEX}
            KeySchema:
              - AttributeName: invoiceId
                KeyType: HASH
              - AttributeName: latestAddedDatetime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.MEMBER_ID_INDEX}
            KeySchema:
              - AttributeName: memberId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.MEMBER_ID_SORTED_INDEX}
            KeySchema:
              - AttributeName: memberId
                KeyType: HASH
              - AttributeName: latestAddedDatetime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    EcommerceImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.topicName}

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - !Ref EcommerceImagesTopic
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref EcommerceImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}

    ImagesBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref EcommerceImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ImageBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          #Id: MyPolicy
          Id: MyImageBucketPolicy
          Version: "2012-10-17"
          Statement:
            #- Sid: PublicReadForGetBucketObjects
            - Sid: PublicReadForGetImageBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket

    ThumbnailBucketBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          #Id: MyPolicy
          Id: MyThumbnailPolicy
          Version: "2012-10-17"
          Statement:
            #- Sid: PublicReadForGetBucketObjects
            - Sid: PublicReadForGetThumbnailBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*'
        Bucket: !Ref ThumbnailsBucket