# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-chat-app

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  messagesTable: messages-table-${self:provider.stage}
  roomsTable: rooms-table-${self:provider.stage}
  usersTable: users-table-${self:provider.stage}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  environment:
    MESSAGES_TABLE: ${self:custom.messagesTable}
    ROOMS_TABLE: ${self:custom.roomsTable}
    USERS_TABLE: ${self:custom.usersTable}
    AWS_DEPLOY_REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ChatMessagesDynamoDBTable", "Arn" ] }
        - { "Fn::Join": [ "/", [ 
           { "Fn::GetAtt": ["ChatMessagesDynamoDBTable", "Arn" ] }, "index", "roomIndex" 
          ]]}
        - { "Fn::Join": [ "/", [
            { "Fn::GetAtt": ["ChatMessagesDynamoDBTable", "Arn" ] }, "index", "userIndex" 
          ]]}

        - { "Fn::GetAtt": ["ChatRoomsDynamoDBTable", "Arn" ] }
        - { "Fn::Join": [ "/", [ 
           { "Fn::GetAtt": ["ChatRoomsDynamoDBTable", "Arn" ] }, "index", "roomIndex" 
          ]]}

        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::Join": [ "/", [ 
           { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }, "index", "userNameIndex" 
          ]]}

functions:
  # Messages
  createChatMessage:
    handler: messages.createChatMessage
    events:
      - http: 
          method: POST
          path: /messages
          private: false
  getMessage:
    handler: messages.getMessage 
    events:
      - http:
          method: GET
          path: /messages
          private: false
  getRoomMessages:
    handler: messages.getRoomMessages
    events:
      - http:
          method: GET
          path: /messages/room/{roomId}
          private: false
  getUserMessages:
    handler: messages.getUserMessages
    events:
      - http:
          method: GET
          path: /messages/user/{userId}
          private: false

  # Rooms
  createChatRoom:
    handler: rooms.createChatRoom
    events:
      - http:
          method: POST
          path: /rooms
          private: false
  getChatRooms:
    handler: rooms.getChatRooms
    events:
      - http:
          method: GET
          path: /rooms
          private: false
          cors:
            origins:
                - '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
            allowCredentials: false  

resources:
  Resources:

    # Messages
    ChatMessagesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties: # Describes the table. DynamoDB not required to declare columns.
        AttributeDefinitions: # [] of Attributes that describe key schema for table|indexes.
          - AttributeName: messageId # Name for attribute
            AttributeType: S # Datatype of attribute (S = string, N = number, B = binary)
          - AttributeName: roomId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema: # Specifies attributes that make up the primary key for table|index
          - AttributeName: messageId # This key attribute needs to be declared in AttributeDefinitions too.
            KeyType: HASH # Alternative is RANGE - stores items with the same partition key physically close together, in sorted order by the sort key value. 
        GlobalSecondaryIndexes: # Maximum 5 GSI's
          - IndexName: roomIndex # Name of index - must be unique
            KeySchema: # Defines which AttributeDefinition we're using here
              - AttributeName: roomId
                KeyType: HASH
            Projection: # Specifies attributes that are copied (projected) from the table into the index
              ProjectionType: ALL
            ProvisionedThroughput: # Settings for the global secondary index, consisting of read and write capacity units
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: userIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.messagesTable}

    # Rooms 
    ChatRoomsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
          AttributeDefinitions:
            - AttributeName: roomId
              AttributeType: S
            - AttributeName: room
              AttributeType: S
          KeySchema:
            - AttributeName: roomId
              KeyType: HASH
          GlobalSecondaryIndexes:
            - IndexName: roomIndex
              KeySchema:
                - AttributeName: room
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
              ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          TableName: ${self:custom.roomsTable}

    # Users 
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
          AttributeDefinitions:
            - AttributeName: userId
              AttributeType: S
            - AttributeName: userName
              AttributeType: S
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          GlobalSecondaryIndexes:
            - IndexName: userNameIndex
              KeySchema:
                - AttributeName: userName
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
              ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          TableName: ${self:custom.usersTable}