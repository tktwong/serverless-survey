service: redshift
plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function

provider:
  name: aws
  stage: dev
  region: eu-west-2

package:
  individually: true

functions:
  redshift-lambda:
    runtime: python3.8
    handler: handler.start
    module: redshift_lambda
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - redshift:GetClusterCredentials   
        Resource:
          - "arn:aws:redshift:${self:provider.region}:*:dbuser:*/*"
          - "arn:aws:redshift:${self:provider.region}:*:dbname:*/*"
      - Effect: "Allow"        
        Action:
          - redshift:DescribeClusters   
          - redshift-data:ExecuteStatement   
        Resource: "*"
    vpc:
      securityGroupIds:
        - !Ref SecurityGroup
      subnetIds:
        - !Ref PrivateSubnetA
    environment:
      DB_HOST: !GetAtt RedshiftCluster.Endpoint.Address
      DB_USER: testuser
      DB_PORT: !GetAtt RedshiftCluster.Endpoint.Port
      DB_NAME: dev
      DB_CLUSTER: !Ref RedshiftCluster

resources:
  Resources:
    # VPC:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.1.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true

    # IGW for internet access:      
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      DependsOn: 
        - VPC
    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    # Public and private subnet:
    PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.1.10.0/24
        AvailabilityZone: !Select [ 0, !GetAZs "${opt:region, self:provider.region}" ]
        # Get the first AZ in the list   
       
    PrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.1.50.0/24
        AvailabilityZone: !Select [ 0, !GetAZs "${opt:region, self:provider.region}" ]   
        # Get the first AZ in the list
          
    # Route tables:
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: Public

    PublicRoute1: # Public route table has direct routing to IGW:
      Type: AWS::EC2::Route
      DependsOn:
        - AttachGateway
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
        - Key: Name
          Value: Private

    PrivateRoute1: # Private route table can access web via NAT
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        # Route traffic through the NAT Gateway:
        NatGatewayId: !Ref NATGateway
        
    # Attach the public subnets to public route tables, 
    # and attach the private subnets to private route tables:    
    PublicSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetA
        RouteTableId: !Ref PublicRouteTable

    PrivateSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetA
        RouteTableId: !Ref PrivateRouteTable

    # NAT Gateway: 
    NATGateway:
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !GetAtt ElasticIPAddress.AllocationId
        SubnetId: !Ref PublicSubnetA

    ElasticIPAddress:
      Type: AWS::EC2::EIP
      Properties:
        Domain: VPC

    # Security Group that everything will share
    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group
        VpcId: !Ref VPC

    SecurtiyGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref SecurityGroup
        IpProtocol: "-1"
        SourceSecurityGroupId: !Ref SecurityGroup

    SecurtiyGroupEgress:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        GroupId: !Ref SecurityGroup
        IpProtocol: "-1"
        CidrIp: 0.0.0.0/0

    # Redshift Cluter
    RedshiftCluster:
      Type: AWS::Redshift::Cluster
      Properties:
        ClusterType: single-node
        NodeType: dc2.large
        DBName: dev
        MasterUsername: testuser #Â TODO: Inject these
        MasterUserPassword: Password1 # TODO: Inject these
        VpcSecurityGroupIds:
          - !Ref SecurityGroup
        ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
        PubliclyAccessible: false

    RedshiftClusterSubnetGroup:
      Type: AWS::Redshift::ClusterSubnetGroup
      Properties:
        Description: Cluster subnet group
        SubnetIds:
          - !Ref PrivateSubnetA
