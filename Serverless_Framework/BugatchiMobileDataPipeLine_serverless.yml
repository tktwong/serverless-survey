service: BugatchiMobileDataPipeLine

plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline-sns
  - serverless-s3-remover
  - serverless-plugin-existing-s3
  - serverless-plugin-tracing
  - serverless-plugin-lambda-dead-letter
  - serverless-s3-local
  - serverless-offline-scheduler
  - serverless-dynamodb-autoscaling
  - serverless-offline

custom:
  private: ${file(./private.yml)}
  default_stage: ${self:custom.private.stage}
  stage: ${opt:stage, self:custom.default_stage}
  accountId: { Ref: AWS::AccountId }
  capacities:
    - table: BugatchiTable  # DynamoDB Resource
      index:              # List or single index name
        - CategoryIndex
      read:
        minimum: 25        # Minimum read capacity
        maximum: 1000     # Maximum read capacity
        usage: 0.75       # Targeted usage percentage
      write:
        minimum: 75       # Minimum write capacity
        maximum: 200      # Maximum write capacity
        usage: 0.5        # Targeted usage percentage
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: false
      #      noStart: true
      convertEmptyValues: true
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: false
    # host: 0.0.0.0 # Optional, defaults to 127.0.0.1 if not provided to serverless-offline
    # sns-endpoint: http://127.0.0.1:4567 # Optional. Only if you want to use a custom endpoint
    # accountId: 123456789012 # Optional
  serverless-offline:
    port: 4000
  bucketArn:
    Fn::Join:
    - ''
    - - 'arn:aws:s3:::'
      - Ref: localbucket
      - '/*'
  s3:
    host: 0.0.0.0
    port: 8080
    directory: /tmp
  boolean:
    true: true
    false: false
  remover:
    prompt: ${self:custom.boolean.${opt:s3-remover-prompt, 'true'}}
    buckets:
      - "${self:provider.environment.ATHENA_S3_BUCKET}-${self:custom.stage}"
      - "${self:provider.environment.FTP_S3_BUCKET}-${self:custom.stage}"

provider:
  name: aws
  stage: dev
  region: us-east-1
  profile: serverless-admin
  runtime: nodejs8.10
  tracing: true
  environment:
    AWS_ACCOUNT_ID: ${self:custom.accountId}
    ATHENA_S3_BUCKET: ${file(./config.yml):ATHENA_S3_BUCKET}
    FTP_S3_BUCKET: ${file(./config.yml):FTP_S3_BUCKET}
    FTP_HOST: ${file(./config.yml):${self:custom.stage}.FTP_HOST}
    FTP_PASSWORD: ${file(./config.yml):${self:custom.stage}.FTP_PASSWORD}
    FILENAME: ${file(./config.yml):FILENAME}
    FTP_PORT: ${file(./config.yml):FTP_PORT}
    FTP_USER: ${file(./config.yml):FTP_USER}
    FTP_REMOTE_PATH: ${file(./config.yml):FTP_REMOTE_PATH}
    STAGE: ${self:custom.stage}
    REGION: ${self:provider.region}
    MAX_RECORDS_PER_BATCH: ${file(./config.yml):MAX_RECORDS_PER_BATCH}
    MAX_CONCURRENT_BATCHES: ${file(./config.yml):MAX_CONCURRENT_BATCHES}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:*
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
    - Effect: Allow
      Action:
        - xray:*
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:*
      Resource: "*"
    - Effect: Allow
      Action:
        - athena:*
      Resource: "*"
    - Effect: Allow
      Action:
        - glue:*
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"
    - Effect: Allow
      Action:
        - sns:*
      Resource: "*"

functions:

  transfer:
    handler: transfer/index.handler
    timeout: 180
    deadLetter:
      sqs: transfer-dl-queue
    events:
      - schedule: cron(0 23 * * ? *)

  createManufacturers:
    handler: createManufacturers/index.handler
    timeout: 360
    deadLetter:
      sqs: createManufacturers-dl-queue
    events:
      - existingS3:
          bucket: "${self:provider.environment.FTP_S3_BUCKET}-${self:custom.stage}"
          events:
            - s3:ObjectCreated:*

  createBugatchi:
    handler: createBugatchi/index.handler
    timeout: 720
    deadLetter:
      sqs: createBugatchi-dl-queue
    events:
      - sns: createManufacturersQueryId

  selectBugatchi:
    handler: selectBugatchi/index.handler
    timeout: 360
    deadLetter:
      sqs: selectBugatchi-dl-queue
    events:
      - sns: createBugatchiQueryId

  importBugatchi:
    handler: importBugatchi/index.handler
    timeout: 720
    deadLetter:
      sqs: importBugatchi-dl-queue
    events:
      - sns: selectBugatchiQueryId

  createSubcategories:
    handler: createSubcategories/index.handler
    timeout: 720
    deadLetter:
      sqs: createSubcategories-dl-queue
    events:
      - sns: selectBugatchiQueryId

  selectSubcategories:
    handler: selectSubcategories/index.handler
    timeout: 720
    deadLetter:
      sqs: selectSubcategories-dl-queue
    events:
      - sns: createSubcategoriesQueryId

  importSubcategories:
    handler: importSubcategories/index.handler
    timeout: 720
    deadLetter:
      sqs: importSubcategories-dl-queue
    events:
      - sns: selectSubcategoriesQueryId

  createCategories:
    handler: createCategories/index.handler
    timeout: 720
    deadLetter:
      sqs: createCategories-dl-queue
    events:
      - sns: selectSubcategoriesQueryId

  selectCategories:
    handler: selectCategories/index.handler
    timeout: 720
    deadLetter:
      sqs: selectCategories-dl-queue
    events:
      - sns: createCategoriesQueryId

  importCategories:
    handler: importCategories/index.handler
    timeout: 720
    deadLetter:
      sqs: importCategories-dl-queue
    events:
      - sns: selectCategoriesQueryId

resources:
  Resources:
    BugatchiTable:
      Type: "AWS::DynamoDB::Table"
      Description: "Data Store for AWS AppSync Bugatchi Type"
      Properties:
        TableName: "bugatchi"
        KeySchema:
          - AttributeName: "product_id"
            KeyType: "HASH"
          - AttributeName: "category"
            KeyType: "RANGE"
        AttributeDefinitions:
          - AttributeName: "product_id"
            AttributeType: "S"
          - AttributeName: "category"
            AttributeType: "S"
          - AttributeName: "subcategory"
            AttributeType: "S"
        ProvisionedThroughput:
          ReadCapacityUnits: 25
          WriteCapacityUnits: 75
        GlobalSecondaryIndexes:
          - IndexName: "CategoryIndex"
            KeySchema:
              - AttributeName: "category"
                KeyType: "HASH"
              - AttributeName: "subcategory"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "INCLUDE"
              NonKeyAttributes:
                - "name"
                - "description"
                - "sale_price"
                - "retail_price"
                - "productimage_url"
            ProvisionedThroughput:
              ReadCapacityUnits: 25
              WriteCapacityUnits: 75

    SubCategoriesTable:
      Type: "AWS::DynamoDB::Table"
      Description: "Data Store for AWS AppSync Subcategories Type"
      Properties:
        TableName: "subcategories"
        KeySchema:
          - AttributeName: "subcategory"
            KeyType: "HASH"
          - AttributeName: "category"
            KeyType: "RANGE"
        AttributeDefinitions:
          - AttributeName: "subcategory"
            AttributeType: "S"
          - AttributeName: "category"
            AttributeType: "S"
        ProvisionedThroughput:
          ReadCapacityUnits: 25
          WriteCapacityUnits: 25

    CategoriesTable:
      Type: "AWS::DynamoDB::Table"
      Description: "Data Store for AWS AppSync Categories Type"
      Properties:
        TableName: "categories"
        KeySchema:
          - AttributeName: "categories"
            KeyType: "HASH"
        AttributeDefinitions:
          - AttributeName: "categories"
            AttributeType: "S"
        ProvisionedThroughput:
          ReadCapacityUnits: 25
          WriteCapacityUnits: 25

    S3BucketAthena:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicReadWrite
        BucketName: "${self:provider.environment.ATHENA_S3_BUCKET}-${self:custom.stage}"
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 1
              Status: Enabled
              Prefix: "results/"
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, HEAD, POST, DELETE]
              AllowedOrigins: ['*']
              Id: myCORSRuleId1
              MaxAge: '3600'

    S3BucketFtp:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicReadWrite
        BucketName: "${self:provider.environment.FTP_S3_BUCKET}-${self:custom.stage}"
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, HEAD, POST, DELETE]
              AllowedOrigins: ['*']
              Id: myCORSRuleId1
              MaxAge: '3600'

    AthenaProductsDB:
      Type: 'AWS::Glue::Database'
      Properties:
        DatabaseInput:
          Name: 'products'
        CatalogId:
          Ref: AWS::AccountId

package:
  include:
    - transfer/**
    - createManufacturers/**
    - createBugatchi/**
    - selectBugatchi/**
    - importBugatchi/**
    - createSubcategories/**
    - selectSubcategories/**
    - importSubcategories/**
    - createCategories/**
    - selectCategories/**
    - importCategories/**
  exclude:
    - docker-compose.yml
    - README.md





