service: hb-api

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java11
  region: ${opt:region, 'us-east-1'}
  endpointType: ${opt:endpointType, 'regional'}
  basePath: ${opt:basePath, ''}
  stage: ${opt:stage, 'dev'}
  domainName: ${opt:domainName, 'invalid.url'}

  environment:
    TABLE_PREFIX: ${self:custom.tablePrefix}
    DYNAMO_DB_ENDPOINT_OVERRIDE: ${opt:dynamoDbEndpointOverride, ''}
    HEARTBEAT_QUEUE_URL: !Ref HeartBeatQueue

  usagePlan:
    quota:
      limit: 30000
      period: DAY
    throttle:
      burstLimit: 20
      rateLimit: 10

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "SNS:Publish"
        - "SNS:ListTopics"
        - "sqs:SendMessage"
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
      Resource: "*"

package:
  artifact: target/${self:service}-${self:provider.stage}.jar

functions:
  StatusGet:
    handler: com.tddapps.handlers.StatusGet
    timeout: 30
    events:
      - http:
          path: /v1/status
          method: get

  HeartBeatPost:
    handler: com.tddapps.handlers.HeartBeatPost
    timeout: 30
    events:
      - http:
          private: true
          path: /v1/hearbeat
          method: post

  HeartBeatChange:
    handler: com.tddapps.handlers.HeartBeatChange
    events:
    - stream:
        type: dynamodb
        arn:
          Fn::GetAtt:
            - HeartBeatsTable
            - StreamArn
    environment:
      TOPIC_NAME: ${self:resources.Outputs.HeartBeatNotificationsTopicArn.Value}

  HeartBeatExpirator:
    handler: com.tddapps.handlers.HeartBeatExpirator
    events:
    - schedule:
        rate: cron(* * * * ? *)

plugins:
  - serverless-domain-manager
  - serverless-sam
  - serverless-dynamodb-local
  - serverless-dynamodb-autoscaling
#  - serverless-localstack

custom:
  tablePrefix: ${self:service}-${self:provider.stage}-
  customDomain:
    domainName: ${self:provider.domainName}
    stage: ${self:provider.stage}
    endpointType: ${self:provider.endpointType}
    certificateRegion: ${self:provider.region}
    basePath: ${self:provider.basePath}
    createRoute53Record: false

  dynamodb:
    stages:
    - dev
    start:
      inMemory: true
      migrate: true

#  localstack:
#    stages:
#    - local
#    autostart: true

  capacities:
  - table: HeartBeatsTable
    index:
    - ExpirationMinuteIndex
    read:
      minimum: 1
      maximum: 25
      usage: 0.75
    write:
      minimum: 1
      maximum: 25
      usage: 0.5

resources:
  Resources:
    StatusGetLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "14"
    HeartBeatPostLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "14"
    HeartBeatChangeLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "14"
    HeartBeatExpiratorLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        RetentionInDays: "14"

    HeartBeatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}heartbeats
        AttributeDefinitions:
          - AttributeName: host_id
            AttributeType: S
          - AttributeName: expiration_minute_utc
            AttributeType: S
          - AttributeName: ttl
            AttributeType: N
        KeySchema:
          - AttributeName: host_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        GlobalSecondaryIndexes:
        - IndexName: ExpirationMinuteIndex
          KeySchema:
          - AttributeName: expiration_minute_utc
            KeyType: HASH
          - AttributeName: ttl
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1


    HeartBeatNotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:custom.tablePrefix}heartbeat-notifications
        TopicName: ${self:custom.tablePrefix}heartbeat-notifications

    HeartBeatQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.tablePrefix}heartbeats

  Outputs:
    HeartBeatNotificationsTopicArn:
      Value:
        Ref: HeartBeatNotificationsTopic