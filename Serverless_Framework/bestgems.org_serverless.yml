service: gdc
provider:
  name: aws
  runtime: ruby2.5
  stage: prod
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt:
          - RequestQueue
          - Arn
    - Effect: Allow
      Action:
        - firehose:*
      Resource:
        Fn::GetAtt:
          - Firehose
          - Arn
functions:
  collect_gem_downloads:
    handler: collect_gem_downloads.execute
    reservedConcurrency: 2
    memorySize: 128
    timeout: 10
    environment: 
      DELIVERY_STREAM_NAME: "${self:provider.stage}-${self:service}-delivery"
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - RequestQueue
              - Arn
          batchSize: 1
  request_collect_gem_downloads:
    handler: request_collect_gem_downloads.execute
    reservedConcurrency: 1
    memorySize: 512
    timeout: 900
    environment:
      BESTGEMS_API_BASE: "http://bestgems.org/api"
      QUEUE_URL:
       Ref: RequestQueue
      THREAD_COUNT: 32
    events:
      - schedule: cron(0 3 * * ? *)
resources:
  Resources:
    Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: "${self:provider.stage}-${self:service}-downloads"
    Firehose:
      Type: "AWS::KinesisFirehose::DeliveryStream"
      Properties: 
        DeliveryStreamName: "${self:provider.stage}-${self:service}-delivery"
        DeliveryStreamType: DirectPut
        S3DestinationConfiguration:
          BucketARN:
            Fn::GetAtt:
              - Bucket
              - Arn
          BufferingHints:
            IntervalInSeconds: 900
            SizeInMBs: 128
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: "${self:provider.stage}-${self:service}"
            LogStreamName: "${self:service}-delivery"
          CompressionFormat: GZIP
          Prefix: "firehose/"
          RoleARN:
            Fn::GetAtt:
              - CollectorFirehoseRole
              - Arn
    CollectorFirehoseRole:
      Type: "AWS::IAM::Role"
      Properties: 
        RoleName: "${self:provider.stage}-${self:service}-delivery-role"
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "firehose.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "${self:provider.stage}-${self:service}-delivery-policy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - glue:GetTableVersions
                    - s3:AbortMultipartUpload
                    - s3:GetBucketLocation
                    - s3:GetObject
                    - s3:ListBucket
                    - s3:ListBucketMultipartUploads
                    - s3:PutObject
                    - lambda:InvokeFunction
                    - lambda:GetFunctionConfiguration
                    - logs:PutLogEvents
                    - kinesis:DescribeStream
                    - kinesis:GetShardIterator
                    - kinesis:GetRecords
                    - kms:Decrypt
                  Resource:
                    - '*'
    RequestQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.stage}-${self:service}-RequestQueue"
        VisibilityTimeout: 600
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - RequestDeadLetter
              - Arn
          maxReceiveCount: 5
    RequestDeadLetter:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:provider.stage}-${self:service}-RequestDeadLetter"
