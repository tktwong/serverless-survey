service: codenames

provider:
  name: aws
  stage: ${opt:stage}
  iamRoleStatements:
    - Effect: Allow
      Action: apigateway:*
      Resource: arn:aws:apigateway:*::/*
    - Effect: Allow
      Action: 'dynamodb:*'
      Resource:
        - Fn::GetAtt: [Connections, Arn]
        - Fn::GetAtt: [Rooms, Arn]
  profile: personal
  websocketApiRouteSelectionExpression: $request.body.message
  environment:
    ROOMS_TABLE:
      Ref: Rooms
    CONNECTIONS_TABLE:
      Ref: Connections
  runtime: python3.8
  versionFunctions: false

package:
  exclude:
    - '**'
  include:
    - codenames.py
  excludeDevDependencies: false

functions:
  connect:
    handler: codenames.connect
    events:
      - websocket:
          route: $connect
  disconnect:
    handler: codenames.disconnect
    events:
      - websocket:
          route: $disconnect
  joinRoom:
    handler: codenames.join_room
    events:
      - websocket:
          route: joinRoom
  updateRoom:
    handler: codenames.update_room
    events:
      - websocket:
          route: updateRoom

  broadcastRoomChanges:
    handler: codenames.broadcast_room_changes
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [Rooms, StreamArn]


resources:
  Resources:
    Connections:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connection_id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: connection_id
            KeyType: HASH
    Rooms:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: room
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: room
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE
