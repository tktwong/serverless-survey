service: ${env:prefix}-${env:repo-name}

useDotenv: true

plugins:
  - serverless-certificate-creator

package:
  exclude:
    - .github/**
  include:
    - artifacts/**/*
    - serverless.yml
    - .env
    - package.json
    - package-lock.json

provider:
  name: aws
  runtime: nodejs12.x
  region: ${env:region}
  stage: ${opt:stage, 'dev'}

custom:
  s3Bucket:
    prod: ${env:subdomain}.${env:domain}
    sandbox: ${env:subdomain}.${env:deploy}.${env:domain}
    stage: ${env:subdomain}.${env:deploy}.${env:domain}
  customCertificate:
      certificateName: "${env:subdomain}.${env:domain}"
      hostedZoneName: "${env:domain}"
      hostedZoneId: "${env:hostedZoneId}"
      subjectAlternativeNames :
        - "${env:subdomain}.sandbox.${env:domain}"
        - "${env:subdomain}.stage.${env:domain}"
      tags:
        Name: ${env:subdomain}.${env:domain}
        Environment: ${env:stage}
      rewriteRecords: false

resources:

  Resources:

    ## Specifying the S3 Bucket
    CutieAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket.${env:deploy}}
        BucketEncryption: 
          ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
        # NotificationConfiguration:
        #   TopicConfigurations:
        #     - Event: s3:ObjectCreated:*
        #       Topic:
        #         Ref: !Ref SysAdminAlertSNSTopic
        #       Filter:
        #         S3Key:
        #           Rules:
        #             - Name: suffix
        #               Value: ".html"


    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    CutieAppS3BucketPolicy:
      DependsOn: [CutieAppCloudFrontOriginAccessIdentity]
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: CutieAppS3Bucket
        PolicyDocument:
          Statement:
          - Sid: S3-Bucket-Accesible via CDN OAI only
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${CutieAppS3Bucket}/*'
            Principal:
              CanonicalUser: !GetAtt CutieAppCloudFrontOriginAccessIdentity.S3CanonicalUserId 
          - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
            - !GetAtt 'CutieAppS3Bucket.Arn'
            - !Sub '${CutieAppS3Bucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false

    ## Specifying the CloudFront Origin Access Identity CDN Distribution to server your Web Application
    CutieAppCloudFrontOriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Sub "Cloudfront Origin identity for ${self:custom.s3Bucket.${env:deploy}}"

    ## Specifying the CloudFront Distribution to server your Web Application
    CutieAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.s3Bucket.${env:deploy}}
          Comment: !Sub "Cloudfront Origin identity for ${self:custom.s3Bucket.${env:deploy}}"
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            CachedMethods:
            - GET
            - HEAD
            - OPTIONS
            Compress: true
            DefaultTTL: 3600 # in seconds
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
            MaxTTL: 86400 # in seconds
            MinTTL: 60 # in seconds
            TargetOriginId: ${self:custom.s3Bucket.${env:deploy}}
            ViewerProtocolPolicy: 'redirect-to-https'
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          Enabled: true
          HttpVersion: http2
          IPV6Enabled: true
          Origins:
          - DomainName: !GetAtt 'CutieAppS3Bucket.RegionalDomainName'
            Id: ${self:custom.s3Bucket.${env:deploy}}
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CutieAppCloudFrontOriginAccessIdentity}'
          PriceClass: 'PriceClass_All'
          ViewerCertificate:
            AcmCertificateArn: ${certificate:${self:custom.customCertificate.certificateName}:CertificateArn}
            MinimumProtocolVersion: 'TLSv1.2_2019'
            SslSupportMethod: 'sni-only'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
    
    
    Route53RecordV2:
      Type: 'AWS::Route53::RecordSetGroup'
      Properties:
        HostedZoneId: "${env:hostedZoneId}"
        RecordSets:
        - Name: ${self:custom.s3Bucket.${env:deploy}}
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
            DNSName: !GetAtt 'CutieAppCloudFrontDistribution.DomainName'

    Route53RecordIPv6:
      Type: 'AWS::Route53::RecordSetGroup'
      Properties:
        HostedZoneId: "${env:hostedZoneId}"
        RecordSets:
        - Name: ${self:custom.s3Bucket.${env:deploy}}
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
            DNSName: !GetAtt 'CutieAppCloudFrontDistribution.DomainName'
    
    # 5xxErrorRateTooHighAlarm:
    #   Type: 'AWS::CloudWatch::Alarm'
    #   Properties:
    #     AlarmActions:
    #     # - !Ref SysAdminAlertSNSTopic 
    #     - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:P2-AWSChatBotSNSService-Syd'
    #     AlarmDescription: '${self:custom.s3Bucket.${env:deploy}}-5xx errors'
    #     ComparisonOperator: GreaterThanThreshold
    #     Dimensions:
    #     - Name: Region
    #       Value: Global
    #     - Name: DistributionId
    #       Value: !Ref CutieAppCloudFrontDistribution
    #     EvaluationPeriods: 1
    #     MetricName: 5xxErrorRate
    #     Namespace: 'AWS/CloudFront'
    #     OKActions: 
    #     # - !Ref SysAdminAlertSNSTopic
    #     - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:P2-AWSChatBotSNSService-Syd'
    #     Period: 60
    #     Statistic: Average
    #     Threshold: 1
    #     TreatMissingData: notBreaching

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    CutieAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ CutieAppCloudFrontDistribution, DomainName ]
    
    CutieAppS3Bucket:
      Description: 'Name of the S3 bucket storing the static files.'
      Value: !Ref CutieAppS3Bucket
      Export:
        Name: ${env:prefix}-CutieAppS3Bucket-${env:deploy}

    CutieAppS3BucketURL:
      Description: 'URL to static website.'
      Value: https://${self:custom.s3Bucket.${env:deploy}}

    CutieAppCloudFrontDistributionID:
      Description: 'CloudFront distribution id'
      Value: !Ref CutieAppCloudFrontDistribution
      Export:
        Name: ${env:prefix}-CutieAppCloudFrontDistributionID-${env:deploy}