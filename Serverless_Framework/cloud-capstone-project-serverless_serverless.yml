service:
  name: serverless-mySilentAuction-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

package:
  individually: true

provider:

  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    AUCTIONS_TABLE: MySilentAuction-Table-v4-${self:provider.stage}
    AUCTION_INDEX_NAME: MySilentAuction-Index-v4-${self:provider.stage}
    AUCTION_GSI_NAME: MySilentAuction-GSI-v4-${self:provider.stage}
    AUCTION_ITEMS_TABLE: MySilentAuctionItems-Table-v1-${self:provider.stage}
    IMAGES_S3_BUCKET: serverless-mysilentauction-images-droye6245-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetAuctions:
    handler: src/lambda/http/getAuctions.handler
    events:
      - http:
          method: get
          path: auctions
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTIONS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTIONS_TABLE}/index/*
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  GetAuctionItems:
    handler: src/lambda/http/getAuctionItems.handler
    events:
      - http:
          method: get
          path: auctions/{auctionId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  CreateAuction:
    handler: src/lambda/http/createAuction.handler
    events:
      - http:
          method: post
          path: auctions
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/create-auction-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTIONS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  CreateAuctionItem:
    handler: src/lambda/http/createAuctionItem.handler
    events:
      - http:
          method: post
          path: auctions/{auctionId}
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/create-auction-item-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  UpdateAuction:
    handler: src/lambda/http/updateAuction.handler
    events:
      - http:
          method: patch
          path: auctions/{auctionId}
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/update-auction-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTIONS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  UpdateAuctionItem:
    handler: src/lambda/http/updateAuctionItem.handler
    events:
      - http:
          method: patch
          path: auctions/{auctionId}/{itemId}
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(src/models/update-auction-item-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  DeleteAuction:
    handler: src/lambda/http/deleteAuction.handler
    events:
      - http:
          method: delete
          path: auctions/{auctionId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTIONS_TABLE}
      - Effect: Allow # need permission on auction item table to query and delete items to clear out any associated items before an auction delete
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  DeleteAuctionItem:
    handler: src/lambda/http/deleteAuctionItem.handler
    events:
      - http:
          method: delete
          path: auctions/{auctionId}/{itemId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: auctions/{auctionId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTIONS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  GenerateItemUploadUrl:
    handler: src/lambda/http/generateItemUploadUrl.handler
    events:
      - http:
          method: post
          path: auctions/{auctionId}/{itemId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: serverless-mySilentAuction-app-dev-GenItmUpldUrl-us-east-2
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AUCTION_ITEMS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AuctionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: auctionId
            AttributeType: S
          - AttributeName: auctionState
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: auctionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.AUCTIONS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.AUCTION_INDEX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: auctionState
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.AUCTION_GSI_NAME}
            KeySchema:
              - AttributeName: auctionState
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AuctionItemsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: auctionId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: auctionId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.AUCTION_ITEMS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
