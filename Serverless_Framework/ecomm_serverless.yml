service: ecomm-lambda

provider:
  name: aws
  region: eu-west-3 #Paris
  runtime: provided
  vpc:
    securityGroupIds:
      - sg-05fb0ef37d06768e0
    subnetIds:
      - subnet-0796eb32ebc964aab
  environment:
    APP_ENV: production
    #APP_URL: https://lambda.web-id.fr/
    VIEW_COMPILED_PATH: /tmp/storage/framework/views
    LOG_CHANNEL: stderr
    SESSION_DRIVER: cookie
    FILESYSTEM_DRIVER: s3
    FILESYSTEM_PUBLIC: s3
    DB_CONNECTION: mysql
    DB_HOST: preproduction.c8fzfidnwmue.eu-west-3.rds.amazonaws.com
    DB_DATABASE: webid2
    DB_USERNAME: ${ssm:/webid-lambda/db-username}
    DB_PASSWORD: ${ssm:/webid-lambda/db-password}
    AWS_BUCKET:
      Ref: Storage
  iamRoleStatements:
    # Allow full access to the Storage S3 bucket
    -   Effect: Allow
        Action: 's3:*'
        Resource:
          -   Fn::Join:
                - ''
                -   - 'arn:aws:s3:::'
                    -   Ref: Storage
          -   Fn::Join:
                - ''
                -   - 'arn:aws:s3:::'
                    -   Ref: Storage
                    - '/*'

package:
  exclude:
    - node_modules/**
    - public/storage
    - storage/**
    - tests/**
    - phpdocker/**
    - public/installer/**
    - public/themes/**
    #- vendor/**
    #- public/vendor/**

plugins:
  - ./vendor/bref/bref
  # This lets us use `#{Assets.Arn}` variables
  - serverless-pseudo-parameters

functions:
  website:
    handler: public/index.php
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-73-fpm}
    events:
      -   http: 'ANY /'
      -   http: 'ANY /{proxy+}'

  artisan:
    handler: artisan
    timeout: 120 # in seconds
    layers:
      - ${bref:layer.php-73} # PHP
      - ${bref:layer.console} # The "console" layer
resources:
  Resources:
    # The bucket that will store the images
    Storage:
      Type: AWS::S3::Bucket
    # Make the bucket publicly readable
    StorageBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref Storage
        PolicyDocument:
          Statement:
            -   Effect: 'Allow'
                Principal: '*' # everyone
                Action: 's3:GetObject' # to read
                Resource:
                  Fn::Join:
                    - ''
                    -   - 'arn:aws:s3:::'
                        -   Ref: Storage
                        - '/*'

    # The S3 bucket that stores the css
    Assets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: assets.myshop.com
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: [GET]
              AllowedOrigins: ["*"]
    # The policy that makes the bucket publicly readable
    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref Assets # References the bucket we defined above
        PolicyDocument:
          Statement:
            -   Effect: Allow
                Principal: '*' # everyone
                Action: 's3:GetObject' # to read
                Resource: 'arn:aws:s3:::assets.myshop.com/*' # things in the bucket
    WebsiteCDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          # Cheapest option by default (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DistributionConfig.html)
          PriceClass: PriceClass_100
          # Enable http2 transfer for better performances
          HttpVersion: http2
          # Origins are where CloudFront fetches content
          Origins:
            # The website (AWS Lambda)
            - Id: Website
              DomainName: '#{ApiGatewayRestApi}.execute-api.#{AWS::Region}.amazonaws.com'
              OriginPath: '/dev'
              CustomOriginConfig:
                OriginProtocolPolicy: 'https-only' # API Gateway only supports HTTPS
              OriginCustomHeaders:
                - HeaderName: 'X-Forwarded-Host'
                  HeaderValue: 'd1w19xs20dcivp.cloudfront.net'
            # The assets (S3)
            - Id: Assets
              # Use s3-website URLs instead if you host a static website (https://stackoverflow.com/questions/15309113/amazon-cloudfront-doesnt-respect-my-s3-website-buckets-index-html-rules#15528757)
              DomainName: '#{Assets}.s3.amazonaws.com'
              CustomOriginConfig:
                OriginProtocolPolicy: 'http-only' # S3 websites only support HTTP
          # The default behavior is to send everything to AWS Lambda
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            TargetOriginId: Website # the PHP application
            # Disable caching for the PHP application https://aws.amazon.com/premiumsupport/knowledge-center/prevent-cloudfront-from-caching-files/
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all # Forward cookies to use them in PHP
              # We must *not* forward the `Host` header else it messes up API Gateway
              Headers:
                - 'Accept'
                - 'Accept-Language'
                - 'Origin'
                - 'Referer'
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            # Css will be served under the `/css/` prefix
            - PathPattern: '/css/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            # js will be served under the `/js/` prefix
            - PathPattern: '/js/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            # favicons will be served under the `/favicons/` prefix
            - PathPattern: '/files/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            # fonts will be served under the `/fonts/` prefix
            - PathPattern: '/packages/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            # images will be served under the `/images/` prefix
            - PathPattern: '/preview/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            # img will be served under the `/img/` prefix
            - PathPattern: '/uploads/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            # vendor will be served under the `/vendor/` prefix
            - PathPattern: '/vendor/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
          CustomErrorResponses:
            # Do not cache HTTP errors
            - ErrorCode: 500
              ErrorCachingMinTTL: 0
            - ErrorCode: 504
              ErrorCachingMinTTL: 0

          # Custom domain name
          #Aliases:
          #  - lambda.web-id.fr # e.g. example.com
          #ViewerCertificate:
          #  # ARN of the certificate created in ACM
          #  AcmCertificateArn: arn:aws:acm:us-east-1:873034288588:certificate/b7c18156-0a3a-4241-b417-e79afd8ba108
          #  # See https://docs.aws.amazon.com/fr_fr/cloudfront/latest/APIReference/API_ViewerCertificate.html
          #  SslSupportMethod: 'sni-only'
          #  MinimumProtocolVersion: TLSv1.1_2016