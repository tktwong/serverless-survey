# This file is used as part of the setup process. You should not need
# to edit it unless you want to change the configuration of (some of) the AWS
# resources used to run the service. Note that only some of the AWS resources
# are configured here (mostly DynamoDB, Lambda, and things that depend on them) -
# you'll find the rest in setup/cf-create-stack.yaml, setup/cf-update-stack.yaml,
# setup/cognito-user-pool.json.tmpl, rolemappings.yml.tmpl and the setup/setup.js
# script itself.

service: ${opt:service, 'pbcsf'}

custom:
  dynamodb:
    start:
      sharedDb: true
      dbPath: /tmp/

  localDynamoEndpoint: "http://localhost:8000"
  prodDynamoEndpoint: 
    Fn::Sub: "https://dynamodb.${self:provider.region}.amazonaws.com"
  devDynamoEndpoint: ${self:custom.prodDynamoEndpoint}
  roleMappings: ${file(./rolemappings.yml)}
  
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  apiKeys:
    - ${opt:service}-${opt:stage}-calibration  # API key to be used when calling the calibrationData function

# you can define service wide environment variables here
  environment:
    USER_DATA_TABLE:
      Ref: userDataTable
    USERS_TABLE:
      Ref: usersTable
    GROUP_MESSAGES_TABLE:
      Ref: groupMessagesTable
    DYNAMO_ENDPOINT: ${self:custom.${self:provider.stage}DynamoEndpoint}
    REGION: ${self:provider.region}

# you can add packaging information here
package:
  individually: true
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude: # add everything in the server directory that isn't a lambda function (or needed for one) to this list
    - common-test/**
    - dynamodb/**
    - node_modules/**
    - package-lock.json
    - shared-local-instance.db
    - rolemappings.yml.tmpl
    - rolemappings.yml
    - setup/**

functions:
  api:
    package:
      exclude:
        - verification/**
        - reminders/**
        - api/test/**
        - api/node_modules/** # api function doesn't have any dependencies; delete this line if you add any
        - training-data-import/**
        - logger/**
        - calibration/**
    role: lambdaWithDynamoRole
    handler: api/api.handler
    events:
      - http:
          path: group/members
          method: get
          cors: true
          authorizer:
            arn: ${opt:cognitoUserPoolArn}
          request:
            parameters:
              querystrings:
                group_name: false
      - http:
          path: group/messages
          method: get
          cors: true
          authorizer:
            arn: ${opt:cognitoUserPoolArn}
          request:
            parameters:
              querystrings:
                group_name: false
                since: true
      - http:
          path: group/messages
          method: post
          cors: true
          authorizer:
            arn: ${opt:cognitoUserPoolArn}
          request:
            parameters:
              querystrings:
                group_name: false
      - http:
          path: users/{user_id}
          method: get
          cors: true
          authorizer:
            arn: ${opt:cognitoUserPoolArn}
          request:
            parameters:
              paths:
                user_id: true
      - http:
          path: users/{user_id}/data
          method: get
          cors: true
          authorizer:
            arn: ${opt:cognitoUserPoolArn}
          request:
            parameters:
              paths:
                user_id: true
              querystrings:
                start: true
                end: true
      - http:
          path: users/{user_id}/emoji
          method: post
          cors: true
          authorizer:
            arn: ${opt:cognitoUserPoolArn}
          request:
            parameters:
              paths:
                user_id: true
              querystrings:
                e: true
      - http:
          path: users/groupvisit
          method: post
          cors: true
          authorizer:
            arn: ${opt:cognitoUserPoolArn}
      - http:
          path: users/minutes
          method: put
          cors: true
          authorizer:
            arn: ${opt:cognitoUserPoolArn}
          request:
            parameters:
              querystrings:
                date: true
                minutes: true
      - http:
          path: users/{user_id}/disable
          method: put
          cors: true
          authorizer:
            arn: ${opt:cognitoUserPoolArn}
          request:
            parameters:
              paths:
                user_id: true
    environment:
      ADMIN_GROUP: "staff"
      DISABLED_GROUP: "disabled"

  remind:
    package:
      exclude:
        - verification/**
        - api/**
        - reminders/message-loader/**
        - reminders/test/**
        - reminders/README.md
        - reminders/.*
        - training-data-import/**
        - logger/**
        - calibration/**
    role: reminderRole
    handler: reminders/remind.handler
    events:
      - schedule:
          rate: cron(30 15 * * ? *)
          enabled: false
          description: Reminds users who are behind on training to train.
          input:
            msgType: train

            
#    Define function environment variables here
    environment:
      GROUPS_TABLE:
        Ref: groupsTable
      REMINDER_MSGS_TABLE:
        Ref: reminderMessagesTable
      TARGET_MINUTES_BY_WEEK: "[20,20,30,40,40,40,40]"
      SES_ENDPOINT: 
        Fn::Sub: "https://email.${self:provider.region}.amazonaws.com"
      SNS_ENDPOINT: 
        Fn::Sub: "https://sns.${self:provider.region}.amazonaws.com"
      S3_ENDPOINT: "https://s3.${self:provider.region}.amazonaws.com"
      CLOUDWATCH_LOGS_ENDPOINT: "https://logs.${self:provider.region}.amazonaws.com"
      EMAIL_SENDER: "uscemotioncognitionlab@gmail.com"
      CHART_BUCKET:
         Fn::Sub: "${self:service}-${self:provider.stage}-reporting"
      STATUS_REPORT_RECIPIENTS: ${opt:statusReportRecipients}
      STATUS_REPORTS_TABLE:
        Ref: statusReportsTable
      ADMIN_GROUP: "staff"
      DISABLED_GROUP: "disabled"
      ONE_YR_SURVEY_ID: "SV_cOaHdrcz6lvRiZv"
      ONE_YR_CONSENT_SURVEY_ID: "SV_8B70EFGwYCZpt0p"
      THREE_MO_SURVEY_ID: "SV_eg0g6vNdyVvB5JP"
      FOLLOWUP_LOG_GROUP:
        Ref: followupCloudwatchLogGroup
      FOLLOWUP_LOG_STREAM: "sent"

# DO NOT CHANGE the name of this function unless you also change it in setup/setup.js
  messageCustomizer:
    package:
      exclude:
        - api/**
        - reminders/**
        - verification/verified.js
        - verification/test/**
        - training-data-import/**
        - logger/**
        - common/**
        - calibration/**
    role: lambdaWithDynamoRole
    handler: verification/message-customizer.handler

# DO NOT CHANGE the name of this function unless you also change it in setup/setup.js
  writeUserOnVerify:
    package:
      exclude:
        - api/**
        - reminders/**
        - verification/message_customizer.js
        - verification/test/**
        - training-data-import/**
        - logger/**
        - common/**
        - calibration/**
    role: lambdaWithDynamoRole
    handler: verification/verified.handler

  dataImporter:
    package:
      exclude:
        - api/**
        - reminders/**
        - verification/**
        - training-data-import/test/**
        - training-data-import/private-key.json
        - logger/**
        - calibration/**
    role: lambdaWithDynamoRole
    handler: training-data-import/import.handler
    timeout: 120
    events:
      - schedule:
          rate: rate(7 minutes)
          description: Imports any new training data for today.
          input:
            day: today
      - schedule:
          rate: cron(00 15 * * ? *)
          description: Checks for training data before the reminder to train is sent out.
          input:
            day: yesterday
    environment:
      DATA_BUCKET:
        Fn::Sub: "${self:service}-${self:provider.stage}-usr-data"
      GROUPS_TABLE:
        Ref: groupsTable
      S3_ENDPOINT: "https://s3.${self:provider.region}.amazonaws.com"
      TIMEZONE: "America/Los_Angeles"

  logger:
    package:
      exclude:
        - api/**
        - reminders/**
        - verification/**
        - training-data-import/**
        - common/**
        - calibration/**
    role: lambdaWithDynamoRole
    handler: logger/index.handler
    events:
      - http:
          path: log
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - JSNLog-RequestId
            allowCredentials: false

  calibrationData:
    package:
      exclude:
        - api/**
        - reminders/**
        - verification/**
        - training-data-import/**
        - logger/**
        - calibration/test/**
    role: lambdaWithS3Role
    handler: calibration/index.handler
    timeout: 120
    events:
      - http:
          path: subjects/{subject_id}/calibration
          method: get
          cors: true
          request:
            parameters:
              paths:
                subject_id: true
              querystrings:
                since: false
          private: true
    environment:
      DATA_BUCKET:
        Fn::Sub: "${self:service}-${self:provider.stage}-usr-data"
      S3_ENDPOINT: "https://s3.us-west-2.amazonaws.com"
      TIMEZONE: "America/Los_Angeles"
      
plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - npm-rebuild-plugin # see .serverless_plugins

# you can add CloudFormation resource templates here
resources:
  Resources:
# All of the DynamoDB tables that we need
    groupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-groups
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 1
    groupMessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-group-messages
        AttributeDefinitions:
          - AttributeName: group
            AttributeType: S
          - AttributeName: date
            AttributeType: N
        KeySchema:
          - AttributeName: group
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 1
    reminderMessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-reminder-msgs
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    statusReportsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-status-reports
        AttributeDefinitions:
          - AttributeName: reportDate
            AttributeType: S
        KeySchema:
          - AttributeName: reportDate
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 1
    userDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-user-data
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: date
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

# role for authorized cognito users
    dynamoClickTrackingWriteAccess:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        Description: Allows write access to clicks column of reminder-msgs dynamodb table
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:UpdateItem"
              Resource: { Fn::GetAtt: [reminderMessagesTable, Arn] }
              Condition:
                "ForAllValues:StringEquals":
                  "dynamodb:Attributes":
                    - "clicks"
        ManagedPolicyName: 
          Fn::Sub: "${self:service}-${self:provider.stage}-dynamo-reminder-msgs-write"

    cognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud": 
                    Fn::ImportValue: ${self:service}-${self:provider.stage}-identityPoolId
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        ManagedPolicyArns:
          - { Ref: dynamoClickTrackingWriteAccess }
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
          - PolicyName: "DynamoGroupsReadPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:BatchGetItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                  Resource: { Fn::GetAtt: [groupsTable, Arn] }
# Assigns the authorized/unauthorized roles to the identity pool
# and gives staff group members admin privileges
    cognitoIdPoolRoleMapping:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId: 
          Fn::ImportValue: ${self:service}-${self:provider.stage}-identityPoolId
        Roles:
          authenticated: { Fn::GetAtt: [cognitoAuthorizedRole, Arn] }
          unauthenticated: { Fn::ImportValue: "${self:service}-${self:provider.stage}-cognitoUnauthorizedRole" }
        RoleMappings: ${file(./rolemappings.yml)}

# policy to allow writing to some dynamodb tables
    dynamoWriteAccess:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        Description: Allows write access to certain tables
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:PutItem"
              Resource:
                - { Fn::GetAtt: [groupMessagesTable, Arn] }
                - { Fn::GetAtt: [usersTable, Arn] }
            - Effect: "Allow"
              Action:
                - "dynamodb:UpdateItem"
              Resource:
                - { Fn::GetAtt: [userDataTable, Arn] }
                - { Fn::GetAtt: [usersTable, Arn] }
        ManagedPolicyName: { "Fn::Sub": "${self:service}-${self:provider.stage}-dynamo-write" }

# role for lambda functions that need common dynamo access
    lambdaWithDynamoRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - { Fn::ImportValue: "${self:service}-${self:provider.stage}-cloudwatchWriteAccess" }
          - { Fn::ImportValue: "${self:service}-${self:provider.stage}-dynamoReadAccess" }
          - { Fn::ImportValue: "${self:service}-${self:provider.stage}-dataBucketReadAccess" }
          - { Ref: dynamoWriteAccess }

# role for the reminder lambda function
    reminderRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - { Fn::ImportValue: "${self:service}-${self:provider.stage}-cloudwatchWriteAccess" }
          - { Fn::ImportValue: "${self:service}-${self:provider.stage}-dynamoReadAccess" }
          - { Fn::ImportValue: "${self:service}-${self:provider.stage}-sesSendAccess"}
          - { Fn::ImportValue: "${self:service}-${self:provider.stage}-snsPublishAccess"}
        Policies:
          - PolicyName: "DynamoReminderMsgsWritePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:UpdateItem"
                  Resource: { Fn::GetAtt: [reminderMessagesTable, Arn] }
          - PolicyName: "DynamoStatusReportsWritePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:PutItem"
                  Resource: { Fn::GetAtt: [statusReportsTable, Arn] }
          - PolicyName: "ReportingBucketWritePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:PutObjectAcl"
                  Resource:
                    Fn::Join: 
                      - "/"
                      - - Fn::ImportValue: "${self:service}-${self:provider.stage}-reportingBucketARN"
                        - "*"

# role for lambda functions that only need access to S3 (and cloudwatch)
    lambdaWithS3Role:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - { Fn::ImportValue: "${self:service}-${self:provider.stage}-cloudwatchWriteAccess" }
          - { Fn::ImportValue: "${self:service}-${self:provider.stage}-dataBucketReadAccess" }

# Cloudwatch log group for followup survey logging
    followupCloudwatchLogGroup:
      Type: "AWS::Logs::LogGroup"
      Properties:
        LogGroupName: ${self:service}-${self:provider.stage}-followup
        RetentionInDays: 3