service: serverless
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  environment:
      UPLOAD_BUCKET: ${opt:stage, 'dev'}-covid19-antibody-uk
      DYNAMO_TABLE: ${opt:stage, 'dev'}-covid19-antibody-uk
      ML_API_BASE: http://localhost:8080
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: 
        Fn::GetAtt: 
          - DynamoDB
          - Arn
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: S3
            - '/*'
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource: "*"
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
        - sqs:GetQueueUrl
        - sqs:SendMessage
      Resource: "*"
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-jest-plugin
  - serverless-sentry
  - serverless-step-functions
functions:
  - ${file(./take-test-app.yml)}
  - ${file(./reviewer-app.yml)}
stepFunctions:
  stateMachines:
    delayedNotification:
      name: delayedNotification-${opt:stage, 'dev'} 
      definition:
        Comment: "Wait and notify user when their timer is complete"
        StartAt: Wait
        States:
          Wait:
            Type: "Wait"
            SecondsPath: "$.wait"
            Next: Notify
          Notify:
            Type: "Task"
            Resource:
              Fn::GetAtt: [notify, Arn] # We dynamically fetch in the notify function's arn here
            End: true
custom:
  serverless-offline:
    httpPort: 4000
    stage: dev
  webpack:
    includeModules: true   # Node modules configuration for packaging
    packager: 'yarn'   # Packager that will be used to package your external modules
    excludeFiles: '**/*.test.ts' # Provide a glob for files to ignore
  sentry:
    dsn: https://93e4dddc1090408da8b861c3a6e57cd8@o406048.ingest.sentry.io/5272813
    filterLocal: true
resources:
  Outputs:
    ReviewQueue:
      Description: The ARN of the review queue
      Value: ${opt:stage, 'dev'}-covid19-antibody-uk-results
    StateMachine:
      Description: The ARN of the provisioning state machine
      Value: 
          Ref: DelayedNotificationDash${opt:stage, 'dev'}  # Capital letter at start for some reason #https://medium.com/@iamNoah_/invoke-aws-step-function-from-aws-lambda-using-the-serverless-framework-21b7fde38a42
  Resources:
    ReviewQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, 'dev'}-covid19-antibody-uk-results
        RedrivePolicy:
          maxReceiveCount: 5
          deadLetterTargetArn:
            Fn::GetAtt: 
              - ReviewDLQueue
              - Arn
    ReviewDLQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, 'dev'}-covid19-antibody-uk-results-dlq
    SecondaryReviewQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, 'dev'}-covid19-antibody-uk-results-secondary
        RedrivePolicy:
          maxReceiveCount: 5
          deadLetterTargetArn:
            Fn::GetAtt: 
              - SecondaryReviewDLQueue
              - Arn
    SecondaryReviewDLQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, 'dev'}-covid19-antibody-uk-results-secondary-dlq
    S3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${opt:stage, 'dev'}-covid19-antibody-uk
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - HEAD
              MaxAge: 3000
    DynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: guid
            AttributeType: S
        KeySchema:
          - AttributeName: guid
            KeyType: HASH
        TableName: ${opt:stage, 'dev'}-covid19-antibody-uk
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    ApiGatewayCognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - arn:aws:cognito-idp:eu-west-2:877130379437:userpool/eu-west-2_14WRfl09I
    ClientS3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${opt:stage, 'dev'}-covid19-antibody-uk-client
        WebsiteConfiguration:
          IndexDocument: index.html
    ClientCloudFrontAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'covid19-antibody-uk-client-oai'
    ClientBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: 'ClientS3'
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: 'Allow'
              Principal:
                CanonicalUser: 
                  Fn::GetAtt:
                    - ClientCloudFrontAccessIdentity
                    - S3CanonicalUserId
              Resource: 
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: 'ClientS3'
                    - '/*'
    ClientCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: '/index.html'
            - ErrorCachingMinTTL: 0
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: '/index.html'
          DefaultCacheBehavior:
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            TargetOriginId: ClientS3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: allow-all
          DefaultRootObject: 'index.html'
          Enabled: true
          Origins:
            - DomainName: 
                Fn::GetAtt:
                  - ClientS3
                  - DomainName
              Id: ClientS3Origin
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    - - 'origin-access-identity/cloudfront/'
                      - Ref: ClientCloudFrontAccessIdentity
