service: covid19-dashboard

frameworkVersion: '2'

provider:
  name: aws
  region: ${opt:region, self:custom.region}
  runtime: nodejs12.x
  stackName: ${self:service}-stack
  stackTags: # Optional CF stack tags
    project: ${self:custom.project}

custom:
  region: ap-southeast-1
  project: covid-19
  rootDomain: drunkard-pig.com
  siteName: dashboard.covid-19.${self:custom.rootDomain}
  certArn: ${opt:certArn, ''}
  s3BucketLogBucket: ${self:custom.client.bucketName}-logs
  client:
    bucketName: ${self:custom.siteName}
    distributionFolder: build
    indexDocument: index.html
    objectHeaders:
      '*.html':
        - name: Cache-Control
          value: no-cache
  remover:
    buckets:
      - ${self:custom.client.bucketName}
      - ${self:custom.s3BucketLogBucket}

resources:
  Resources:
    Covid19DashboardLogBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        AccessControl: LogDeliveryWrite
        BucketName: ${self:custom.s3BucketLogBucket}
        LifecycleConfiguration:
          Rules:
            - Id: ExpireRule
              Status: Enabled
              ExpirationInDays: 30
    Covid19DashboardBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.client.bucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        LoggingConfiguration:
          DestinationBucketName:
            Ref: Covid19DashboardLogBucket
          LogFilePrefix: bucket-log/
    # specifying the policies to make sure all files inside the Bucket are available
    Covid19DashboardBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: Covid19DashboardBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.client.bucketName}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    Covid19DashboardCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.client.bucketName}.s3-website.${self:provider.region}.amazonaws.com
              Id: Covid19DashboardCloudFrontDistributionOrigin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
                OriginSSLProtocols:
                  - TLSv1
                  - TLSv1.1
                  - TLSv1.2
          HttpVersion: http2
          Enabled: true
          Aliases:
            - ${self:custom.client.bucketName}
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: Covid19DashboardCloudFrontDistributionOrigin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            CachePolicyId:
              # Managed-CachingOptimized
              658327ea-f89d-4fab-a63d-7e88639e58f6
            OriginRequestPolicyId:
              # Managed-CORS-S3Origin
              88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certArn}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2019
            # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#access-logs-choosing-s3-bucket
          Logging:
            Bucket: { "Fn::GetAtt": [ "Covid19DashboardLogBucket", "DomainName" ] }
            IncludeCookies: false
            Prefix: cloud-front-log/
    # add A record to link the custom domain to CloudFront
    Covid19DashboardRoute53RecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: "${self:custom.rootDomain}."
        RecordSets:
          - Name: ${self:custom.siteName}
            Type: A
            AliasTarget:
              # it must be Z2FDTNDATAQYW2
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: { "Fn::GetAtt": [ "Covid19DashboardCloudFrontDistribution", "DomainName" ] }

plugins:
  - serverless-finch
  - serverless-s3-remover
