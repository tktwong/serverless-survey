# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-aws-graphql-accelerator
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

custom:
  webpack:
    includeModules: false

  # run docker-compose up to get the latest dynamo db image and use it with serverless
  # serverless-dynamodb-local
  dynamodb:
    stages:
      - local
    start:
      port: 7222
      migrate: true
      noStart: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'us-west-2'}
  stackName: ${self:service}-${self:provider.stage}
  apiName: ${self:service}-${self:provider.stage}
  websocketsApiName: ${self:provider.stage}-ws-${self:service}
  # deploymentBucket: deployments
  environment: # Global environment variables
    APPLICATION: ${self:service}
    ENVIRONMENT: ${self:provider.stage}
    LOG_LEVEL: ${file(serverless.env.yml):${self:provider.stage}.LOG_LEVEL}

  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function:${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [GQLSubscriptionsTable, Arn]
              - '*'

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

# package:
#   individually: true

functions:
  pubsub:
    handler: src/handlers/pubsub.handler
    # vpc: ${file(serverless.vpc.yml):${self:provider.stage}}
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ GQLSubscriptionsTable, StreamArn ]
    layers:
      - { Ref: GraphqlLambdaLayer }
  server:
    handler: src/handlers/server.handler
    # vpc: ${file(serverless.vpc.yml):${self:provider.stage}}
    environment: # Function environment variables (inherits from global)
      CORS_ORIGIN: ${file(serverless.env.yml):${self:provider.stage}.CORS_ORIGIN}
      WS_URL:
        Fn::Join:
          - ''
          - - 'wss://'
            - Ref: WebsocketsApi
            - .execute-api.
            - Ref: AWS::Region
            - .amazonaws.com/
            - ${self:provider.stage}
    events:
      - http:
          path: /
          method: post
          cors:
            - ${file(serverless.cors.yml):${self:provider.stage}}
      - http:
          path: /
          method: get
          cors:
            - ${file(serverless.cors.yml):${self:provider.stage}}
    layers:
      - { Ref: GraphqlLambdaLayer }
  ws-connect:
    handler: src/handlers/ws-connect.handler
    events:
      - websocket:
          route: $connect
    layers:
      - { Ref: GraphqlLambdaLayer }
  ws-disconnect:
    handler: src/handlers/ws-disconnect.handler
    events:
      - websocket:
          route: $disconnect
    layers:
      - { Ref: GraphqlLambdaLayer }
  ws-server:
    handler: src/handlers/ws-server.handler
    events:
      - websocket:
          route: $default
    layers:
      - { Ref: GraphqlLambdaLayer }

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

layers:
  graphql: # A Lambda layer
    path: .layer # required, path to layer contents on disk
    name: apollo-graphql-${opt:stage, self:provider.stage, 'dev'} # optional, Deployed Lambda layer name
    description: nodejs dependencies for running serverless Apollo GraphQL # optional, Description to publish to AWS
    compatibleRuntimes: # optional, a list of runtimes this layer is compatible with
      - nodejs12.x

# you can add CloudFormation resource templates here
resources:
  Resources:

    # DYNAMODB RESOURCES
    GQLSubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}.ws-subscription
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: reverse
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: pk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

  Outputs:
    GQLSubscriptionsTable:
      Value: !Ref GQLSubscriptionsTable
