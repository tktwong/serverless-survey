#
# For full config options, check the docs:
#    docs.serverless.com
#

service: vf-crime-stats

plugins:
  - serverless-s3-deploy
  - ./src/execute-lambda-plugin

custom:
  project:
    deployBucket: vf-data-deploy-2608452
    uploadBucket: vf-data-upload-2608452
    tableOffenseCodes: OFFENSE_CODES
    tableIncidents: INCIDENTS
    deployFile: offense_codes.csv
    functionToExecuteAfterDeploy: load-data
  assets:
    auto: true
    targets:
      - bucket: ${self:custom.project.deployBucket}
        files:
          - source: ./data/sync
            globs: '**/*.csv'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  memorySize: 512
  stackTags:
    DEPLOYMENT: serverless-framework
  environment:
    DEPLOY_DATA_BUCKET: ${self:custom.project.deployBucket}
    DEPLOY_DATA_FILE: ${self:custom.project.deployFile}
    TABLE_OFFENSE_CODES: ${self:custom.project.tableOffenseCodes}
    TABLE_INCIDENTS: ${self:custom.project.tableIncidents}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: 'arn:aws:s3:::vf-data-deploy-2608452/*'
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: 'arn:aws:s3:::vf-data-upload-2608452/*'
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: '*'
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "Fn::GetAtt": [DynamoDBTableOffenseCodes, Arn]
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "Fn::GetAtt": [DynamoDBTableIncidents, Arn]


functions:
  get-incident:
    description: Returns html content of a crime incident
    handler: src/getIncident.handler
    events:
      - http:
          path: /incidents
          method: get
      - http:
          path: /incidents/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
  load-data:
    description: Loads the offense code data
    handler: src/loadData.handler
  file-upload:
    description: Watches an S3 bucket to load dynamo from new csv files
    handler: src/fileUpload.handler
    events:
      - s3:
          bucket: ${self:custom.project.uploadBucket}
          event: s3:ObjectCreated:*
    timeout: 60
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    DynamoDBTableOffenseCodes:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.project.tableOffenseCodes}
        AttributeDefinitions:
          - AttributeName: OFFENSE_CODE
            AttributeType: S
        KeySchema:
          - AttributeName: OFFENSE_CODE
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBTableIncidents:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.project.tableIncidents}
        AttributeDefinitions:
          - AttributeName: INCIDENT_ID
            AttributeType: S
        KeySchema:
          - AttributeName: INCIDENT_ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    S3BucketDeployData:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.project.deployBucket}
