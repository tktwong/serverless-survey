service: serverless-courses443

plugins:
  - serverless-s3-sync

custom:
  siteName: courses443
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: dist

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  environment:
    DYNAMODB_USER_TABLE: ${self:service}-${self:provider.stage}
    S_REGION: us-east-2
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:*
      Resource: "*"

    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TABLE}"

      # FIXME PERMISSIONS!
    - Effect: Allow
      Action:
        - ec2:*
      Resource: "*"

    - Effect: Allow
      Action:
        - events:*
      # FIXME RESOURCE!
      Resource: "*"

  stackTags:
    serverless:servess: ${self:service}

functions:
  user:
    handler: handler.user
    events:
      - http:
          path: user
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  vm:
    handler: handler.vm
    events:
      - http:
          path: vm
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  vmDestroy:
    handler: handler.vmDestroy
    #role: awsLambdaRole
    events:
      - http:
          path: vmDestroy
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  admin:
    handler: handler.admin
    events:
      - http:
          path: admin
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  vmDetail:
    handler: handler.vmDetail
    events:
      - http:
          path: vmDetail
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

#  scheduleTest:
#    handler: handler.scheduleTest
#    #role: awsLambdaRole
#    events:
#      - http:
#          path: scheduleTest
#          method: get
#          cors:
#            origin: '*'
#            headers:
#              - Content-Type
#              - X-Amz-Date
#              - Authorization
#              - X-Api-Key
#              - X-Amz-Security-Token
#              - X-Amz-User-Agent
#            allowCredentials: false



resources:
  Resources:
    awsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: awsLambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - events.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: awsLambdaRolePolicy
            PolicyDocument:
              #Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:*"
                    - "dynamodb:*"
                    - "ec2:*"
                    - "events:*"
                    - "cloudwatch:*"
                  Resource: "*"

    StaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.xhtml
          ErrorDocument: index.xhtml

    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSite
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join: [
                  "", [
                    "arn:aws:s3:::",
                    {
                      "Ref": "StaticSite"
                    },
                    "/*"
                  ]
                ]

    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_USER_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  Outputs:
    StaticSiteS3BucketName:
      Value:
        'Ref': StaticSite
    StaticSiteS3BucketDomainName:
      Value:
        Fn::GetAtt:
          - StaticSite
          - DomainName
    StaticSiteS3BucketWebsiteURL:
      Value:
        Fn::GetAtt:
          - StaticSite
          - WebsiteURL
