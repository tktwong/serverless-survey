service:
  name: answer4me

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs6.10
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
      Resource: "arn:aws:dynamodb:*:*:table/answer4me-call-log"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource: 
        - "arn:aws:s3:::answer-4me"
        - "arn:aws:s3:::answer-4me/*"


custom:
  DynamoDBTableName: answer4me-call-log

functions:
  # Example with LAMBDA-PROXY integration
  # Invoking locally:
  # sls webpack invoke -f hello
  phonein:
    handler: callresponder.phonein
    events:
      - http:
          method: post
          path: phone
          integration: lambda
          response:
            headers:
              Content-Type: "'text/xml'"
            template: $input.path('$')

  checkgetrecording:
    handler: checkgetrecording.phonein

resources:
  Resources:
      DynamoDBTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
          TableName: ${self:custom.DynamoDBTableName}
          AttributeDefinitions:
            - AttributeName: callid
              AttributeType: S
          KeySchema:
            - AttributeName: callid
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: "1"
            WriteCapacityUnits: "1"
