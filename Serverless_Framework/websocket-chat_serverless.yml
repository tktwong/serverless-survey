service: websocket-chat
# frameworkVersion: "=X.X.X"
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${env:SLS_STAGE, "dev"}
  region: eu-west-2
  stackTags:
    service: ${self:service}
  environment:
    SERVICE: ${self:service}
    STAGE: ${opt:stage, self:provider.stage}
    REGION: ${self:provider.region}
    GRAPHQL_STAGE: ${env:SLS_STAGE, 'local'}
    CONNECTION_TABLE: 'connections'
    CHANNEL_TABLE: 'channels'
    MESSAGE_TABLE: 'messages'
  iamRoleStatements:
    - Effect: 'Allow'
      Action: 'ssm:GetParameter*'
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:ssm
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - parameter/${opt:stage, self:provider.stage}/*
    - Effect: 'Allow'
      Action:
        - dynamodb:DeleteItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:dynamodb
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - table/*

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-websockets-plugin

functions:
  listConnections:
    handler: handler.listConnections
    events:
      - http:
          path: listConnections
          method: get
          cors: true
  connectionHandler:
    handler: handler.connectionHandler
    events:
      - websocket:
        route: $connect
      - websocket:
        route: $disconnect
  default:
    handler: handler.default
    events:
      - websocket:
        route: $default

custom:
  webpack:
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: 'yarn' # Packager that will be used to package your external modules
    packagerOptions:
      noFrozenLockFile: true
