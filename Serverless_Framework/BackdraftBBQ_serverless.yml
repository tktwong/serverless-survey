service: backdraft-api
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  environment:
    NODE_ENV: production
    DB_HOST:
      'Fn::GetAtt':
        - RDSMySQLInstance
        - Endpoint.Address
    DB_NAME: '${self:custom.db_name}'
    DB_USERNAME: '${self:custom.db_username}'
  vpc:
    securityGroupIds:
      - 'Fn::GetAtt': ServerlessSecurityGroup.GroupId
    subnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
resources:
  Resources:
    Vpc:
      Type: 'AWS::EC2::VPC'
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        InstanceTenancy: default
    VPCInternetGateway:
      Type: 'AWS::EC2::InternetGateway'
    VPCInternetGatewayAttachment:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        InternetGatewayId:
          Ref: VPCInternetGateway
        VpcId:
          Ref: Vpc
    PrivateSubnet1:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: us-east-1a
        CidrBlock: 10.0.64.0/18
        MapPublicIpOnLaunch: true
        VpcId:
          Ref: Vpc
    PrivateSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        AvailabilityZone: us-east-1b
        CidrBlock: 10.0.128.0/18
        MapPublicIpOnLaunch: true
        VpcId:
          Ref: Vpc
    RouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId:
          Ref: Vpc
    InternetRoute:
      Type: 'AWS::EC2::Route'
      DependsOn: VPCInternetGatewayAttachment
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: VPCInternetGateway
        RouteTableId:
          Ref: RouteTable
    SubnetARouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        RouteTableId:
          Ref: RouteTable
        SubnetId:
          Ref: PrivateSubnet1
    SubnetBRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        RouteTableId:
          Ref: RouteTable
        SubnetId:
          Ref: PrivateSubnet2
    ServerlessSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: Vpc
    RDSSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: Producerly Serverless Security Group
        VpcId:
          Ref: Vpc
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            SourceSecurityGroupId:
              Ref: ServerlessSecurityGroup
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
        SecurityGroupEgress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
    RDSSubnetGroup:
      Type: 'AWS::RDS::DBSubnetGroup'
      Properties:
        DBSubnetGroupDescription: RDS Subnet Group
        SubnetIds:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
    RDSMySQLInstance:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        AllocatedStorage: 20
        AvailabilityZone: '${self:provider.region}a'
        DBInstanceClass: db.t2.micro
        DBName: '${self:custom.db_name}'
        DBSubnetGroupName:
          Ref: RDSSubnetGroup
        Engine: mysql
        EngineVersion: 5.6.40
        MasterUsername: root
        MasterUserPassword: '${self:custom.db_temp_root_password}'
        PubliclyAccessible: true
        VPCSecurityGroups:
          - 'Fn::GetAtt': RDSSecurityGroup.GroupId
functions:
  hello:
    handler: handler.hello
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  getMenuItem:
    handler: getMenuItem.main
    events:
      - http:
          method: get
          cors: true
          path: /menu_item
  postMenuItem:
    handler: postMenuItem.main
    events:
      - http:
          method: post
          cors: true
          path: /menu_item
  getMenuItemId:
    handler: getMenuItemId.main
    events:
      - http:
          method: get
          cors: true
          path: '/menu_item/{id}'
  patchMenuItemId:
    handler: patchMenuItemId.main
    events:
      - http:
          method: patch
          cors: true
          path: '/menu_item/{id}'
  deleteMenuItemId:
    handler: deleteMenuItemId.main
    events:
      - http:
          method: delete
          cors: true
          path: '/menu_item/{id}'
  getGallery:
    handler: getGallery.main
    events:
      - http:
          method: get
          cors: true
          path: /gallery
  postGallery:
    handler: postGallery.main
    events:
      - http:
          method: post
          cors: true
          path: /gallery
  deleteGalleryId:
    handler: deleteGalleryId.main
    events:
      - http:
          method: delete
          cors: true
          path: '/gallery/{id}'
plugins:
  - serverless_swagger
  - serverless-plugin-optimize
custom:
  swagger_file: ..\api\openapi.yaml
  optimize:
    include:
      - mysql2
    exclude:
      - mysql2
      - aws
    includePaths:
      - app/models
      - app/config
      - app/service
      - app/utils
      - node_modules/mysql2
  db_name: backdraft
  db_username: lambda
  db_temp_root_password: temppassword123456
package:
  individually: true
  excludeDevDependencies: false
