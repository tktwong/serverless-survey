# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tobaccobot

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: eu-west-1
  cfLogs: true

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can add packaging information here
#package:
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  botConversation:
    handler: src/serverless/index.botConversation
    events:
      - http:
          method: POST
          integration: lambda
          path: bot_conversation
          cors: true
  getBotConversation:
    handler: src/serverless/index.botConversation
    events:
      - http:
          method: GET
          integration: lambda
          path: bot_conversation
          cors: true
  dailyMessage:
    handler: src/serverless/index.dailyMessage
    events:
      - schedule:
            rate: cron(0 8 ? * * *)
            enabled: true
  setupTables:
    handler: src/serverless/index.setupTables
  subscribe:
    handler: src/serverless/index.subscribe
    events:
      - http:
          method: POST
          integration: lambda
          path: subscribe
          cors: true
  reportData:
    handler: src/serverless/index.reportData
    events:
        - http:
            method: POST
            integration: lambda
            path: report_data
            cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

# you can add CloudFormation resource templates here
resources:
  Resources:
    DynamoDbSmokerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: smoker
        AttributeDefinitions:
          - AttributeName: phone
            AttributeType: S
        KeySchema:
          - AttributeName: phone
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBSmokerIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbSmokerTable
      Properties:
        PolicyName: lambda-dynamodb-smoker
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Scan
              Resource: arn:aws:dynamodb:*:*:table/smoker
        Roles:
          - Ref: IamRoleLambdaExecution
    DynamoDbArchiveTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: archive
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBArchiveIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbArchiveTable
      Properties:
        PolicyName: lambda-dynamodb-archive
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Scan
              Resource: arn:aws:dynamodb:*:*:table/archive
        Roles:
          - Ref: IamRoleLambdaExecution
plugins:
  - serverless-webpack
  - serverless-offline
custom:
  webpack: ./webpack.config.serverless.js
  serverless-offline:
    babelOptions:
      presets: ["es2015-node4", "es2016"]
      plugins: ["add-module-exports", "transform-runtime"]
