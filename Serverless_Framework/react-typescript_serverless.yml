service: react-typescript-starter

plugins:
  - serverless-deployment-bucket
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-webpack
  - vf-build-apps
  - vf-setup-cognito
  - vf-deploy-apps

package:
  individually: true

provider:
  name: aws
  config: ${file(config/${self:provider.stage}.yml)}
  stage: ${opt:stage}
  runtime: nodejs12.x
  region: ${self:provider.config.region, 'us-east-1'}
  profile: ${opt:profile, ''}
  stackName: ${self:service}-${self:provider.stage}${self:provider.config.feature}

custom:
  identityProviderName: ${self:provider.config.identityProviderName}
  cognitoDomain: ${self:provider.config.cognitoDomain}
  webAppConfig:
    screen-share:
      webAppEntryPoint: apps/react-starter
      webAppDeploymentBucket: ${self:provider.config.webAppBucket}
      framework: react

functions:
  hello:
    handler: lambdas/hello.handler
    name: ${self:provider.stackName}-hello
  admin:
    handler: lambdas/admin.handler
    name: ${self:provider.stackName}-admin
resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:provider.stackName}-UserPool
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: "OFF"
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: ${self:provider.config.samlAuth}
            Required: true

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        GenerateSecret: false
        UserPoolId:
          Ref: CognitoUserPool

    CognitoIdentityPool:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ${self:service}${self:provider.stage}${self:provider.config.feature}Identity
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [ CognitoUserPool, ProviderName ]

    CognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName:  ${self:provider.stackName}-AuthRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:InvokeFunction"
                  Resource:
                    - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.stackName}-hello
    UserPoolGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      DependsOn: CognitoUserPool
      Properties:
        GroupName: ${self:provider.config.cognitoAdminGroup}
        Description: "User with admin priveleges can create/modify posts and moderate comments"
        Precedence: 0
        UserPoolId:
          Ref: CognitoUserPool
        RoleArn: arn:aws:iam::#{AWS::AccountId}:role/${self:provider.stackName}-AdminRole

    AdminUserRole:
        Type: "AWS::IAM::Role"
        Properties:
          RoleName: ${self:provider.stackName}-AdminRole
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Principal:
                  Federated: "cognito-identity.amazonaws.com"
                Action:
                  - "sts:AssumeRoleWithWebIdentity"
                Condition:
                  StringEquals:
                    "cognito-identity.amazonaws.com:aud":
                      Ref: CognitoIdentityPool
                  "ForAnyValue:StringLike":
                    "cognito-identity.amazonaws.com:amr": authenticated
          Policies:
            - PolicyName: "AdminCognitoAuthVmail"
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action:
                      - "lambda:InvokeFunction"
                    Resource: 
                      - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.stackName}-hello
                      - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:provider.stackName}-admin
    IdentityPoolRoleMapping:
      DependsOn: CognitoIdentityPool
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthorizedRole, Arn]

  Outputs:
    Region:
      Value: ${self:provider.region}
    SAMLAuth:
      Value: ${self:provider.config.samlAuth}
    CognitoUserPoolId:
      Value:
        Ref: CognitoUserPool
    CognitoUserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
    CognitoIdentityPoolId:
      Value:
        Ref: CognitoIdentityPool
    CognitoDomain:
      Value: ${self:provider.config.cognitoDomain}
    CognitoAuthRole:
      Value: !GetAtt CognitoAuthorizedRole.Arn
    CognitoAdminGroup:
      Value: ${self:provider.config.cognitoAdminGroup}
    IdentityProviderName:
      Value: ${self:provider.config.identityProviderName}
    WebDomain:
      Value: ${self:provider.config.webDomain}
    AdminLambda:
      Value:
        Ref: AdminLambdaFunction
    HelloLambda:
      Value:
        Ref: HelloLambdaFunction