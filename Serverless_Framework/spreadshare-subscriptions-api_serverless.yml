frameworkVersion: "=1.28.0"

service: subscriptions-api

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-offline:
    babelOptions:
      presets: ["env", "flow"]
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: subscriptions-local
            sources: [./testSeedData/subscriptions.json]

provider:
  name: aws
  profile: ${opt:profile, 'spreadshare'}
  runtime: nodejs8.10
  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'eu-central-1'}
  apiKeys:
    - ${self:provider.stage}-subscriptions-apikey
  memorySize: 512
  timeout: 30
  versionFunctions: false
  environment: ${file(env.yml):${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}/index/*"

functions:
  subscribe:
    handler: src/handlers/subscribe.handler
    description: Subscribe user to a given stream
    events:
      - http:
          method: post
          path: /{userId}/subscriptions/{streamId}
          cors: true
          private: true
  unsubscribe:
    handler: src/handlers/unsubscribe.handler
    description: Unsubscribe user from a given stream channel
    events:
      - http:
          method: delete
          path: /{userId}/subscriptions/{streamId}/{channel}
          cors: true
          private: true
  getSubscription:
    handler: src/handlers/get.handler
    description: Fetch a single subscription for user and streamId given a channel
    events:
      - http:
          method: get
          path: /{userId}/subscriptions/{streamId}/{channel}
          cors: true
          private: true
  getAllSubscriptionsForUser:
    handler: src/handlers/getAllForUser.handler
    description: Fetch all user subscriptions
    events:
      - http:
          method: get
          path: /{userId}/subscriptions
          cors: true
          private: true
  getAllSubscriptionsForStream:
    handler: src/handlers/getAllForStream.handler
    description: Fetch all subscriptions for a stream
    events:
      - http:
          method: get
          path: /subscriptions/{streamId}
          cors: true
          private: true

package:
  individually: true

resources:
  Conditions:
    CreateTable:
      Fn::Equals:
        - ${opt:stage}
        - local
  Resources:
    SubscriptionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Condition: CreateTable
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: channelId
            AttributeType: S
          - AttributeName: streamId
            AttributeType: S
          - AttributeName: channelFrequency
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: channelId
            KeyType: RANGE
        GlobalSecondaryIndexes: 
          - IndexName: channel-frequency-stream-index
            KeySchema:
              - AttributeName: channelFrequency
                KeyType: HASH
              - AttributeName: streamId
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        