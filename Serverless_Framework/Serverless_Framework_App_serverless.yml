service:
  name: serverless-udagram-app

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  # 환경변수에 이 값을 추가해도 되지만 여기서는 custom 섹션에 토픽이름을 추가했다.
  # 람다 함수에게 이 값을 전달해도 되지 않기 때문이다.
  # 이 파일의 다른 부분에서 이 섹션의 값들을 사용할 수 있다.
  topicName: imagesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    GROUPS_TABLE: Groups-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGE_ID_INDEX: ImageIdIndex
    IMAGES_S3_BUCKET: serverless-udagram-${self:provider.stage}
    THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnail2-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    # 웹소켓 커넥션 ID를 저장하기 위한 DB 테이블
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    #AUTH_0_SECRET: 3hmDflLF1bY48JBTgzSca1VzDx0GM_6YbZI-84KSDXWKoEVAecX85u7mGVEyayxg
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret

  # 사용자가 명령어를 실행할 때 전달한 stage 라는 옵션이 있다면
  # 이를 사용하고 없다면 dev 를 사용한다.
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        # groupId로 한 group의 이미지들 쿼리할 수 있는 권한
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    # Query 하기 위한 권한 추가
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}

    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}

    # 람다함수가 S3에 업로드를 할 수 있도록하고 presignedUrl을 생성할 수 있도록 권한 추가
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*

    # 커넥션 테이블에 연결되는 웹소켓 스캔, 추가, 삭제 Iam 권한 추가
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn

functions:
  Auth:
    handler: src/lambda/auth/authOAuthorizer.handler
  GetGroups:
    handler: src/lambda/http/getGroups.handler
    #connect function to event source
    events:
      - http:
          method: get
          path: groups
          cors: true

  CreateGroups:
    handler: src/lambda/http/createGroups.handler
    events:
      - http:
          method: post
          path: groups
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schema:
              application/json: ${file(models/create-groups-request.json)}
          documentation:
            summary: Create a new group
            description: Create a new group

  GetImages:
    handler: src/lambda/http/getImages.handler
    events:
      - http:
          method: get
          path: groups/{groupId}/images
          cors: true

  GetImage:
    handler: src/lambda/http/getImage.handler
    events:
      - http:
          method: get
          path: images/{imageId}
          cors: true

  CreateImage:
    handler: src/lambda/http/createImage.handler
    events:
      - http:
          method: post
          path: groups/{groupId}/images
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schema:
              application/json: ${file(models/create-image-request.json)}
          documentation:
            summary: Create a new image
            description: Create a new image

  SendUploadNotifications:
    # 환경변수를 글로벌 스코프에 정의하는 것이 아니라 다음과 같이
    # 람다함수 안에서 정의하면 이 함수에서만 사용할 수 있다
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    # 기존에 s3 버켓으로부터 이벤트를 받아서 핸들러를 호출했었다면
    # 아래의 이벤트 정의를 통해 SNS의 해당 토픽에서 발생한 이벤트로 이 핸들러를 호출한다.
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}

  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}

  ConnectionHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect

  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  SyncWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt ImagesSearch.DomainEndpoint
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ImagesDynamoDBTable.StreamArn

resources:
  Resources:
    # 커스텀 authorizer 가 인증 실패시 알맞는 Cors 헤더를 셋팅하여 응답으로 보내줌
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Header: "'Content-Type, X-Amz-Date, Authorization'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    # API 게이트웨이에서 요청 검증을 하기 위한 요청 body 검증 리소스 추가
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        #요청 body만 검증하고 파라미터는 검증하지 않는다.
        ValidateRequestBody: true
        ValidateRequestParameters: false

    WSConnectionDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    GroupsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GROUPS_TABLE}

    ImagesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
            KeySchema:
              - AttributeName: imageId
                KeyType: HASH
            # 기존 테이블 데이터의 어떤 속성들을 GSI의 결과로 생성되는 테이블에 복사할지
            # 지정하는 부분. 여기서는 모든 속성들을 복사
            Projection:
              ProjectionType: ALL
        # 데이터 스트림 enable
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGES_TABLE}

    # 어플리케이션에 S3 버켓으로 요청을 보냈을 때 S3 버켓이
    # cors 헤더를 알맞게 추가할 수 있도록 관련 설정들 추가
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}

        # S3 버켓으로부터 발생한 이벤트를 람다함수에 보내는 것이 아니라
        # 아래에 정의한 imagesTopic에 이벤트를 보낸다.
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
          # S3 버켓으로 부터 발생한 이벤트를 람다함수와 연결하기 위한 설정
          #LambdaConfigurations:
          #- Event: s3:ObjectCreated:*
          #이벤트 발생시 호출할 람다함수
          #CloudFormation의 GetAttribute 함수를 사용하여
          #SendUploadNotificationsLambdaFunction 함수로부터 Arn을 얻어온다. ?
          #Function: !GetAtt SendUploadNotificationsLambdaFunction.Arn
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ThumbNailImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}

        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # 람다함수를 호출할 수 있는 람다권한 추가
    SendUploadNotificationsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref SendUploadNotificationsLambdaFunction
        #s3만 이 함수를 호출할 수 있음
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        #s3 버켓의 소유자 계정Id
        SourceAccount: !Ref AWS::AccountId
        #s3 버켓중에서도 이 버켓만 이 함수를 호출할 수 있음
        SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}

    # 모든 사용자가 이 버켓에서 이미지를 읽을 수 있도록 정책 추가
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        # 어떤 S3 버켓에 이 정책을 추가할지 지정
        Bucket: !Ref AttachmentsBucket

    #S3 버켓이 이 토픽에게 이벤트를 보낼 수 있도록 정책 설정
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: sns:Publish
              Resource: !Ref ImagesTopic
              #S3 버켓만 이벤트를 보낼수 있도록 설정
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic

    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}

    ImagesSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: images-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        # Elastic Block Store(EBS)
        # 이 클러스터 노드를 위한 저장소 enabled
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ':'
                    - - 'arn:aws:iam:'
                      - Ref: AWS::AccountId
                      - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey
