# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: video-typing
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  stage: dev
  region: ap-northeast-1
  environment:
    VIDEO_TYPING_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    LAMBDA_REGION: ${self:region, self:provider.region}
    REAL_VIDEO_SOURCE_LAMBDA_NAME: ${self:functions.getVideoFromUrl.name}
    CACHE_VIDEO_SOURCE_LAMBDA_NAME: ${self:functions.getVideoCacheFromUrl.name}
    SAVE_VIDEO_SOURCE_LAMBDA_NAME: ${self:functions.saveVideoCache.name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - lambda:InvokeFunction
      Resource: "*"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  getVideoService:
    runtime: nodejs10.x
    memorySize: 128
    name: ${self:service}-${self:provider.stage}-video-from-url-service
    timeout: 30
    description: get video services controller
    handler: api/user.getVideoService
    events:
      - http:
         path: user/get-video-source
         method: post
         cors: true
  getVideoFromUrl:
    runtime: python3.8
    memorySize: 128
    name: ${self:service}-${self:provider.stage}-video-from-url-real
    timeout: 30 # api gateway allow up to 30 sec
    description: get video source infromation from your video url
    handler: python_api/handler.get_sources
    # events:
    #   - http:
    #      path: user/get-video-source-real
    #      method: post
    #      cors: true
  saveVideoCache:
    runtime: nodejs10.x
    handler: api/user.saveVideoCache
    memorySize: 128
    name: ${self:service}-${self:provider.stage}-video-from-url-save-a
    description: save video source information for local table
    # events:
    #  - http:
    #     path: user/save-video-source
    #     method: post
    #     cors: true
  getVideoCacheFromUrl:
    runtime: nodejs10.x
    handler: api/user.getVideoCache
    memorySize: 128
    name: ${self:service}-${self:provider.stage}-video-from-url-cache-a
    description: get video source cache information using local table 
    # events:
    #   - http:
    #      path: user/get-video-source-cache
    #      method: post
    #      cors: true
       
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    VideoTypingVideoSourceDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.VIDEO_TYPING_TABLE}

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
