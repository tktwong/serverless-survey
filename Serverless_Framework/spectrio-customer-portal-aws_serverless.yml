service: spectrio-portal # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  stackTags:
    STACK: ${self:service}
    STAGE: ${opt:stage, self:provider.stage}
 #timeout: 30 # optional, in seconds, default is 6
  environment:
    CALL_LOG_RENTENTION_MONTHS: ${opt:stage, '3'}
    SHARED_KEY: S2B4PFPiQKPCVoPU4l8EM8A3AsIGCXVXVfEbcTXB7sZsYqjJpJ58qVNbHzHCbt2
    DYNAMODB_CUSTOMERS_TABLE: wifi-${opt:stage, self:provider.stage}-customers
    DYNAMODB_VENUES_TABLE: wifi-${opt:stage, self:provider.stage}-venues
    DYNAMODB_VENUE_DAILY_TOTALS_TABLE: wifi-${opt:stage, self:provider.stage}-venue-daily-totals
    DYNAMODB_VISITS_TABLE: wifi-${opt:stage, self:provider.stage}-visits
    DYNAMODB_VISITORS_TABLE: wifi-${opt:stage, self:provider.stage}-visitors
    ELASTICSEARCH_CALL_LOG_INDEX: voip-${opt:stage, self:provider.stage}-calllogs
    REGION: us-east-1
    STAGE: dev
    ELASTIC_URL:
      Fn::GetAtt: [ CallLogESDomain , DomainEndpoint ]
    DROP_CALL_LOGS_TOPIC:
      Fn::Join:
        - ":"
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - dropCallLogs-${opt:stage, self:provider.stage}
    IMPORT_CALL_LOGS_TOPIC:
      Fn::Join:
        - ":"
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - importCallLogs-${opt:stage, self:provider.stage}
    AGGREGATE_CUSTOMER_VISITORS_TOPIC:
      Fn::Join:
        - ":"
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - aggregateCustomerVisitors-${opt:stage, self:provider.stage}
    AGGREGATE_VISITORS_TOPIC:
      Fn::Join:
        - ":"
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - aggregateCustomerVenueVisitors-${opt:stage, self:provider.stage}
    AGGREGATE_VENUE_VISITORS_TOPIC:
      Fn::Join:
        - ":"
        - - arn
          - aws
          - sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - aggregateVenueVisitors-${opt:stage, self:provider.stage}
  region: ${self:provider.environment.REGION}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "es:*"
      Resource: "*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sns:*"
functions:
  purpleProxy:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/proxy.default
    name: ${self:service}-${opt:stage, self:provider.stage}-purple-wifi-proxy
    timeout: 29
    events:
      - http:
          path: purple-wifi-proxy
          method: get
          cors: true
  triggerWifiAggregateCustomerDailyTotals:
    tags:
      STACK: ${self:service}:${opt:stage, self:provider.stage}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/aggregate.calculateVenuesDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-wifi-trig-calc-venues-totals
    timeout: 300
    events:
      - http:
          path: wifi-trigger-calc-venues-totals
          method: get
          cors: true
      - sns: aggregateCustomerVenueVisitors-${opt:stage, self:provider.stage}
  wifiAggregateVenueDailyTotals:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/aggregate.calculateVenueDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-wifi-calc-venue-totals
    timeout: 300
    events:
      - http:
          path: wifi-calc-venue-daily-totals
          method: get
          cors: true
      - sns: aggregateVenueVisitors-${opt:stage, self:provider.stage}
  wifiTriggerAggregateAllCustomerVenuesDailyTotals:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/aggregate.calculateAllVenuesDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-wifi-trig-calc-cust-venues-totals
    timeout: 300
    events:
      - http:
          path: wifi-trigger-calc-cust-venues-totals
          method: get
          cors: true
      - schedule: cron(0 1 * * ? *)
  wifiAggregateCustomerDailyTotals:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/aggregate.calculateCustomerDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-wifi-calc-cust-totals
    timeout: 300
    events:
      - http:
          path: wifi-calculate-cust-totals
          method: get
          cors: true
      - sns: aggregateCustomerVisitors-${opt:stage, self:provider.stage}
  wifiTriggerAggregateTotalCustomerDailyTotals:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/aggregate.calculateAllCustomerDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-wifi-trigger-calc-all-cust-totals
    timeout: 300
    events:
      - http:
          path: wifi-trigger-aggregate-cust-totals
          method: get
          cors: true
      - schedule: cron(0 3 * * ? *)
  wifiFetchVenueDailyTotals:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/aggregate.fetchVenueDailyTotals
    name: ${self:service}-${opt:stage, self:provider.stage}-wifi-fetch-venue-totals
    timeout: 300
    events:
      - http:
          path: wifi-fetch-venue-totals
          method: get
          cors: true
  wifiSearch:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/aggregate.search
    name: ${self:service}-${opt:stage, self:provider.stage}-wifi-search
    timeout: 29
    events:
      - http:
          path: wifi-search
          method: get
          cors: true
      - http:
          path: wifi-search
          method: post
          cors: true
  wifiInit:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/calllog.init
    name: ${self:service}-${opt:stage, self:provider.stage}-wifi-init
    timeout: 29
    events:
      - http:
          path: wifi-init
          method: get
          cors: true
  customer:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/customer.default
    name: ${self:service}-${opt:stage, self:provider.stage}-customer
    events:
      - http:
          path: customer/{id}
          method: get
          cors: true
      - http:
          path: customer/{id}
          method: post
          cors: true
      - http:
          path: customer/{id}
          method: put
          cors: true
      - http:
          path: customer/{id}
          method: delete
          cors: true
  customers:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/customer.default
    name: ${self:service}-${opt:stage, self:provider.stage}-customers
    events:
      - http:
          path: customers
          method: get
          cors: true
  callLog:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/calllog.search
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-search
    timeout: 29
    events:
      - http:
          path: call-log-search
          method: get
          cors: true
      - http:
          path: call-log-search
          method: post
          cors: true
  callLogAggregate:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/calllog.aggregate
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-aggregate
    timeout: 29
    events:
      - http:
          path: call-log-aggregate
          method: get
          cors: true
  callLogUpdateInit:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/calllog.init
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-init
    timeout: 29
    events:
      - http:
          path: call-log-init
          method: get
          cors: true
  callLogDrop:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/calllog.drop
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-drop
    timeout: 29
    events:
      - http:
          path: call-log-drop
          method: get
          cors: true
      - sns: dropCallLogs-${opt:stage, self:provider.stage}
  triggerCallLogDrops:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/calllog.triggerCallLogDrops
    name: ${self:service}-${opt:stage, self:provider.stage}-trigger-call-log-drops
    timeout: 300
    events:
      - http:
          path: trigger-call-log-drops
          method: get
          cors: true
      - schedule: cron(0 2 1 * ? *)
  callLogDropAll:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/calllog.dropAll
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-drop-all
    timeout: 29
    events:
      - http:
          path: call-log-drop-all
          method: get
          cors: true
  callLogImport:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/calllog.import
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-import
    timeout: 300
    events:
      - http:
          path: call-log-import
          method: get
          cors: true
      - sns: importCallLogs-${opt:stage, self:provider.stage}
  callLogImportAll:
    tags:
      STACK: ${self:service}
      STAGE: ${opt:stage, self:provider.stage}
    handler: /handlers/calllog.importAll
    name: ${self:service}-${opt:stage, self:provider.stage}-call-log-import-all
    timeout: 300
    events:
      - http:
          path: call-log-import-all
          method: get
          cors: true
      - schedule: cron(0 1 * * ? *)

resources:
  Resources:
    CustomersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_CUSTOMERS_TABLE}
    VenuesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: customerId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_VENUES_TABLE}-customer-index
            KeySchema:
              -
                AttributeName: customerId
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_VENUES_TABLE}
    VenueDailyTotalsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: customerId
            AttributeType: S
          -
            AttributeName: customerVenueId
            AttributeType: S
          -
            AttributeName: date
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_VENUE_DAILY_TOTALS_TABLE}-customer-index
            KeySchema:
              -
                AttributeName: customerId
                KeyType: HASH
              -
                AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
          - IndexName: ${self:provider.environment.DYNAMODB_VENUE_DAILY_TOTALS_TABLE}-customer-venue-index
            KeySchema:
              -
                AttributeName: customerVenueId
                KeyType: HASH
              -
                AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_VENUE_DAILY_TOTALS_TABLE}
    VisitsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: customerId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_VISITS_TABLE}-customer-index
            KeySchema:
              -
                AttributeName: customerId
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_VISITS_TABLE}
    VisitorsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: customerId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DYNAMODB_VISITORS_TABLE}-customer-index
            KeySchema:
              -
                AttributeName: customerId
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1            
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_VISITORS_TABLE}
    CallLogESDomain:
      Type: "AWS::Elasticsearch::Domain"
      Properties: 
        DomainName: ${self:provider.environment.ELASTICSEARCH_CALL_LOG_INDEX}
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp2
          VolumeSize: 10
        ElasticsearchClusterConfig:
          InstanceType: t2.small.elasticsearch
          InstanceCount: 1
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false
        ElasticsearchVersion: 6.2
