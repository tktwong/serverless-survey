service: lambda
app: SolicitationLambdaQuarkus-1.0-SNAPSHOT

provider:
  name: aws
  runtime: java8
  stage: dev
  region: sa-east-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here

package:
  artifact: target/function.zip

functions:
  solicitation:
    handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest 
            #not.used.in.provided.runtime
    runtime: provided
    codeUri: target/function.zip
    environment:
       DISABLE_SIGNAL_HANDLERS: true
    events:
      - http:
          path: /users
          method: post

      - http:
          path: /users
          method: get

      - http:
          path: /users/{userId}
          method: get

      - http:
          path: /users/{userId}
          method: delete

Resources:
  NotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'Users'
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      # Set the capacity to auto-scale
      BillingMode: PAY_PER_REQUEST

#        Outputs:
#          ApiUrl:
#            Description: URL of the users listing in the prod stage
#            Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/users"
#functions:
#  hello:
#    handler: com.serverless.Handler
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: post
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
