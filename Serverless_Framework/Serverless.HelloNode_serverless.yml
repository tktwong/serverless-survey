# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: HelloNode
#app: your-app-name
#tenant: your-tenant-name

plugins:
  - serverless-step-functions
  - serverless-localstack
  - serverless-offline

custom:
  stage: ${opt:stage, 'dev'}
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - local
    host: http://localhost  # optional - LocalStack host to connect to
    # autostart: true  # optional - start LocalStack in Docker on Serverless deploy
    debug: true
    endpoints:
    #   # This section is optional - can be used for customizing the target endpoints
    #   DynamoDB: http://localhost:4570
    #   CloudFormation: http://localhost:4581
    #   SNS: http://localhost:4575
    #   SQS: http://localhost:4576
    #   Lambda: http://localhost:4574
    #   StepFunctions: http://localhost:8083
    #   S3: http://localhost:4572
    # lambda:
    #   # Enable this flag to improve performance
    #   mountCode: True

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    environment:
      LOCALSTACK_HOSTNAME: localstack
  checkoutPsp:
    handler: handler.checkout

stepFunctions:
  stateMachines:
    helloStateMachine:
      name: HelloWorldStateMachine
      definition:
        StartAt: Hello
        States:
          Hello:
            Type: Task
            Resource: 
              Fn::GetAtt: [hello, Arn]
            Next: Checkout
          Checkout:
            Type: Task
            Resource:
              Fn::GetAtt: [checkoutPsp, Arn]
            Next: FinalState
          FinalState:
            Type: Parallel
            End: true
            Branches:
            - StartAt: Ok
              States:
                Ok:
                  Type: Pass
                  Result: "The request has succeeded."
                  End: true
            # - StartAt: PersistRequest
            #   States:
            #     PersistRequest:
            #       Type: Task
            #       Resource: "arn:aws:states:::dynamodb:putItem"
            #       Parameters:
            #         TableName: "HelloWorld123"
            #         ReturnConsumedCapacity: "TOTAL"
            #         Item: { 
            #           "Id": {"S.$": "$.id"}, 
            #         }
            #       End: true        


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
