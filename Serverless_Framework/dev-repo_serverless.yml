# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: makeupbox
# app and org for use with dashboard.serverless.com
app: makeupbox
org: mymakeupbox

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan*
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-user-${opt:stage, self:provider.stage, 'dev'}/index/${self:service}-user-${opt:stage, self:provider.stage, 'dev'}-index
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-user-${opt:stage, self:provider.stage, 'dev'}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-usertools-${opt:stage, self:provider.stage, 'dev'}/index/${self:service}-usertools-${opt:stage, self:provider.stage, 'dev'}-index
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-usertools-${opt:stage, self:provider.stage, 'dev'}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-dialog-${opt:stage, self:provider.stage, 'dev'}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-purchases-${opt:stage, self:provider.stage, 'dev'}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-favourite-${opt:stage, self:provider.stage, 'dev'}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-interaction-history-${opt:stage, self:provider.stage, 'dev'}
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-routine-${opt:stage, self:provider.stage, 'dev'}
#   Allows the cloud watch scheduled event to keep the lambda warm 
#   needs permission to invoke lambdas (itself)
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: '*'
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    USERS_TABLE: ${self:service}-user-${opt:stage, self:provider.stage, 'dev'}
    USERS_INDEX: ${self:service}-user-${opt:stage, self:provider.stage, 'dev'}-index
    TOOLS_TABLE: ${self:service}-usertools-${opt:stage, self:provider.stage, 'dev'}
    TOOLS_INDEX: ${self:service}-usertools-${opt:stage, self:provider.stage, 'dev'}-index
    DIALOG_TABLE: ${self:service}-dialog-${opt:stage, self:provider.stage, 'dev'}
    PURCHASES_TABLE: ${self:service}-purchases-${opt:stage, self:provider.stage, 'dev'}
    FAVOURITE_TABLE: ${self:service}-favourite-${opt:stage, self:provider.stage, 'dev'}
    INTERACTION_TABLE: ${self:service}-interaction-history-${opt:stage, self:provider.stage, 'dev'}
    ROUTINE_TABLE: ${self:service}-routine-${opt:stage, self:provider.stage, 'dev'}
# you can add packaging information here
package:
  exclude:
    - node_modules/**
  excludeDevDependencies: false
  individually: true

plugins:
  - serverless-plugin-include-dependencies
  - serverless-plugin-common-excludes
  - serverless-pseudo-parameters

#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  index:
    handler: index.handler
    name: ${self:service}-user-handler-${opt:stage, self:provider.stage, 'dev'}
    memorySize: 256 # memorySize for this specific function.
    timeout: 10
    description: User lambda function
    events:
      - http:
          path: /v1/user/getUserById
          method: get
          cors: true
          integration: lambda
      - http:
          path: /v1/user/checkSubscriberById
          method: get
          cors: true
          integration: lambda
      - http:
          path: /v1/user/updateSubscriber
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/user/getPurchases
          method: get
          cors: true
          integration: lambda
      - http:
          path: /v1/user/addNewUser
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/user/getUserTools
          method: get
          cors: true
          integration: lambda
      - http:
          path: /v1/user/addNewUserTool
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/user/addSkinTone
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/user/addEyeShape
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/user/updateUsageCount
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/user/userLogin
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/user/getUserLevel
          method: get
          cors: true
          integration: lambda
  purchases:
    handler: index.handler
    name: ${self:service}-purchases-handler-${opt:stage, self:provider.stage, 'dev'}
    memorySize: 256 # memorySize for this specific function.
    timeout: 10
    description: Purchases lambda function
    events:
      - http:
          path: /v1/purchases/addNewPurchase
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/purchases/getLatestPurchaseByUserId
          method: get
          cors: true
          integration: lambda
  interactionHistory:
    handler: index.handler
    name: ${self:service}-interactionHistory-handler-${opt:stage, self:provider.stage, 'dev'}
    memorySize: 256 # memorySize for this specific function.
    timeout: 10
    description: Interaction history lambda function
    events:
      - http:
          path: /v1/interaction/addNewInteraction
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/interaction/getInteractionsByUserId
          method: get
          cors: true
          integration: lambda
  favourite:
    handler: index.handler
    name: ${self:service}-favourite-handler-${opt:stage, self:provider.stage, 'dev'}
    memorySize: 256 # memorySize for this specific function.
    timeout: 10
    description: Favourite lambda function
    events:
      - http:
          path: /v1/favourite/addNewFavourite
          method: post
          cors: true
          integration: lambda
      - http:
          path: /v1/favourite/getFavouritesByUserId
          method: get
          cors: true
          integration: lambda
  dialog:
    handler: index.handler
    name: ${self:service}-dialog-handler-${opt:stage, self:provider.stage, 'dev'}
    memorySize: 256 # memorySize for this specific function.
    timeout: 10
    description: Dialog lambda function
    events:
      - http:
          path: /v1/dialog/getDialogByTag
          method: get
          cors: true
          integration: lambda
  routine:
    handler: index.handler
    name: ${self:service}-routine-handler-${opt:stage, self:provider.stage, 'dev'}
    memorySize: 256 # memorySize for this specific function.
    timeout: 10
    description: Routine lambda function
    events:
      - http:
          path: /v1/routine/getRoutineByTag
          method: post
          cors: true
          integration: lambda

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources: # CloudFormation template syntax
  Resources:
    routineTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:service}-routine-${opt:stage, self:provider.stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: routineId
            AttributeType: S
        KeySchema:
          - AttributeName: routineId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    favouriteTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:service}-favourite-${opt:stage, self:provider.stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N  
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    interactionHistoryTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:service}-interaction-history-${opt:stage, self:provider.stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N  
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    purchasesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:service}-purchases-${opt:stage, self:provider.stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N  
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    dialogTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:service}-dialog-${opt:stage, self:provider.stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: tag
            AttributeType: S
          - AttributeName: level
            AttributeType: N  
        KeySchema:
          - AttributeName: tag
            KeyType: HASH
          - AttributeName: level
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    userTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:service}-user-${opt:stage, self:provider.stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    toolsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:service}-usertools-${opt:stage, self:provider.stage, 'dev'}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
        - IndexName: ${self:service}-usertools-${opt:stage, self:provider.stage, 'dev'}-index
          KeySchema:
          - AttributeName: id
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
