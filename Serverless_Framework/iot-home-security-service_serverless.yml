service: serverless-security
frameworkVersion: '1'

provider:
  name: aws
  runtime: python3.8
  environment:
    DOMAIN_SUFFIX: rainbow-unicorn-fppzs
    CALLBACK_URL: https://iot-home-security-service.vercel.app/
    DYNAMODB_TABLE: rainbow-unicorn-fppzs
    # CA_CERT_ID: 2e49fc99eb0c4872e61f658745f93db5ef7403d076b32e57534d036e05bdecde
  iamRoleStatements:
    - Effect: Allow
      Action:
        - iot:GetThingShadow
        - iot:UpdateThingShadow
        - sns:Publish
        - iot:UpdateCertificate
        - iot:CreatePolicy
        - iot:CreateThing
        - iot:AttachPrincipalPolicy
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/sk-pk-index"
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

functions:
  getDeviceShadow:
    handler: handlers/get_device_shadow.handler
    events:
      - httpApi:
            method: GET
            path: /device/shadow
            authorizer: serviceAuthorizer
  processAlarm:
    handler: handlers/process_alarm.handler
    events:
        - iot:
            sql: "SELECT message, clientid() AS clientid FROM 'alarms/#'"

  # Uncomment the below code to leverage a custom just in time provisioning process
  # This acts as an alternative to the permissive-provisioning-template.json option
  # That option also requires the create_and_register_ca_cert.bash file with the
  # --allow-auto-registration and --registration-config options. This option, uses
  # a Lambda function handler instead to create policies and things and attach
  # certificates to those things.
  # provision:
  #   handler: handlers/jit_provisioning.handler
  #   runtime: nodejs12.x
  #   events:
  #     - iot:
  #         sql: "SELECT * FROM '$aws/events/certificates/registered/${self:provider.environment.CA_CERT_ID}'"

resources:
  - ${file(resources/cognito.yml)}
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/iot_provisioning_role.yml)}
  - Resources:
      HttpApi:
        DependsOn: ${file(resources/cognito.yml):serviceUserPool}

package:
  exclude:
    - venv/**
    - manufacturing/**