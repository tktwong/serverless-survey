service: reinvent-coursera-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  region: ${opt.region,'ap-south-1'}
  # We should know all the environments where we will deploy
  # This adjustment is just made so that in production stage prod- is not prefixed to table names
  # Here we are assuming that there are only 3 stages, and default is dev
  tableNamePrefix:
    dev: 'dev-'
    prod: ''
    test: 'test-'
    other: ''
  # Set the table name here so we can use it while testing locally
  categoryTableName: ${self:custom.tableNamePrefix.${self:custom.stage}}category
  instructorTableName: ${self:custom.tableNamePrefix.${self:custom.stage}}instructor
  courseTableName: ${self:custom.tableNamePrefix.${self:custom.stage}}course
  # Table name to be set in environment variable
  #CategoryTable, InstructorTable, CourseTable  are the logicalIDs also used when provisioning below  
  categoryTableRef: { "Ref": "CategoryTable" } 
  instructorTableRef: { "Ref": "InstructorTable" }
  courseTableRef: { "Ref": "CourseTable" }
  #To test locally comment previous and uncomment below
  #categoryTableRef: ${self:custom.categoryTableName}
  #instructorTableRef: ${self:custom.instructorTableName}
  #courseTableRef: ${self:custom.courseTableName}
  # Set the SNS topic name here so we can use it while testing locally
  snsTopicName: ${self:custom.tableNamePrefix.${self:custom.stage}}CourseNotificationTopic

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ${self.custom.region}
  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
  #    Resource: "arn:aws:dynamodb:ap-south-1:*:*"
      Resource:
        - "Fn::GetAtt": [ CategoryTable, Arn ]
        - "Fn::GetAtt": [ InstructorTable, Arn ]
        - "Fn::GetAtt": [ CourseTable, Arn ]
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  
functions:
  # Defines an HTTP API endpoint that calls the main function in createInstructor.js
  # - path: url path is /instructors
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createInstructor:
    handler: handlers/instructor/createInstructor.main
    name: ${self:custom.stage}-${self:service}-createInstructor
    environment:
      TABLE_NAME: ${self:custom.instructorTableRef}
    events:
      - http:
          path: instructors
          method: post
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getInstructor:
    # Defines an HTTP API endpoint that calls the main function in getInstructor.js
    # - path: url path is /instructors/{id}
    # - method: GET request
    handler: handlers/instructor/getInstructor.main
    name: ${self:custom.stage}-${self:service}-getInstructor
    environment:
      TABLE_NAME: ${self:custom.instructorTableRef}
    events:
      - http:
          path: instructors/{id}
          method: get
          cors: true
           #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  listInstructor:
    # Defines an HTTP API endpoint that calls the main function in listInstructor.js
    # - path: url path is /instructors
    # - method: GET request
    handler: handlers/instructor/listInstructor.main
    name: ${self:custom.stage}-${self:service}-listInstructor
    environment:
      TABLE_NAME: ${self:custom.instructorTableRef}
    events:
      - http:
          path: instructors
          method: get
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateInstructor:
    # Defines an HTTP API endpoint that calls the main function in updateInstructor.js
    # - path: url path is /instructors/{id}
    # - method: PATCH request
    handler: handlers/instructor/updateInstructor.main
    name: ${self:custom.stage}-${self:service}-updateInstructor
    environment:
      TABLE_NAME: ${self:custom.instructorTableRef}
    events:
      - http:
          path: instructors/{id}
          method: PATCH
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteInstructor:
    # Defines an HTTP API endpoint that calls the main function in deleteInstructor.js
    # - path: url path is /instructors/{id}
    # - method: DELETE request
    handler: handlers/instructor/deleteInstructor.main
    name: ${self:custom.stage}-${self:service}-deleteInstructor
    environment:
      TABLE_NAME: ${self:custom.instructorTableRef}
      COURSE_TABLE: ${self:custom.courseTableRef}
    events:
      - http:
          path: instructors/{id}
          method: delete
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  
  # Defines an HTTP API endpoint that calls the main function in createCategory.js
  # - path: url path is /category
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createCategory:
    handler: handlers/category/createCategory.main
    name: ${self:custom.stage}-${self:service}-createCategory
    environment:
      TABLE_NAME: ${self:custom.categoryTableRef}
    events:
      - http:
          path: category
          method: POST
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCategory:
    # Defines an HTTP API endpoint that calls the main function in getCategory.js
    # - path: url path is /category/{id}
    # - method: GET request
    handler: handlers/category/getCategory.main
    name: ${self:custom.stage}-${self:service}-getCategory
    environment:
      TABLE_NAME: ${self:custom.categoryTableRef}
    events:
      - http:
          path: category/{id}
          method: GET
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  listCategory:
    # Defines an HTTP API endpoint that calls the main function in listCategory.js
    # - path: url path is /category
    # - method: GET request
    handler: handlers/category/listCategory.main
    name: ${self:custom.stage}-${self:service}-listCategory
    environment:
      TABLE_NAME: ${self:custom.categoryTableRef}
    events:
      - http:
          path: category
          method: GET
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCategory:
    # Defines an HTTP API endpoint that calls the main function in updateInstructor.js
    # - path: url path is /category/{id}
    # - method: PATCH request
    handler: handlers/category/updateCategory.main
    name: ${self:custom.stage}-${self:service}-updateCategory
    environment:
      TABLE_NAME: ${self:custom.categoryTableRef}
    events:
      - http:
          path: category/{id}
          method: PATCH
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteCategory:
    # Defines an HTTP API endpoint that calls the main function in deleteCategory.js
    # - path: url path is /category/{id}
    # - method: DELETE request
    handler: handlers/category/deleteCategory.main
    name: ${self:custom.stage}-${self:service}-deleteCategory
    environment:
      TABLE_NAME: ${self:custom.categoryTableRef}
      COURSE_TABLE: ${self:custom.courseTableRef}
    events:
      - http:
          path: category/{id}
          method: DELETE
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Defines an HTTP API endpoint that calls the main function in createCourse.js
  # - path: url path is /course
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createCourse:
    handler: handlers/course/createCourse.main
    name: ${self:custom.stage}-${self:service}-createCourse
    environment:
      TABLE_NAME: ${self:custom.courseTableRef}
    events:
      - http:
          path: course
          method: post
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCourse:
    # Defines an HTTP API endpoint that calls the main function in getCourse.js
    # - path: url path is /course/{id}
    # - method: GET request
    handler: handlers/course/getCourse.main
    name: ${self:custom.stage}-${self:service}-getCourse
    environment:
      TABLE_NAME: ${self:custom.courseTableRef}
    events:
      - http:
          path: course/{id}
          method: GET
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  listCourse: 
    # Defines an HTTP API endpoint that calls the main function in listCourse.js
    # - path: url path is /course
    # - method: GET request
    handler: handlers/course/listCourse.main
    name: ${self:custom.stage}-${self:service}-listCourse
    environment:
      TABLE_NAME: ${self:custom.courseTableRef}
    events:
      - http:
          path: course
          method: GET
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCourse:
    # Defines an HTTP API endpoint that calls the main function in updateCourse.js
    # - path: url path is /course/{id}
    # - method: PATCH request
    handler: handlers/course/updateCourse.main
    name: ${self:custom.stage}-${self:service}-updateCourse
    environment:
      TABLE_NAME: ${self:custom.courseTableRef}
    events:
      - http:
          path: course/{id}
          method: PATCH
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteCourse:
    # Defines an HTTP API endpoint that calls the main function in deleteCourse.js
    # - path: url path is /course/{id}
    # - method: DELETE request
    handler: handlers/course/deleteCourse.main
    name: ${self:custom.stage}-${self:service}-deleteCourse
    environment:
      TABLE_NAME: ${self:custom.courseTableRef}
    events:
      - http:
          path: course/{id}
          method: DELETE
          cors: true
          #authorizer: aws_iam
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
              
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-tables.yml)}
    # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
# API Gateway Authorizer  
  - ${file(resources/api-gateway-authorizer.yml)}
# SNS Lambda Dyanmodb Stream mapping  
  - ${file(resources/dynamodb-lambda-sns-mapping.yml)}  