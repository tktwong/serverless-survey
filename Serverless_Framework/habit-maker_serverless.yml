org: jordanbourne
app: habit-maker
service: serverless-flask

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local

custom:
  userTableName: 'users-table-${self:provider.stage}'
  taskTableName: 'task-table-${self:provider.stage}'
  habitTableName: 'habit-table-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": [ "UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": [ "TaskDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": [ "HabitDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE: ${self:custom.userTableName}
    TASK_TABLE: ${self:custom.taskTableName}
    HABIT_TABLE: ${self:custom.habitTableName}

functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  # getUser:
  #   handler: wsgi.handler
  #   events:
  #     - http: 'GET /users/{proxy+}'
  # createUser:
  #   handler: wsgi.handler
  #   events:
  #     - http: 'POST /users'

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.userTableName}
    TaskDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: taskId
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: type
            AttributeType: S
          -
            AttributeName: dateDueISO
            AttributeType: S
        KeySchema:
          -
            AttributeName: taskId
            KeyType: HASH
          -
            AttributeName: dateDueISO
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: userIdIndexAll
            KeySchema:
            -
              AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: userIdDateRangeAll
            KeySchema:
            -
              AttributeName: userId
              KeyType: HASH
            -
              AttributeName: dateDueISO
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: typeIndexAll
            KeySchema:
            -
              AttributeName: type
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.taskTableName}
    HabitDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: habitId
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
          -
            AttributeName: frequency
            AttributeType: S
        KeySchema:
          -
            AttributeName: habitId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userIdIndex
            KeySchema:
            -
              AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: frequencyIndex
            KeySchema:
            -
              AttributeName: frequency
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.habitTableName}