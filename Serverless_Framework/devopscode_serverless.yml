service: fender

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-plugin-canary-deployments
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: migrations

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1
  environment:
    DYNAMODB_TABLE: ${self:service}-dynamodb-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - codedeploy:*
      Resource:
        - "arn:aws:codedeploy:${opt:region, self:provider.region}:*"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

resources:
  Outputs:
    ApiUrl:
      Description: "The API Gateway URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

# layers:
#   sharedCode:
#     path: SharedCode
#     name: ${self:provider.stage}-sharedCode
#     description: Handle all the code and data for this example
#     compatibleRuntimes:
#       - nodejs10.x
#     licenseInfo: MIT
#     allowedAccounts: # optional, a list of AWS account IDs allowed to access this layer.
#       - '*'
#     retain: false

functions:
  listRequests:
    handler: handler.list
    # layers:
    #   - { Ref: SharedCodeLambdaLayer }
    events:
      # - http:
      #     method: get
      #     path: /
      - http:
          method: get
          path: /{username}
          request:
            parameters:
              paths:
                username: true
    deploymentSettings:
      type: AllAtOnce
      alias: LiveList
  createRequest:
    handler: handler.create
    # layers:
    #   - { Ref: SharedCodeLambdaLayer }
    events:
      - http:
          method: post
          path: /
    deploymentSettings:
      type: AllAtOnce
      alias: LiveCreate
