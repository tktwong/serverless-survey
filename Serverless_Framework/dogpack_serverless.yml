service: dogpack

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  memorySize: 256
  environment:
    DYNAMODB_TABLE_DAYS: ${self:service}-${self:provider.stage}-DAYS
    DYNAMODB_TABLE_RSVPS: ${self:service}-${self:provider.stage}-RSVPS
    TWITTER_CONSUMER_KEY: ${self:custom.keys.consumer_key}
    TWITTER_CONSUMER_SECRET: ${self:custom.keys.consumer_secret}
    TWITTER_ACCESS_TOKEN_KEY: ${self:custom.keys.access_token_key}
    TWITTER_ACCESS_TOKEN_SECRET: ${self:custom.keys.access_token_secret}
    TWITTER_ID: ${self:custom.keys.twitter_id}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_DAYS}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_RSVPS}"

plugins:
  - serverless-plugin-chrome

custom:
  defaultStage: dev
  profiles:
    dev: dogpackDev
    prod: dogpackProd
  keys: ${file(../dogpack-keys.${self:provider.stage}.json)}
  chrome:
    functions:
      - postReminder

functions:
  postReminder:
    handler: src/postReminder.default
    timeout: 30
    memorySize: 512
    events:
      - schedule:
          name: post-reminder
          description: 'Post reminder tweet'
          rate: cron(0 * * * ? *)

  postEvent:
    handler: src/postEvent.default
    events:
      - schedule:
          name: post-event
          description: 'Post event tweet'
          rate: cron(0 * * * ? *)

  postRSVPs:
    handler: src/postRSVPs.default
    events:
      - schedule:
          name: post-RSVPs
          description: 'Tally responses and post update tweet'
          rate: cron(0 * * * ? *)

  crcHook:
    handler: src/crcCheck.default
    events:
      - http:
          path: ${self:custom.keys.webhook_name}
          method: get

  dmHook:
    handler: src/dmHook.default
    events:
      - http:
          path: ${self:custom.keys.webhook_name}
          method: post

resources:
  Resources:
    DaysDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: Date
            AttributeType: S
        KeySchema:
          - AttributeName: Date
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_DAYS}

    RSVPSDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: Date
            AttributeType: S
          - AttributeName: UserID
            AttributeType: S
        KeySchema:
          - AttributeName: Date
            KeyType: HASH
          - AttributeName: UserID
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_RSVPS}

package:
  exclude:
    - scripts/**
