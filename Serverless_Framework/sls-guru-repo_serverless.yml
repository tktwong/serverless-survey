service: sls-guru

plugins:
  - serverless-plugin-additional-stacks
  - serverless-iam-roles-per-function
  - serverless-plugin-include-dependencies
  - serverless-offline
  - serverless-appsync-plugin
  # - serverless-domain-manager  //commenting out custom domain because certificate validation is pending

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  stage: ${opt:stage, "test"}
  memorySize: 128
  timeout: 60
  endpoint: regional

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name
  base: ${self:service}-${self:provider.stage}
  accountId: "959879116503"
  dynamoDBTableName: ${self:custom.base}-ListItems
  dynamoDBStackName: ${self:custom.base}-DynamoDBStack
  # customDomain:
  #   domainName: rjfinancialgroup.com
  #   basePath: 'v1'
  #   stage: ${self:provider.stage}
  #   certificateName: rjfinancialgroup.com
  #   createRoute53Record: true
  role:
    arn: arn:aws:iam::${self:custom.accountId}:role
    dynamodb:
      name: ${self:custom.base}-DynamoDB-AppSyncServiceRole
      arn: ${self:custom.role.arn}/${self:custom.role.dynamodb.name}
    lambda:
      name: ${self:custom.base}-Lambda-AppSyncServiceRole
      arn: ${self:custom.role.arn}/${self:custom.role.lambda.name}
    logging:
      name: ${self:custom.base}-Logging-AppSyncServiceRole
      arn:
        Fn::GetAtt:
          - AppSyncLoggingServiceRole
          - Arn
  additionalStacks:
    dynamoDBResources:
      Deploy: Before
      StackName: ${self:custom.dynamoDBStackName}
      Resources: ${file(resources/dynamo-table.yml)}
# functions:
#   add-list-item:
#     handler: ApiGatewayLambdaHandlers/add-list-item.handler
#     description: POST /list-item
#     events:
#       - http:
#           path: list-item
#           method: post
#           cors:
#             origin: "*"
#             headers: ${self:custom.allowedHeaders}
#   update-list-item:
#     handler: ApiGatewayLambdaHandlers/update-list-item.handler
#     description: PATCH /list-item
#     events:
#       - http:
#           path: list-item
#           method: patch
#           cors:
#             origin: "*"
#             headers: ${self:custom.allowedHeaders}
#   get-list-items:
#     handler: ApiGatewayLambdaHandlers/get-list-items.handler
#     description: GET /list-items
#     events:
#       - http:
#           path: list-items
#           method: get
#           cors:
#             origin: "*"
#             headers: ${self:custom.allowedHeaders}
#   get-list-item:
#     handler: ApiGatewayLambdaHandlers/get-list-item.handler
#     description: GET /list-item/id/{list_item_id}
#     events:
#       - http:
#           path: list-item/id/{list_item_id}
#           method: get
#           cors:
#             origin: "*"
#             headers: ${self:custom.allowedHeaders}
#   delete-list-item:
#     handler: ApiGatewayLambdaHandlers/delete-list-item.handler
#     description: DELETE /list-item/t/{timestamp}
#     events:
#       - http:
#           path: list-item/t/{timestamp}
#           method: delete
#           cors:
#             origin: "*"
#             headers: ${self:custom.allowedHeaders}

  appSync:
    name: ${self:custom.base}-api
    authenticationType: AWS_IAM
    logConfig:
      loggingRoleArn: ${self:custom.role.logging.arn}
      level: "ERROR"
    mappingTemplates:
      - dataSource: ListItems
        type: Mutation
        field: createListItem
        request: "requests/create-list-item.vtl"
        response: "responses/generic-response.vtl"
      - dataSource: ListItems
        type: Mutation
        field: deleteListItem
        request: "requests/delete-list-item.vtl"
        response: "responses/generic-response.vtl"
      - dataSource: ListItems
        type: Mutation
        field: updateListItem
        request: "requests/update-list-item.vtl"
        response: "responses/generic-response.vtl"
      - dataSource: ListItems
        type: Query
        field: getListItem
        request: "requests/get-list-item.vtl"
        response: "responses/generic-response.vtl"
      - dataSource: ListItems
        type: Query
        field: getListItems
        request: "requests/get-list-items.vtl"
        response: "responses/generic-response.vtl"
    mappingTemplatesLocation: "api/mapping-templates"
    serviceRole: AppSyncServiceRole
    dataSources:
      - type: AMAZON_DYNAMODB
        name: ListItems
        description: 'Table for items in shared grocery list'
        config:
          tableName: ${self:custom.dynamoDBTableName}
          serviceRoleArn: ${self:custom.role.dynamodb.arn}

resources:
  Resources:
    AppSyncLoggingServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: ${self:custom.role.logging.name}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${self:custom.role.logging.name}-Policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"