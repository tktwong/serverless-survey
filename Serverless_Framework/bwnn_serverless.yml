# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bwnn

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  defaultStage: "sandbox"
  profiles:
    sandbox: "bwnn-sandbox"
    integration: "integration"
    qa: "qa"
    production: "production"

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  environment:
    ## inject current environment name into ENV environment variable
    JAVA_TOOL_OPTIONS: -DBWNN_ENV=${opt:stage, self:custom.defaultStage}
  iamRoleStatements:
    ## Allow access to Parameter Store for secrets management
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource:
        Fn::Join:
          - ":"
          - - "arn:aws:ssm"
            - Ref: "AWS::Region"
            - Ref: "AWS::AccountId"
            - "parameter/*"
    ## Allow access to SQS for DeadLetterQueues
    - Effect: Allow
      Action:
        - "sqs:SendMessage*"
      Resource:
        - Fn::GetAtt:
          - SqsLambdaSamSalesSyncDeadLetterQueue
          - Arn
        - Fn::GetAtt:
          - SqsLambdaStoreSalesTileHtmlDeadLetterQueue
          - Arn
        - Fn::GetAtt:
          - SqsLambdaStoreSelectionJsonDeadLetterQueue
          - Arn
    ## Allow access to the S3 bucket we are sharing with Amazon
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource:
        Fn::Join:
          - "/"
          - - Fn::GetAtt:
              - S3BucketBoxWithNoNameHorizonte
              - Arn
            - "*"
    ## Allow access to the read the config S3
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource: "arn:aws:s3:::wfm-digitech-bwnn-config-${opt:stage, self:custom.defaultStage}/*"

    ## TEMP - REMOVE ME: allows access for Sam Sales Sync to write out merged store sales.
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "wfm-digitech-bwnn-merged-store-sales-${opt:stage, self:custom.defaultStage}/*"
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        Fn::Join:
          - ":"
          - - "arn:aws:sns"
            - Ref: "AWS::Region"
            - Ref: "AWS::AccountId"
            - "bwnn-store-sales-assigned"
    - Effect: "Allow"
      Action:
        - "kms:*"
      Resource: "*"

# you can add packaging information here
package:
  individually: true

functions:
  BwnnSamSalesSync:
    package:
      artifact: lambda-sam-sales-sync/target/lambda-sam-sales-sync-0.0.jar
    handler: com.wholefoods.digitech.sales.delivery.EventHandler::handleRequest
    timeout: 300 # 5 minute timeout
    events:
      - sns:
          topicName: "bwnn-store-updated"
          displayName: "Store Updated Event"
      - sns:
          topicName: "bwnn-sale-updated"
          displayName: "Sale Updated Event"
  BwnnStoreSalesTileHtml:
    package:
      artifact: lambda-sales-tile-html/target/lambda-sales-tile-html-0.0.jar
    handler: com.wholefoods.digitech.sales.curated.EventHandler::handleRequest
    timeout: 30 #30 second timeout
    events:
      - sns:
          topicName: "bwnn-store-sales-assigned"
          displayName: "Curated Sales Assigned to Store Event"
  BwnnStoreSelectionJson:
    package:
      artifact: lambda-store-selection-json/target/lambda-store-selection-json-0.0.jar
    handler: com.wholefoods.digitech.store.selector.EventHandler::handleRequest
    timeout: 180 # 3 minute timeout
    events:
      - sns:
          topicName: "bwnn-store-updated"
          displayName: "Curated Sales Assigned to Store Event"
  BwnnStoreProgramJson:
      package:
        artifact: lambda-store-program-json/target/lambda-store-program-json-0.0.jar
      handler: com.wholefoods.digitech.store.program.EventHandler::handleRequest
      timeout: 180 # 3 minute timeout
      events:
        - sns:
            topicName: "bwnn-store-updated"
            displayName: "Curated Sales Assigned to Store Event"
        - schedule:
            rate: "cron(1 6 * * ? *)"
            enabled: true
            name: "bwnn-lambda-store-program-schedule"
            description: "Rebuild store participation at 12:01am CDT/1:01am CST each night"
        - s3:
            bucket: "wfm-digitech-bwnn-config-${opt:stage, self:custom.defaultStage}"
            event: "s3:ObjectCreated:*"
            rules:
              - prefix: "lambda-store-program-participation/"
              - suffix: "json"
  BwnnStoreReceiptsJson:
    package:
      artifact: lambda-store-receipt-json/target/lambda-store-receipt-json-0.0.jar
    handler: com.wholefoods.digitech.store.receipts.EventHandler::handleRequest
    timeout: 180 # 3 minute timeout
    events:
      - sns: "bwnn-store-updated"

resources:

  Conditions:
    # Determine whether or not we are running in the sandbox
    IsNotSandbox: { "Fn::Not" : [{ "Fn::Equals" : ["${self:provider.stage}", "sandbox"] }] }

  Resources:
    ## S3 bucket Horizonte will use to consume the static assets.
    S3BucketBoxWithNoNameHorizonte:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "wfm-digitech-bwnn-${opt:stage, self:custom.defaultStage}"
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                KMSMasterKeyID:
                  Fn::GetAtt: [KmsS3BucketBoxWithNoNameHorizonte, Arn]
                SSEAlgorithm: aws:kms

    ## Allow Horizonte Proxy to access our buckets
    S3BucketBoxWithNoNameHorizontePolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketBoxWithNoNameHorizonte
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Resource:
                Fn::Join:
                  - "/"
                  - - Fn::GetAtt:
                      - S3BucketBoxWithNoNameHorizonte
                      - Arn
                    - "*"
              Principal:
                CanonicalUser: "8bee5b24776bcb3b99f1b6b82f86835a41acf4b9d1a7fffa116fc1c91291039d"
              Action:
                - "s3:GetObject"
            - Effect: "Allow"
              Resource:
                - Fn::GetAtt:
                  - S3BucketBoxWithNoNameHorizonte
                  - Arn
              Principal:
                CanonicalUser: "8bee5b24776bcb3b99f1b6b82f86835a41acf4b9d1a7fffa116fc1c91291039d"
              Action:
                - "s3:ListBucket"

    ## S3 bucket Horizonte will use to consume the static assets.
    S3BucketMergedStoreSales:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "wfm-digitech-bwnn-merged-store-sales-${opt:stage, self:custom.defaultStage}"
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                KMSMasterKeyID:
                  Fn::GetAtt: [KmsS3BucketMergedStoreSales, Arn]
                SSEAlgorithm: aws:kms

    ## Allow service account access to the "bwnn-sale-updated" SNS topic.
    SNSTopicBwnnsaleupdatedPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "Fn::Join":
                    - ":"
                    - - "arn:aws:iam"
                      - ""
                      - "Ref": "AWS::AccountId"
                      - "user/SAM"
              Action: sns:Publish
              Resource: "*"
        Topics:
          - Ref: SNSTopicBwnnsaleupdated

    ## Allow service account access to the "bwnn-store-updated" SNS topic.
    SNSTopicBwnnstoreupdatedPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "Fn::Join":
                    - ":"
                    - - "arn:aws:iam"
                      - ""
                      - "Ref": "AWS::AccountId"
                      - "user/StoreMgr"
              Action: sns:Publish
              Resource: "*"
        Topics:
          - Ref: SNSTopicBwnnstoreupdated

    ## Allow service account access to the "bwnn-store-sales-assigned" SNS topic.
    SNSTopicBwnnstoresalesassignedPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "Fn::Join":
                    - ":"
                    - - "arn:aws:iam"
                      - ""
                      - "Ref": "AWS::AccountId"
                      - "user/SamSalesSync"
              Action: sns:Publish
              Resource: "*"
        Topics:
          - Ref: SNSTopicBwnnstoresalesassigned

    ## S3 bucket and dead letter queue for the SAM sales sync.
    SqsLambdaSamSalesSyncDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "bwnn-sam-sales-sync-lambda-dlq"
        MessageRetentionPeriod: 1209600 # 14 days in seconds
    BwnnSamSalesSyncLambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        DeadLetterConfig:
          TargetArn:
            "Fn::GetAtt":
              - SqsLambdaSamSalesSyncDeadLetterQueue
              - Arn
    S3BucketSamSalesSyncLogs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "wfm-digitech-sam-sales-sync-logs-${opt:stage, self:custom.defaultStage}"

    ## Dead letter queue for the sales tile generator.
    SqsLambdaStoreSalesTileHtmlDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "bwnn-store-sales-tiles-html-lambda-dlq"
        MessageRetentionPeriod: 1209600 # 14 days in seconds
    BwnnStoreSalesTileHtmlLambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        DeadLetterConfig:
          TargetArn:
            "Fn::GetAtt":
              - SqsLambdaStoreSalesTileHtmlDeadLetterQueue
              - Arn

    ## Dead letter queue for the store selection json generator.
    SqsLambdaStoreSelectionJsonDeadLetterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "bwnn-store-selection-json-lambda-dlq"
        MessageRetentionPeriod: 1209600 # 14 days in seconds
    BwnnStoreSelectionJsonLambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        DeadLetterConfig:
          TargetArn:
            "Fn::GetAtt":
              - SqsLambdaStoreSelectionJsonDeadLetterQueue
              - Arn

    ## Setup Customer Master Key in KMS for encrypting parameters.
    KmsLambdaSamSalesSync:
      Type: AWS::KMS::Key
      Properties:
        Description: "CMK for the Sam Sales Sync Lambda Function"
        Enabled: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "Fn::Join":
                    - ":"
                    - - "arn:aws:iam"
                      - ""
                      - Ref: "AWS::AccountId"
                      - "root"
              Action: "kms:*"
              Resource: "*"
    KmsLambdaSamSalesSyncAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: "alias/bwnn-lambda-sam-sales-sync"
        TargetKeyId:
          "Fn::GetAtt":
            - KmsLambdaSamSalesSync
            - Arn

    ## Setup Customer Master Key in KMS for encrypting parameters.
    KmsLambdaSalesTileHtml:
      Type: AWS::KMS::Key
      Properties:
        Description: "CMK for the Sales Tile Html Lambda Function"
        Enabled: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "Fn::Join":
                    - ":"
                    - - "arn:aws:iam"
                      - ""
                      - Ref: "AWS::AccountId"
                      - "root"
              Action: "kms:*"
              Resource: "*"
    KmsLambdaSalesTileHtmlAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: "alias/bwnn-lambda-sales-tile-html"
        TargetKeyId:
          "Fn::GetAtt":
            - KmsLambdaSalesTileHtml
            - Arn

    ## Setup Customer Master Key in KMS for encrypting parameters.
    KmsLambdaStoreSelectionJson:
      Type: AWS::KMS::Key
      Properties:
        Description: "CMK for the Store Selection Json Lambda Function"
        Enabled: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "Fn::Join":
                    - ":"
                    - - "arn:aws:iam"
                      - ""
                      - Ref: "AWS::AccountId"
                      - "root"
              Action: "kms:*"
              Resource: "*"
    KmsLambdaStoreSelectionJsonAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: "alias/bwnn-lambda-store-selection-json"
        TargetKeyId:
          "Fn::GetAtt":
            - KmsLambdaStoreSelectionJson
            - Arn

    ## Setup Customer Master Key in KMS for encrypting parameters.
    KmsLambdaStoreProgramJson:
      Type: AWS::KMS::Key
      Properties:
        Description: "CMK for the Store Program Json Lambda Function"
        Enabled: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "Fn::Join":
                    - ":"
                    - - "arn:aws:iam"
                      - ""
                      - Ref: "AWS::AccountId"
                      - "root"
              Action: "kms:*"
              Resource: "*"
    KmsLambdaStoreProgramJsonAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: "alias/bwnn-lambda-store-program-json"
        TargetKeyId:
          "Fn::GetAtt":
            - KmsLambdaStoreProgramJson
            - Arn

    ## Setup Customer Master Key in KMS for encrypting S3 objects.
    KmsS3BucketBoxWithNoNameHorizonte:
      Type: AWS::KMS::Key
      Properties:
        Description: "CMK for the BWWN Horizonte S3 bucket"
        Enabled: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "Fn::Join":
                    - ":"
                    - - "arn:aws:iam"
                      - ""
                      - Ref: "AWS::AccountId"
                      - "root"
              Action: "kms:*"
              Resource: "*"
            - Effect: Allow
              Principal:
                CanonicalUser: "8bee5b24776bcb3b99f1b6b82f86835a41acf4b9d1a7fffa116fc1c91291039d"
              Action: "kms:Decrypt"
              Resource: "*"
    KmsS3BucketBoxWithNoNameHorizonteAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: "alias/bwnn-s3-horizonte"
        TargetKeyId:
          "Fn::GetAtt":
            - KmsS3BucketBoxWithNoNameHorizonte
            - Arn

    ## Setup Customer Master Key in KMS for encrypting S3 objects.
    KmsS3BucketMergedStoreSales:
      Type: AWS::KMS::Key
      Properties:
        Description: "CMK for the Sam Sales Sync Merged Store Sales S3 bucket"
        Enabled: true
        KeyPolicy:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  - "Fn::Join":
                    - ":"
                    - - "arn:aws:iam"
                      - ""
                      - Ref: "AWS::AccountId"
                      - "root"
              Action: "kms:*"
              Resource: "*"
    KmsS3BucketMergedStoreSalesAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: "alias/bwnn-s3-merged-store-sales"
        TargetKeyId:
          "Fn::GetAtt":
            - KmsS3BucketMergedStoreSales
            - Arn

    # If we are _NOT_ running in the sandbox then subscribe all log groups to SumoLogic
    LambdaInvokePermission:
      Type: "AWS::Lambda::Permission"
      Condition: IsNotSandbox
      Properties:
        FunctionName: {"Fn::ImportValue": "SumologicMonitoringAggregator"}
        Action: "lambda:InvokeFunction"
        Principal: "logs.amazonaws.com"
        SourceAccount: { "Ref": "AWS::AccountId" }
        SourceArn: { "Fn::Join" : [":", ["arn:aws:logs", {"Ref": "AWS::Region"}, {"Ref": "AWS::AccountId" }, "log-group", "/aws/lambda/bwnn-*:*"] ] }
    SamSalesSyncSumoLogicSubscriptionFilter:
      Type: AWS::Logs::SubscriptionFilter
      Condition: IsNotSandbox
      DependsOn: LambdaInvokePermission
      Properties:
        LogGroupName: "/aws/lambda/bwnn-${self:provider.stage}-BwnnSamSalesSync"
        FilterPattern: "[]"
        DestinationArn: {"Fn::ImportValue": "SumologicMonitoringAggregator"}
    StoreProgamJsonSumoLogicSubscriptionFilter:
      Type: AWS::Logs::SubscriptionFilter
      Condition: IsNotSandbox
      DependsOn: LambdaInvokePermission
      Properties:
        LogGroupName: "/aws/lambda/bwnn-${self:provider.stage}-BwnnStoreProgramJson"
        FilterPattern: "[]"
        DestinationArn: {"Fn::ImportValue": "SumologicMonitoringAggregator"}
    StoreSalesTileHtmlSumoLogicSubscriptionFilter:
      Type: AWS::Logs::SubscriptionFilter
      Condition: IsNotSandbox
      DependsOn: LambdaInvokePermission
      Properties:
        LogGroupName: "/aws/lambda/bwnn-${self:provider.stage}-BwnnStoreSalesTileHtml"
        FilterPattern: "[]"
        DestinationArn: {"Fn::ImportValue": "SumologicMonitoringAggregator"}
    StoreSelectionJsonSumoLogicSubscriptionFilter:
      Type: AWS::Logs::SubscriptionFilter
      Condition: IsNotSandbox
      DependsOn: LambdaInvokePermission
      Properties:
        LogGroupName: "/aws/lambda/bwnn-${self:provider.stage}-BwnnStoreSelectionJson"
        FilterPattern: "[]"
        DestinationArn: {"Fn::ImportValue": "SumologicMonitoringAggregator"}