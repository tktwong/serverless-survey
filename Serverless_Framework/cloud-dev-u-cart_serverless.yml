service:
  name: serverless-ucart-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  # - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline

# Uncomment to enable individual packaging
# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  # tracing:
    # lambda: true
    # apiGateway: true

  environment:
    STAGE: ${self:provider.stage}
    CART_TABLE: cart-${self:provider.stage}
    ITEM_TABLE: item-${self:provider.stage}
    ORDER_TABLE: order-${self:provider.stage}
    ORDER_GSI1_UID: order-gsi1-uid-sts-${self:provider.stage}
    ORDER_GSI2_STR_STS: order-gsi2-str-sts-${self:provider.stage}
    SEQ_TABLE: sequence-${self:provider.stage}
    STORE_TABLE: store-${self:provider.stage}
    USER_TABLE: user-${self:provider.stage}
    USER_GSI1_UID: user-gis1-uid-${self:provider.stage}
    USER_ACCS_TABLE: user-access-${self:provider.stage}
    ITEM_IMG_S3_BUCKET: gmp-ucart-img-${self:provider.stage}
    ITEM_IMG_S_S3_BUCKET: gmp-ucart-img-s-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    ES_ENDPOINT: https://elasticsearch.aws.com/
  #   AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
  #   AUTH_0_SECRET_FIELD: auth0Secret

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        # For repeated testing
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CART_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        # For repeated testing
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEM_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:UpdateItem
        # For repeated testing
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDER_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDER_TABLE}/index/${self:provider.environment.ORDER_GSI1_UID}
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ORDER_TABLE}/index/${self:provider.environment.ORDER_GSI2_STR_STS}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        # For repeated testing
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SEQ_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        # For repeated testing
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.STORE_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        # For repeated testing
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}/index/${self:provider.environment.USER_GSI1_UID}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_ACCS_TABLE}
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
custom:
  serverless-offline:
    port: 3003
    host: 0.0.0.0
#    useChildProcesses: true
  dynamodb:
    # noStart: true
    start:
      port: 8000
      inMemory: true
      migrate: true
    seed:
      seqTable:
        sources:
          - table: ${self:provider.environment.SEQ_TABLE}
            sources: [./tst/seed-seq.json]
    stages:
      - test
      - dev
  s3:
    host: localhost
    directory: /tmp

  itemImageS3TopicName: item-image-topic-${self:provider.stage}

  documentation:
    api:
      info:
        version: v1.0.0
        title: UCart API
        description: Serverless application for UCart online stores.
    models:
      - name: CartReq
        contentType: application/json
        schema: ${file(models/create-cart-req.json)}
      - name: ItemReq
        contentType: application/json
        schema: ${file(models/create-item-req.json)}
      - name: OrderReq
        contentType: application/json
        schema: ${file(models/create-order-req.json)}
      - name: StoreReq
        contentType: application/json
        schema: ${file(models/create-store-req.json)}
      - name: UserReq
        contentType: application/json
        schema: ${file(models/create-user-req.json)}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  CreateCart:
    handler: src/lambda/http/cart.handlerCreate
    events:
      - http:
          method: post
          path: store/{storeNum}/cart
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-cart-req.json)}

  UpdateCart:
    handler: src/lambda/http/cart.handlerUpdate
    events:
      - http:
          method: patch
          path: store/{storeNum}/cart
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-cart-req.json)}

  GetCart:
    handler: src/lambda/http/cart.handlerGet
    events:
      - http:
          method: get
          path: store/{storeNum}/cart
          cors: true
          authorizer: Auth

  CreateItem:
    handler: src/lambda/http/item.handlerCreate
    events:
      - http:
          method: post
          path: store/{storeNum}/item
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-item-req.json)}

  UpdateItem:
    handler: src/lambda/http/item.handlerUpdate
    events:
      - http:
          method: patch
          path: store/{storeNum}/item/{itemNum}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-item-req.json)}
  UpdateItemById:
    handler: src/lambda/http/item.handlerUpdateById
    events:
      - http:
          method: patch
          path: storeItem/{itemId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-item-req.json)}

  GetItem:
    handler: src/lambda/http/item.handlerGet
    events:
      - http:
          method: get
          path: store/{storeNum}/item/{itemNum}
          cors: true
          authorizer: Auth
  GetItemById:
    handler: src/lambda/http/item.handlerGetById
    events:
      - http:
          method: get
          path: storeItem/{itemId}
          cors: true
          authorizer: Auth

  CreateOrder:
    handler: src/lambda/http/order.handlerCreate
    events:
      - http:
          method: post
          path: store/{storeNum}/order
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-order-req.json)}

  UpdateOrder:
    handler: src/lambda/http/order.handlerUpdate
    events:
      - http:
          method: patch
          path: order/{orderId}
          cors: true
          authorizer: Auth

  GetOrder:
    handler: src/lambda/http/order.handlerGetById
    events:
      - http:
          method: get
          path: order/{orderId}
          cors: true
          authorizer: Auth

  GetOrderForUser:
    handler: src/lambda/http/order.handlerGetForUser
    events:
      - http:
          method: get
          path: user/order/
          cors: true
          authorizer: Auth

  GetOrderForStore:
    handler: src/lambda/http/order.handlerGetForStore
    events:
      - http:
          method: get
          path: store/{storeNum}/order/
          cors: true
          authorizer: Auth

  CreateStore:
    handler: src/lambda/http/store.handlerCreate
    events:
      - http:
          method: post
          path: store/
          cors: true
          authorizer: Auth
          request:
            # Schema that will validate the incoming requests
            schema:
              application/json: ${file(models/create-store-req.json)}

  UpdateStore:
    handler: src/lambda/http/store.handlerUpdate
    events:
      - http:
          method: patch
          path: store/
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-store-req.json)}

  GetStore:
    handler: src/lambda/http/store.handlerGet
    events:
      - http:
          method: get
          path: store/{storeNum}
          cors: true
          authorizer: Auth
  GetStores:
    handler: src/lambda/http/store.handlerGetStores
    events:
      - http:
          method: get
          path: store/
          cors: true
          authorizer: Auth

  CreateUser:
    handler: src/lambda/http/user.handlerCreate
    events:
      - http:
          method: post
          path: user/
          cors: true
          authorizer: Auth
          request:
            # Schema that will validate the incoming requests
            schema:
              application/json: ${file(models/create-user-req.json)}

  UpdateUser:
    handler: src/lambda/http/user.handlerUpdate
    events:
      - http:
          method: patch
          path: user/
          cors: true
          authorizer: Auth
          request:
            # Schema that will validate the incoming requests
            schema:
              application/json: ${file(models/create-user-req.json)}
  GetUser:
    handler: src/lambda/http/user.handlerGet
    events:
      - http:
          method: get
          path: user/
          cors: true
          authorizer: Auth
  GetUser2:
    handler: src/lambda/http/user.handlerGetByNum
    events:
      - http:
          method: get
          path: user/{userNum}
          cors: true
          authorizer: Auth

  TruncateTables:
    handler: src/lambda/http/ddbtables.handler
    events:
      - http:
          method: get
          path: ddtables/
          cors: true
          authorizer: Auth

  # ResizeImage:
  #   handler: src/lambda/s3/resizeImage.handler
  #   events:
  #     - sns:
  #         arn:
  #           Fn::Join:
  #             - ':'
  #             - - arn:aws:sns
  #               - Ref: AWS::Region
  #               - Ref: AWS::AccountId
  #               - ${self:custom.itemImageS3TopicName}
  #         topicName: ${self:custom.itemImageS3TopicName}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    CartTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CART_TABLE}
        AttributeDefinitions:
          # TODO: use UserId for better hash distributed or move table to RDBMS
          - AttributeName: userId
            AttributeType: S
          - AttributeName: storeNum
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: storeNum
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ItemTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ITEM_TABLE}
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          # - AttributeName: storeNum
          #   AttributeType: N
          # - AttributeName: itemNum
          #   AttributeType: N
          # - AttributeName: name
          #   AttributeType: S
          # - AttributeName: desc
          #   AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ORDER_TABLE}
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
            # uid#status
          - AttributeName: gsi1pk
            AttributeType: S
          # orderId, use gsi1sk for flexibility
          - AttributeName: gsi1sk
            AttributeType: S
            # storeNum#status
          - AttributeName: gsi2pk
            AttributeType: S
          # orderNum#
          - AttributeName: gsi2sk
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ORDER_GSI1_UID}
            KeySchema:
              - AttributeName: gsi1pk
                KeyType: HASH
              - AttributeName: gsi1sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
              # ProjectionType: INCLUDE
              # NonKeyAttributes:
              #   - orderId
          - IndexName: ${self:provider.environment.ORDER_GSI2_STR_STS}
            KeySchema:
              - AttributeName: gsi2pk
                KeyType: HASH
              - AttributeName: gsi2sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    SequenceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SEQ_TABLE}
        AttributeDefinitions:
          - AttributeName: entity
            AttributeType: S
          # - AttributeName: seq
          #   AttributeType: N
        KeySchema:
          - AttributeName: entity
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    StoreTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STORE_TABLE}
        AttributeDefinitions:
          - AttributeName: storeNum
            AttributeType: N
          # - AttributeName: name
          #   AttributeType: S
          # - AttributeName: desc
          #   AttributeType: S
          # - AttributeName: createdAt
          #   AttributeType: S
        KeySchema:
          # TODO make key better hash distributed  or move table to RDBMS
          - AttributeName: storeNum
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: userNum
            AttributeType: N
          - AttributeName: userId
            AttributeType: S
          # - AttributeName: name
          #   AttributeType: S
          # - AttributeName: createdAt
          #   AttributeType: S
        KeySchema:
          - AttributeName: userNum
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_GSI1_UID}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    UserAccessTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_ACCS_TABLE}
        AttributeDefinitions:
          - AttributeName: ts
            AttributeType: S
          - AttributeName: uid
            AttributeType: S
        KeySchema:
          - AttributeName: ts
            KeyType: HASH
          - AttributeName: uid
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ItemImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ITEM_IMG_S3_BUCKET}
        # NotificationConfiguration:
        #   TopicConfigurations:
        #     - Event: s3:ObjectCreated:Put
        #       Topic: !Ref ItemImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # ItemImagesTopic:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     DisplayName: Item Image bucket topic
    #     TopicName: ${self:custom.itemImageS3TopicName}

    BucketPolicy1:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ItemImageBucket
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ITEM_IMG_S3_BUCKET}/*'


    # SNSTopicPolicy:
    #   Type: AWS::SNS::TopicPolicy
    #   Properties:
    #     PolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             AWS: "*"
    #           Action: sns:Publish
    #           Resource:
    #             !Ref ItemImagesTopic
    #           Condition:
    #             ArnLike:
    #               AWS:SourceArn: arn:aws:s3:::${self:provider.environment.ITEM_IMG_S3_BUCKET}
    #     Topics:
    #       - !Ref ItemImagesTopic

    ItemImageThumbNailBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ITEM_IMG_S_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy2:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ITEM_IMG_S_S3_BUCKET}/*'
        Bucket: !Ref ItemImageThumbNailBucket

