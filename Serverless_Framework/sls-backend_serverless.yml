# serverless yaml based on the starter code
service:
  name: sls

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
# a lower version of runtime that was in the starter pack created an error. And suggested to move it up to 12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  # S3 bucket, DynamoDB.................
  environment:
    AUTH_0_SECRET: VM_eFn1CmOX-7fwo4wBBIYrogGEpw-nrdYaUJLr6qXTFYXI2IeIk7lDNGNTR2O0w
    PROJECT_NAME: sls
    TODOS_TABLE: sls-todo-${self:provider.stage}
    S3_BUCKET_NAME: sls-todo-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

    # name, due date, done status
custom:
  documentation:
    api:
      info:
        version: '1.0.0'
        title: sls-todo-api
        description: sls-todo-api
    models:
      - name: CreateTodoRequest
        contentType: 'application/json'
        schema:
          required:
            - name
            - dueDate
          properties:
            name:
              type: string
            dueDate:
              type: string
      - name: UpdateTodoRequest
        contentType: 'application/json'
        schema:
          required:
            - name
            - dueDate
            - done
          properties:
            name:
              type: string
            dueDate:
              type: string
            done:
              type: boolean

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  # Done. CORS and Auth added
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  # Done. CORS and Auth added
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          documentation:
            summary: 'Create a new todo item'
            description: 'Create a new todo item'
            requestModels:
              'application/json': CreateTodoRequest
          reqValidatorName: onlyBody
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-create-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  # Done. CORS and Auth added
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          documentation:
            summary: 'Update a todo item'
            description: 'Update a todo item'
            requestModels:
              'application/json': UpdateTodoRequest
          reqValidatorName: onlyBody
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-update-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-delete-todo-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-s3-upload-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    # Parameters at the time of creation. 
    # https://github.com/awsdocs/aws-doc-sdk-examples/blob/master/javascript/example_code/dynamodb/ddb_createtable.js
    # https://www.serverless.com/dynamodb
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
    onlyBody:
      Type: 'AWS::ApiGateway::RequestValidator'
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html 
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - PUT
              MaxAge: 300