service: wibsie

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stackTags:
    GROUP: "wibsie"

  stage: prod
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_USERS}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_EXPERIENCES}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_LOCATIONS}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_WEATHERREPORTS}"
        - { Fn::GetAtt: [ ExperiencesDynamoDbTable, Arn ] }

  environment:
    DYNAMODB_TABLE_USERS: ${self:service}-users-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_EXPERIENCES: ${self:service}-experiences-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_LOCATIONS: ${self:service}-locations-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_WEATHERREPORTS: ${self:service}-weatherreports-${opt:stage, self:provider.stage}
    FUNCTION_PREFIX: ${self:service}-${opt:stage, self:provider.stage}-
    FUNCTION_PREFIX_ML: wibsie-ml3-${opt:stage, self:provider.stage}-
    STAGE: ${self:provider.stage}

functions:
  ### STREAM TRIGGERS ###
  location_append:
    handler: stream_handler/location_append.location_append
    events:
      - stream:
          type: dynamodb
          arn: { Fn::GetAtt: [ ExperiencesDynamoDbTable, StreamArn ] }
          batchSize: 1

  ### USERS ###
  users_list:
    handler: users/list.list
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  user_create:
    handler: users/create.create
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  user_query:
    handler: users/query.query
    events:
      - http:
          path: users/query
          method: post
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  user_get:
    handler: users/get.get
    events:
      - http:
          path: users/{userid}
          method: get
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  user_update:
    handler: users/update.update
    events:
      - http:
          path: users/{userid}
          method: put
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  user_delete:
    handler: users/delete.delete
    events:
      - http:
          path: users/{userid}
          method: delete
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  ### LOCATIONS ###
  locations_list:
    handler: locations/list.list
    events:
      - http:
          path: locations
          method: get
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  location_create:
    handler: locations/create.create
    events:
      - http:
          path: locations
          method: post
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  location_get:
    handler: locations/get.get
    events:
      - http:
          path: locations/{zip}
          method: get
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  location_update:
    handler: locations/update.update
    events:
      - http:
          path: locations/{zip}
          method: put
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  location_delete:
    handler: locations/delete.delete
    events:
      - http:
          path: locations/{zip}
          method: delete
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  location_zipfromlatlong:
    handler: locations/zipFromLatLong.zipFromLatLong
    events:
      - http:
          path: locations/zipFromLatLong
          method: post
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  ### WEATHER REPORTS ###
  location_weatherreport_query:
    handler: weatherreports/query.query
    events:
      - http:
          path: weatherreports
          method: get
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  location_weatherreport_fetch:
    handler: weatherreports/fetch.fetch
    events:
      - http:
          path: weatherreports/{latlong}
          method: get
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  location_weatherreport_create:
    handler: weatherreports/create.create
    events:
      - http:
          path: weatherreports
          method: post
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  ### EXPERIENCES ###
  experience_create:
    handler: experiences/create.create
    events:
      - http:
          path: users/{userid}/experiences
          method: post
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  experience_get:
    handler: experiences/get.get
    events:
      - http:
          path: users/{userid}/experiences/{created}
          method: get
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

  experience_update:
    handler: experiences/update.update
    events:
      - http:
          path: users/{userid}/experiences/{created}
          method: put
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:530583866435:function:wibsieAuthorizer
            identitySource: method.request.header.AuthToken
            type: request

plugins:
  - serverless-domain-manager

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: api.wibsie.com
    staging: staging-api.wibsie.com
    dev: dev-api.wibsie.com

  customDomain:
    basePath: "app"
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    createRoute53Record: true

resources:
  Resources:
#     UsersDynamoDbTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: id
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.DYNAMODB_TABLE_USERS}
    ExperiencesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
          -
            AttributeName: created
            AttributeType: N
        KeySchema:
          -
            AttributeName: user_id
            KeyType: HASH
          -
            AttributeName: created
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_EXPERIENCES}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
#     LocationsDynamoDbTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: zip
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: zip
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.DYNAMODB_TABLE_LOCATIONS}
#     WeatherreportsDynamoDbTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: zip
#             AttributeType: S
#           -
#             AttributeName: expires
#             AttributeType: N
#         KeySchema:
#           -
#             AttributeName: zip
#             KeyType: HASH
#           -
#             AttributeName: expires
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.DYNAMODB_TABLE_WEATHERREPORTS}
