service: MV-${env:REALM}-GoCD-Agent-Cleanup

provider:
  name: aws
  runtime: python3.6
  stage: ${env:ENV}
  memorySize: 128
  timeout: 120
  versionFunctions: false
  region: ${env:AWS_REGION}
  variableSyntax: "\\${(?!AWS::)((?:self|env):[ :a-zA-Z0-9._,\\-\\/\\(\\)]+?)}"
  stackTags:
    FRAMEWORK: serverless
  environment:
    ENV: ${env:ENV}
    LOGLEVEL: ${env:LOGLEVEL}
    REALM: ${env:REALM}
    GOCD_USERNAME: ${env:GOCD_USERNAME}
    GOCD_PASSWORD: ${env:GOCD_PASSWORD}
    GOCD_URL: ${env:GOCD_URL}

package:
  artifact: package/package.zip

plugins:
  - serverless-log-forwarding
  - serverless-plugin-aws-alerts

custom:
  logForwarding:
    destinationARN: {"Fn::ImportValue": "${env:SUMOLOGIC_LAMBDA_ARN_EXPORT_NAME}"}
  alerts:
    dashboards: true
    topics:
      ok: ${env:OPS_GENIE_SNS_ARN}
      alarm: ${env:OPS_GENIE_SNS_ARN}
      insufficientData: ${env:OPS_GENIE_SNS_ARN}
    definitions:
      functionErrors:
        threshold: 10
        period: 900
      functionDuration:
        threshold: 60000
        statistic: 'p95'
        period: 900
    alarms:
      - functionErrors
      - functionThrottles
      - functionInvocations
      - functionDuration

functions:
  handler:
    handler: gocd_agent_cleanup.handler
    events:
      - schedule: cron(0 */1 * * ? *)
    vpc:
      securityGroupIds:
        - Ref: GoCDAgentClenupLambdaSG
        - ${env:AWS_INTERNET_ACCESS_SG}
      subnetIds:
        - ${env:AWS_SUBNET_A}
        - ${env:AWS_SUBNET_B}

resources:
  Resources:
    GoCDAgentClenupLambdaSG:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: "${self:service}-${env:ENV} SG for access to GoCD Server"
        VpcId: ${env:AWS_VPC_ID}
    GoCDSecurityGroupIngress:
      Type: "AWS::EC2::SecurityGroupIngress"
      Properties:
        SourceSecurityGroupId:
          Fn::GetAtt: [ "GoCDAgentClenupLambdaSG", "GroupId" ]
        GroupId: "${env:AWS_GOCD_LB_SG}"
        IpProtocol: "tcp"
        FromPort: 443
        ToPort: 443

  Outputs:
    GoCDAgentClenupLambdaSGID:
      Value:
        Fn::GetAtt: [ "GoCDAgentClenupLambdaSG", "GroupId" ]
