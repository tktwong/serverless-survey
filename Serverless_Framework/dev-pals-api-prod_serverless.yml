# NOTE: update this with your service name
service: dev-pals-api-prod

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableProfilesName: ${self:custom.stage}-profiles
  tablePostsName: ${self:custom.stage}-posts
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-2

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatemets:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ProfilesTable, Arn]

functions:
  # Defines an HTTP API endpoint that calls the main function in create-profile.js
  # - path: url path is /profiles
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create-profile.main
    events:
      - http:
          path: profiles
          method: post
          cors: true
          authorizer: aws_iam

  add-experience:
    handler: add-experience.main
    events:
      - http:
          path: experiences/{id}
          method: put
          cors: true
          authorizer: aws_iam

  add-education:
    handler: add-education.main
    events:
      - http:
          path: educations/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete-experience:
    handler: delete-experience.main
    events:
      - http:
          path: delete-experience/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete-education:
    handler: delete-education.main
    events:
      - http:
          path: delete-education/{id}
          method: put
          cors: true
          authorizer: aws_iam

  get-profile:
    # Defines an HTTP API endpoint that calls the main function in get-profile.js
    # - path: url path is /profiles/{id}
    # - method: GET request
    handler: get-profile.main
    events:
      - http:
          path: profiles/{id}
          method: get
          cors: true
          authorizer: aws_iam

  get-profile-by-handle:
    # Defines an HTTP API endpoint that calls the main function in get-profile-by-handle.js
    # - path: url path is /profiles/{id}
    # - method: GET request
    handler: get-profile-by-handle.main
    events:
      - http:
          path: profiles-by-handle/{handle}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list-profiles.js
    # - path: url path is /profiles
    # - method: GET request
    handler: list-profiles.main
    events:
      - http:
          path: profiles
          method: get
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete-profile.js
    # - path: url path is /profile
    # - method: DELETE request
    handler: delete-profile.main
    events:
      - http:
          path: profiles/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  add-post:
    handler: add-post.main
    events:
      - http:
          path: posts
          method: post
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
