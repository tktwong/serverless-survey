service: tenderly-slack-hook
org: gjgdserverless
app: tenderly-slack-hook

plugins:
  - serverless-secrets-plugin

package:
  exclude:
    - ./images/**
    - ./secrets*
    - ./README.md
    - ./package.json
    - ./package-lock.json

provider:
  profile: serverless-admin
  name: aws
  runtime: nodejs12.x
  stackTags:
    billing: element-slack-bot
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

resources:
  Resources:
    SlackHookDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

custom:
  secrets: ${file(secrets.${opt:stage, self:provider.stage}.yml)}

functions:
  webhook:
    handler: webhook.webhook
    events:
      - http:
          path: webhook
          method: post
  redirectUrl:
    handler: redirectUrl.redirectUrl
    events:
      - http:
          path: redirect-url
          method: get
    environment:
      CLIENT_ID: ${self:custom.secrets.CLIENT_ID}
      CLIENT_SECRET: ${self:custom.secrets.CLIENT_SECRET}
  resolve:
    handler: resolve.resolve
    events:
      - http:
          path: resolve
          method: post
