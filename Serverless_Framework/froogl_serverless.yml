# The `service` block is the name of the service
service: froogl

frameworkVersion: ">=1.2.0 <2.0.0"

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  s3Bucket: eeg3-froogl-1
  tableName: 'ItemDynamoDBTable-${self:provider.stage}'
  dynamodb:
    start:
      migrate: true

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs6.10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ItemDynamoDBTable", "Arn" ] }
  environment:
    NAMES_TABLE: ${self:custom.tableName}

# The `functions` block defines what code to deploy
functions:
  getItems:
    handler: handler.getItems
    events:
      - http:
          path: items
          method: get
          cors: true
  saveItem:
    handler: handler.saveItem
    events:
      - http:
          path: items
          method: post
          cors: true
  deleteItem:
    handler: handler.deleteItem
    events:
      - http:
          path: delete-item
          method: post
          cors: true
          #authorizer:
          #  arn: arn:aws:cognito-idp:us-east-1:682436325976:userpool/us-east-1_tHzVfBjoV

resources:
  Resources:
    ItemDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
        KeySchema:
          -
            AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    #WebAppCloudFrontDistribution:
    #  Type: AWS::CloudFront::Distribution
    #  Properties:
    #    DistributionConfig:
    #      Origins:
    #        - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
    #          ## An identifier for the origin which must be unique within the distribution
    #          Id: WebApp
    #          CustomOriginConfig:
    #            HTTPPort: 80
    #            HTTPSPort: 443
    #            OriginProtocolPolicy: https-only
    #          ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
    #          # S3OriginConfig:
    #          #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
    #      Enabled: 'true'
    #      ## Uncomment the following section in case you are using a custom domain
    #      # Aliases:
    #      # - mysite.example.com
    #      DefaultRootObject: index.html
    #      ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
    #      ## The only exception are files that actually exist e.h. app.js, reset.css
    #      CustomErrorResponses:
    #        - ErrorCode: 404
    #          ResponseCode: 200
    #          ResponsePagePath: /index.html
    #      DefaultCacheBehavior:
    #        AllowedMethods:
    #          - DELETE
    #          - GET
    #          - HEAD
    #          - OPTIONS
    #          - PATCH
    #          - POST
    #          - PUT
    #        ## The origin id defined above
    #        TargetOriginId: WebApp
    #        ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
    #        ForwardedValues:
    #          QueryString: 'false'
    #          Cookies:
    #            Forward: none
    #        ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
    #        ViewerProtocolPolicy: redirect-to-https
    #      ## The certificate to use when viewers use HTTPS to request objects.
    #      ViewerCertificate:
    #        CloudFrontDefaultCertificate: 'true'
    #      ## Uncomment the following section in case you want to enable logging for CloudFront requests
    #      # Logging:
    #      #   IncludeCookies: 'false'
    #      #   Bucket: mylogs.s3.amazonaws.com
    #      #   Prefix: myprefix
  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  #Outputs:
  #  WebAppCloudFrontDistributionOutput:
  #    Value:
  #      'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
