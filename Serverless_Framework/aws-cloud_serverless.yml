service: dynamodb-countries-serverless-v4

#frameworkVersion: ">=1.1.0 <2.0.0"
# plugins:
#   - serverless-dynamodb-local
#   - serverless-offline
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1

  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-countries
    DYNAMODB_ROLE: ${self:service}-${opt:stage, self:provider.stage}-countries-lambda-role
    INIT_LAMBDA: ${self:service}-${opt:stage, self:provider.stage}-LAMBDA
   
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: countries/create.create
    events:
      - http:
          path: countries
          method: post
          cors: true

  list:
    handler: countries/list.list
    events:
      - http:
          path: countries
          method: get
          cors: true

  get:
    handler: countries/get.get
    events:
      - http:
          path: countries/{id}
          method: get
          cors: true

  update:
    handler: countries/update.update
    events:
      - http:
          path: countries/{id}
          method: put
          cors: true

  delete:
    handler: countries/delete.delete
    events:
      - http:
          path: countries/{id}
          method: delete
          cors: true
resources:
  Resources:
    dynamorole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:provider.environment.DYNAMODB_ROLE}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: '${self:provider.environment.DYNAMODB_ROLE}-policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                - logs:*
                Resource: "*"
 
    CountriesTable:
      Type: 'AWS::DynamoDB::Table'
      
      # DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        BillingMode: PROVISIONED 
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
         
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  
  
    CountryInitFunction:
      Type: AWS::Lambda::Function
      DependsOn: CountriesTable
      Properties:
        FunctionName: ${self:provider.environment.INIT_LAMBDA}
        Environment: 
           Variables:
             DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
        Handler: index.handler
        MemorySize: 128
        Code:
          ZipFile: |
            'use strict';
            const AWS = require('aws-sdk');
            const dynamoDb = new AWS.DynamoDB.DocumentClient();
            const tableName =  process.env.DYNAMODB_TABLE+'test';
            console.log('tableName='+tableName)
            exports.handler = (event, context) => {
            console.log('event'+JSON.stringify(event));
            var responseObject = {};
            responseObject.event = event;
            responseObject.context = context;
            console.log('rep-objwect'+JSON.stringify(responseObject));
            const params = {
                            TableName: tableName,
                            Item:
                            {
                            "id": "dsds-dfdf",
                            "name": "Brazil"
                            }
                        }
            try{            
            dynamoDb.put(params, (error, result) => {
              if (!error) {
                console.log("INIT::a new record was added successfully!!");
                sendResponse(responseObject,true,{Status:'SUCCESS' ,Data:result});
              }
              else{
                  console.error("INIT:Error::"+error);
                  sendResponse(responseObject,false,{Status:'FAILED' ,Data:error});
                  }
              });
                }
                catch(error){
                     console.error("catch INIT:Error::"+error);
                  sendResponse(responseObject,true,{Status:'FAILED' ,Data:error});
                }
            }

            function sendResponse(responseObject,responseType,responseData) {
                let cfnResponse = require('cfn-response');
                let responseStatus=responseType==true?cfnResponse.SUCCESS:cfnResponse.FAILED;
                cfnResponse.send(responseObject.event, responseObject.context, responseStatus,responseData);
            }

        Role:
          Fn::GetAtt: [ dynamorole , "Arn" ]
        Runtime: nodejs12.x
        Timeout: 30

    InitializeMyDynamoDB:
      Type: Custom::CountryInitDynamoDBFunction
      DependsOn: CountryInitFunction
      Properties:
        ServiceToken:
          Fn::GetAtt: [ CountryInitFunction , "Arn" ]
        DynamoTableName:
          Ref: CountriesTable
        Timeout: 30
  
        



