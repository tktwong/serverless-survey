service:
    name: omichat
    # app and org for use with dashboard.serverless.com
    #app: your-app-name
    #org: your-org-name

package:
    individually: true
    # include :
    #   - src/secret/omichat-firebase-service.json

plugins:
    - serverless-plugin-typescript
    - serverless-offline

provider:
    name: aws
    runtime: nodejs12.x
    region: ap-northeast-2
    stage: ${opt:stage, 'dev'}
    timeout: 30
    # vpc:
    #   securityGroupIds:
    #     - sg-xxxxx
    #   subnetIds:
    #     - subnet-xxxxxxxx
    #     - subnet-xxxxxxxx
    #     - subnet-xxxxxxxx
    apiGateway:
        minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
    environment:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        SLS_DEBUG: true
        NODE_DEV: ${self:provider.stage}
        MYSQL_HOST: ${self:custom.mysqlHost.${self:provider.stage}}
        MYSQL_PORT: ${self:custom.mysqlPort.${self:provider.stage}}
        MYSQL_USER: ${self:custom.mysqlUser.${self:provider.stage}}
        MYSQL_PASS: ${self:custom.mysqlPass.${self:provider.stage}}
        MYSQL_DATABASE: ${self:custom.mysqlDatabase.${self:provider.stage}}
        MYSQL_SYNC: ${self:custom.mysqlSync.${self:provider.stage}}
        MYSQL_LOG: ${self:custom.mysqlLog.${self:provider.stage}}
        PLAYGROUND_ENDPOINT: ${self:custom.playgroundEndpoint.${self:provider.stage}}
    iamRoleStatements:
        - Effect: 'Allow'
          Action:
              - 's3:*'
          Resource: 'arn:aws:s3:::sls-board-upload/*'
        - Effect: Allow
          Action:
              - execute-api:ManageConnections
          Resource: 'arn:aws:execute-api:*:*:*/development/POST/@connections/*'
        - Effect: Allow
          Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
          Resource: !GetAtt ConnectionsDynamoDBTable.Arn
        - Effect: Allow
          Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
          Resource: !GetAtt EventsDynamoDBTable.StreamArn
        - Effect: Allow
          Action:
              - dynamodb:PutItem
          Resource: !GetAtt EventsDynamoDBTable.Arn
        - Effect: Allow
          Action:
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
          Resource: !GetAtt SubscriptionsDynamoDBTable.Arn
        - Effect: Allow
          Action:
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:PutItem
          Resource: !GetAtt SubscriptionOperationsDynamoDBTable.Arn

custom:
    playgroundEndpoint:
        dev: '/graphql'
        product: '/product/graphql'
    serverless-offline:
        port: 3000
    stages:
        - dev
        - product
    mysqlHost:
        dev: 'localhost'
        product: 'localhsot'
    mysqlPort:
        dev: 3309
        product: 3306
    mysqlUser:
        dev: 'omichat'
        product: 'omichat'
    mysqlPass:
        dev: 'omichat1!'
        product: 'omichat1!'
    mysqlDatabase:
        dev: 'omichat'
        product: 'omichat'
    mysqlSync:
        dev: true
        product: true
    mysqlLog:
        dev: 'all'
        product: 'all'

functions:
    wsHandler:
        handler: src/utils/graphql.handleWebSocket
        events:
            - websocket:
                  route: $connect
            - websocket:
                  route: $disconnect
            - websocket:
                  route: $default
    eventProcessorHandler:
        handler: src/utils/graphql.handleEvents
        events:
            - stream:
                  enabled: true
                  type: dynamodb
                  arn:
                      Fn::GetAtt: [EventsDynamoDBTable, StreamArn]
    # this one is optional (if you want to support HTTP)
    httpHandler:
        handler: src/utils/graphql.handleHttp
        events:
            - http:
                  path: /graphql
                  method: any
                  cors: true
        # graphql:
        #     handler: src/utils/graphql.handler
        #     events:
        #         - http:
        #               path: /graphql
        #               method: get
        #               cors: true
        #         - http:
        #               path: /graphql
        #               method: post
        #               cors: true

resources:
    Resources:
        ConnectionsDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                # see DynamoDBConnectionManager
                TableName: Connections
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    # connection id
                    - AttributeName: id
                      KeyType: HASH
                # This one is optional (all connections have 2 hours of lifetime in ttl field but enabling TTL is up to you)
                TimeToLiveSpecification:
                    AttributeName: ttl
                    Enabled: true

        SubscriptionsDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                # see DynamoDBSubscriptionManager
                TableName: Subscriptions
                AttributeDefinitions:
                    - AttributeName: event
                      AttributeType: S
                    - AttributeName: subscriptionId
                      AttributeType: S
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: event
                      KeyType: HASH
                    - AttributeName: subscriptionId
                      KeyType: RANGE
                # This one is optional (all subscriptions have 2 hours of lifetime in ttl field but enabling TTL is up to you)
                TimeToLiveSpecification:
                    AttributeName: ttl
                    Enabled: true

        SubscriptionOperationsDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                # see DynamoDBSubscriptionManager
                TableName: SubscriptionOperations
                AttributeDefinitions:
                    - AttributeName: subscriptionId
                      AttributeType: S
                BillingMode: PAY_PER_REQUEST
                KeySchema:
                    - AttributeName: subscriptionId
                      KeyType: HASH
                # This one is optional (all subscription operations have 2 hours of lifetime in ttl field but enabling TTL is up to you)
                TimeToLiveSpecification:
                    AttributeName: ttl
                    Enabled: true

        EventsDynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                # see DynamoDBEventStore
                TableName: Events
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                # see ISubscriptionEvent
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
                # This one is optional (all events have 2 hours of lifetime in ttl field but enabling TTL is up to you)
                TimeToLiveSpecification:
                    AttributeName: ttl
                    Enabled: true
