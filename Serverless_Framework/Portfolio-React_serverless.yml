# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: portfolio # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-1
  iamRoleStatements:
    - Effect: Allow
      Resource: "*"
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents

functions:
  allProjects:
    handler: handler.projects
    description: List of projects and related data.
    events:
      - http:
          path: projects
          method: GET
          cors: true
  contactForm:
    handler: contactForm.sendContactForm
    description: Validation and send email using SES service.
    memorySize: 1024
    timeout: 10
    events:
      - http:
          path: projects/contact
          method: POST
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"
    iamRoleStatements:
      - Effect: Allow
        Resource: "*"
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
    environment:
      CONTACT_FORM_URL: ${file(./serverless.env.yml):dev.CONTACT_FORM_URL}
      CONTACT_FORM_NAME_KEY: ${file(./serverless.env.yml):dev.CONTACT_FORM_NAME_KEY}
      CONTACT_FORM_EMAIL_KEY: ${file(./serverless.env.yml):dev.CONTACT_FORM_EMAIL_KEY}
      CONTACT_FORM_TYPEOFPROFESSION_KEY: ${file(./serverless.env.yml):dev.CONTACT_FORM_TYPEOFPROFESSION_KEY}
      CONTACT_FORM_TYPEOFPROFESSION_OTHER_KEY: ${file(./serverless.env.yml):dev.CONTACT_FORM_TYPEOFPROFESSION_OTHER_KEY}
      CONTACT_FORM_MESSAGE_KEY: ${file(./serverless.env.yml):dev.CONTACT_FORM_MESSAGE_KEY}
      CONTACT_FORM_RECAPTCHA_KEY: ${file(./serverless.env.yml):dev.CONTACT_FORM_RECAPTCHA_KEY}
      CONTACT_FORM_MYEMAIL: ${file(./serverless.env.yml):dev.CONTACT_FORM_MYEMAIL}
      AWS_Email_Region: ${file(./serverless.env.yml):dev.AWS_Email_Region}

# resources:
#   Resources:
#     GatewayResponseDefault4XX:
#       Type: 'AWS::ApiGateway::GatewayResponse'
#       Properties:
#         ResponseParameters:
#           gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#           gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#         ResponseType: DEFAULT_4XX
#         RestApiId:
#           Ref: 'ApiGatewayRestApi'

#=========================================================================
# functions:
#   hello:
#     handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
#=========================================================================


