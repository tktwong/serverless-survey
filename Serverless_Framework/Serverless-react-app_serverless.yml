service:
  name: VanshServerlessTodoApp

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: 'dev'
  region: us-east-1
  #tracing: true
    #lambda: true
    #apiGateway: true
    #iamRoleStatements:
    #  - Effect: 'Allow'
    #    Action: 
    #      - 'xray:PutTraceSegements'
    #      - 'xray:PutTelemetryRecords'
    #    Resource: "*"

  environment:
    TODOS_TABLE: todos
    ATTACHMENT_S3_BUCKET: serverlessusaidtodo
    INDEX_NAME: UserIdIndex

  

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function THIS IS IMPLEMENTED
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
          cors: true
    iamRoleStatementsName: serverless-get-todo-role
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: "*"

  # TODO: Configure this function THIS IS DONE
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
        #  request:
        #    schema:
        #      application/json: ${file(src/models/create/create-todo-request.json)}
    iamRoleStatementsName: serverless-create-todo-role
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    
    

  # TODO: Configure this function STUBBED THIS
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
        #  request:
        #   schema:
        #      application/json: ${file(src/models/update-todo-request.json)}
    iamRoleStatementsName: serverless-update-todo-role
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function IMPLEMENTED
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: serverless-delete-todo-role
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function STUBBED THIS 
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: serverless-attachment-todo-role
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema: 
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
            CorsRules:
              - AllowedOrigins:
                  - '*'
                AllowedHeaders:
                  - '*'
                AllowedMethods:
                  - GET
                  - PUT
                  - POST
                  - DELETE
                  - HEAD
                MaxAge: 300

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
    
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId: 4ln943zju8

  

    # TODO: Add any necessary AWS resources