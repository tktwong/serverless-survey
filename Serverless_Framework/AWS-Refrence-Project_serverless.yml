# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  profile: serverless-admin
  region: us-east-1
  memorySize: 512
  timeout: 20
  environment:
     DYNAMODB_USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource:
  #       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TABLE}"
        
package:
  artifact: target/serverless-rest-api-dev.jar

functions:
  listUser:
    handler: com.serverlesseducation.handler.ListUserHandler
    role: UserDynamoDbRole
    events:
      - http:
          path: /user
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: serverlessApiGatewayAuthorizer
          
  getUser:
    handler: com.serverlesseducation.handler.GetUserHandler
    role: UserDynamoDbRole
    events:
      - http:
          path: /user/{id}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: serverlessApiGatewayAuthorizer
          
  createUser:
    handler: com.serverlesseducation.handler.CreateUserHandler
    role: UserDynamoDbRole
    events:
      - http:
          path: /user
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: serverlessApiGatewayAuthorizer
   
  updateUser:
    handler: com.serverlesseducation.handler.UpdateUserHandler
    role: UserDynamoDbRole
    events:
      - http:
          path: /user/{id}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: serverlessApiGatewayAuthorizer
          
  deleteUser:
    handler: com.serverlesseducation.handler.DeleteUserHandler
    role: UserDynamoDbRole
    events:
      - http:
          path: /user/{id}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: serverlessApiGatewayAuthorizer

resources:
   Resources:
      # Add Bucket
      serverlessUserBucket:
         Type: AWS::S3::Bucket
         Properties:
            BucketName: serverless-user-metadata-bucket
            WebsiteConfiguration:
               IndexDocument: index.html
      # Enable Public access to bucket
      serverlessUserBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket:
            Ref: 'serverlessUserBucket'
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Principal: '*'
                Action:
                  - 's3:GetObject'
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:s3:::'
                      - Ref: 'serverlessUserBucket'
                      - '/*'

      UserDynamoDbTable:
         Type: AWS::DynamoDB::Table
         DeletionPolicy: Retain
         Properties:
            TableName: ${self:provider.environment.DYNAMODB_USER_TABLE}
            AttributeDefinitions:
             - AttributeName: id
               AttributeType: S
             - AttributeName: name
               AttributeType: S
            KeySchema:
             - AttributeName: id
               KeyType: HASH
             - AttributeName: name
               KeyType: RANGE
            ProvisionedThroughput:
             ReadCapacityUnits: 5
             WriteCapacityUnits: 5

      UserDynamoDbRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: serverlessLambda
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - lambda.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: DynamoDBWriteAccess
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                    Resource:
                      - 'Fn::Join':
                          - ':'
                          - - 'arn:aws:logs'
                            - Ref: 'AWS::Region'
                            - Ref: 'AWS::AccountId'
                            - 'log-group:/aws/lambda/*:*:*'
                  - Effect: Allow
                    Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                    Resource:
                      'Fn::GetAtt': [UserDynamoDbTable, Arn]

      #Amazon API Gateway can use the JWT tokens returned by Cognito User Pools to authenticate API calls.              
      serverlessApiGatewayAuthorizer:
        Type: AWS::ApiGateway::Authorizer
        Properties:
          Name: serverless
          RestApiId:
            Ref: ApiGatewayRestApi
          Type: COGNITO_USER_POOLS
          ProviderARNs:
            - Fn::GetAtt: [serverlessCognitoUserPool, Arn]
          IdentitySource: method.request.header.Authorization
             
      # Create Cognito User Pool by adding itâ€™s declaration to resources:
      serverlessCognitoUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
          UserPoolName: serverlessUserPool
      #we need to create Cognito User Pool Client.
      serverlessCognitoUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
          ClientName: serverlessWebApp
          GenerateSecret: false
          UserPoolId:
            Ref: 'serverlessCognitoUserPool'   
            
   Outputs:
      WebsiteURL:
         Value: !GetAtt serverlessUserBucket.WebsiteURL
         Description: URL for website hosted on S3
      serverlessCognitoUserPoolId:
        Description: 'serverless Cognito User Pool ID'
        Value:
          Ref: 'serverlessCognitoUserPool'
      serverlessCognitoUserPoolClientId:
        Description: 'serverless Cognito User Pool Client ID'
        Value:
          Ref: 'serverlessCognitoUserPoolClient'
      UserDynamoDbTableARN:
        Value: !GetAtt UserDynamoDbTable.Arn
        Description: User Dynamo Db Table ARN

      