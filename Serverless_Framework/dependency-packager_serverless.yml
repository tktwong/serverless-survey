service:
  name: codesandbox-packager-v2
  runtime: nodejs8.10

custom:
  s3Bucket: ${opt:stage}-${opt:s3prefix, 'packager'}-packages.codesandbox.io
  region: eu-west-1
  serverless-offline:
    port: 5600

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 3008
  timeout: 300
  region: ${self:custom.region}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
        - "s3:DeleteObject"
      Resource: "arn:aws:s3:::${self:custom.s3Bucket}/*"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"

  environment:
    IN_LAMBDA: "true"
    SERVERLESS_STAGE: ${opt:stage}
    BUCKET_NAME: ${self:custom.s3Bucket}

plugins:
  - serverless-plugin-warmup
  - serverless-offline

# needs more granular excluding in production as only the serverless provider npm
# package should be excluded (and not the whole node_modules directory)
package:
  exclude:
    - .gitignore
    - .git/**
    - functions/**
  include:
    - dist/**
    - ./environment.json

functions:
  api:
    handler: dist/api/index.http
    warmup: prod
    memorySize: 1024 # optional, in MB, default is 1024
    package:
      exclude:
        - dist/**
        - functions/**
        - manifests/**
        - packages/**
      include:
        - dist/api/**
    events:
      - http:
          path: /packages/{packages}
          method: post
          cors: true
          request:
            parameters:
              paths:
                id: true

  packager:
    handler: dist/packager/index.call
    package:
      exclude:
        - dist/**
        - functions/**
        - manifests/**
        - packages/**
      include:
        - dist/packager/**

  # NOTE: the following uses an "event" event (pubSub event in this case).
  # Please create the corresponding resources in the Google Cloud
  # before deploying this service through Serverless
  #second:
  #  handler: event
  #  events:
  #    - event:
  #        eventType: providers/cloud.pubsub/eventTypes/topic.publish
  #        resource: projects/*/topics/my-topic

# you can define resources, templates etc. the same way you would in a
# Google Cloud deployment configuration
resources:
  Resources:
    PackageS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}

    PackageS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: PackageS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
