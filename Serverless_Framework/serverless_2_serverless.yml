org: aronanubhav
app: serverless-todo-app-app
service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
#  - serverless-aws-documentation
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  tracing:
    lambda: true
    apiGateway: true

  environment:
    PROJECT_NAME: sls2 #name of project
    DynamoDB_Table: sls2-${self:provider.stage} #name of dynamo dB table
    S3_BUCKET_NAME: sls2-bucket-${self:provider.stage} #name of S3 Remember to make it public next time :P
    
functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true #added for cors reference
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:eu-west-1:*:table/${self:provider.environment.DynamoDB_Table}


  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true #added for cors reference
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:eu-west-1:*:table/${self:provider.environment.DynamoDB_Table}


  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true #added for cors reference
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:eu-west-1:*:table/${self:provider.environment.DynamoDB_Table}


  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true #added for cors reference
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:eu-west-1:*:table/${self:provider.environment.DynamoDB_Table}
      


  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true #added for cors reference
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*
      


resources:
  Resources:
    # TODO: Add any necessary AWS resources

    #S3 bucket reference taken from: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
    # Bucket sample taken from: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html
    #Referred Git code for CorsRules: https://github.com/Neehi/udacity-serverless-todo.git
    #Reference: https://knowledge.udacity.com/questions/226133
    AttachmentsBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME} #Changed to defined env variable to see if this was the error with S3
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false 
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DynamoDB_Table}
    onlyBody:
      Type: 'AWS::ApiGateway::RequestValidator'
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false