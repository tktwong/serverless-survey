# NOTA: actualice esto con el nombre del servicio SpectrumAPI
# TODO: Leer documentos serverless.yml
# TODO: https://serverless.com/framework/docs/providers/aws/guide/intro/

# Los nuevos nombres de servicio crean nuevos proyectos en AWS una vez implementados
sservice: serverless-starter-service-node

# Use el plugin serverless-webpack para transpilar ES6
# Usando offline para simularse y probar localmente
# Use calentamiento para prevenir los arranques en frío.
plugins:
  - serverless-webpack
  - serverless-offline

# configurar complementos declarados arriba
custom:
  # Las etapas se basan en lo que se pasa a la CLI cuando se ejecuta
  # comandos sin servidor. O retroceder a la configuración en la sección del proveedor.
  stage: ${opt:stage, self:provider.stage}
  
  # Cargar configuración webpack
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

  # Cargar variables de entorno secretas basadas en la etapa actual.
  # Fallback to default si no está en PROD
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # Las variables de entorno disponibles a través de process.env
  environment:
    # tableName: ${self:custom.tableName}
    # stripePrivateKey: ${self:custom.environment.stripePrivateKey}

functions:
  # Define un punto final de la API HTTP que llama a la función microServerless en handler.js
  # - ruta: la ruta url es / microServerless
  # - Método: solicitud GET
  # - cors: CORS habilitado (Intercambio de recursos entre orígenes) para la cruz del navegador
  #      llamada api dominio
  # - autorizador: autenticar utilizando un rol IAM de AWS
  displayService:
    handler: handler.starterService
    events:
      - http: 
          path: starterService
          method: get
          cors: true
    # Se puede aplicar calentamiento a cada lambda para anular
    # configuraciones en el bloque custom.warmup global.
    