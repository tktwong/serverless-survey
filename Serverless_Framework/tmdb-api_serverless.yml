service: "tmdb-api"

provider:
  name: aws
  runtime: "nodejs12.x"
  region: "us-west-2"
  stage: ${opt:stage, "dev"}
  environment:
    stage: ${self:provider.stage}
    PORT: 1337
    MOVIE_DB_API_KEY: ${env:MOVIE_DB_API_KEY, param:MOVIE_DB_API_KEY}
    ENGINE_API_KEY: ${env:ENGINE_API_KEY, param:ENGINE_API_KEY}
    URL:
      {
        "Fn::Join":
          [
            "",
            [
              " https://",
              { "Ref": "ApiGatewayRestApi" },
              ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}",
            ],
          ],
      }

plugins:
  - "serverless-dotenv-plugin"
  - "serverless-webpack"
  - "serverless-offline"

package:
  exclude:
    - "./ node_modules/**"
    - "./.eslintrc.js"
    - "./.babelrc.js"
    - "./apollo.config.js"
    - "./jest.config.js"
    - "./tsconfig.json"
    - "./webpack.*.js"

custom:
  serverless-offline:
    httpPort: ${self:provider.environment.PORT}
  webpack:
    includeModules: true
    webpackConfig: "webpack.lambda.js"

functions:
  graphql:
    handler: "lambda/tmdb-api.handler"
    events:
      - http:
          path: "/{proxy+}"
          method: any
          cors: true
