service:
  name: jablj-service

plugins:
  - serverless-plugin-scripts
  - serverless-s3-sync
  - serverless-webpack

custom:
  correspondenceFunctionName: ${file(./config.${self:provider.stage}.json):CORRESPONDENCE_FUNCTION}
  s3Bucket: ${file(./config.${self:provider.stage}.json):BUCKET}
  s3Sync:
    - bucketName: ${file(./config.${self:provider.stage}.json):BUCKET}
      localDir: app/build
  # extra:
  #   cognito:
  #     userPoolArn: arn:aws:cognito-idp:us-east-1:016355552928:userpool/us-east-1_CWSGEC6mg
  # scripts:
  #   hooks:
  #     'deploy:createDeploymentArtifacts': npm run compile       

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:CreateTable
        - dynamodb:DeleteTable
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:ListTables
      Resource: "*"        
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::${file(./config.${self:provider.stage}.json):ASSETS_BUCKET}"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - ses:*
      Resource: "*" 
    - Effect: Allow
      Action:
        - cognito-idp:AdminGetUser
        - cognito-idp:AdminCreateUser
        - cognito-idp:adminConfirmSignUp
        - cognito-idp:AdminDeleteUser
        - cognito-idp:ListUsers
      Resource: 
        - "arn:aws:cognito-idp:us-east-1:016355552928:userpool/${opt:userPoolIdUsers}"
        - "arn:aws:cognito-idp:us-east-1:016355552928:userpool/${opt:userPoolIdAdmins}"
        - "arn:aws:cognito-idp:us-east-1:016355552928:userpool/${opt:userPoolIdSite}"

functions:
  cron:
    handler: cron.handler
    events:
      - schedule: rate(1 hour)
  config:
    handler: config.handler
    environment:
      JABLJ_ENV: ${self:provider.stage}
      USER_POOL_ID_USERS: ${opt:userPoolIdUsers}
      USER_POOL_ID_ADMINS: ${opt:userPoolIdAdmins}
      USER_POOL_ID_SITE: ${opt:userPoolIdSite}
      USER_POOL_CLIENT_ID_USERS: ${opt:userPoolClientIdUsers}
      USER_POOL_CLIENT_ID_ADMINS: ${opt:userPoolClientIdAdmins}
      USER_POOL_CLIENT_ID_FE_ADMINS: ${opt:userPoolClientIdFeAdmins}
      USER_POOL_CLIENT_ID_SITE: ${opt:userPoolClientIdSite}
      USER_POOL_CLIENT_ID_FE_SITE: ${opt:userPoolClientIdFeSite}
      USER_POOL_CLIENT_SECRET_ADMINS: ${opt:userPoolClientSecretAdmins}
      USER_POOL_CLIENT_SECRET_SITE: ${opt:userPoolClientSecretSite}
    events:
      - http:
          method: get
          path: config
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
  correspondence:
    handler: correspondence.handler
    environment:
      JABLJ_ENV: ${self:provider.stage}
    events:
      - http:
          method: post
          path: correspondence
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false            
  sign:
    handler: sign.handler
    environment:
      MY_ACCESSKEY: ${opt:accessKeyId}
      MY_SECRET_ACCESSKEY: ${opt:secretAccessKey}
      JABLJ_ENV: ${self:provider.stage}      
    events:
      - http:
          method: get
          path: s3/sign
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
  normalizeImage:
    handler: normalizeImage.handler
    environment:    
      MY_ACCESSKEY: ${opt:accessKeyId}
      MY_SECRET_ACCESSKEY: ${opt:secretAccessKey}
      JABLJ_ENV: ${self:provider.stage}
    events:
      - http:
          method: post
          path: s3/normalizeImage
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false            
  tenants:
    handler: tenants.handler
    environment:    
      JABLJ_ENV: ${self:provider.stage}    
    events:
      - http:
          method: get
          path: tenants
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false    
      - http:
          method: post
          path: tenants
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: put
          path: tenants
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: delete
          path: tenants/{resourceId}
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: post
          path: tenants/clone
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
  schedules:
    handler: schedules.handler
    environment:
      JABLJ_ENV: ${self:provider.stage}    
    events:
      - http:
          method: get
          path: schedules
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false     
      - http:
          method: post
          path: schedules
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: delete
          path: schedules
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: get
          path: schedules/{email}
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false                                     
  srs:
    handler: srs.handler
    environment:
      CORRESPONDENCE_FUNCTION: ${self:custom.correspondenceFunctionName}
      JABLJ_ENV: ${self:provider.stage}    
    events:
      - http:
          method: get
          path: srs
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false     
      - http:
          method: post
          path: srs
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: delete
          path: srs
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
  users:
    handler: users.handler
    environment:
      JABLJ_ENV: ${self:provider.stage}
      USER_POOL_ID_USERS: ${opt:userPoolIdUsers}
      USER_POOL_ID_ADMINS: ${opt:userPoolIdAdmins}
      USER_POOL_ID_SITE: ${opt:userPoolIdSite}    
    events:
      - http:
          method: get
          path: users
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: post
          path: users
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: delete
          path: users
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: get
          path: usersByTenant/{tenant}
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false                                          
      - http:
          method: get
          path: users/{scope}/{email}
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false
      - http:
          method: post
          path: users/confirm
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-JABLJ-Resource
            allowCredentials: false                      
resources:
  Resources:
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: 'true'
          Aliases:
            - ${self:custom.s3Bucket}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: WebApp
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]            