service:
  name: screen-controller-cecille
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SCREEN_COMMUNICATION_DYNAMODB_TABLE: screen_communication
    SCREENS_DYNAMODB_TABLE: screens
    VIDEO_DYNAMODB_TABLE: videos
    AUDIO_DYNAMODB_TABLE: audio
    SCHEDULE_DYNAMODB_TABLE: schedule
    REGION: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SCREENS_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.VIDEO_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SCREEN_COMMUNICATION_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.AUDIO_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SCHEDULE_DYNAMODB_TABLE}"


functions:
  addVideo:
    handler: src/controllers/VideoController.addVideo
    events:
      - http: 
          method: post
          path: video/create
          cors: true
  getVideos:
    handler: src/controllers/VideoController.getAllVideos
    events:
      - http: 
          method: get
          path: videos
          cors: true
  getVideosCSV:
    handler: src/controllers/VideoController.getCSVList
    events:
      - http: 
          method: get
          path: videos/csv
          cors: true
  updateVideo:
    handler: src/controllers/VideoController.updateVideo
    events:
      - http: 
          method: post
          path: video/update
          cors: true
  deleteVideo:
    handler: src/controllers/VideoController.deleteVideo
    events:
      - http: 
          method: post
          path: video/delete
          cors: true
  addScreen:
    handler: src/controllers/ScreenController.addScreen
    events:
      - http: 
          method: post
          path: screen/create
          cors: true
  getScreens:
    handler: src/controllers/ScreenController.getAllScreens
    events:
      - http: 
          method: get
          path: screens
          cors: true
  updateScreen:
    handler: src/controllers/ScreenController.updateScreen
    events:
      - http: 
          method: post
          path: screen/update
          cors: true
  addAudio:
    handler: src/controllers/AudioController.addAudio
    events:
      - http: 
          method: post
          path: audio/create
          cors: true
  getAudio:
    handler: src/controllers/AudioController.getAllAudio
    events:
      - http: 
          method: get
          path: audio
          cors: true
  getVideosScheduledOnScreens:
    handler: src/controllers/ScheduleController.getVideosScheduledOnScreens
    events:
      - http: 
          method: get
          path: schedule/is_active
          cors: true
  updateAudio:
    handler: src/controllers/AudioController.updateAudio
    events:
      - http: 
          method: post
          path: audio/update
          cors: true
  connectSocket:
    handler: src/controllers/CommunicationController.connectSocket
    events:
      - websocket:
          route: $connect
  disconnectSocket:
    handler: src/controllers/CommunicationController.disconnectSocket
    events:
      - websocket:
          route: $disconnect
  messageSocket:    
    handler: src/controllers/CommunicationController.messageSocket
    events:
      - websocket:
          route: $default
  updatePiSchedule:    
    handler: src/controllers/ScheduleController.updatePiSchedule
  startSchedule:    
    handler: src/controllers/ScheduleController.startSchedule
  stopSchedule:    
    handler: src/controllers/ScheduleController.stopSchedule


resources:
  Resources:
    ScreenCommunicationTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.SCREEN_COMMUNICATION_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ScreensTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.SCREENS_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    VideosTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.VIDEO_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    AudioTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.AUDIO_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ScheduleTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.SCHEDULE_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
