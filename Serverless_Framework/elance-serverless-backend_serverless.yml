# serverless.yml

service: elance-serverless-backend

custom:
  customDomain:
    domainName: api.intellilance.com
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: '*.intellilance.com'
  appTable: 'app-table-${self:provider.stage}'
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
      inMemory: true
      seed: true
      convertEmptyValues: true
    seed:
      test:
        sources:
          - table: 'app-table-${self:provider.stage}'
            sources: [test-data/app-table-dev.json]          

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource: [
        "arn:aws:execute-api:*:*:**/@connections/*"
      ]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: [
        "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.APP_TABLE}",
        "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.APP_TABLE}/index/entityIndex",
      ]
  environment:
    APP_TABLE: ${self:custom.appTable}

package:
  include: 
    - .env
  exclude:
    - src/**
    - tsconfig.json
    - nodemon.json
    - test-data/**
    - .dynamodb/**
    - .circleci/**
    - README.md

functions:
  app:
    handler: dist/serverless.handler
    events:
      - http: 'ANY {proxy+}'
  websocket-connect:
    handler: dist/WebSocketServer/handler.connect
    events:
      - websocket:
          routeKey: $connect
  websocket-disconnect:
    handler: dist/WebSocketServer/handler.disconnect
    events:
      - websocket:
          routeKey: $disconnect
  fucc:
    handler: dist/WebSocketServer/handler.doFucc
    events:
      - websocket: 
          routeKey: fuccJobs
  sendMessage: 
    handler: dist/WebSocketServer/handler.sendMessage
    events:
      - websocket:
          routeKey: sendMessage
  defaultMessage: 
    handler: dist/WebSocketServer/handler.defaultMessage
    events: 
      - websocket:
          routeKey: $default
  sendMessagesToUser:
    handler: dist/WebSocketServer/handler.passContentOnConnection
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [AppDynamoDBTable, StreamArn]
      
resources:
  Resources:
    AppDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: entity
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: entity
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: entityIndex
            KeySchema:
              - AttributeName: entity
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        TableName: ${self:custom.appTable}

plugins:
  - serverless-websockets-plugin
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-domain-manager