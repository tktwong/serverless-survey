service: serverless-bot-rek 
provider:
  name: aws  
  runtime: nodejs8.10 
  stage: dev
  region: eu-west-1
  environment:
    CONSUMER_KEY: #CONSUMER_KEY"
    CONSUMER_SECRET: #CONSUMER_SECRET#
    ACCESS_TOKEN_KEY: #ACCESS_TOKEN_KEY#
    ACCESS_TOKEN_SECRET: #ACCESS_TOKEN_SECRET#   
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:GetItem
        - dynamodb:PutItem 
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - rekognition:DetectLabels
      Resource: "*"  
functions:
  rekbot:
    handler: handler.rek 
    events:
      - schedule: rate(10 minutes)
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
plugins:
  - serverless-dynamodb-local
  - serverless-offline
custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations