service: cfpland-bot

custom:
  pythonRequirements:
    dockerizePip: 'non-linux'
    slim: true
    useDownloadCache: true
    useStaticCache: true
    fileName: requirements-prod.txt

  stage: ${opt:stage, self:provider.stage}

  serverless-iam-roles-per-function:
    defaultInherit: true

  # Environment variables  
  TELEGRAM_CFPLAND_CHANNEL:
    prod: '@cfpland'
    dev: ''
  
  KMS_KEY_ID:
    prod: 'cf1e9e81-7d34-461e-9fe9-8afddba7787e'
    dev: ''

provider:
  name: aws
  region: eu-west-1
  runtime: python3.7
  memorySize: 128
  stage: dev
  environment: 
    ENVIRONMENT: ${self:custom.stage}
    TELEGRAM_CFPLAND_CHANNEL: ${self:custom.TELEGRAM_CFPLAND_CHANNEL.${self:custom.stage}}

  iamRoleStatements:
    - Effect: 'Allow'
      Action: 'ssm:GetParameters'
      Resource: 'arn:aws:ssm:${self:provider.region}:*:parameter/CFPLAND/*'
    - Effect: 'Allow'
      Action: 'kms:Decrypt'
      Resource: 'arn:aws:kms:${self:provider.region}:*:key/${self:custom.KMS_KEY_ID.${self:custom.stage}}'

functions:
  parse: 
    handler: cfpland_bot.parser.main.parse
    timeout: 30
    events:
      - schedule: cron(0 10 * * ? *)
    vpc: ${file(vpc-resource.yaml)}

  telegram_bot:
    handler: cfpland_bot.bot.main.telegram_bot
    timeout: 30
    events:
      - http:
          path: /telegram_bot
          method: post
    vpc: ${file(vpc-resource.yaml)}

  send_telegram_messages_to_channel:
    handler: cfpland_bot.bot.main.send_telegram_messages_to_channel
    timeout: 60
    events:
      - schedule: cron(0 11 * * ? *)
    vpc: ${file(vpc-resource.yaml)}

  set_telegram_webhook:
    handler: cfpland_bot.bot.main.set_telegram_webhook
    vpc: ${file(vpc-resource.yaml)}

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function