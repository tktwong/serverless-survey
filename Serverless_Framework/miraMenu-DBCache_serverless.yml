# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: DBCache

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-plugin-include-dependencies
  - serverless-offline-sns
  - serverless-offline

custom:
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: true
    # host: 0.0.0.0 # Optional, defaults to 127.0.0.1 if not provided to serverless-offline
    # sns-endpoint: http://127.0.0.1:4567 # Optional. Only if you want to use a custom endpoint
  serverless-offline:
    port: 4000
    debug: true
  funcname: dbupdater
  dev-funcname: dev-dbupdater

provider:
  name: aws
  runtime: nodejs8.10
  versionFunctions: true # optional, default is true
# you can overwrite defaults here
  stage: dev
  region: us-west-2
# VPC
#  vpc:
#      securityGroupIds:
#        #- sg-a9ae7ed6
#        - sg-e8d57f98
#      subnetIds:
        #- subnet-bd239fe7
        #- subnet-866a7cce
#        - subnet-d453888e
#        - subnet-0da53227a62ad6f9a

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::meshphoto"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:GetObjectAcl"
        - "s3:PutObjectAcl"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::meshphoto/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchGetItem"
        - "dynamodb:GetItem"
        - "dynamodb:ListTables"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:dynamodb:'
            - Ref: 'AWS::Region'
            - ':'
            - '780139254791'
            - ':table/*'
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchWriteItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:dynamodb:'
            - Ref: 'AWS::Region'
            - ':'
            - '780139254791'
            - ':table/BranchesB2C'
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchWriteItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:dynamodb:'
            - Ref: 'AWS::Region'
            - ':'
            - '780139254791'
            - ':table/ItemsB2C'
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchWriteItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:dynamodb:'
            - Ref: 'AWS::Region'
            - ':'
            - '780139254791'
            - ':table/MenusB2C'
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
package:
  exclude:
    - src/**
    - node_modules/aws-sdk
  include:
    - handler.js
  excludeDevDependencies: true # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true

functions:
  dbupdate_branch:
    handler: handler.updateBranch
    name: ${self:custom.dev-funcname}-branch
    events:
      - stream: arn:aws:dynamodb:us-west-2:780139254791:table/Branches/stream/2018-05-18T10:31:10.616

  dbupdate_restaurant:
    handler: handler.updateRestaurant
    name: ${self:custom.dev-funcname}-restaurant
    events:
      - stream: arn:aws:dynamodb:us-west-2:780139254791:table/Restaurants/stream/2018-05-18T10:30:46.907

  dbupdate_item:
    handler: handler.updateItem
    name: ${self:custom.dev-funcname}-item
    events:
      - stream: arn:aws:dynamodb:us-west-2:780139254791:table/Menus/stream/2018-05-20T08:38:54.020

  init_es_data:
    handler: handler.initES
    name: init_es_data
    timeout: 60
    events:
      - cloudwatchEvent:
          event:
            source:
              - "aws.ecs"            
            detail-type:
              - "ECS Task State Change"
              #- "ECS Container Instance State Change"
            detail:
              clusterArn:
                - "arn:aws:ecs:us-west-2:780139254791:cluster/miramenu-b2c-server"

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    topicDBUpdate:
#      Type: AWS::SNS::Topic
#      Properties:
#        DisplayName: DBUpdate
#        Subscription:
#        - Endpoint: 
#            Fn::Join:
#              - ''
#              - - 'arn:aws:lambda:'
#                - Ref: 'AWS::Region'
#                - ':'
#                - '780139254791'
#                - ':function:${self:custom.funcname}'
#          Protocol: lambda
#        - Endpoint: 
#            Fn::Join:
#              - ''
#              - - 'arn:aws:lambda:'
#                - Ref: 'AWS::Region'
#                - ':'
#                - '780139254791'
#                - ':function:${self:custom.dev-funcname}'
#          Protocol: lambda
#    snspolicyDBUpdate:
#      Type: AWS::SNS::TopicPolicy
#      Properties:
#        Topics:
#        - Ref: topicDBUpdate
#        PolicyDocument:
#          Version: '2008-10-17'
#          Id: __default_policy_ID
#          Statement:
#          - Sid: __default_statement_ID
#            Effect: Allow
#            Principal:
#              AWS: "*"
#            Action:
#            - SNS:GetTopicAttributes
#            - SNS:SetTopicAttributes
#            - SNS:AddPermission
#            - SNS:RemovePermission
#            - SNS:DeleteTopic
#            - SNS:Subscribe
#            - SNS:ListSubscriptionsByTopic
#            - SNS:Publish
#            - SNS:Receive
#            Resource:
#              Ref: topicDBUpdate
#            Condition:
#              StringEquals:
#                AWS:SourceOwner: '780139254791'

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

