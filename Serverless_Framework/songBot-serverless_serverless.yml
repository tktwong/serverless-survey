# serverless.yml
service: serverless-songbot

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-python-requirements
custom:
  stage: ${opt:stage, self:provider.stage}
  environment: ${file(env.yml)}

provider:
  name: aws
  runtime: python3.6
  region: eu-west-1
  stage: dev
  environment:
      # soundcloud env variables
      soundcloudClientId: ${self:custom.environment.soundcloudClientId}
      soundcloudDownloadAllPlaylist: ${self:custom.environment.soundcloudDownloadAllPlaylist}
      soundcloudPlaylistToDownload: ${self:custom.environment.soundcloudPlaylistToDownload}

      # youtube env variables
      youtubeChannelId: ${self:custom.environment.youtubeChannelId}
      youtubeApiKey: ${self:custom.environment.youtubeApiKey}
      youtubeDonwloadAllPlaylist: ${self:custom.environment.youtubeDonwloadAllPlaylist}
      youtubePlaylistToDownload: ${self:custom.environment.youtubePlaylistToDownload}
      
      # global env variables
      s3bucket: ${self:resources.Resources.uploadBucket.Properties.BucketName}
      downloadLambdafunction: ${self:functions.download.name}

functions:
  transcode:
    name: songbotTranscoder--${self:custom.stage}
    handler: src/songbotTranscoder.songbotTranscoder
    events:
      - s3:
        bucket: ${self:service}-storage
        event: s3:ObjectCreated:*
    iamRoleStatements:
      - Effect: Allow
        Action:
          - elastictranscoder:*
        Resource:
        - "arn:aws:elastictranscoder:${self:provider.region}:#{AWS::AccountId}:pipeline/${self:custom.environment.PipelineId}"
        - "arn:aws:elastictranscoder:${self:provider.region}:#{AWS::AccountId}:preset/1351620000001-300010"
  cron:
    name: songbotCronCall-${self:custom.stage}
    handler: src/songbotCronCall.songbotCronCall
    events:
      - schedule: rate(1 day)
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource:
          - "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:functions.download.name}"
      - Effect: Allow
        Action:
          - s3:ListBucket
        Resource:
          - "arn:aws:s3:::${self:resources.Resources.uploadBucket.Properties.BucketName}"
  download:
    name: songbotDownloader-${self:custom.stage}
    handler: src/songbotDownloader.songbotDownloader
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource:
          - "arn:aws:s3:::${self:resources.Resources.uploadBucket.Properties.BucketName}"
          - "arn:aws:s3:::*/*"
resources:
  Resources:
    uploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-storage


    
