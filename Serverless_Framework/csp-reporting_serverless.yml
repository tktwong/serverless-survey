service: serverless-csp-reports-service

plugins:
  - serverless-plugin-canary-deployments
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      inMemory: true
      seed: true
      migrate: true
      convertEmptyValues: true
      # noStart: true
    seed:
      dev:
        sources:
          - table: ${self:service}-${opt:stage, self:provider.stage}
            sources: [dynamodb/dev.json]

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  memorySize: 128
  logRetentionInDays: 14
  versionFunctions: true
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    # IS_OFFLINE: true # Local testing
  apiKeys:
    - csp-report-api-key # you can hide it in a serverless variable
  usagePlan:
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100
  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        # - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:function:serverless-csp-reports-*"
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: src/handle-insert.insert
    events:
      - http:
          path: reports
          method: post
          private: false
          cors: true
    # deploymentSettings:
    #   type: Linear10PercentEvery1Minute
    #   alias: Live
  fetch:
    handler: src/handle-fetch.fetch
    events:
      - http:
          path: /reports
          method: get
          private: true
          cors:
            origin: '*'
    # deploymentSettings:
    #   type: Linear10PercentEvery1Minute
    #   alias: Live

resources:
  Resources:
    cspReports:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: dateId
            AttributeType: S
          - AttributeName: timeId
            AttributeType: S
        KeySchema:
          - AttributeName: dateId
            KeyType: HASH
          - AttributeName: timeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:service}-${opt:stage, self:provider.stage}
