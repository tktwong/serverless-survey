service: aws-rest-with-okta-lambda-authorizer

frameworkVersion: ">=1.1.0 <2.0.0"

custom:
  env: ${file(./${self:provider.stage}.env.json)}

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless-admin
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    OKTA_ISSUER: ${self:custom.env.ISSUER}
    OKTA_AUDIENCE: ${self:custom.env.AUDIENCE}
    OKTA_CLIENT_ID: ${self:custom.env.CLIENT_ID}
    OKTA_GROUP_CLAIM_ADMINS: ${self:custom.env.ADMIN_GROUP}
    ALLOW_ORIGIN: ${self:custom.env.ALLOW_ORIGIN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  oktaAuth:
    handler: authorizer/handler.auth
    cors: true

  create:
    handler: products/create.create
    events:
      - http:
          path: /api/v1/products
          method: post
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
          cors:
            origins:
              - ${self:custom.env.ALLOW_ORIGIN}
            headers:
              - "Content-Type"

  list:
    handler: products/list.list
    events:
      - http:
          path: /api/v1/products
          method: get
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
          cors:
            origins:
              - ${self:custom.env.ALLOW_ORIGIN}
            headers:
              - "Content-Type"

  get:
    handler: products/get.get
    events:
      - http:
          path: /api/v1/products/{id}
          method: get
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
          cors:
            origins:
              - ${self:custom.env.ALLOW_ORIGIN}
            headers:
              - "Content-Type"

  update:
    handler: products/update.update
    events:
      - http:
          path: /api/v1/products/{id}
          method: put
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
          cors:
            origins:
              - ${self:custom.env.ALLOW_ORIGIN}
            headers:
              - "Content-Type"

  delete:
    handler: products/delete.delete
    events:
      - http:
          path: /api/v1/products/{id}
          method: delete
          authorizer:
            name: oktaAuth
            identityValidationExpression: ^Bearer [-0-9a-zA-z\.]*$
            resultTtlInSeconds: 0
          cors:
            origins:
              - ${self:custom.env.ALLOW_ORIGIN}
            headers:
              - "Content-Type"

resources:
  Resources:
    productsDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
