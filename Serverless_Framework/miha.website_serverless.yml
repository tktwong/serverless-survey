service: miha-website

plugins:
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

custom:
  configuration:
    production:
      bucket: ${self:service}-${self:provider.stage}
      secondLevelDomain: miha.website
      domain: ${self:custom.configuration.${self:provider.stage}.secondLevelDomain}
      # Certificates for Cloudfront must be in us-east-1 region
      # https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-ssl-certificate-errors/
      certificateArn: arn:aws:acm:us-east-1:431335522756:certificate/86af28d2-80fe-4334-9900-a6c0dcb36d66
  s3Sync:
    - bucketName: ${self:custom.configuration.${self:provider.stage}.bucket}
      localDir: dist/
  cloudfrontInvalidate:
    distributionIdKey: CDNDistributionId
    items:
      - '/index.html'

provider:
  stage: ${opt:stage, 'production'}
  name: aws
  runtime: nodejs8.10
  region: eu-central-1

resources:
  Resources:
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.configuration.${self:provider.stage}.bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - 'Authorization'
                - 'Content-Length'
              AllowedMethods:
                - GET
              MaxAge: 3000

    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
            - s3:GetObject
            Resource: arn:aws:s3:::${self:custom.configuration.${self:provider.stage}.bucket}/*

    WebAppCloudFrontDistribution:
      DependsOn:
      - WebAppS3Bucket
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: { "Fn::GetAtt": [WebAppS3Bucket, DomainName ] }
              Id: WebApp${self:provider.stage}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: 'true'
          Aliases:
            - ${self:custom.configuration.${self:provider.stage}.domain}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: WebApp${self:provider.stage}
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            Compress: True
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.configuration.${self:provider.stage}.certificateArn}
            SslSupportMethod: sni-only

    DnsRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
              - WebAppCloudFrontDistribution
              - DomainName
          # Looks like it is always the same for CloudFront distribs.
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneName: ${self:custom.configuration.${self:provider.stage}.secondLevelDomain}.
        Name: ${self:custom.configuration.${self:provider.stage}.domain}.
        Type: 'A'
  Outputs:
    CDNDistributionId:
      Description: CDN distribution id.
      Value:
        Ref: WebAppCloudFrontDistribution
