service:
  name: icarus

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack # compiles and bundles together typescript code
  - serverless-finch   # deploys static web pages to S3

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${env:ICARUS_DEV, ''}dev
  region: eu-west-2
  profile: test

  environment:
    DROPBOX_CLIENT_ID: ${env:DROPBOX_CLIENT_ID}
    DROPBOX_CLIENT_SECRET: ${env:DROPBOX_CLIENT_SECRET}

    SLACK_CLIENT_ID: ${env:SLACK_CLIENT_ID}
    SLACK_CLIENT_SECRET: ${env:SLACK_CLIENT_SECRET}
    # FIXME Parametrise the redirect URI
    SLACK_LOGIN_REDIRECT_URI: https://s3.eu-west-2.amazonaws.com/lorenzodev-icarus-site/post-login.html

    GITHUB_WEBHOOK_SECRET: ${env:GITHUB_WEBHOOK_SECRET}
    GITHUB_CLIENT_ID: ${env:GITHUB_CLIENT_ID}
    GITHUB_CLIENT_SECRET: ${env:GITHUB_CLIENT_SECRET}

    TABLE_PREFIX: ${self:service}-${opt:stage, self:provider.stage}-

    ACCESSTOKENS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-access_tokens
    SLACKACCOUNTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-slack_accounts

    DROPBOXACCOUNTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-dropbox_accounts
    DROPBOXTOKENS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-dropbox_tokens
    DROPBOXCURSORS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-dropbox_cursors
    FILECHANGES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-file_changes

    GITHUBEVENTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-github_events
    GITHUBACCOUNTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-github_accounts
    GITHUBTOKENS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-github_tokens
custom:
  # Used by serverless-finch plugin
  client:
      bucketName: ${opt:stage, self:provider.stage}-icarus-site


functions:
  # Slack
  slack-login:
    handler: src/main/slack/handler.slackLogin
    events:
      - http:
          method: get
          path: slack-login

          request:
            parameters:
              querystrings:
                code: true

  # Dropbox
  dropbox-webhook-challenge:
    handler: src/main/dropbox/handler.webhookChallenge
    events:
      - http:
          method: get
          path: dropbox-webhook

          request:
            parameters:
              querystrings:
                challenge: true

  dropbox-webhook-notify:
    handler: src/main/dropbox/handler.webhookNotify
    events:
      - http:
          method: post
          path: dropbox-webhook
          integration: lambda-proxy

  dropbox-oauth-initiate:
    handler: src/main/dropbox/handler.oauthInitiate
    events:
      - http:
          method: get
          path: dropbox-oauth-initiate

  dropbox-oauth-complete:
    handler: src/main/dropbox/handler.oauthComplete
    events:
      - http:
          method: get
          path: dropbox-oauth-complete

          request:
            parameters:
              querystrings:
                code: true

  dropbox-user-report:
    handler: src/main/dropbox/handler.userReport
    events:
      - http:
          method: get
          path: dropbox-user-report

          request:
            parameters:
              querystrings:
                account_id: true

  # Github
  gihub-webhook-receive:
    handler: src/main/github/handler.webhookReceive
    events:
      - http:
          method: post
          path: github-webhook
          integration: lambda-proxy

  github-oauth-initiate:
    handler: src/main/github/handler.oauthInitiate
    events:
      - http:
          method: get
          path: github-oauth-initiate

  github-oauth-complete:
    handler: src/main/github/handler.oauthComplete
    events:
      - http:
          method: get
          path: github-oauth-complete

          request:
            parameters:
              querystrings:
                code: true

resources:
  Resources:
    AccessTokensTable:
      Type: AWS::DynamoDB::Table
      # TODO Comment out the DeletionPolicy to make `serverless remove` deleting the table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.ACCESSTOKENS_TABLE}
        AttributeDefinitions:
          - AttributeName: access_token
            AttributeType: S
        KeySchema:
          - AttributeName: access_token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10

    SlackAccountsTable:
      Type: AWS::DynamoDB::Table
      # TODO Comment out the DeletionPolicy to make `serverless remove` deleting the table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.SLACKACCOUNTS_TABLE}
        AttributeDefinitions:
          - AttributeName: slack_id
            AttributeType: S
        KeySchema:
          - AttributeName: slack_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    DropboxAccountsTable:
      Type: AWS::DynamoDB::Table
      # TODO Comment out the DeletionPolicy to make `serverless remove` deleting the table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DROPBOXACCOUNTS_TABLE}
        AttributeDefinitions:
          - AttributeName: slack_id
            AttributeType: S
        KeySchema:
          - AttributeName: slack_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    DropboxTokensTable:
      Type: AWS::DynamoDB::Table
      # TODO Comment out the DeletionPolicy to make `serverless remove` deleting the table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DROPBOXTOKENS_TABLE}
        AttributeDefinitions:
          - AttributeName: account_id
            AttributeType: S
        KeySchema:
          - AttributeName: account_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    DropboxCursorsTable:
      Type: AWS::DynamoDB::Table
      # TODO Comment out the DeletionPolicy to make `serverless remove` deleting the table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DROPBOXCURSORS_TABLE}
        AttributeDefinitions:
          - AttributeName: account_id
            AttributeType: S
        KeySchema:
          - AttributeName: account_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    FileChangesTable:
      Type: AWS::DynamoDB::Table
      # TODO Comment out the DeletionPolicy to make `serverless remove` deleting the table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.FILECHANGES_TABLE}
        AttributeDefinitions:
          - AttributeName: account_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: account_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10

    GithubEventsTable:
      Type: AWS::DynamoDB::Table
      # TODO Comment out the DeletionPolicy to make `serverless remove` deleting the table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.GITHUBEVENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: S
          - AttributeName: "username"
            AttributeType: S
          - AttributeName: "timestamp"
            AttributeType: S
        KeySchema:
          - AttributeName: "id"
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: "events_by_user"
            KeySchema:
            - AttributeName: "username"
              KeyType: HASH
            - AttributeName: "timestamp"
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 10
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 10

    GithubAccountsTable:
      Type: AWS::DynamoDB::Table
      # TODO Comment out the DeletionPolicy to make `serverless remove` deleting the table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.GITHUBACCOUNTS_TABLE}
        AttributeDefinitions:
          - AttributeName: slack_id
            AttributeType: S
        KeySchema:
          - AttributeName: slack_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    GithubTokensTable:
      Type: AWS::DynamoDB::Table
      # TODO Comment out the DeletionPolicy to make `serverless remove` deleting the table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.GITHUBTOKENS_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn:
        - GithubTokensTable
        - GithubAccountsTable
        - GithubEventsTable
        - DropboxTokensTable
        - DropboxCursorsTable
        - FileChangesTable
        - AccessTokensTable
        - SlackAccountsTable
        - DropboxAccountsTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:BatchWriteItem
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.DROPBOXTOKENS_TABLE}
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.DROPBOXCURSORS_TABLE}
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.FILECHANGES_TABLE}
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.ACCESSTOKENS_TABLE}
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.SLACKACCOUNTS_TABLE}
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.DROPBOXACCOUNTS_TABLE}
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.GITHUBEVENTS_TABLE}
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.GITHUBACCOUNTS_TABLE}
                - arn:aws:dynamodb:*:*:table/${self:provider.environment.GITHUBTOKENS_TABLE}
        Roles:
          - Ref: IamRoleLambdaExecution
