service: cfn-staticweb-example
provider:
  name: aws
  runtime: nodejs6.10
  region: ${env:AWS_REGION}
  memorySize: 128
  timeout: 30
  iamRoleStatements:
  - Effect: Allow
    Action:
    - cloudfront:GetCloudFrontOriginAccessIdentity
    - cloudfront:CreateCloudFrontOriginAccessIdentity
    - cloudfront:UpdateCloudFrontOriginAccessIdentity
    - cloudfront:DeleteCloudFrontOriginAccessIdentity
    - s3:PutObject
    - s3:DeleteObject
    Resource: "*"
plugins:
- serverless-webpack
custom:
  webpack: serverless.webpack.config.js
functions:
  cfnOai:
    handler: cfnOai.default
  putIndexObject:
    handler: putIndexObject.default
resources:
  Parameters:
    UseCloudFront:
      Type: String
      Default: "false"
      AllowedValues:
      - "false"
      - "true"
      Description: If true, creates and configures CloudFront distribution.
    DistributionAliases:
      Type: CommaDelimitedList
      Default: ""
      Description: FQDNs as aliases to the CloudFront distribution, comma-delimited.
      ConstraintDescription: must be comma-delimited FQDNs.
    AcmCertificateArn:
      Type: String
      Default: ""
      Description: ARN of a Amazon Certificate Manager certificate.
      ConstraintDescription: must be valid ARN.
    TemplateBucket:
      Type: String
      Default: cfn-staticweb-example
      Description: The name of S3 bucket which stores template file.
    TemplateKey:
      Type: String
      Default: index.html.ejs
      Description: The key of template file.
    IndexDocumentTitle:
      Type: String
      Default: "Hello world!"
    IndexDocumentBody:
      Type: String
      Default: "Generated by CloudFormation."
  Conditions:
    UseCloudFrontCond:
      Fn::Equals:
      - Ref: UseCloudFront
      - "true"
    UseCertificateCond:
      Fn::Not:
      - Fn::Equals:
        - Ref: AcmCertificateArn
        - ""
    UseDistributionAliasesCond:
      Fn::Not:
      - Fn::Equals:
        - Fn::Join:
          - ","
          - Ref: DistributionAliases
        - ""
  Resources:
    PublishBucket:
      Type: AWS::S3::Bucket
      Properties: {}
    PublishBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: PublishBucket
        PolicyDocument:
          Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource:
              Fn::Join:
              - ""
              - - Fn::GetAtt:
                  - PublishBucket
                  - Arn
                - /*
            Principal:
              Fn::If:
              - UseCloudFrontCond
              - AWS:
                  Fn::Join:
                  - ""
                  - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity "
                    - Fn::GetAtt:
                      - OriginAccessIdentity
                      - Id
              - "*"
    OriginAccessIdentity:
      Type: "Custom::OriginAccessIdentity"
      Condition: UseCloudFrontCond
      Properties:
        ServiceToken:
          Fn::GetAtt:
          - CfnOaiLambdaFunction
          - Arn
        CloudFrontOriginAccessIdentityConfig:
          CallerReference:
            Ref: AWS::StackName
          Comment:
            Ref: AWS::StackName
    IndexDocument:
      Type: "Custom::IndexDocument"
      Properties:
        ServiceToken:
          Fn::GetAtt:
          - PutIndexObjectLambdaFunction
          - Arn
        TemplateBucket:
          Ref: TemplateBucket
        TemplateKey:
          Ref: TemplateKey
        Title:
          Ref: IndexDocumentTitle
        Body:
          Ref: IndexDocumentBody
        Bucket:
          Ref: PublishBucket
    Distribution:
      Type: AWS::CloudFront::Distribution
      Condition: UseCloudFrontCond
      Properties:
        DistributionConfig:
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          Comment:
            Ref: AWS::StackName
          DefaultCacheBehavior:
            # AllowedMethods:
            # - String
            # CachedMethods:
            # - String
            # Compress: Boolean
            # DefaultTTL: Number
            ForwardedValues:
              # Cookies:
              #   Cookies
              # Headers:
              # - String
              QueryString: false
              # QueryStringCacheKeys:
              # - String
            # MaxTTL: Number
            # MinTTL: Number
            # SmoothStreaming: Boolean
            TargetOriginId: S3Origin
            # TrustedSigners:
            # - String
            ViewerProtocolPolicy:
              Fn::If:
              - UseCertificateCond
              - redirect-to-https
              - allow-all
          Origins:
          - Id: S3Origin
            DomainName:
              Fn::GetAtt:
              - PublishBucket
              - DomainName
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join:
                - ""
                - - "origin-access-identity/cloudfront/"
                  - Fn::GetAtt:
                    - OriginAccessIdentity
                    - Id
            # OriginPath: String
            # OriginCustomHeaders:
            # - HeaderName: String
            #   HeaderValue: String
          Aliases:
            Fn::If:
            - UseDistributionAliasesCond
            - Ref: DistributionAliases
            - Ref: AWS::NoValue
          # CacheBehaviors:
          # - {CacheBehavior}
          # CustomErrorResponses:
          # - {CustomErrorResponse}
          # Logging:
          #   Bucket: String
          #   IncludeCookies: Boolean
          #   Prefix: String
          ViewerCertificate:
            Fn::If:
            - UseCertificateCond
            - MinimumProtocolVersion: TLSv1
              SslSupportMethod: sni-only
              AcmCertificateArn:
                Ref: AcmCertificateArn
            - Ref: AWS::NoValue
  Outputs:
    URL:
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Fn::If:
              - UseCloudFrontCond
              - Fn::GetAtt:
                - Distribution
                - DomainName
              - Fn::GetAtt:
                - PublishBucket
                - DomainName
            - "/index.html"
