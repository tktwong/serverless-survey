service: sentiment-dashboard
provider:
  name: aws
  stage: ${opt:stage}
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.tableName}*"
    - Effect: Allow
      Action:
        - comprehend:BatchDetectSentiment
        - comprehend:BatchDetectKeyPhrases
      Resource: "*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:PutParameter
      Resource:
        - 'Fn::Join':
          - ':'
          -
            - 'arn:aws:ssm'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
    - Effect: Allow
      Action:
        - events:PutRule
      Resource:
        - arn:aws:events:${self:provider.region}:*:rule/${self:custom.reviewsEventName}
        - arn:aws:events:${self:provider.region}:*:rule/${self:custom.slackbotEventName}

plugins:
    - serverless-finch

custom:
  tableName: 'appReviewsTable-${self:provider.stage}'
  userPoolName: '${self:service}-${self:provider.stage}-user-pool'

  reviewsEventName: reviews-interval-${self:provider.stage}
  slackbotEventName: slackbot-interval-${self:provider.stage}
  
  client:
    bucketName: ${self:service}-client-${self:provider.stage}
    distributionFolder: ../frontend/sentiment-dashboard/dist/sentiment-dashboard


package:
  individually: true
  exclude:
    - ./**

functions:
  main:
    runtime: java8
    timeout: 10
    memorySize: 2048
    handler: sentiment.Handler
    package:
      artifact: main/target/sentiment-1.0-aws.jar
    environment:
      FUNCTION_NAME: stats
      TABLE_NAME: ${self:custom.tableName}
      DEPLOY_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}

      # Flags for settings that require Lambda configuration updates
      POLLINGINTERVAL_CLOUDWATCH_EVENT: ${self:custom.reviewsEventName}
      POSTINGINTERVAL_CLOUDWATCH_EVENT: ${self:custom.slackbotEventName}
      POSTINGINTERVAL_UNIT: "days"
    events:
      - http:
          method: post
          path: stats
          cors: true
          authorizer: 
             type: COGNITO_USER_POOLS
             authorizerId: 
               Ref: ApiGatewayAuthorizer
      - http:
          method: get
          path: apps
          cors: true
          authorizer: 
             type: COGNITO_USER_POOLS
             authorizerId: 
               Ref: ApiGatewayAuthorizer
      - http:
          method: post
          path: settings/apps
          cors: true
          authorizer: 
             type: COGNITO_USER_POOLS
             authorizerId: 
               Ref: ApiGatewayAuthorizer
      - http:
          method: post
          path: settings/keywords
          cors: true
          authorizer: 
             type: COGNITO_USER_POOLS
             authorizerId: 
               Ref: ApiGatewayAuthorizer
      - http:
          method: post
          path: settings/get
          cors: true
          authorizer: 
             type: COGNITO_USER_POOLS
             authorizerId: 
               Ref: ApiGatewayAuthorizer
      - http:
          method: post
          path: settings/set
          cors: true
          authorizer: 
             type: COGNITO_USER_POOLS
             authorizerId: 
               Ref: ApiGatewayAuthorizer
  reviews:
    runtime: nodejs8.10
    timeout: 60
    handler: reviews/handler.handler
    package:
      include:
        - reviews/**
    environment:
      TABLE_NAME: ${self:custom.tableName}
      DEPLOY_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
    events:
      - http:
          method: any
          path: reviews
      - schedule:
          name: ${self:custom.reviewsEventName}
          rate: rate(30 minutes)
  slackbot-dispatcher:
    runtime: nodejs8.10
    handler: slackbot/dispatcher.handler
    package:
      include:
        - slackbot/**
    environment:
      WORKER_LAMBDA: ${self:service}-${self:provider.stage}-slackbot-worker
      DEPLOY_REGION: ${self:provider.region}
    events:
      - http:
          method: get
          path: slackbot/report
      - http:
          method: post
          path: slackbot/command
      - schedule:
          name: ${self:custom.slackbotEventName}
          rate: rate(30 minutes)
  slackbot-worker:
    runtime: nodejs8.10
    timeout: 20
    handler: slackbot/worker.handler
    package:
      include:
        - slackbot/**
    environment:
      DEPLOY_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
      MAIN_API_LAMBDA: ${self:service}-${self:provider.stage}-main

resources:
  Resources:
    ApiGatewayAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: 
          Ref: ApiGatewayRestApi
        ProviderARNs: 
          - Fn::GetAtt:
              - userPool
              - Arn
    userPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPoolName}

    userPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:custom.userPoolName}-client
        UserPoolId:
          Ref: userPool
    
        GenerateSecret: false
    appReviewsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: appIdStore
            AttributeType: S
          - AttributeName: reviewHash
            AttributeType: S
          - AttributeName: date
            AttributeType: S
          - AttributeName: sentiment
            AttributeType: S
        KeySchema:
          - AttributeName: appIdStore
            KeyType: HASH
          - AttributeName: reviewHash
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: sentiment
            KeySchema:
              - AttributeName: appIdStore
                KeyType: HASH
              - AttributeName: sentiment
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - sentimentScore
                - keywords
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: date
            KeySchema:
              - AttributeName: appIdStore
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - reviewHash
                - version
                - sentiment
                - sentimentScore
                - keywords
              ProjectionType: INCLUDE
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5

