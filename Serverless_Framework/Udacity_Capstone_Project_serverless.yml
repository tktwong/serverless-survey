service:
  name: serverless-jokes-taking-app

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    JOKES_TABLE: Jokes-${self:provider.stage}
    JOKES_TABLE_INDEX: Jokes-idx-${self:provider.environment.JOKES_TABLE}
    JOKES_S3_BUCKET: amaka-p4-serverless-application-jokes-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    # JWKS_URL: 'https://dev-t0rkagt9.us.auth0.com/.well-known/jwks.json'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    # - Effect: Allow
    #   Action:
    #     - dynamodb:Query
    #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOKES_TABLE}

custom:
  defaultStage: dev
  defaultRegion: us-east-2
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  topicName: jokesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Jokes Api
        description: Serverless application for a jokes app

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  # TODO: Configure this function
  GetJokes:
    handler: src/lambda/http/getJokes.handler
    events:
      - http:
          authorizer: Auth
          method: get
          cors: true
          path: jokes
          documentation:
            summary: Get a list of jokes
            description: Get a list of jokes
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOKES_TABLE}/index/${self:provider.environment.JOKES_TABLE_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - '*'
        
  # TODO: Configure this function
  CreateJoke:
    handler: src/lambda/http/createJoke.handler
    events:
      - http:
          cors: true
          method: post
          authorizer: Auth
          path: jokes
          request:
            schema:
              application/json: ${file(src/models/create-joke-model.json)}
          documentation:
            summary: Create a new Joke
            description: Create a new joke
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOKES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  # TODO: Configure this function
  UpdateJoke:
    handler: src/lambda/http/updateJoke.handler
    events:
      - http:
          authorizer: Auth
          cors: true
          method: patch
          path: jokes/{jokeId}
          request:
            schema:
              application/json: ${file(src/models/update-joke-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOKES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'
          
  # TODO: Configure this function
  DeleteJoke:
    handler: src/lambda/http/deleteJoke.handler
    events:
      - http:
          authorizer: Auth
          cors: true
          method: delete
          path: jokes/{jokeId}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOKES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          authorizer: Auth
          cors: true
          method: post
          path: jokes/{jokeId}/attachment
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.JOKES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'
    
resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
          
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    JokesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: jokeId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: jokeId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.JOKES_TABLE_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: jokeId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.JOKES_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.JOKES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: arn:aws:s3:::${self:provider.environment.JOKES_S3_BUCKET}/*
        Bucket:
          Ref: AttachmentsBucket