
service: serverless-golang-webapi

frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  runtime: go1.x
  stage: dev
  region: us-east-1

  # you can define service wide environment variables here
  environment:
    CANDIDATE_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    CANDIDATE_EMAIL_TABLE: "candidate-email-${opt:stage, self:provider.stage}"
    SLS_DEBUG: "*"

  # Defines what other AWS services our lambda functions can access
  iamRoleStatements:
    - Effect: Allow # Allow access to DynamoDB tables
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  addCandidate:
    handler: bin/candidates/addCandidate
    memorySize: 128
    description: Submit candidate information and starts interview process.
    events:
      - http:
          path: candidates
          method: post

  listCandidates:
    handler: bin/candidates/listCandidates
    memorySize: 128
    description: List all interview candidates.
    events:
      - http:
          path: candidates
          method: get

  getCandidate:
    handler: bin/candidates/getCandidate
    memorySize: 128
    description: Get candidate information by ID.
    events:
      - http:
          path: candidates/{id}
          method: get

  removeCandidate:
    handler: bin/candidates/removeCandidate
    description: Remove a candidate by ID.
    events:
      - http:
          path: candidates/{id}
          method: delete

# you can add CloudFormation resource templates here
resources:
  Resources:
    #    create a resource that will create DynamoDB table.
    CandidatesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.CANDIDATE_TABLE}

plugins:
  - serverless-sam
