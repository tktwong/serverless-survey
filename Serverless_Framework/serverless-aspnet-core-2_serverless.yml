service: cs-web-api

frameworkVersion: ">=1.0.0 <2.0.0"

custom:
    deploymentBucketName: com.serverless.naing.${self:provider.stage}.deploys
    proxyBucketName: com.serverless.naing.${self:service}.${self:provider.stage}.proxy
    tag: com.serverless.naing.${self:provider.stage}.${self:service}
provider:  
  name: aws
  runtime: dotnetcore2.0  
  stage: ${opt:stage, 'development'} 
  region: ap-southeast-2
  profile: default  
  memorySize: 512
  timeout: 30
  logRetentionInDays: 14
  deploymentBucket:
    name:  ${self:custom.deploymentBucketName} # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption  
  role: arn:aws:iam::595567053831:role/service-role/basicLambdaRole
  #cfnRole: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-servicerole.html  
  environment: # Service wide environment variables
    AppS3BucketKey: ${self:custom.proxyBucketName}
  endpointType: regional # Optional endpoint configuration for API Gateway REST API. Default is Edge.
  apiKeys: # List of API keys to be used by your service API Gateway REST API
    - ${self:service}-key
    # - myFirstKey
    # - ${self:provider.stage}-myFirstKey
    #- ${env:MY_API_KEY} # you can hide it in a serverless variable  
  stackTags: # Optional CF stack tags
    key: ${self:custom.tag}
  usagePlan: # Optional usage plan configuration
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100
  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
        - 's3:PutObject'
      Resource:
        Fn::Join:
          - ''
          - - 'arn:aws:s3:::'
            - Ref: ${self:custom.proxyBucketName}
# you can add packaging information here
package:
  artifact: bin/release/netcoreapp2.0/deploy-package.zip
  exclude:
    - aws-lambda-tools-defaults.json
#    - exclude-me-dir/**

functions:
  cs-web-api:
    handler: cs-web-api::cs_web_api.LambdaEntryPoint::FunctionHandlerAsync    

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          private: true
# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    Bucket:
      Type: "AWS::S3::Bucket"
      Properties: 
        BucketEncryption: 
          ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
        BucketName: "${self:custom.proxyBucketName}"
        Tags:
          - 
            Key: "owner"
            Value: ${self:custom.tag}
