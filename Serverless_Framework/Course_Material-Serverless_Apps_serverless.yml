service:
  name: severless-udagram
#app: your-app-name
#tenant: your-tenant-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation


provider:
  name: aws
  runtime: nodejs8.10

  # User can specify region in CLI
  region: ${opt:region, 'us-east-2'}
  # User can  specify stage in CLI
  stage: ${opt:stage, 'dev'}

  environment:
    # Either user specified stage or default stage
    GROUPS_TABLE: Groups-${self:provider.stage}
    IMAGES_TABLE: Images-${self:provider.stage}
    IMAGES_ID_INDEX: ImageIdIndex
    CONNECTIONS_TABLE: Connections-${self:provider.stage}
    IMAGES_S3_BUCKET: serverless-udagram-images-s3-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    THUMBNAILS_S3_BUCKET: serverless-udagram-thumbnail-${self:provider.stage}
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_SECRET_FIELD: auth0Secret

  # DynamoDB: Scan, PutItem, GetItem, Query
  # S3: GetObject, PutObject
  iamRoleStatements:
    # DynamoDB
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGES_ID_INDEX}
    # S3
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*"
    # Connections
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
    # Auth0 Secrets
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn


custom:
  topicName: imagesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for image sharing
    models:
      - name: GroupRequest
        contentType: application/json
        # Should read the definition of a schema from a file
        schema: ${file(models/create-group-request.json)}
      - name: ImageRequest
        contentType: application/json
        schema: ${file(models/create-image-request.json)}

functions:

  # Custom Authentication
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # SNS Notifications
  SendUploadNotifications:
    # Environment Variables only available locally
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}

  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}

  # WebSocket Connections
  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect
  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  # Elastic Search
  SyncWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt ImagesSearch.DomainEndpoint
    handler: src/lambda/dynamoDb/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt ImagesDynamoDBTable.StreamArn

  # /groups
  # GET GetGroups
  GetGroups:
    handler: src/lambda/http/getGroups.handler
    events:
      - http:
          method: get
          path: groups
          cors: true
  # POST CreateGroup - Authorization
  CreateGroup:
    handler: src/lambda/http/createGroup.handler
    events:
      - http:
          method: post
          path: groups
          cors: true
          # Add authorization
          authorizer: Auth
          # Specify validator from resources
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new group
            description: Create a new group
            requestModels:
              'application/json': GroupRequest
  # GET GetImages
  GetImages:
    handler: src/lambda/http/getImages.handler
    events:
      - http:
          method: get
          path: groups/{groupId}/images
          cors: true
  # POST CreateImage - Authorization
  CreateImage:
    handler: src/lambda/http/createImage.handler
    events:
      - http:
          method: post
          path: groups/{groupId}/image
          cors: true
          # Add authorization
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new image
            description: Create a new image
            requestModels:
              'application/json': ImageRequest


  # /images
  # GET GetImage
  GetImage:
    handler: src/lambda/http/getImage.handler
    events:
      - http:
          method: get
          path: images/{imageId}
          cors: true

resources:
  Resources:

    # Custom Authentication
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # Auth0 KMS
    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    # Key name
    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey
    # OAuth Secret
    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 Secret
        KmsKeyId: !Ref KMSKey


    # SNS resources
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic

    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}

    # Validate request body
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # Groups Table
    GroupsDynamoDBTable:
      # A DynamoDB Resource
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        # Single ID field - string
          - AttributeName: id
            AttributeType: S
        KeySchema:
        # This will be the partition key
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # Name the Table as the same as the environment variable
        TableName: ${self:provider.environment.GROUPS_TABLE}


    # Images Table
    ImagesDynamoDBTable:
      # A DynamoDB Resource
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          # Complex Hash-Range fields
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
        KeySchema:
          # This will be the partition key
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        # This is a list of indexes we want to add to your table
        GlobalSecondaryIndexes:
          # Same name as image id index
          - IndexName: ${self:provider.environment.IMAGES_ID_INDEX}
            KeySchema:
            - AttributeName: imageId
              KeyType: HASH
            Projection:
              # Copy all attributes from the original table
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        # Add elastic search
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        # Name the Table as the same as the environment variable
        TableName: ${self:provider.environment.IMAGES_TABLE}

    # S3 Bucket
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        # Add notifications
        NotificationConfiguration:
          TopicConfigurations:
          - Event: s3:ObjectCreated:Put
            Topic: !Ref ImagesTopic
        # Add CORS
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # S3 Bucket Policy
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    # Configure permissions for our S3 Image Bucket to send notifications
    # to our S3 Lambda Function
    SendUploadNotificationsPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref SendUploadNotificationsLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount: !Ref AWS::AccountId
        SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}

    # Elastic Search - demo version
    ImagesSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: images-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          # Cost minimized by only spinning up 1 machine
          # Scale out here
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          # Cost minimized by using the smallest type of machine
          # Scale up here
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              # Allow everybody to access this server
              # You can restrict access here
              # Read more about securing ES
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'



