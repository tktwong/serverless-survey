service: service-health-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  bundle:
    linting: false
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-service-health-backend-infra

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: !ImportValue '${self:custom.sstApp}-TableName'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'

functions:

  create:
    handler: service/create_service.main
    events:
      - http:
          path: service
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: service/get_service.main
    events:
      - http:
          path: service/{service_id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: service/list_service.main
    events:
      - http:
          path: service
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: service/update_service.main
    events:
      - http:
          path: service/{service_id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: service/delete_service.main
    events:
      - http:
          path: service/{service_id}
          method: delete
          cors: true
          authorizer: aws_iam