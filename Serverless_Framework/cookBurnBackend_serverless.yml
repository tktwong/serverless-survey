---
service: serverless-backend
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: serverless-admin
  region: ap-southeast-1
  # memorySize: 256
  # timeout: 6
  # vpc:
  #   securityGroupIds:
  #     - sg-2ebd8567
  #   subnetIds:
  #     - subnet-626db92a
  #     - subnet-1bd04242
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
      #   - dynamodb:*
      #   - s3:*
      #   - ses:*
      # Resource: '*'
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# plugins:
#   # - serverless-webpack
#   - serverless-offline
#   - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations


functions:
  addUser:
    handler: authenPage/addUser
    events:
      - http:
          path: authenPage
          method: post
          cors: true
    role: arn:aws:iam::790522487667:role/userDB

  hello:
    handler: handler.hello

  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true



resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}



