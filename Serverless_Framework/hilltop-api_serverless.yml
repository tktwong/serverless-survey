service: hilltop-recordingTest-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  recordingTestTableName: ${self:custom.stage}-recordingTests
  authFlowTableName: ${self:custom.stage}-authFlows
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}
  screenshotsBucketArn:
    "Fn::ImportValue": ${self:custom.stage}-ScreenshotsBucketArn
  screenshotsBucket:
    "Fn::ImportValue": ${self:custom.stage}-ScreenshotsBucket
  tracingBucketArn:
    "Fn::ImportValue": ${self:custom.stage}-TracingBucketArn
  tracingBucket:
    "Fn::ImportValue": ${self:custom.stage}-TracingBucket
  userPoolId:
    "Fn::ImportValue": ${self:custom.stage}-UserPoolId

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  timeout: 30

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    recordingTestTableName: ${self:custom.recordingTestTableName}
    authFlowTableName: ${self:custom.authFlowTableName}
    recordingTableName: ${file(../recordings/serverless.yml):custom.recordingTableName}
    screenshotsBucketArn: ${self:custom.screenshotsBucketArn}
    screenshotsBucket: ${self:custom.screenshotsBucket}
    tracingBucketArn: ${self:custom.tracingBucketArn}
    tracingBucket: ${self:custom.tracingBucket}
    hilltopChromeUrl: ${self:custom.environment.hilltopChromeUrl}
    userPoolId: ${self:custom.userPoolId}

  iamRoleStatements:
    - Action:
        - cognito-idp:AdminGetUser
      Resource:
        - "Fn::ImportValue": ${self:custom.stage}-UserPoolArn
      Effect: Allow
    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [RecordingTestTable, Arn]
        - "Fn::GetAtt": [AuthFlowTable, Arn]
        - "Fn::ImportValue": ${self:custom.stage}-RecordingTableArn
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Fn::ImportValue": ${self:custom.stage}-ScreenshotsBucket
            - "/*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Fn::ImportValue": ${self:custom.stage}-TracingBucket
            - "/*"

functions:
  add:
    handler: add.main
    events:
      - http:
          path: add
          method: post
          cors: true
          authorizer: aws_iam

  pause:
    handler: pause.main
    events:
      - http:
          path: pause
          method: post
          cors: true
          authorizer: aws_iam

  executeScheduled:
    handler: executeScheduled.main
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [RecordingTestTable, StreamArn]

  reinsert:
    handler: reinsert.main
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [RecordingTestTable, StreamArn]

# Create our resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${file(../../resources/recording-test-table.yml)}
  - ${file(../../resources/authFlow-table.yml)}
  - Outputs:
      ApiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:custom.stage}-ApiGatewayRestApiId
