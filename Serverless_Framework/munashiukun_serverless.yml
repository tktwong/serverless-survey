# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: munashiukun

plugins:
  - serverless-webpack

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: ap-northeast-1
  memorySize: 128
  timeout: 10
  versionFunctions: false

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  line:
    name: munashiukun-line-bot
    role: ${env:LAMBDA_ROLE_ARN}
    description: line-munashiukun-bot
    handler: index.line
    environment:
      TZ: Asia/Tokyo
      LINE_ACCESS_TOKEN: ${env:LINE_ACCESS_TOKEN}
      LINE_CHANNEL_SECRET: ${env:LINE_CHANNEL_SECRET}
      CHATBOT_APIKEY: ${env:CHATBOT_APIKEY}
      GOOGLE_CALENDER_ID: ${env:GOOGLE_CALENDER_ID}
      GOOGLE_SERVICE_ACCOUNT: ${env:GOOGLE_SERVICE_ACCOUNT}
      LUIS_APP_ID: ${env:LUIS_APP_ID}
      LUIS_APP_KEY: ${env:LUIS_APP_KEY}
    events:
      - http:
          path: bot/munashiukun-line
          method: post
  chatwork:
    name: munashiukun-chatwork-bot
    role: ${env:LAMBDA_ROLE_ARN}
    description: chatwork-munashiukun-bot
    handler: index.chatwork
    environment:
      TZ: Asia/Tokyo
      CHATWORK_API_TOKEN: ${env:CHATWORK_API_TOKEN}
      CHATWORK_WEBHOOK_TOKEN: ${env:CHATWORK_WEBHOOK_TOKEN}
      CHATBOT_APIKEY: ${env:CHATBOT_APIKEY}
      GOOGLE_CALENDER_ID: ${env:GOOGLE_CALENDER_ID}
      GOOGLE_SERVICE_ACCOUNT: ${env:GOOGLE_SERVICE_ACCOUNT}
      LUIS_APP_ID: ${env:LUIS_APP_ID}
      LUIS_APP_KEY: ${env:LUIS_APP_KEY}
    events:
      - http:
          path: bot/munashiukun-cw
          method: post
  slack:
    name: munashiukun-slack-bot
    role: ${env:LAMBDA_ROLE_ARN}
    description: slack-munashiukun-bot
    handler: index.slack
    environment:
      TZ: Asia/Tokyo
      SLACK_ACCESS_TOKEN: ${env:SLACK_ACCESS_TOKEN}
      CHATBOT_APIKEY: ${env:CHATBOT_APIKEY}
      GOOGLE_CALENDER_ID: ${env:GOOGLE_CALENDER_ID}
      GOOGLE_SERVICE_ACCOUNT: ${env:GOOGLE_SERVICE_ACCOUNT}
      LUIS_APP_ID: ${env:LUIS_APP_ID}
      LUIS_APP_KEY: ${env:LUIS_APP_KEY}
    events:
      - http:
          path: bot/munashiukun-slack
          method: post
          async: true
  alexa:
    name: munashiukun-alexa-skills
    role: ${env:LAMBDA_ROLE_ARN}
    description: munashiukun-alexa-skills
    handler: index.alexa
    environment:
      TZ: Asia/Tokyo
      ALEXA_SKILL_ID: ${env:ALEXA_SKILL_ID}
      GOOGLE_CALENDER_ID: ${env:GOOGLE_CALENDER_ID}
      GOOGLE_SERVICE_ACCOUNT: ${env:GOOGLE_SERVICE_ACCOUNT}
    events:
      - alexaSkill: ${env:ALEXA_SKILL_ID}
  nofitication-returndate:
    name: munashiukun-nofitication-returndate
    role: ${env:LAMBDA_ROLE_ARN}
    description: returndate-nofitication
    handler: batch.returndate
    environment:
      TZ: Asia/Tokyo
      SLACK_GENERAL_WEBHOOK_URL: ${env:SLACK_GENERAL_WEBHOOK_URL}
      GOOGLE_CALENDER_ID: ${env:GOOGLE_CALENDER_ID}
      GOOGLE_SERVICE_ACCOUNT: ${env:GOOGLE_SERVICE_ACCOUNT}
    events:
      - schedule: cron(0 0 ? * MON-FRI *) # ここで起動時間を設定UTC
  share-back-number:
    name: munashiukun-share-back-number
    role: ${env:LAMBDA_ROLE_ARN}
    description: share-back-number
    handler: batch.share
    environment:
      TZ: Asia/Tokyo
      SLACK_ACCESS_TOKEN: ${env:SLACK_ACCESS_TOKEN}
      SLACK_SHARE_CHANNEL_ID: ${env:SLACK_SHARE_CHANNEL_ID}
      SPREADSHEET_SHARE_ID: ${env:SPREADSHEET_SHARE_ID}
      GOOGLE_SERVICE_ACCOUNT: ${env:GOOGLE_SERVICE_ACCOUNT}
    events:
      - schedule: cron(0 0 * * ? *)
  tech-count:
    name: munashiukun-tech-count
    role: ${env:LAMBDA_ROLE_ARN}
    description: tech-count
    handler: batch.tech
    environment:
      TZ: Asia/Tokyo
      SLACK_ACCESS_TOKEN: ${env:SLACK_ACCESS_TOKEN}
      SLACK_TECH_CHANNEL_ID: ${env:SLACK_TECH_CHANNEL_ID}
      SPREADSHEET_TECH_ID: ${env:SPREADSHEET_TECH_ID}
      GOOGLE_SERVICE_ACCOUNT: ${env:GOOGLE_SERVICE_ACCOUNT}
    events:
      - schedule: cron(0 0 * * ? *)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
