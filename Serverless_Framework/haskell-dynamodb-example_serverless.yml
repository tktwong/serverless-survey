service: haskell-dynamodb-example

resources: ${file(./serverless.resources.yml)}

provider:
  name: aws
  runtime: haskell
  region: eu-central-1
  stage: ${opt:stage, 'local'}
  profile: ${opt:profile, 'opc-sandbox'}
  environment:
    STAGE: ${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:Query"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:*"

functions:
  get-order:
    handler: haskell-dynamodb-example.get-order
    events:
      - http:
          method: GET
          path: orders/{id}
  update-order-status:
    handler: haskell-dynamodb-example.update-status
    events:
      - http:
          method: PUT
          path: orders/{id}

custom:
  serverless-offline:
    httpPort: 4000
    # useDocker: true

  dynamodb:
    stages:
      - local
    start:
      port: 8000
      migrate: true
      seed: true
      inMemory: true
    seed:
      local:
        sources:
          - table: haskell-dynamodb-example
            sources: [".seeds/orders.json"]

plugins:
  - serverless-dynamodb-local
  - serverless-haskell
  - serverless-offline
  - serverless-pseudo-parameters
