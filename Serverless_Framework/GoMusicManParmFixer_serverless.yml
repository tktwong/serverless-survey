# See AWS GO MOD section at this link for how this project was created..
# https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/go/
# sls create --template aws-go-mod --path GoConchRepublicBackEnd

# For full config options, check the docs:
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: gomusicmanparmfixer
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=1.28.0 <2.0.0'

# A custom variables section for centralizing things (e.g. Environmental Variables, etc.) that need to be referenced
# across modules
custom:
  projectName: MusicManParmFixer
  snsTopic: arn:aws:sns:us-east-1:${env:AWS_ACCOUNT}:MusicManParmFixerSubmissions
  dynamoDBTable: "MusicManParmTable"
  version: "V1"

provider:
  tracing:
    apiGateway: true
    lambda: true
  name: aws
  tags:
    PROJECT_NAME: ${self:custom.projectName}
  runtime: go1.x
  # Set the default stage used. Default is dev
  stage: "dev"
  # Overwrite the default region used. Default is us-east-1
  region: "us-east-1"
  # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  #timeout: 10
  logRetentionInDays: 30 # Set the default RetentionInDays for a CloudWatch LogGroup
  versionFunctions: false  #if each different deploy needs to be long term retained, then set to true
  # you can ADD statements to the Lambda function's IAM Role (iamRoleStatements) here
  memorySize: 512 # will be inherited by all functions
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:   arn:aws:dynamodb:us-east-1:${env:AWS_ACCOUNT}:table/${self:custom.dynamoDBTable}
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: ${self:custom.snsTopic}

#BY DEFAULT, these logging group/events role statements come built-in
#    - Effect: "Allow"
#      Action:
#        - "logs:CreateLogStream"
#        - "logs:CreateLogGroup"
#        - "logs:PutLogEvents"

# you can define service wide environment variables here
#environment:

package:
  exclude:
    - ./**
  include:
    - ./bin/main

functions:
  database:
    handler: bin/main
    events:
      - http:
          path: /parmdata # this matches any path, the token 'any' doesn't mean anything special
          method: POST
          integration: lambda-proxy
          authorizer: # An AWS API Gateway Cognito authorizer function
            name: MusicManParmFixAuthorizer # The name of the authorizer function (must be in this service)
            arn: arn:aws:cognito-idp:us-east-1:${env:AWS_ACCOUNT}:userpool/us-east-1_ePofsNBfO
    # Function level environment variables
    environment:
      DYNAMO_DB_TABLENAME: ${self:custom.dynamoDBTable}
      SNS_TOPIC: ${self:custom.snsTopic}
