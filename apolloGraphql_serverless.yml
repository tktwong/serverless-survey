# Happy Coding!

service: apolloGraphql
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
provider:
  name: aws
  runtime: nodejs8.10

custom:
  serverless-offline:
    port: 4000
  webpack:
    IncludeModules: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
        - table: Users
          sources: [seed-data/Users.json]

functions:
  hello:
    handler: lambda.hello
  graphql:
    handler: lambda.graphql
    events:
    - http:
        path: graphql
        method: post
        cors: true
  graphiql:
    handler: lambda.graphiql
    events:
    - http:
        path: graphiql
        method: get

resources:
  Resources:
    BoardTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: 'Boards'
    DeckTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: 'Decks'
    GameTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: 'Games'
    PlayerTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: 'Players'
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: 'Users'

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
