service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    AUTH0_JWKS_URL: 'https://XXXX.auth0.com/.well-known/jwks.json'
    TODOS_TABLE: Todos-${self:provider.stage}
    #IMAGES_TABLE: Images-${self:provider.stage}
    INDEX_NAME: TodosIdIndex
    IMAGE_ID_INDEX: ImageIdIndex
    #CONNECTIONS_TABLE: Connections-${self:provider.stage}
    IMAGES_S3_BUCKET: serverless-project-images-XXXX-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    #THUMBNAILS_S3_BUCKET: serverless-project-thumbnail-XXXX-${self:provider.stage}
    #AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    #AUTH_0_SECRET_FIELD: auth0Secret

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
    #- Effect: Allow
    #  Action:
    #    - secretsmanager:GetSecretValue
    #  Resource: !Ref Auth0Secret
    #- Effect: Allow
    #  Action:
    #    - kms:Decrypt
    #  Resource: !GetAtt KMSKey.Arn
  #iamManagedPolicies:
  #  - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

custom:
  topicName: imagesTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:
      - name: TodoRequest
        contentType: application/json
        schema: ${file(models/TodoItem.json)} # TODO change to 'requests/CreateTodoRequest.ts'
      - name: TudoUpdateRequest
        contentType: application/json
        schema: ${file(models/TodoUpdate.json)}

functions:
  
  #### Serverless Endpoints ##################################################################

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem #debug
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/*

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          documentation:
            summary: Create a new group
            description: Create a new group
            reqValidatorName: RequestBodyValidator
            requestModels:
              'application/json': TodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
        
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem #debug
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem #debug
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/*

  DeleteTodoOptions: 
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: options #TODO: fix this
          path: todos/{todoId}
          cors: true
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem #debug
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem #debug
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/*
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem #debug
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:GetItem #debug
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/*
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

resources:
  Resources:

    #### Gateway & Request Body Validation #############

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,DELETE,PATCH,OPTIONS'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    #### Image Bucket ############

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    #### Thumbnails Bucket ############
    #ThumbnailsBucket:
    #  Type: AWS::S3::Bucket
    #  Properties:
    #    BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId #partitionKey
            AttributeType: S
          - AttributeName: todoId #sortKey
            AttributeType: S
          - AttributeName: createdAt #indexKey
            AttributeType: S
        KeySchema:
          - AttributeName: userId #partitionKey
            KeyType: HASH
          - AttributeName: todoId #sortKey
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: userId  #partitionKey
                KeyType: HASH
              - AttributeName: createdAt  #indexKey
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    #ImagesDynamoDBTable:
    #  Type: "AWS::DynamoDB::Table"
    #  Properties:
    #    AttributeDefinitions:
    #      - AttributeName: groupId
    #        AttributeType: S
    #      - AttributeName: timestamp
    #        AttributeType: S
    #      - AttributeName: imageId
    #        AttributeType: S
    #    KeySchema:
    #      - AttributeName: groupId
    #        KeyType: HASH
    #      - AttributeName: timestamp
    #        KeyType: RANGE
    #    BillingMode: PAY_PER_REQUEST
    #    StreamSpecification:
    #      StreamViewType: NEW_IMAGE
    #    TableName: ${self:provider.environment.IMAGES_TABLE}
    #    GlobalSecondaryIndexes:
    #      - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
    #        KeySchema:
    #        - AttributeName: imageId
    #          KeyType: HASH
    #        Projection:
    #          ProjectionType: ALL

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ImagesTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
        Topics:
          - !Ref ImagesTopic

    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}
        
    #KMSKey:
    #  Type: AWS::KMS::Key
    #  Properties:
    #    Description: KMS key to encrypt Auth0 secret
    #    KeyPolicy:
    #      Version: '2012-10-17'
    #      Id: key-default-1
    #      Statement:
    #        - Sid: Allow administration of the key
    #          Effect: Allow
    #          Principal:
    #            AWS:
    #              Fn::Join:
    #              - ':'
    #              - - 'arn:aws:iam:'
    #                - Ref: AWS::AccountId
    #                - 'root'
    #          Action:
    #            - 'kms:*'
    #          Resource: '*'

    #KMSKeyAlias:
    #  Type: AWS::KMS::Alias
    #  Properties:
    #    AliasName: alias/auth0Key-${self:provider.stage}
    #    TargetKeyId: !Ref KMSKey

    #Auth0Secret:
    #  Type: AWS::SecretsManager::Secret
    #  Properties:
    #    Name: ${self:provider.environment.AUTH_0_SECRET_ID}
    #    Description: Auth0 secret
    #    KmsKeyId: !Ref KMSKey
