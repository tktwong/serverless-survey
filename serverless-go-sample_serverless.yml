# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-golang # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: go1.x
  role: lambdaCustRole # デフォルト
  timeout: 10
  memorySize: 128

# you can overwrite defaults here
#  stage: stg
  region: ap-northeast-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - ./**
  include:
    - ./bin/**
#  artifact: build/distributions/hello.zip
  # 複数関数をアップロードする場合
#  individually: true
#    exclude:
#      - src/*

functions:
  hello:
    role: lambdaCustRole # カスタムロールを適用
    handler: bin/hello
    # memorySize: 128
    # timeout: 15
    # environment:
    #   FUNCTION_NAME: hello
    #   MAIN_CLASS: com.serverless.CloudFunctionApplication

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: sample/{proxy+}
          method: get
          cors: true
          # integration: lambda
#          authorizer: cognitoARN
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2
  create-client:
    handler: bin/clients
    environment:
      DB_TABLE: Clients
    events:
      - http:
          path: clients
          method: post
          cors: true

  fetch-clients:
    handler: bin/clients
    environment:
      DB_TABLE: Clients
    events:
      - http:
          path: clients
          method: get
          cors: true

  fetch-client:
    handler: bin/clients
    environment:
      DB_TABLE: Clients
    events:
      - http:
          path: clients/{id}
          method: get
          cors: true

  create-person:
    handler: bin/persons
    environment:
      DB_TABLE: Persons
    events:
      - http:
          path: persons
          method: post
          cors: true
          
  fetch-persons:
    handler: bin/persons
    environment:
      DB_TABLE: Persons
    events:
      - http:
          path: persons
          method: get
          cors: true

  fetch-person:
    handler: bin/persons
    environment:
      DB_TABLE: Persons
    events:
      - http:
          path: persons/{id}
          method: get
          cors: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    clientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Clients
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    personsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Persons
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
          - AttributeName: like
            AttributeType: N
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: LikeKeyIndex
            KeySchema: 
              - AttributeName: like
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # DynamoDBの構築
    # DynamoDbTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: id
    #         AttributeType: S
    #       -
    #         AttributeName: name
    #         AttributeType: S
    #     # キーの種類を指定（ハッシュorレンジキー）
    #     KeySchema:
    #       -
    #         AttributeName: id
    #         KeyType: HASH
    #       -
    #         AttributeName: name
    #         KeyType: RANGE
    #     # プロビジョニングするキャパシティーユニットの設定
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     # テーブル名の指定
    #     TableName: TestTable
    myDefaultRole:
      Type: AWS::IAM::Role
      Properties:
#        Path: /my/default/path/
        RoleName: MyDefaultRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                   Resource:
                     Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"
    lambdaCustRole:
      Type: AWS::IAM::Role
      Properties:
#        Path: /my/default/path/
        RoleName: LambdaCustRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
                - Effect: "Allow"
                  Action:
                    - "dynamodb:*"
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:dynamodb'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'table/*'
#    myCustRole0:
#      Type: AWS::IAM::Role
#      Properties:
#        Path: /my/cust/path/
#        RoleName: MyCustRole0
#        AssumeRolePolicyDocument:
#          Version: '2012-10-17'
#          Statement:
#            - Effect: Allow
#              Principal:
#                Service:
#                  - lambda.amazonaws.com
#              Action: sts:AssumeRole
#        Policies:
#          - PolicyName: myPolicyName
#            PolicyDocument:
#              Version: '2012-10-17'
#              Statement:
#                - Effect: Allow
#                  Action:
#                    - logs:CreateLogGroup
#                    - logs:CreateLogStream
#                    - logs:PutLogEvents
#                  Resource:
#                    - 'Fn::Join':
#                        - ':'
#                        -
#                          - 'arn:aws:logs'
#                          - Ref: 'AWS::Region'
#                          - Ref: 'AWS::AccountId'
#                          - 'log-group:/aws/lambda/*:*:*'
#                - Effect: Allow
#                  Action:
#                    - ec2:CreateNetworkInterface
#                    - ec2:DescribeNetworkInterfaces
#                    - ec2:DetachNetworkInterface
#                    - ec2:DeleteNetworkInterface
#                  Resource: "*"
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"