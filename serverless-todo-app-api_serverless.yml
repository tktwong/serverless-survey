service: serverless-todo-app
provider:
  name: aws
  profile: serverlessUser
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-1
  environment:
    TODOS_TABLE_NAME: ${self:custom.todosTableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: '*'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  todosTableName: todos
  cognitoUserPoolName: todo-app-user-pool
  cognitoUserPoolClientName: todo-app-user-pool-client
  cognitoUserPoolClientDomainName: serverlesstodoapp
  apiGateWayAuthorizerName: todo-app-cognito-authorizer

package:
  individually: true

functions:
  viewTodos:
    handler: todos/viewTodos.handler
    events:
      - http:
          path: todos
          method: GET
          cors: true
          authorizer:
            type: cognito_user_pools
            authorizerId:
              Ref: ApiGatewayAuthorizer

  addTodo:
    handler: todos/addTodo.handler
    events:
      - http:
          path: todos
          method: POST
          cors: true
          authorizer:
            type: cognito_user_pools
            authorizerId:
              Ref: ApiGatewayAuthorizer
  deleteTodo:
    handler: todos/deleteTodo.handler
    events:
      - http:
          path: todos/{id}
          method: DELETE
          cors: true
          authorizer:
            type: cognito_user_pools
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    DynamoDBTodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.todosTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        BillingMode: PROVISIONED

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.cognitoUserPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.cognitoUserPoolClientName}
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders:
          - COGNITO
        CallbackURLs:
          - https://localhost:3000
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: CognitoUserPool

    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:custom.cognitoUserPoolClientDomainName}
        UserPoolId:
          Ref: CognitoUserPool

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ${self:custom.apiGateWayAuthorizerName}
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

plugins:
  - serverless-webpack
