service: electr-rest
frameworkVersion: '>=1.1.0 <2.0.0'
plugins:
  - serverless-dynamodb-local
  - serverless-offline
custom:
  dynamodb:
    start:
      port: 7000
      migrate: true
    migration:
      dir: .dynamodb
    serverless-offline:
      port: 4000
functions:
  AccountController-getMe:
    handler: dist/endpoints/Account/AccountController.getMe
    events:
      - http:
          path: account/getMe
          method: get
  AccountController-getAccountPage:
    handler: dist/endpoints/Account/AccountController.getAccountPage
    events:
      - http:
          path: 'account/{accountId}/page'
          method: get
  AccountController-setAccountPage:
    handler: dist/endpoints/Account/AccountController.setAccountPage
    events:
      - http:
          path: 'account/{accountId}/page'
          method: post
  AccountController-getFeed:
    handler: dist/endpoints/Account/AccountController.getFeed
    events:
      - http:
          path: feed/
          method: get
  AccountController-createDefaultAccount:
    handler: dist/endpoints/Account/AccountController.createDefaultAccount
    events:
      - http:
          path: account/default
          method: get
  AccountController-addAccount:
    handler: dist/endpoints/Account/AccountController.addAccount
    events:
      - http:
          path: account/new
          method: post
  AccountController-getAll:
    handler: dist/endpoints/Account/AccountController.getAll
    events:
      - http:
          path: account/all
          method: get
  AccountController-runQuery:
    handler: dist/endpoints/Account/AccountController.runQuery
    events:
      - http:
          path: runQuery
          method: post
  PostController-createPost:
    handler: dist/endpoints/Post/PostController.createPost
    events:
      - http:
          path: post
          method: post
  PostController-editPost:
    handler: dist/endpoints/Post/PostController.editPost
    events:
      - http:
          path: 'post/{postId}/edit'
          method: post
  PostController-getPost:
    handler: dist/endpoints/Post/PostController.getPost
    events:
      - http:
          path: 'post/{postId}'
          method: get
  PostController-reactPost:
    handler: dist/endpoints/Post/PostController.reactPost
    events:
      - http:
          path: 'post/{postId}/react'
          method: post
  PostController-donatePost:
    handler: dist/endpoints/Post/PostController.donatePost
    events:
      - http:
          path: 'post/{postId}/donate'
          method: post
  PostController-deletePost:
    handler: dist/endpoints/Post/PostController.deletePost
    events:
      - http:
          path: 'post/{postId}'
          method: delete
  SessionsController-createSession:
    handler: dist/endpoints/Sessions/SessionsController.createSession
    events:
      - http:
          path: session
          method: post
  SessionsController-checkSession:
    handler: dist/endpoints/Sessions/SessionsController.checkSession
    events:
      - http:
          path: session
          method: get
  SessionsController-destroySession:
    handler: dist/endpoints/Sessions/SessionsController.destroySession
    events:
      - http:
          path: session
          method: delete
  SessionsController-newUser:
    handler: dist/endpoints/Sessions/SessionsController.newUser
    events:
      - http:
          path: session
          method: put
provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  stage: dev
  environment:
    DYNAMODB_TABLE: '${self:service}-${opt:stage, self:provider.stage}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*'
resources:
  Resources:
    CreditCards:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        TableName: electr-rest-us-east-1-CreditCards
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Messages:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        TableName: electr-rest-us-east-1-Messages
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    AccountPages:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        TableName: electr-rest-us-east-1-AccountPages
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Account:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        TableName: electr-rest-us-east-1-Account
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Sessions:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        TableName: electr-rest-us-east-1-Sessions
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Subscription:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        TableName: electr-rest-us-east-1-Subscription
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    EmailAccount:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        TableName: electr-rest-us-east-1-EmailAccount
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
