service:
  name: aws-nodejs-ts-cds

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-offline
  - api-gateway-stage-tag-plugin
  - serverless-plugin-tracing
  - serverless-plugin-stage-variables

package:
  exclude:
    - "**/node_modules/**"
  # Third party dependencies that need to be included in packaged deployable.
  # include:
  #   - "**/node_modules/uuid/**"

provider:
  name: aws
  runtime: nodejs6.10
  stackTags:
    Application: CDS-US-NonProduction-AppName
  stage: dev
  region: us-east-1
# you can define service wide environment variables here
  environment:
    stage: ${opt:stage}
    serviceName: ${self:service}
    Application: AppName
custom:
  apiStageTags:
    Application: AppName
    Stage: ${opt:stage}  
  webpackIncludeModules: #true
    forceExclude:
      - aws-sdk
  serverless-offline:
    port: 3001
  documentation:
    models:
      -
        name: ResponseObject
        contentType: "application/json"
        schema: ${file(./apiDocs/get-response-v0.0.1.json)}    
functions:
  hello:
    handler: src/handler.lambdaHandler
    memorySize: 128
    role: MinimalLambdaRole
    events:
      - http:
          method: get
          path: hello
          cors: true
          # authorizer: aws_iam  ### require sig4 signed requests
          documentation:
            summary: Summary of endpoint's purpose
            description: Description of endpoint
            methodResponses:
              -
                statusCode: "200"
                responseHeaders:
                  -
                    name: "Access-Control-Allow-Origin"
                    description: "CORS support"
                responseModels:
                  "application/json": "ResponseObject"
resources:
  Description: Description of this CloudFormation stack.
  Resources:
    # Enable APIGW logging
    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi      
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: "*"
            LoggingLevel: INFO
            ResourcePath: "/*"
            MetricsEnabled: true
    # Already set by GlobalCare
    # apiGatewayRole:
    #   Type: "AWS::IAM::Role"
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - apigateway.amazonaws.com
    #           Action: sts:AssumeRole           
    #     ManagedPolicyArns:
    #       - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
    #     RoleName: ${self:service}-${opt:stage}-APIGWPushToCloudWatchLogs
    # Account:
    #   Type: "AWS::ApiGateway::Account"
    #   Properties: 
    #     CloudWatchRoleArn: 
    #       Fn::GetAtt: [apiGatewayRole, Arn]
    MinimalLambdaRole:
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: MyLambdaExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*     
              - Effect: Allow
                Action:
                  - xray:PutTelemetryRecords
                  - xray:PutTraceSegments
                Resource: "*" 
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "*"
        RoleName: ${self:service}-MinimalLambdaRole-${opt:stage}                            