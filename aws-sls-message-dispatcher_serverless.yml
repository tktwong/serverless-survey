service: test-consumer-s3

frameworkVersion: '2'

useDotenv: true

provider:
  name: aws
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "*"
      Resource: "*"
  
functions:
  processTopic1:
    handler: processor.processTopic1
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - topic1Processor
              - Arn
    environment:
      region: ${self:provider.region}
      bucket: !Ref s3EventFiles

resources:
  Resources:
    topic1Processor:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: topic1Processor
    topic1Subscription:
        Type: "AWS::SNS::Subscription"
        Properties:
          TopicArn: "${env:dispatchTopic1}"
          Protocol: sqs
          Endpoint:
            Fn::GetAtt: [topic1Processor, Arn]
          RedrivePolicy:
            deadLetterTargetArn: !GetAtt
              - topic1SubscriptionDlq
              - Arn
    topic1SubscriptionDlq:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: topic1Processor-Dlq
    SqsPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: "*"
              Action: "SQS:SendMessage"
        Queues:
          - Ref: topic1Processor
          - Ref: topic1SubscriptionDlq
    s3EventFiles:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${env:dispatchTopic1BucketName}"
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"