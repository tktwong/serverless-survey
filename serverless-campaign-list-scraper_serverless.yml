service: serverless-campaign-list-scraper

provider:
  name: aws
  runtime: nodejs8.10
  iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "sqs:SendMessage"
          - "sqs:GetQueueUrl"
        Resource: "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.extractQueueName}"
      - Effect: "Allow"
        Action:
          - "sqs:SendMessage"
          - "sqs:GetQueueUrl"
        Resource: "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.processQueueName}"
      - Effect: "Allow"
        Action:
          - "sqs:ListQueues"
        Resource: "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:*"  
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
      - Effect: "Allow"
        Action:
          - "dynamodb:*"
        Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodbItemsTableName}"
      - Effect: "Allow"
        Action:
          - "dynamodb:*"
        Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.dynamodbJobTableName}"

      - Effect: Allow
        Action:
          - athena:*
        Resource: "*"
      - Effect: Allow
        Action:
          - glue:CreateDatabase
          - glue:DeleteDatabase
          - glue:GetDatabase
          - glue:GetDatabases
          - glue:UpdateDatabase
          - glue:CreateTable
          - glue:DeleteTable
          - glue:BatchDeleteTable
          - glue:UpdateTable
          - glue:GetTable
          - glue:GetTables
          - glue:BatchCreatePartition
          - glue:CreatePartition
          - glue:DeletePartition
          - glue:BatchDeletePartition
          - glue:UpdatePartition
          - glue:GetPartition
          - glue:GetPartitions
          - glue:BatchGetPartition
        Resource: "*"
      - Effect: Allow
        Action:
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          - s3:ListMultipartUploadParts
          - s3:AbortMultipartUpload
          - s3:CreateBucket
          - s3:PutObject
        Resource: arn:aws:s3:::aws-athena-query-results-*
      - Effect: Allow
        Action:
          - s3:GetObject
          - s3:ListBucket
        Resource: arn:aws:s3:::athena-examples*
      - Effect: Allow
        Action:
          - s3:ListBucket
          - s3:GetBucketLocation
          - s3:ListAllMyBuckets
        Resource: "*"
      - Effect: Allow
        Action:
          - sns:ListTopics
          - sns:GetTopicAttributes
        Resource: "*"
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricAlarm
          - cloudwatch:DescribeAlarms
          - cloudwatch:DeleteAlarms
        Resource: "*"

  environment:
    SERVICE_NAME: ${self:custom.serviceName}
    UPLOAD_FILE_PREFIX: ${self:custom.uploadFilePrefix}
    EXTRACTED_DATA_PREFIX: ${self:custom.extractedDataPrefix}
    DYNAMODB_ITEMS_TABLE_NAME: ${self:custom.dynamodbItemsTableName}
    DYNAMODB_JOB_TABLE_NAME: ${self:custom.dynamodbJobTableName}
    EXTRACT_QUEUE_URL: ${self:custom.extractQueueURL}
    PROCESS_QUEUE_URL: ${self:custom.processQueueURL}

custom:
  defaultStage: dev
  pre: ${self:service}-${self:provider.stage}
  serviceName: ${self:custom.pre}
  stackName: ${self:custom.serviceName}
  extractQueueName: ${self:custom.pre}-extract
  extractQueueURL: https://sqs.#{AWS::Region}.amazonaws.com/#{AWS::AccountId}/${self:custom.extractQueueName}
  processQueueName:  ${self:custom.pre}-process
  processQueueURL: https://sqs.#{AWS::Region}.amazonaws.com/#{AWS::AccountId}/${self:custom.processQueueName}
  bucketName: ${self:provider.stage}-combrianpfeilcampaignlistscraper
  bucketArn: arn:aws:s3:::${self:custom.bucketName}
  s3UploadEventTopicName: ${self:custom.pre}-s3-upload-event
  s3UploadEventTopicArn: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.s3UploadEventTopicName}
  s3ExtractedDataEventTopicName: ${self:custom.pre}-s3-extracted-data-event
  s3ExtractedDataEventTopicArn: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.s3ExtractedDataEventTopicName}
  uploadFilePrefix: uploads
  extractedDataPrefix: extracted-data
  dynamodbJobTableName: ${self:custom.pre}-job
  dynamodbItemsTableName: ${self:custom.pre}-items

plugins:
  - serverless-pseudo-parameters

functions:

  extract:
    handler: functions/extract.handler
    events:
          - sqs:
              arn:
                Fn::GetAtt:
                  - ExtractQueue
                  - Arn
              batchSize: 10
    environment:
      PREFIX: ${self:custom.extractedDataPrefix}

  process:
    handler: functions/process.handler
    timeout: 20
    events:
          - sqs:
              arn:
                Fn::GetAtt:
                  - ProcessQueue
                  - Arn
              batchSize: 10      
            
  job:
    handler: functions/job.handler
    timeout: 60
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ JobDynamoDbTable, StreamArn ]

resources:
  Resources:

    ServiceBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - S3UploadEventTopicPolicy
        - S3ExtractedDataEventTopicPolicy
      Properties:
        BucketName: ${self:custom.bucketName}
        NotificationConfiguration:
          TopicConfigurations:
            -
              Event: s3:ObjectCreated:*
              Topic: ${self:custom.s3UploadEventTopicArn}
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: ${self:custom.uploadFilePrefix}/
            -
              Event: s3:ObjectCreated:*
              Topic: ${self:custom.s3ExtractedDataEventTopicArn}
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: ${self:custom.extractedDataPrefix}/

    S3UploadEventTopic:
        Type: AWS::SNS::Topic
        Properties:
          TopicName: ${self:custom.s3UploadEventTopicName}   

    S3UploadEventTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      DependsOn: S3UploadEventTopic
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource: ${self:custom.s3UploadEventTopicArn}
              Condition:
                ArnLike:
                  aws:SourceArn: ${self:custom.bucketArn}
        Topics:
          - Ref: S3UploadEventTopic

    S3ExtractedDataEventTopic:
        Type: AWS::SNS::Topic
        Properties:
          TopicName: ${self:custom.s3ExtractedDataEventTopicName}   

    S3ExtractedDataEventTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      DependsOn: S3ExtractedDataEventTopic
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource: ${self:custom.s3ExtractedDataEventTopicArn}
              Condition:
                ArnLike:
                  aws:SourceArn: ${self:custom.bucketArn}
        Topics:
          - Ref: S3ExtractedDataEventTopic

    ExtractQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:custom.extractQueueName}"

    ExtractQueuePolicy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal: "*"
                Action: sqs:SendMessage
                Resource: "*"
                Condition:
                  ArnEquals:
                    aws:SourceArn:
                      Ref: S3UploadEventTopic
        Queues:
          - Ref: ExtractQueue

    ProcessQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:custom.processQueueName}"

    ProcessQueuePolicy:
      Type: "AWS::SQS::QueuePolicy"
      Properties:
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal: "*"
                Action: sqs:SendMessage
                Resource: "*"
                Condition:
                  ArnEquals:
                    aws:SourceArn:
                      Ref: S3ExtractedDataEventTopic
        Queues:
          - Ref: ProcessQueue        

    UploadFileToS3Subscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: S3UploadEventTopic
        Endpoint:
          Fn::GetAtt: [ExtractQueue, Arn]
        Protocol: sqs
        RawMessageDelivery: false

    ProcessDataSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn:
          Ref: S3ExtractedDataEventTopic
        Endpoint:
          Fn::GetAtt: [ProcessQueue, Arn]
        Protocol: sqs
        RawMessageDelivery: false

    JobDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodbJobTableName}        
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    ItemsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodbItemsTableName}        
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
  
  Outputs:
    ExtractQueueURL:
      Value: ${self:custom.extractQueueURL}
    ProcessQueueURL:
      Value: ${self:custom.processQueueURL}      