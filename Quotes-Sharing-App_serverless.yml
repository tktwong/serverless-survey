service:
  name: serverless-quotes-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    QUOTES_TABLE: Quotes-serverless-${self:provider.stage}
    INDEX_NAME: QuotesIdIndex
    IMAGES_S3_BUCKET: quotes-sachin-serverless-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  
custom:

  documentation:
    api:
      info:
        version: v1.0.0
        title: Quotes Application
        description: Quotes Serverless Application

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetQuotes:
    handler: src/lambda/http/getQuotes.handler
    events:
      - http:
          method: get
          path: quotes
          cors: true
          authorizer: Auth  
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}

      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}/index/${self:provider.environment.INDEX_NAME}    

  CreateQuotes:
    handler: src/lambda/http/createQuotes.handler
    events:
      - http:
          method: post
          path: quotes
          cors: true  
          authorizer: Auth
          request:
            schema:
              application/json: ${file(create_quote_request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}/index/${self:provider.environment.INDEX_NAME}      

  UpdateQuotes:
    handler: src/lambda/http/updateQuotes.handler
    events:
      - http:
          method: patch
          path: quotes/{quoteId}
          cors: true  
          authorizer: Auth
          request:
            schema:
              application/json: ${file(update_quote_request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}/index/${self:provider.environment.INDEX_NAME}  
          
  DeleteQuotes:
    handler: src/lambda/http/deleteQuotes.handler
    events:
      - http:
          method: delete
          path: quotes/{quoteId}
          cors: true 
          authorizer: Auth 
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}/index/${self:provider.environment.INDEX_NAME}  
        
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: quotes/{quoteId}/attachment
          cors: true
          authorizer: Auth 
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUOTES_TABLE}/index/${self:provider.environment.INDEX_NAME}    

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    QuotesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
          AttributeDefinitions:
            - AttributeName: userId
              AttributeType: S
            - AttributeName: createdAt
              AttributeType: S
            - AttributeName: quoteId
              AttributeType: S
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:provider.environment.QUOTES_TABLE}  
          LocalSecondaryIndexes:
            - IndexName: ${self:provider.environment.INDEX_NAME}
              KeySchema:
                - AttributeName: userId
                  KeyType: HASH
                - AttributeName: quoteId
                  KeyType: RANGE
              Projection:
                ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000      

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket          