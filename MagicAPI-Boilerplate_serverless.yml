service: ${env:SERVICE}

# app and org for use with dashboard.serverless.com
app: <INSERT HERE>
org: <INSERT HERE>

# pushing from non master branch again! here in prod doe...

provider:
  name: aws
  runtime: python3.8
  stage: ${param:STAGE, ${env:STAGE, 'dev'}}
  region: ${env:REGION, 'us-east-1'}
  timeout: 15
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  tracing: # what does this do exactly?
    lambda: true
#    apiGateway: true
#  logs:
#    restApi: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "*"
  environment:
    # SPAN
    USE_SPAN: ${env:USE_SPAN}
    # DYNAMO
    TASKS_TABLE: ${env:TASKS_TABLE_NAME}
    # DOORMAN
    DOORMAN_PUBLIC_PROJECT_ID: ${env:DOORMAN_PUBLIC_PROJECT_ID}
    FIREBASE_PROJECT_ID: ${env:FIREBASE_PROJECT_ID}
    CLOUD_FUNCTION_LOCATION: ${env:CLOUD_FUNCTION_LOCATION}
    # TWILIO
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    TWILIO_MESSAGING_SERVICE_SID: ${env:TWILIO_MESSAGING_SERVICE_SID}
    FROM_NUMBER: ${env:FROM_NUMBER}
    # SEGMENT
    SEGMENT_WRITE_KEY: ${env:SEGMENT_WRITE_KEY}
    # STAGE
    STAGE: ${env:STAGE}
    # Email
    SENDER_EMAIL: ${env:SENDER_EMAIL}
    SENDER_PASSWORD: ${env:SENDER_PASSWORD}
    # MAILGUN
    MAILGUN_PRIVATE_API_KEY: ${env:MAILGUN_PRIVATE_API_KEY}
    MAILGUN_DOMAIN_NAME: ${env:MAILGUN_DOMAIN_NAME}
    MAILGUN_SENDER_NAME: ${env:MAILGUN_SENDER_NAME}
    MAILGUN_SENDER_EMAIL: ${env:MAILGUN_SENDER_EMAIL}
    # MagicLink
    COMPANY_NAME: ${env:COMPANY_NAME}
    # STRIPE
    STRIPE_API_KEY: ${env:STRIPE_API_KEY}

    GW_URL:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: "ApiGatewayRestApi"
          - ".execute-api.{self:provider.region}.amazonaws.com/${self:provider.stage}"

functions:
  app:
    handler: app.handler
    warmup: true
    package: {} # https://github.com/serverless/serverless/issues/6752
    events:
      - http: ANY /
      - http:
          path: /{proxy+}
          method: ANY
          contentHandling: CONVERT_TO_BINARY
          request:
            passThrough: WHEN_NO_MATCH

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
#  - serverless-log-forwarding
#  - serverless-domain-manager
  - serverless-plugin-aws-alerts
  - serverless-plugin-scripts

package:
  exclude:
    - node_modules/**
    - venv/**
    - env/**
    - magic_venv/**
    - .env


custom:
  scripts:
    commands:
      hello: echo Hello from ${self:service} service with new stack!
    hooks:
      'deploy:finalize': bash update_types ${cf:${env:SERVICE}-${self:provider.stage}.ServiceEndpoint} ${env:TYPER_AUTH_TOKEN} ${env:TYPER_SCOPE} ${env:SERVICE}-${self:provider.stage}

#  enterprise:
#    logIngestMode: pull
#  tasksTableName: ${env:TASKS_TABLE_NAME}
  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - boto3
      - botocore
      - s3transfer
      - pytest
      - typer
#  apigwBinary: # check if necessary by changing the Mangum binary response: https://mangum.io/http/
#    types:
#      - '*/*'
  warmup:
    concurrency: 1 # Warm up 5 concurrent instances
    prewarm: true

  logForwarding:
    destinationARN: arn:aws:lambda:us-east-1:444719859866:function:log-forwarder-prod-forwarder
    filterPattern: "-\"[INFO]\" -\"END RequestId: \" -\"START RequestId: \"" # took out -\"REPORT RequestId: \"

#  customDomain:
#    domainName: jeremyberman.org
#    basePath: ''
#    stage: ${self:provider.stage}
#    createRoute53Record: true

  alerts:
    stages:
      - production
      - dev
    topics:
      alarm:
        topic: ${env:SERVICE}-${self:provider.stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: <INSERT EMAIL HERE> # Change this to your email address
    definitions:
      generalErrors:
        metric: generalErrors
        threshold: 0
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanThreshold
        pattern: 'ERROR'
    alarms:
      - functionErrors
      - functionThrottles
      - generalErrors

#resources:
#  Resources:
#    TasksDynamoDBTable:
#      Type: 'AWS::DynamoDB::Table'
#      Properties:
#        TableName: ${env:TASKS_TABLE_NAME}
#        AttributeDefinitions:
#          -
#            AttributeName: task_id
#            AttributeType: S
#        KeySchema:
#          -
#            AttributeName: task_id
#            KeyType: HASH
#        BillingMode: PAY_PER_REQUEST
#        StreamSpecification:
#          StreamViewType: NEW_IMAGE
