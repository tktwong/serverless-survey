org: dandart
app: websites
service: websites

useDotenv: true

provider:
  name: aws
  region: eu-west-2
  runtime: haskell
  environment:
    LANG: en_GB.UTF-8
    LC_ALL: en_GB.UTF-8
  logs:
    restApi: false
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - apigateway:GET
      Resource: "*"
  apiKeys:
    - viewer

functions:
  send-newsletter:
    handler: websites.send-newsletter
    name: ${self:provider.stage}-send-newsletter
    package:
      exclude:
        - ./**
      include:
        - bootstrap
        - send-newsletter
      individually: true

  submit-comment:
    handler: websites.submit-comment
    name: ${self:provider.stage}-submit-comment
    environment:
      GITHUB_ACCESS_TOKEN: ${env:GITHUB_ACCESS_TOKEN}
    package:
      exclude:
        - ./**
      include:
        - bootstrap
        - submit-comment
      individually: true
    events:
      - http:
          path: /comment
          method: post
          cors: true
          private: false

  subscribe-email-to-newsletter:
    handler: websites.subscribe-email-to-newsletter
    name: ${self:provider.stage}-subscribe-email-to-newsletter
    package:
      exclude:
        - ./**
      include:
        - bootstrap
        - subscribe-email-to-newsletter
      individually: true
    events:
      - http:
          path: /newsletter/subscribe
          method: post
          cors: true
          private: false

  track-email-view:
    handler: websites.track-email-view
    name: ${self:provider.stage}-track-email-view
    package:
      exclude:
        - ./**
      include:
        - bootstrap
        - track-email-view
      individually: true
    events:
      - http:
          path: /newsletter/track
          method: get
          cors: true
          private: false

  unsubscribe-email-from-newsletter:
    handler: websites.unsubscribe-email-from-newsletter
    name: ${self:provider.stage}-unsubscribe-email-from-newsletter
    package:
      exclude:
        - ./**
      include:
        - bootstrap
        - unsubscribe-email-from-newsletter
      individually: true
    events:
      - http:
          path: /newsletter/unsubscribe
          method: post
          cors: true
          private: false

  visit-migrate:
    handler: websites.visit-migrate
    name: ${self:provider.stage}-visit-migrate
    environment:
      DB_HOST: ${env:DB_HOST}
      DB_USERNAME: ${env:DB_USERNAME}
      DB_PASSWORD: ${env:DB_PASSWORD}
    package:
      exclude:
        - ./**
      include:
        - bootstrap
        - visit-migrate
        - sql/**
        - lib/**
      individually: true
    vpc:
      securityGroupIds:
        - Ref: visitsSecurityGroup
      subnetIds:
        - Ref: visitsSubnetA
        - Ref: visitsSubnetB
        - Ref: visitsSubnetC

  visit-viewer:
    handler: websites.visit-viewer
    name: ${self:provider.stage}-visit-viewer
    timeout: 30
    environment:
      DB_HOST: ${env:DB_HOST}
      DB_USERNAME: ${env:DB_USERNAME}
      DB_PASSWORD: ${env:DB_PASSWORD}
    package:
      exclude:
        - ./**
      include:
        - bootstrap
        - visit-viewer
        - lib/**
      individually: true
    vpc:
      securityGroupIds:
        - Ref: visitsSecurityGroup
      subnetIds:
        - Ref: visitsSubnetA
        - Ref: visitsSubnetB
        - Ref: visitsSubnetC
    events:
      - http:
          path: /visit/view
          method: get
          cors: true
          private: true

  visit:
    handler: websites.visit
    name: ${self:provider.stage}-visit
    timeout: 30
    environment:
      DB_HOST: ${env:DB_HOST}
      DB_USERNAME: ${env:DB_USERNAME}
      DB_PASSWORD: ${env:DB_PASSWORD}
    package:
      exclude:
        - ./**
      include:
        - bootstrap
        - visit
        - lib/**
      individually: true
    vpc:
      securityGroupIds:
        - Ref: visitsSecurityGroup
      subnetIds:
        - Ref: visitsSubnetA
        - Ref: visitsSubnetB
        - Ref: visitsSubnetC
    events:
      - http:
          path: /v.gif
          method: get
          cors: true
          private: false

resources:
  Parameters:
    DBUsername:
      NoEcho: 'true'
      Default: ${env:DB_USERNAME}
      Description: Username for MySQL database access
      Type: String
      MinLength: '1'
      MaxLength: '16'
      AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
      ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    DBPassword:
      NoEcho: 'true'
      Default: ${env:DB_PASSWORD}
      Description: Password for MySQL database access
      Type: String
      MinLength: '8'
      MaxLength: '41'
      AllowedPattern: '[a-zA-Z0-9]*'
      ConstraintDescription: must contain only alphanumeric characters.
  Resources:
    visitsDB:
      Type: AWS::RDS::DBCluster
      Properties:
        MasterUsername: !Ref DBUsername
        MasterUserPassword: !Ref DBPassword
        # DBClusterIdentifier: visits
        Engine: aurora
        # EngineVersion: 5.6.10a
        EngineMode: serverless
        ScalingConfiguration:
          AutoPause: true
          MaxCapacity: 2
          MinCapacity: 1
          SecondsUntilAutoPause: 300
        EnableHttpEndpoint: true
        StorageEncrypted: true
        DBSubnetGroupName:
          Ref: visitsSubnetGroup
        VpcSecurityGroupIds:
        - !Ref 'visitsSecurityGroup'
    visitsSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Visits Subnet Group"
        SubnetIds:
          - Ref: visitsSubnetA
          - Ref: visitsSubnetB
          - Ref: visitsSubnetC
        Tags: 
          - 
            Key: "Name"
            Value: "VisitsSubnetGroup"
    visitsSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: visitsVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.0.0/24
        Tags: 
          - 
            Key: "Name"
            Value: "visitsSubnetA"
    visitsSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: visitsVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.1.0/24
        Tags: 
          - 
            Key: "Name"
            Value: "visitsSubnetB"
    visitsSubnetC:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: visitsVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: 10.0.2.0/24
        Tags: 
          - 
            Key: "Name"
            Value: "visitsSubnetC"
    visitsVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags: 
          - 
            Key: "Name"
            Value: "visitsVPC"
    visitsSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Visits
        VpcId:
          Ref: visitsVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIp: "0.0.0.0/0"
        Tags: 
          - 
            Key: "Name"
            Value: "visitsSecurityGroup"
plugins:
  # - data-api-migrations-serverless
  # - data-api-local-serverless
  - serverless-haskell
  - serverless-offline
  # - serverless-domain-manager
  - serverless-add-api-key

custom:
  haskell:
    docker: true
  serverless-offline:
    useDocker: true
    printOutput: true
  custom:
    apiKeys:
      dev:
        - name: viewer
          value: ${env:API_KEY}
  #customDomain:
  #  enable: true
  #  domainName: api.jolharg.com
  #  stage: ${self:provider.stage}
  #  basePath: /
  #  certificateName: 'api.jolharg.com'
  #  createRoute53Record: true
  #  endpointType: 'regional'
  #  securityPolicy: tls_1_2
  #  apiType: http
  #  autoDomain: false
  #data-api-local:
  #  server:
  #    port: 8081
  #    hostname: localhost
  #  database:
  #    engine: postgres
  #    connectionString: ${env.DB_LOGIN}@${env.DB_PASSWORD}
  #data-api-migrations:
  #  local:
  #    region: ${self:provider.region}
  #    endpoint: http://localhost:8081
   #   maxRetries: 0
   #   #secretArn: ${self:provider.environment.DATA_API_SECRET_ARN}
  #    #resourceArn: ${self:provider.environment.DATA_API_RESOURCE_ARN}
  #    database: "visits" #${self:provider.environment.DATA_API_DATABASE_NAME}
  #    credentials:
  #      accessKeyId: example
  #      secretAccessKey: example
  #  prod:
  #    region: ${self:provider.region}
  #    secretArn: #${self:provider.environment.DATA_API_SECRET_ARN}
  #    resourceArn: #${self:provider.environment.DATA_API_RESOURCE_ARN}
  #    database: "visits" # ${self:provider.environment.DATA_API_DATABASE_NAME}