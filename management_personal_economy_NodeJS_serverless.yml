service: ediManager

plugins:
  - serverless-offline
  - serverless-pseudo-parameters


provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 128
  vpc:
    securityGroupIds: { "Fn::Split" : [ ",", '${self:custom.env.DB_SECURITY_GROUP}' ] } 
    subnetIds: { "Fn::Split" : [ ",", '${self:custom.env.DB_SUBNETS}' ] } 
  environment:
    LOG_LEVEL: ${self:custom.env.LOG_LEVEL}
    APP_VERSION: ${self:custom.version}
    HOST_DB: ${self:custom.env.HOST_DB}
    PORT_DB: ${self:custom.env.PORT_DB}
    DB: ${self:custom.env.DB}
    USER: ${self:custom.env.USER}
    PASSWORD: ${self:custom.env.PASSWORD}
    SECRET_PASSWORD_TOKEN: ${self:custom.env.SECRET_PASSWORD_TOKEN}
    TOKEN_TIME_SET: ${self:custom.env.TOKEN_TIME_SET}
    REALSTATE: ${self:custom.env.REALSTATE}
    SUPER: ${self:custom.env.SUPER}
    ACCESS_KEY_S3_BUCKET: ${self:custom.env.ACCESS_KEY_S3_BUCKET}
    SECRET_ACCESS__KEY_S3_BUCKET: ${self:custom.env.SECRET_ACCESS__KEY_S3_BUCKET}
    BUCKET_S3: ${self:custom.env.BUCKET_S3}
   
package:
  include:
    - node_modules/**
    - app/**
 
custom:
  stage: ${opt:stage}
  version: "1.0"
  env:
    LOG_LEVEL: ${self:custom.env.${self:custom.stage}.LOG_LEVEL, self:custom.env.default.LOG_LEVEL}
    APP_VERSION: ${self:custom.version}
    HOST_DB: ${self:custom.env.${self:custom.stage}.HOST_DB, self:custom.env.default.HOST_DB}
    PORT_DB: ${self:custom.env.${self:custom.stage}.PORT_DB, self:custom.env.default.PORT_DB}
    DB: ${self:custom.env.${self:custom.stage}.DB, self:custom.env.default.DB}
    USER: ${self:custom.env.${self:custom.stage}.USER, self:custom.env.default.USER}
    PASSWORD: ${self:custom.env.${self:custom.stage}.PASSWORD, self:custom.env.default.PASSWORD}
    SECRET_PASSWORD_TOKEN: ${self:custom.env.${self:custom.stage}.SECRET_PASSWORD_TOKEN, self:custom.env.default.SECRET_PASSWORD_TOKEN}
    TOKEN_TIME_SET: ${self:custom.env.${self:custom.stage}.TOKEN_TIME_SET, self:custom.env.default.TOKEN_TIME_SET}
    SUPER:  ${self:custom.env.${self:custom.stage}.SUPER, self:custom.env.default.SUPER}
    ACCESS_KEY_S3_BUCKET:  ${self:custom.env.${self:custom.stage}.ACCESS_KEY_S3_BUCKET, self:custom.env.default.ACCESS_KEY_S3_BUCKET}
    SECRET_ACCESS__KEY_S3_BUCKET:  ${self:custom.env.${self:custom.stage}.SECRET_ACCESS__KEY_S3_BUCKET, self:custom.env.default.SECRET_ACCESS__KEY_S3_BUCKET}
    BUCKET_S3:  ${self:custom.env.${self:custom.stage}.BUCKET_S3, self:custom.env.default.BUCKET_S3}

    dev:
      LOG_LEVEL: 'DEBUG'
      HOST_DB: '138.121.161.214'
      PORT_DB: 59000
      APP_VERSION: ${self:custom.version}
      DB: 'edimanager'
      USER: 'alcuino'
      PASSWORD: 'Augusto.93123'
      TOKEN_TIME_SET: 300
      SECRET_PASSWORD_TOKEN: EdiManagerTokenPassword
      SUPER: 'Y1Y6JB7M'
      ACCESS_KEY_S3_BUCKET: AKIAZGZZOOBDMEGZL2XR
      SECRET_ACCESS__KEY_S3_BUCKET: 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
      BUCKET_S3: develop.edimanager

functions:
  Autentications: 
    handler: app/entities/auth/handler/auth.handler
    description: "Lambda Autentication handler"
    role: AppRole
    events:
      - http:
          path: /api/${self:custom.version}/auth
          method: POST
          cors: true
  Users: 
    handler: app/entities/user/handler/user.handler
    description: "Lambda User handler"
    role: AppRole
    events:
      - http:
          path: /api/${self:custom.version}/user/newUser
          method: POST
          cors: true
  Users: 
    handler: app/entities/user/handler/auth.handler
    description: "Lambda Auth handler"
    role: AppRole
    events:
      - http:
          path: /api/${self:custom.version}/auth
          method: POST
          cors: true  


