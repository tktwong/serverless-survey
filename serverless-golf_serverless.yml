service: golfscores

frameworkVersion: ">=1.2.0 <2.0.0"

package:
  exclude:
    - ui/**
    - test/**
    - .vscode/**
    - .git/**
    - .eslintrc.yml
    - .gitignore
    - event.json
    - README.md

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  memorySize: 128
  region: ap-southeast-2  
  environment: # Service wide environment variables
    optStage: ${opt:stage, self:provider.stage}

functions:
  creategame:
    handler: src/handler.creategame
    environment: # Service wide environment variables
      STAGE: ${opt:stage, self:provider.stage} 
    events: 
    - http:
        path: game/{user}
        method: post
        cors:
          origins:
            - '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
          allowCredentials: false  
  getgamescore:
    handler: src/handler.getgamescore
    environment: # Service wide environment variables
      stage: ${opt:stage, self:provider.stage}
    events: 
    - http:
        path: game/score/{gameId}
        method: get
        cors:
          origins:
            - '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
          allowCredentials: false  
        integration: lambda
        request:
          parameters:
            paths:
              gameId: true
  setscore:
    handler: src/handler.setscore
    environment: # Service wide environment variables
      stage: ${opt:stage, self:provider.stage}    
    events: 
    - http:
        path: game/score/{gameId}/{user}/{hole}/{score}
        method: put
        cors:
          origins:
            - '*'
          headers:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
            - X-Amz-Security-Token
          allowCredentials: false  
        integration: lambda
        request:
          parameters:
            querystrings:
              ts: false
            paths:
              gameId: true
              user: true
              hole: true
              score: true      

#      - s3: ${env.BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic

resources:  
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, self:provider.stage}-game-table
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
          - AttributeName: userandhole
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
          - AttributeName: userandhole
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/${opt:stage, self:provider.stage}-game-table
        Roles:
          - Ref: IamRoleLambdaExecution