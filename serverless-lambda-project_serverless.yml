service: serverless-todo-app
frameworkVersion: '2'
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation: # not used for validation but nice to have
    api:
      info:
        version: "v1.0.0"
        title: "TodoApp API"
        description: "Severless application for todo app"


plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation


provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ca-central-1'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    TODOS_TABLE: Todos-${self:provider.stage}-1 # we will get Todos-dev. Serverless will go to the provider section, then get the stage value
    TODO_ID_INDEX: TodoIdIndex
    IMAGES_S3_BUCKET: serverless-todo-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300  # The amount of time we will allow a user to use our URL. Our presingned url will expire after this time
    #AUTH_0_SECRET: '' # we now use AWS secret manager for secrets
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage} #AWS resource called secret that will store our auth0 secret
    AUTH_0_SECRET_FIELD: auth0Secret #we can have many fields for the secret resource we created. But we use one for our app
  apiGateway: 
    minimumCompressionSize: 1024
    shouldStartNameWithService: true # Preparation for serverless framework v3.0.0 More Info: https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
  iamRoleStatements: #this will be set by all functions
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - '*'
  tracing:
    lambda: true  # enbable tracing for our lambda functions
    apiGateway: true # enable tracing for our API Gateway


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref Auth0Secret
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements: #Lambda Minimal Privileges
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(models/create-todo-request.json)} #this will read the definition of our schema from a file in the /models/create-todo-request.json
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements: # permission that allows this function to write to S3 as well as generating a correct presinged Url. If you dont add this the presigned URL used will get an error
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            # Schema that will be used to validate incoming requests
            schema:
              application/json: ${file(models/update-todo-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  

resources:
  Resources:
    GatewayResponseDefault4XX: 
      Type: AWS::ApiGateway::GatewayResponse # APIGateway::GatewayResponse type sets correct CORS headers if our custom authorizer fails and denies access to any function
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH'" #list all the http method tha will need authentication in your app
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions: #attributes listed here must be required before we can store the new data. Attributes here are used as partition or sort key(s) for the base or index table that is why they are required
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:  # we use a composite key for this table(Todo-dev-1) as the primary key
          - AttributeName: userId #partition key
            KeyType: HASH
          - AttributeName: todoId # sort key. A todo item can have thesame userID(prtition key) but different todoID. A user can create many todods
            KeyType: RANGE # we use sort key to perform range operations like ==, >, <, contains, etc So in our app we can update and delete item for a particular todoID BY providing the particular partition and sort key
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODO_ID_INDEX}
            KeySchema:  # we use a composite key for this index table as the primary key as well. We will get the list of todos from this table sorted by time
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE} # we will get Todos-dev. Serverless will go to the provider section, then get the evnvironmrnt object, then get the value for the TODOS_TABLE

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration: # we set cors configurations so that when our application send request to this bucket, we will set the right cors header
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy: # we set a policy to this bucket to allow anybody to read images from this bucket
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow  # allow
              Principal: '*'  # anybody
              Action: 's3:GetObject' #to get object 
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket  #We assign the policy to a Bucket by referencing the attachment bucket that we defined above
    KMSKey: #we add a KMS key tool to encrypt our Auth0 secret
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy: #Add an IAM policy that allows our root user full access to this KMS key
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'
    KMSKeyAlias: #this is bacially the name of our key in a separate resource
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage} #human readable name for our key
        TargetKeyId: !Ref KMSKey
    Auth0Secret: #A SecretManager resource where we out our Auth0 secret
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID} #thesame name provided in the AUTH_O_SECRET_ID env variable
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey #to encrypt the value stored in this key, it should used the KMSKey resource we created
