service: sls-sail-example

plugins:
    - serverless-pseudo-parameters
    - serverless-plugin-canary-deployments

custom:
    stage: ${opt:stage, self:provider.stage}
    region: ${opt:region, self:provider.region}
    userPool: demo-admin
    eventbus: demo-events-${self:custom.stage}
    endpoint:
        Fn::Join:
            - ""
            - - https://
              - Ref: ApiGatewayRestApi
              - .execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}

provider:
    name: aws
    runtime: nodejs12.x
    environment:
        TABLE: ${self:service}-${opt:stage, self:provider.stage}
        STAGE: ${self:custom.stage}
        REGION: ${self:custom.region}
        EVENTBUS: ${self:custom.eventbus}
        ENDPOINT: ${self:custom.endpoint}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}-${opt:stage, self:provider.stage}"
        - Effect: Allow
          Action:
              - codedeploy:*
          Resource:
              - "*"
functions:
    # - - - - - - - - - - - - - - - - - - - -
    # Get
    # - - - - - - - - - - - - - - - - - - - -
    get:
        handler: ./src/get/index.main
        events:
            - http:
                  path: /get/{id}
                  method: get
        deploymentSettings:
            type: AllAtOnce
            alias: Live
            postTrafficHook: getHook

    getHook:
        handler: ./src/get/index.test

    # - - - - - - - - - - - - - - - - - - - -
    # Query
    # - - - - - - - - - - - - - - - - - - - -
    query:
        handler: ./src/query/index.main
        events:
            - http:
                  path: /query
                  method: get
        deploymentSettings:
            type: AllAtOnce
            alias: Live
            postTrafficHook: queryHook

    queryHook:
        handler: ./src/query/index.test
    # - - - - - - - - - - - - - - - - - - - -
    # Create
    # - - - - - - - - - - - - - - - - - - - -
    create:
        handler: ./src/create/index.main
        events:
            - http:
                  path: /create
                  method: get
        deploymentSettings:
            type: AllAtOnce
            alias: Live
            postTrafficHook: createHook

    createHook:
        handler: ./src/create/index.test

    # - - - - - - - - - - - - - - - - - - - -
    # Put
    # - - - - - - - - - - - - - - - - - - - -
    put:
        handler: ./src/put/index.main
        events:
            - http:
                  path: /put
                  method: get
        deploymentSettings:
            type: AllAtOnce
            alias: Live
            postTrafficHook: putHook

    putHook:
        handler: ./src/put/index.test
    # - - - - - - - - - - - - - - - - - - - -
    # Remove
    # - - - - - - - - - - - - - - - - - - - -
    remove:
        handler: ./src/remove/index.main
        events:
            - http:
                  path: /remove
                  method: get
        deploymentSettings:
            type: AllAtOnce
            alias: Live
            postTrafficHook: removeHook

    removeHook:
        handler: ./src/remove/index.test

resources:
    - ${file(resources/db.yml)}
    - ${file(resources/eventBridge.yml)}
