# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: kakao-bot

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-2
  usagePlan:
      quota:
        limit: 1000
        offset: 0
        period: MONTH

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

custom:
  documentation:
    api:
      info:
        version: v0.0.0
        title: Some API title
        description: Some API description
    models:
      -
        name: "MessageRequest"
        contentType: "application/json"
        schema:
          required:
            - user_key
            - type
            - content
          properties:
            user_key:
              type: string
            type:
              type: string
            content:
              type: string
      -
        name: "FriendRequest"
        contentType: "application/json"
        schema:
          required:
            - user_key
          properties:
            user_key:
              type: string

functions:
  chatbot:
    handler: handler.handler
    events:
      - http:
          path: keyboard
          method: get
      - http:
          path: message
          method: post
          reqValidatorName: 'onlyBody'
          request:
            passThrough: NEVER
          documentation:
            requestModels:
              "application/json": "MessageRequest"
      - http:
          path: friend
          method: post
          reqValidatorName: 'onlyBody'
          request:
            passThrough: NEVER
          documentation:
            requestModels:
              "application/json": "FriendRequest"
      - http:
          path: friend/{user_key}
          method: delete
      - http:
          path: chat_room/{user_key}
          method: delete

resources:
  Resources:
    onlyBody:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

plugins:
  - serverless-offline
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation