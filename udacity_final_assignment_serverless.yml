service:
  name: svs-expense-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
package:
  individually: true
custom:
  webpackConfig: ./webpack.config.js 
  includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0 #current version of the api
        title: Expense api
        description: Serverless application for expense tracking 
    models:
      - name: CreateExpenseModel
        contentType: application/json
        schema: ${file(src/jsonSchema/create-expense-request.json)}
      - name: UpdateExpenseModel
        contentType: application/json
        schema: ${file(src/jsonSchema/update-expense-request.json)}
provider:
  name: aws
  runtime: nodejs12.x
  tracing:
    lambda: true
    apiGateway: true # which enable tracing for the api gateway 
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    EXPENSES_IMAGES_BUCKET: expenses-s3-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET_ID: Auth0Secret-Expense-${self:provider.stage} #AWS secret resouce which will store multiple secret fields value
    AUTH_0_SECRET_FIELD: auth0Secret-expense #envirionment variable in particular secret resource
    EXPENSES_TABLE: Expenses-${self:provider.stage}
    EXPENSE_ID_INDEX: ExpenseIdIndex
functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  GetExpenses:
    handler: src/lambda/http/getExpenses.handler
    events:
      - http:
          method: get
          path: expenses
          authorizer: Auth
          cors: true  
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}
  CreateExpense:
    handler: src/lambda/http/createExpense.handler
    events:
      - http:
          method: post
          path: expenses
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a expense
            description: Create a expense
            requestModels:
              'application/json': CreateExpenseModel    
    deploymentSettings:
          type: Linear10PercentEvery1Minute
          alias: Live
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}

  UpdateExpense:
    handler: src/lambda/http/updateExpense.handler
    events:
      - http:
          method: patch
          path: expenses/{expenseId}
          authorizer: Auth 
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: update expense
            description: update expense
            requestModels:
              'application/json': UpdateExpenseModel       
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}/index/${self:provider.environment.EXPENSE_ID_INDEX}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem 
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}
  DeleteExpense:
    handler: src/lambda/http/deleteExpense.handler
    events:
      - http:
          method: delete
          path: expenses/{expenseId}
          authorizer: Auth  
          cors: true  
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}/index/${self:provider.environment.EXPENSE_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem 
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: expenses/{expenseId}/attachment
          authorizer: Auth  
          cors: true  
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}/index/${self:provider.environment.EXPENSE_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::{self:provider.environment.EXPENSES_IMAGES_BUCKET}/*
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
resources:
  Resources:
    ExpenseImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.EXPENSES_IMAGES_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - 's3:GetObject'
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.EXPENSES_IMAGES_BUCKET}/*'
        Bucket: !Ref ExpenseImagesBucket
    ExpensesDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EXPENSES_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: expenseId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH #partition key
          - AttributeName: createdAt
            KeyType: RANGE #Sorting
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EXPENSE_ID_INDEX}
            KeySchema:
            - AttributeName: expenseId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
    GatewayResponseDefault4XX:  #If authentication fails we need to make sure that proper response headers are set
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator  
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi #ApiGatewayRestApi is the logical name of the resource
        ValidateRequestBody: true
        ValidateRequestParameters: false
            

        

