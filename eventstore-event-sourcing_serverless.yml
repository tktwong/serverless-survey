service: message-ingestion

plugins:
  - serverless-pseudo-parameters

custom:
  bucketName: event-store-messages
  eventStoreDns: myeventstore.${opt:dnsZone}

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1

package:
  excludeDevDependencies: true
  exclude:
  - .idea/**

functions:
  generator:
    handler: generator.deliveries
    role: MessagesIamRole
    timeout: 60
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: false
    environment:
      BUCKET_NAME: ${self:custom.bucketName}

  ingestionTrigger:
    handler: ingestion.trigger
    role: MessagesIamRole
    events:
      - s3:
          bucket: messages
          event: s3:ObjectCreated:*
          rules:
            - suffix: .json
    environment:
      EVENT_STORE_ROOT: http://${self:custom.eventStoreDns}:2113

  consumerMessage:
    handler: consumer.processMessages
    role: MessagesIamRole
    timeout: 60
    events:
      - schedule: rate(1 minute)
    environment:
      EVENT_STORE_ROOT: http://${self:custom.eventStoreDns}:2113

  consumerS3Asset:
    handler: consumer.processAssets
    role: MessagesIamRole
    timeout: 60
    events:
      - schedule: rate(1 minute)
    environment:
      EVENT_STORE_ROOT: http://${self:custom.eventStoreDns}:2113

resources:
  Resources:
    S3BucketMessages:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:custom.bucketName}
    IngestionTriggerLambdaPermissionMessagesS3:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
          - IngestionTriggerLambdaFunction
          - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:custom.bucketName}"
    MessagesPolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
        Description: AccessMessages
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource:
                "arn:aws:s3:::${self:custom.bucketName}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource:
                "arn:aws:s3:::${self:custom.bucketName}/*"
            - Effect: "Allow"
              Action:
              - "ssm:GetParameters"
              Resource: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/eventstore/ingestion/*"
    MessagesIamRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - Ref: MessagesPolicy
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
    SubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: eu-west-1a
        CidrBlock: 10.0.0.0/24
        MapPublicIpOnLaunch: True
        VpcId:
          Ref: VPC
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId:
          Ref: InternetGateway
        VpcId:
          Ref: VPC
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
    DefaultRoute:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
        RouteTableId:
          Ref: PublicRouteTable
    SubnetAssociationA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        SubnetId:
          Ref: SubnetA
    EventstoreSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: ui-events-eventstore-sg
        GroupDescription: Eventstore instances
        SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 2113
          ToPort: 2113
          IpProtocol: tcp
        VpcId:
          Ref: VPC
    EventstoreVolume1:
      Type: AWS::EC2::Volume
      Properties:
        AvailabilityZone: eu-west-1a
        Size: 100
        Tags:
        - Key: Name
          Value: ui-events-eventstore-data01
    Eventstore1:
      Type: AWS::EC2::Instance
      Properties:
        EbsOptimized: True
        ImageId: ami-00035f41c82244dab
        InstanceType: m5.large
        KeyName: ${opt:keyPair}
        SecurityGroupIds:
        - !GetAtt EventstoreSecurityGroup.GroupId
        SubnetId:
          Ref: SubnetA
        Tags:
        - Key: Name
          Value: ui-events-eventstore01
        Volumes:
        - Device: /dev/sdf
          VolumeId:
            Ref: EventstoreVolume1
    EventstoreAddress:
      Type: AWS::EC2::EIP
      Properties:
        InstanceId:
          Ref: Eventstore1
        Domain: vpc
    EventstoreDNS:
      Type: AWS::Route53::RecordSet
      Properties:
        ResourceRecords:
        - Ref: EventstoreAddress
        HostedZoneName: ${opt:dnsZone}.
        Name: ${self:custom.eventStoreDns}.
        Type: A
        TTL: 60