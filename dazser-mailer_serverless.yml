service: dazser-mailer
org: networkadmin
app: dazser-mailer-app

provider:
  name: aws
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    DB_HOST: ${ssm:/api/sql/host~true}
    DB_USER: ${ssm:/api/sql/user~true}
    DB_PASS: ${ssm:/api/sql/pass~true}
  iamRoleStatements:
    # This permission is needed to allow me to see if we've already received the item in the queue
  - Effect: Allow
    Action:
      - dynamodb:GetItem
      - dynamodb:PutItem
    Resource: !GetAtt MailerDynamoDbTable.Arn
    # This permission is needed to add to the SES Notifications table
  - Effect: Allow
    Action:
      - dynamodb:GetItem
      - dynamodb:PutItem
    Resource: arn:aws:dynamodb:us-east-1:863441837526:table/SESNotifications
    # This permission allows nodemailer to send emails using ses
  - Effect: Allow
    Action:
      - ses:SendRawEmail
    Resource: "*"
    # This permission is to allow us to get the pdf from the s3 bucket
  - Effect: Allow
    Action:
      - s3:*
    Resource: "*"

custom:
  DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  SQS_QUEUE_NAME: ${self:service}-${opt:stage, self:provider.stage}
  scheduleEnabled:
    prod: true
    dev: false
  s3Bucket:
    prod: dazser-files
    dev: test-dazser-files
  snsTopic:
    prod: arn:aws:sns:us-east-1:863441837526:SES-Log
    dev: arn:aws:sns:us-east-1:863441837526:SES-Log-dev

package:
  exclude:
    - .build/**
    - src/**
    - tests/**

functions:
  # This is the main mailer function, it pulls from the SQS queue,
  # merges with a template, then processes the email to be sent using SES
  mailer:
    handler: dist/handler.default
    timeout: 600
    memorySize: 512
    environment:
      DYNAMODB_TABLE: !Ref MailerDynamoDbTable
      SQS_QUEUE_NAME: !GetAtt MailerSQSQueue.QueueName
      SQS_QUEUE_ARN: !GetAtt MailerSQSQueue.Arn
      SQS_QUEUE_URL: !Ref MailerSQSQueue
    events:
      - sqs:
          arn: !GetAtt MailerSQSQueue.Arn
  # This function will be run by all the SNS notifications
  logger:
    handler: dist/logger/handler.default
    environment:
      DYNAMODB_TABLE: SESNotifications
    events:
      - sns: ${self:custom.snsTopic.${opt:stage, self:provider.stage}}
  # Because of marketing, we need an unsubscribe process,
  # This retrieves HTTP calls from the url associated with this function
  unsub:
    handler: dist/unsubscribe/handler.default
    memorySize: 256
    events:
      - http: ANY /
      - http: ANY /{region}/{emailAddress}
  # These functions will run performance surveys every tuesday.
  performanceSurveysTampa:
    handler: dist/performance/handler.default
    timeout: 600
    memorySize: 512
    environment:
      REGIONNUM: 1
    events:
      - schedule:
          rate: cron(0 13 ? * TUE *)
          enabled: ${self:custom.scheduleEnabled.${opt:stage, self:provider.stage}}
  performanceSurveysOrlando:
    handler: dist/performance/handler.default
    timeout: 600
    memorySize: 512
    environment:
      REGIONNUM: 2
    events:
      - schedule:
          rate: cron(5 13 ? * TUE *)
          enabled: ${self:custom.scheduleEnabled.${opt:stage, self:provider.stage}}
  performanceSurveysBirmingham:
    handler: dist/performance/handler.default
    timeout: 600
    memorySize: 512
    environment:
      REGIONNUM: 3
    events:
      - schedule:
          rate: cron(0 14 ? * TUE *)
          enabled: ${self:custom.scheduleEnabled.${opt:stage, self:provider.stage}}
  performanceSurveysBaltimore:
    handler: dist/performance/handler.default
    timeout: 600
    memorySize: 512
    environment:
      REGIONNUM: 4
    events:
      - schedule:
          rate: cron(10 13 ? * TUE *)
          enabled: ${self:custom.scheduleEnabled.${opt:stage, self:provider.stage}}
  # This function runs every time a PDF is dumped into the invoices folder of the s3 bucket
  invoices:
    handler: dist/invoices/handler.default
    timeout: 300
    memorySize: 512
    events:
      - s3:
          bucket: ${self:custom.s3Bucket.${opt:stage, self:provider.stage}}
          existing: true
          event: s3:ObjectCreated:*
          rules:
            - prefix: invoices/
            - suffix: .pdf
  # This function runs the marketing mailer, right now. It will only run from invoke
  # it basically is the same thing as notify(), running a merge on the specified email
  # then sending it out.
  marketing:
    handler: dist/marketing/handler.default
    timeout: 300
    memorySize: 512

resources:
  Resources:
    # This is the DynamoDB table that let's us check for duplicates
    MailerDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
        TableName: ${self:custom.DYNAMODB_TABLE}
    # This is the Dead Letter Queue for the emails queue
    MailerSQSDLQQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: dlq-${self:custom.SQS_QUEUE_NAME}
        KmsMasterKeyId: alias/aws/sqs
        KmsDataKeyReusePeriodSeconds: 12000
    # This is the SQS Queue that contains the emails
    MailerSQSQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.SQS_QUEUE_NAME}
        KmsMasterKeyId: alias/aws/sqs
        KmsDataKeyReusePeriodSeconds: 12000
        VisibilityTimeout: 1800
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt MailerSQSDLQQueue.Arn
          maxReceiveCount: 5

  Outputs:
    MailerDynamoDbTableName:
      Value: !Ref MailerDynamoDbTable
    MailerDynamoDbTableArn:
      Value: !GetAtt MailerDynamoDbTable.Arn
    MailerSQSDLQQueueArn:
      Value: !GetAtt MailerSQSDLQQueue.Arn
    MailerSQSQueueArn:
      Value: !GetAtt MailerSQSQueue.Arn
