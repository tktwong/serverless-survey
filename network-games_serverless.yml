# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: websocket # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  runtime: go1.x

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:DescribeTable"
      Resource:
        - Fn::GetAtt: [ PlayerConnectionsTable, Arn ]
        - Fn::Join: [ "/", [ Fn::GetAtt: [ PlayerConnectionsTable, Arn ], "index", "*" ] ]
        - Fn::GetAtt: [ RoomsTable, Arn ]
        - Fn::Join: [ "/", [ Fn::GetAtt: [ RoomsTable, Arn ], "index", "*" ] ]
        - Fn::GetAtt: [ GamesTable, Arn ]
    - Effect: Allow
      Action:
        - "dynamodb:ListTables"
      Resource:
        - "*"

# you can define service wide environment variables here
  environment:
    DYNAMODB_TABLE_CONNECTIONS:
      Ref: PlayerConnectionsTable
    DYNAMODB_TABLE_ROOMS:
      Ref: RoomsTable
    DYNAMODB_TABLE_GAMES:
      Ref: GamesTable

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  onConnect:
    handler: bin/on_connect
    events:
      - websocket:
          route: $connect
  onDisconnect:
    handler: bin/on_disconnect
    events:
      - websocket:
          route: $disconnect
  joinRoom:
    handler: bin/join_room
    events:
      - websocket:
          route: joinRoom
  gameAction:
    handler: bin/game_action
    events:
      - websocket:
          route: gameAction
  debug:
    handler: bin/debug
    events:
      - http:
          path: debug/reset_db
          method: get

resources:
  Resources:
    PlayerConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service.name}-player-connections-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: PlayerId
            AttributeType: S
          - AttributeName: ConnectionId
            AttributeType: S
        KeySchema:
          - AttributeName: PlayerId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ConnectionId
            KeySchema: 
              - AttributeName: ConnectionId
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 100
              WriteCapacityUnits: 100
        ProvisionedThroughput:
          ReadCapacityUnits: 100
          WriteCapacityUnits: 100
        SSESpecification:
          SSEEnabled: False
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    RoomsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service.name}-rooms-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: RoomId
            AttributeType: S
          - AttributeName: IsOpen
            AttributeType: S
        KeySchema:
          - AttributeName: RoomId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: IsOpen
            KeySchema:
              - AttributeName: IsOpen
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 100
              WriteCapacityUnits: 100
        ProvisionedThroughput:
          ReadCapacityUnits: 100
          WriteCapacityUnits: 100
        SSESpecification:
          SSEEnabled: False
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service.name}-games-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: GameId
            AttributeType: S
        KeySchema:
          - AttributeName: GameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 100
          WriteCapacityUnits: 100
        SSESpecification:
          SSEEnabled: False
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
