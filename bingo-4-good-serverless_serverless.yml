service:
  name: bingo-4-good-serverless

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  scheduleEnabled:
    production: true
    dev: false
    local: false

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    USERS_TABLE: Users
    BINGO_CARDS_TABLE: Bingo_Cards
    BINGO_ITEMS_TABLE: Bingo_Items
    BINGO_MANAGE_TABLE: Bingo_Manage
    BINGO_ANSWERS_TABLE: Bingo_Answers
    COGNITO_ISSUER: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_2iujgyLTy
  logs:
    httpApi: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BINGO_CARDS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BINGO_ITEMS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BINGO_MANAGE_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BINGO_ANSWERS_TABLE}"

functions:
  getCurrentUser:
    handler: src/handlers/get.getCurrentUser
    events:
      - http:
          path: getCurrentUser
          method: get
          cors: true
          authorizer: authorizerFunc
  getFriends:
    handler: src/handlers/get.getFriends
    events:
      - http:
          path: getFriends
          method: get
          cors: true
          querystrings:
            url: true
          authorizer: authorizerFunc
  getBingoCard:
    handler: src/handlers/get.getBingoCard
    events:
      - http:
          path: getBingoCard
          method: get
          cors: true
          querystrings:
            url: true
          authorizer: authorizerFunc
  getBingoAnswers:
    handler: src/handlers/get.getBingoAnswers
    events:
      - http:
          path: getBingoAnswers
          method: get
          cors: true
          querystrings:
            url: true
          authorizer: authorizerFunc
  addFriend:
    events:
      - http:
          path: addFriend
          method: post
          cors: true
          authorizer: authorizerFunc
    handler: src/handlers/post.addFriend
  addDisplayName:
    events:
      - http:
          path: addDisplayName
          method: post
          cors: true
          authorizer: authorizerFunc
    handler: src/handlers/post.addDisplayName
  isDisplayNameTaken:
    events:
      - http:
          path: isDisplayNameTaken
          method: get
          cors: true
          querystrings:
            url: true
          authorizer: authorizerFunc
    handler: src/handlers/get.getIsDisplayNameTaken
  searchUsers:
    events:
      - http:
          path: searchUsers
          method: get
          cors: true
          querystrings:
            url: true
          authorizer: authorizerFunc
    handler: src/handlers/get.searchUsers
  registerUser:
    events:
      - cognitoUserPool:
          pool: Bingo4GoodApp
          trigger: PostConfirmation
    handler: src/handlers/admin.registerUser
  answerItem:
    events:
      - http:
          path: answerItem
          method: post
          cors: true
          authorizer: authorizerFunc
    handler: src/handlers/post.answerItem
  authorizerFunc:
    handler: src/handlers/authorizer.authorize
  preSignUpConfirmUser:
    handler: src/handlers/admin.autoConfirmUserCognitoPreSignUp
  scheduledFiveDayBingoCards:
    handler: src/handlers/admin.scheduledFiveDayBingoCards
    events:
      - schedule:
          rate: rate(5 days)
          enabled: ${self:custom.scheduleEnabled.${self:provider.stage}}
