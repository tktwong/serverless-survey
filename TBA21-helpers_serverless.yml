# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: TBA21-helpers # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
package:
  exclude:
    - node_modules/exiftool.js/**

provider:
  name: aws
  runtime: nodejs12.x
  region: ${env:REGION, 'eu-central-1'}
  stage: ${env:STAGE, 'prod'}
  timeout: 900
  memorySize: 256
  versionFunctions: false
  environment: #service-wide env vars will be used in some functions
    PGUSER: ${env:PGUSER}
    PGPASSWORD: ${env:PGPASSWORD}
    PGHOST: ${env:PGHOST}
    PGPORT: ${env:PGPORT, "5432"} 
    PGDATABASE: ${env:PGDATABASE}
    PGSSL: ${env:PGSSL}
    PG_ITEMS_TABLE: ${env:PG_IMAGE_METADATA_TABLE, "tba21.items"}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - Ref: TBA21FileProcessorStateMachine${env:STAGE, 'prod'}
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::oceanarchive-demo-dev/*"
        - "arn:aws:s3:::oceanarchive-demo-dev"
        - "arn:aws:s3:::ocean-archive-prod-content/*"
        - "arn:aws:s3:::ocean-archive-prod-content"
        - "arn:aws:s3:::oceanarchive-vod-source-1ma7gv7bdyc23/*"
        - "arn:aws:s3:::oceanarchive-vod-source-1ma7gv7bdyc23"
        - "arn:aws:s3:::tba21-helpers-heictojpeg*/*"
        - "arn:aws:s3:::tba21-helpers-heictojpeg*"
        - "arn:aws:s3:::thumbnails.ocean-archive.org*"
        - "arn:aws:s3:::thumbnails.ocean-archive.org*/*"
        - "arn:aws:s3:::converted-images.ocean-archive.org*"
        - "arn:aws:s3:::converted-images.ocean-archive.org*/*"
        - "arn:aws:s3:::audio.ocean-archive.org*"
        - "arn:aws:s3:::audio.ocean-archive.org*/*"
    - Effect: "Allow"
      Action: "rekognition:DetectLabels"
      Resource: "*"

plugins:
  - serverless-dotenv-plugin
  - serverless-pseudo-parameters
  - serverless-step-functions
  - serverless-step-functions-offline

functions:
  master:
    handler: master.start
    environment:
      stateMachineArn: ${self:resources.Outputs.TBA21FileProcessorStateMachine.Value}
  generateMP3:
    handler: generate_mp3.handler
    environment:
      ALEXA_AUDIO_BUCKET: oceanarchive-alexa-audio
  image_tagger:
    handler: image_tagger.handler
  image_hashing:
    handler: image_hashing.handler
    memorySize: 3008
  copy_video_for_transcoding:
    handler: copy_for_vid_transcoding.handler
    environment:
      TRANSCODE_BUCKET: oceanarchive-vod-source-1ma7gv7bdyc23
  create_item:
    handler: create_item.handler
    environment:
      QLDB_API_KEY: ${env:QLDB_API_KEY}
      QLDB_API_URL: ${env:QLDB_API_URL}
  hashes:
    handler: hashes.handler
    memorySize: 512
  duplicate_handler:
    handler: duplicate_handler.handler
  exif:
    handler: exif.handler
    package:
      individually: true
      exclude:
        - node_modules/sharp/**
        - node_modules/image-hash/**
      include:
        - node_modules/exiftool.js/**
    environment:
      DEBUG: exiftool-json-db
  raw_conversion:
    handler: raw_conversion.handler
    environment:
      CONVERTED_IMAGE_BUCKET: converted-images.ocean-archive.org
  wav_conversion:
    handler: generate_m4a.handler
    environment:
      M4A_BUCKET: audio.ocean-archive.org
  convertHEI:
    handler: convertHEI.handler
    environment:
      CONVERSION_BUCKET: tba21-helpers-heictojpeg-${env:STAGE, 'prod'}
  thumbnail_images:
    handler: thumbnail_images.handler
    memorySize: 1024
    environment:
      THUMBNAIL_BUCKET: thumbnails.ocean-archive.org


stepFunctions:
  stateMachines:
    hellostepfunc:
      name: TBA21FileProcessorStateMachine${env:STAGE, 'prod'}
      definition:
        StartAt: CreateItem
        States:
          CreateItem: 
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-create_item
            ResultPath: '$.createResult'
            Next: Parallel
          Parallel:
            Type: Parallel
            Next: Final State
            Branches:
            - StartAt: Hashes
              States:
                Hashes: 
                  Type: Task
                  Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-hashes
                  ResultPath: '$.hashResult'
                  End: true
            - StartAt: FileTypeSwitch
              States:
                FileTypeSwitch:
                  Type: Choice
                  Choices:
                  - Or:
                    - Variable: "$.isImage"
                      BooleanEquals: true
                    - Variable: "$.isVideo"
                      BooleanEquals: true
                    Next: ImageParallel
                  - Variable: "$.isWav"
                    BooleanEquals: true
                    Next: WavConversion
                  - Variable: "$.isRaw"
                    BooleanEquals: true
                    Next: RawConversion
                  Default: UnRecognizedFileType
                RawConversion:
                  Type: Task
                  Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-raw_conversion
                  ResultPath: '$.raw_conversion_results'
                  End: true
                UnRecognizedFileType:
                  Type: Pass
                  End: true
                WavConversion:
                  Type: Task
                  Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-wav_conversion
                  End: true
                ImageParallel:
                  Type: Parallel
                  End: true
                  Branches:
                  - StartAt: VideoOrImageTypeSwitch
                    States:
                      VideoOrImageTypeSwitch:
                        Type: Choice
                        Choices:
                        - Variable: "$.isHEI"
                          BooleanEquals: true
                          Next: ConvertHEI
                        - Variable: "$.isVideo"
                          BooleanEquals: true
                          Next: Copy_video_for_transcoding
                        - Variable: "$.isJPEGPNG"
                          BooleanEquals: true
                          Next: HashingTaggingExifParallel
                        Default: TypeNotRecognisedPass
                      TypeNotRecognisedPass:
                        Type: Pass
                        End: true
                      Copy_video_for_transcoding:
                        Type: Task
                        Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-copy_video_for_transcoding
                        ResultPath: '$.videoTranscodeResult'
                        End: true
                      ConvertHEI:
                        Type: Task
                        Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-convertHEI
                        ResultPath: '$.convertHEIresult'
                        Next: HashingTaggingExifParallel
                      HashingTaggingExifParallel:
                        Type: Parallel
                        End: true
                        Branches:
                        - StartAt: Exif
                          States:
                            Exif:
                              Type: Task
                              Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-exif
                              ResultPath: '$.ExifResult'
                              End: true
                        - StartAt: Thumbnail
                          States:
                            Thumbnail:
                              Type: Task
                              Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-thumbnail_images
                              ResultPath: '$.ThumbnailResult'
                              End: true
                        - StartAt: SizeWithinLimit
                          States:
                            SizeWithinLimit:
                              Type: Choice
                              Choices:
                              - Variable: "$.s3metadata.ContentLength"
                                NumericLessThanEquals: 15728640 #15*1024*1024
                                Next: image_tagger
                              Default: FileTooLargePass
                            image_tagger:
                              Type: Task
                              Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-image_tagger
                              ResultPath: '$.image_tagger_results'
                              End: true
                            FileTooLargePass:
                              Type: Pass
                              End: true
                        - StartAt: image_hashing
                          States:
                            image_hashing:
                              Type: Task
                              Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-image_hashing
                              ResultPath: '$.imghashing_result'
                              End: true
                              Catch:
                              - ErrorEquals: ["States.ALL"]
                                Next: OutOfMemoryFallback
                            OutOfMemoryFallback:
                              Type: Pass
                              Result: "Out of memory for image hashing."
                              End: true
          Final State:
            Type: Pass
            End: true
resources:
  Resources:
    S3BucketTempJPEG:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: tba21-helpers-heictojpeg-${env:STAGE, 'prod'}
        # add additional custom bucket configuration here
  Outputs:
    TBA21FileProcessorStateMachine:
      Description: The ARN of the example state machine
      Value:
        Ref: TBA21FileProcessorStateMachine${env:STAGE, 'prod'}
custom:
  stepFunctionsOffline:
    Hashes: hashes #(v2.0)
    exif: exif #(v2.0)
    raw_conversion: raw_conversion