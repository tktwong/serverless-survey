service:
  name: slack-animal-bot

plugins:
  - serverless-offline
  - serverless-plugin-typescript

custom:
  region: ap-northeast-1

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.region}
  stage: ${opt:stage, 'dev'}
  timeout: 20
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource: "*"
    - Effect: "Allow"
      Action:
        - sqs:sendMessage
      Resource: "*"
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: "*"
  environment:
    REGION: ${self:custom.region}
    GEMBA_CAT_SKACK_INCOMING_WEBHOOK_URL: ${ssm:/slack.incoming_webhooks.gemba_cat~true}
    SKACK_INCOMING_WEBHOOK_URL: ${ssm:/slack.incoming_webhooks.cat~true}
    FLICKER_API_KEY: ${ssm:/flicker.apikey~true}

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: SlackAnimalBot
    AnimalSlackBotResponseQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: AnimalSlackBotResponseQueue

functions:
  handleSlackMessage:
    name: handle-slack-response-${self:provider.stage}
    handler: src/index.handleSlackMessage
    events:
      - http:
          path: animal_api
          method: POST
  responseToSlackMessage:
    name: response-to-slack-message-${self:provider.stage}
    handler: src/clients/sqs.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AnimalSlackBotResponseQueue
              - Arn
