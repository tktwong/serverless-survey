service:
  name: serverless-social-app
  
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    SURVEY_INDEX: surveyId
    IP_INDEX: ipAddr
    IP_WHEN_INDEX: when
    SURVEY_YES_INDEX: YES_INDEX
    SURVEY_NO_INDEX: NO_INDEX
    SURVEY_MAYBE_INDEX: MAYBE_INDEX
    SURVEY_TABLE: surveyTotalTable-${self:provider.stage}
    SURVEY_IP_TABLE: surveyUpdatesIPTable-${self:provider.stage}
  
  iamRoleStatements:
    - Effect: Allow
      Action:
      - codedeploy:*
      Resource:
      - '*'
    - Effect: Allow
      Action:
        - dynamodb:Scan 
        - dynamodb:GetItem 
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SURVEY_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Scan 
        - dynamodb:GetItem 
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SURVEY_IP_TABLE}
    
 

functions:  

  GetSurveyResult:
    handler: src/lambda/getSurveyResult.handler
    events:
      - http:
          method: get 
          path: survey
          cors: true 

  UpdateSurvey:
    handler: src/lambda/updateSurvey.handler
    events:
      - http:
          method: post 
          path: survey/{surveyId}
          cors: true 
          reqValidatorName: RequestBodyValidator  
          requestModels:
            'application/json': TodoCreate
          request: 
            schema:
              application/json: ${file(src/model/survey-post-request.json)} 

custom:  
  documentation:
    api:
      info:
        version: v1.0.0
        title: Survey API
        description: Online survey for social distancing
    models:      
      - name: surveyUpdate
        contentType: application/json
        schema: ${file(src/model/survey-post-request.json)}

resources:
  Resources: 
    GatewayResponseDefault4XX:
        Type: AWS::ApiGateway::GatewayResponse
        Properties:
            ResponseParameters:
                gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
                gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type'"
                gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
            ResponseType: DEFAULT_4XX
            RestApiId:
                Ref: ApiGatewayRestApi
    SurveyResultDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
            - AttributeName: surveyId
              AttributeType: S
        KeySchema:
            - AttributeName: surveyId
              KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SURVEY_TABLE}
    SurveyIPtDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
            - AttributeName: ipAddr
              AttributeType: S 
            - AttributeName: when
              AttributeType: S 
        KeySchema:
            - AttributeName: ipAddr
              KeyType: HASH 
            - AttributeName: when
              KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SURVEY_IP_TABLE}
        
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
          Name: 'request-body-validator'
          RestApiId:
              Ref: ApiGatewayRestApi
          ValidateRequestBody: false
          ValidateRequestParameters: true  
  