service: persons
org: schillerrina
app: are-they-gay
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-offline

custom:
  customDomain:
    domainName: 'aretheygay.org'
#    path: /
    basePath: 'api'
    stage: ${self:provider.stage}
    createRoute53Record: true

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - .serverless/**
    - .aws-sam/
    - env/**
    - frontend/**
    - README.md

provider:
  name: aws
  runtime: python3.6
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"


functions:
  create:
    handler: persons/create.create
    events:
      - http:
          path: persons
          method: post
          cors: true
          integration: lambda

  list:
    handler: persons/list.person_list
    events:
      - http:
          path: persons
          method: get
          cors: true

  get:
    handler: persons/get.get
    events:
      - http:
          path: persons/{person_id}
          method: get
          cors: true
          integration: lambda
          request:
            paths:
              person_id: true

  update:
    handler: persons/update.update
    events:
      - http:
          path: persons/{person_id}
          method: put
          cors: true
          integration: lambda
          request:
            paths:
              person_id: true
  delete:
    handler: persons/delete.delete
    events:
      - http:
          path: persons/{person_id}
          method: delete
          cors: true
          integration: lambda
          request:
            paths:
              person_id: true

resources:
  Resources:
    PersonsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: person_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: person_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
