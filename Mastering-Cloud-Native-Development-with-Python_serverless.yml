service: lambda-dynamo-data-api-serverless

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: ${env:PYTHON_VERSION}
  environment:
    DYNAMO_TABLE_NAME: user-visits-serverless 
    #${self:service}-${opt:stage, self:provider.stage}
  deploymentBucket:
    name: ${env:BUCKET}
  profile: ${env:PROFILE}
  region: ${env:REGION}
  logRetentionInDays: 1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${env:REGION}:*:table/${self:provider.environment.DYNAMO_TABLE_NAME}"
package:
  include:
    - ../../../lambda_dynamo_crud/*.py
  exclude:
    - "*.sh"

functions:
  methods:
    handler: lambda_dynamo_crud/lambda_query_dynamo.lambda_handler
    events:
      - http:
          path: visits
          method: post
          cors: true
      - http:
          path: visits/{resourceId}
          method: get
          cors: true
      - http:
          path: visits/{resourceId}
          method: put
          cors: true
      - http:
          path: visits
          method: delete
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete #Retain
      Properties:
        SSESpecification: 
          SSEEnabled: True
        AttributeDefinitions:
          - AttributeName: EventId
            AttributeType: S
          - AttributeName: EventDay
            AttributeType: N
        KeySchema:
          - AttributeName: EventId
            KeyType: HASH
          - AttributeName: EventDay
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMO_TABLE_NAME}
