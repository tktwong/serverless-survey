service: big-mouth

plugins:
  - serverless-pseudo-parameters
  - serverless-sam

provider:
  name: aws
  runtime: nodejs10.x
  iamRoleStatements:
    - Effect: Allow
      Action: dynamodb:scan
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
    - Effect: Allow
      Action: execute-api:Invoke
      Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
    - Effect: Allow
      Action: kinesis:PutRecord
      Resource: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    - Effect: Allow
      Action: sns:Publish
      Resource: 
        - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification
        - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:user-notification 
        - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurantnotificationretry
        - arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification-dlq
functions:
  get-index:
    handler: functions/get-index.handler
    events:
       - http:
           path: /
           method: get
    environment:
      restaurants_api: https://jb7u0hnffb.execute-api.us-east-1.amazonaws.com/dev/restaurants
      cognito_user_pool_id: us-east-1_sLVOua9P9
      cognito_client_id: 2jhpomesmdrg00l4i7zaju2cd3t
      cognito_server_client_id: 57tuye83rkd0894tvdct9ulugq5
      orders_api: https://jb7u0hnffb.execute-api.us-east-1.amazonaws.com/dev/orders

  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants/
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: restaurants
  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/us-east-1_sLVOua9P9
    environment:
      restaurants_table: restaurants
  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/us-east-1_sLVOua9P9
    environment:
      order_events_stream: order-events

  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - stream:
          type: kinesis
          arn: 
            Fn::GetAtt:
              - orderEventsStream
              - Arn
    environment:
      order_events_stream: order-events
      restaurant_notification_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurantnotification
      restaurant_notification_retry_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurantnotificationretry
    

  retry-notify-restaurants:
    handler: functions/retry-notify-restaurant.handler
    events:
      - sns: 
         arn: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurantnotificationretry
    environment:
      order_events_stream: order-events
      restaurant_notification_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurantnotification
      restaurant_notification_retry_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurantnotificationretry
    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurant-notification-dlq

  accept-order:
    handler: functions/accept-order.handler
    events:
      - http:
          path: /orders/accept
          method: post
    environment:
      order_events_stream: order-events
    onError: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:restaurantnotificationdlq


  notify-user:
    handler: functions/notify-user.handler
    events:
      - stream:
          arn: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    environment:
      order_events_stream: order-events
      user_notification_topic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:usernotification

  fulfill-order:
    handler: functions/fulfill-order.handler
    events:
      - http:
          path: /orders/complete
          method: post
    environment:
      order_events_stream: order-events

resources:
  Resources:
    restaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: restaurants
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    orderEventsStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: order-events
        ShardCount: 1
    
    restaurantnotification:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: restaurantnotification
        TopicName: restaurantnotification

    restaurantnotificationretry:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: restaurantnotificationretry
        TopicName: restaurantnotificationretry

    restaurantnotificationdlq:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: restaurantnotificationdlq
        TopicName: restaurantnotificationdlq

    usernotification:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: usernotification
        TopicName: usernotification
