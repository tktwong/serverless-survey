# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: positiveaction # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
provider:
  name: aws
  runtime: nodejs8.10
  profile: speechless
# you can overwrite defaults here
#  stage: dev
  region: us-east-1
  role: arn:aws:iam::543776702460:role/positiveaction_role_lambda

custom:
  documentation:
    api:
      info:
        version: '1'
        title: 'Positive actions API '
        contact:
          name: Marc sirisak
          email: speechlesshomme@email.com
        license:
          name: Private
    models: ${file(./documentation/requestsModels.yml)}

package:
  individually: true
  exclude:
   - ".*/**"

functions:
  create_events:
    handler: functions/create_events/index.handler
    name: ${self:provider.stage}-create_events
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/create_events/**'
    events:
      - http:
          path: events
          method: post
          private: true
          reqValidatorName: onlyBody
          documentation:
            requestModels:
               "application/json": EventCreate
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": EventCreateResp

  create_comments:
    handler: functions/create_comments/index.handler
    name: ${self:provider.stage}-create_comments
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/create_comments/**'
    events:
      - http:
          path: comments
          method: post
          private: true
          reqValidatorName: onlyBody
          documentation:
            requestModels:
              "application/json": CommentCreate
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": CommentCreateResp

  create_participant:
    handler: functions/create_participant/index.handler
    name: ${self:provider.stage}-create_participant
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/create_participant/**'
    events:
      - http:
          path: participant
          method: post
          private: true
          reqValidatorName: onlyBody
          documentation:
            requestModels:
              "application/json": ParticipantCreate
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": ParticipantCreateResp
                
  list_events:
    handler: functions/list_events/index.handler
    name: ${self:provider.stage}-list_events
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/list_events/**'
    environment:
      ELASTICSEARCH_HOST: ${ssm:positiveaction.ELA_HOST}
    events:
      - http:
          path: events
          method: get
          private: true
          documentation:
            queryParams:
            -
              name: "lat"
              description: "Latitude of the position desired"
            -
              name: "lon"
              description: "Longitude of the position desired"
            -
              name: "sdate"
              description: "start date of the query"
            -
              name: "edate"
              description: "end date of the query"
            -
              name: "category"
              description: "Category of the desire event"
  get_eventDetail:
    handler: functions/get_eventDetail/index.handler
    name: ${self:provider.stage}-get_eventDetail
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/get_eventDetail/**'
    events:
      - http:
          path: events/{event_id}
          method: get
          private: true
          documentation:
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": EventDetailResp

  get_categoryList:
    handler: functions/get_categoryList/index.handler
    name: ${self:provider.stage}-get_categoryList
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/get_eventDetail/**'
    events:
      - http:
          path: category
          method: get
          private: true
          documentation:
                methodResponses:
                -
                  statusCode: "200"
                  responseModels:
                    "application/json": CategoryResp                    

  elasticsearch_bridge:
    handler: functions/elasticsearch_bridge/index.handler
    name: ${self:provider.stage}-elasticsearch_bridge
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/elasticsearch_bridge/**'
    environment:
      ELASTICSEARCH_HOST: ${ssm:positiveaction.ELA_HOST}
  
  get_eventImg:
    handler: functions/get_eventImg/index.handler
    name: ${self:provider.stage}-get_eventImg
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/get_eventImg/**'
    events:
      - http:
          path: image
          method: get
          private: true

  get_userInfo:
    handler: functions/get_userInfo/index.handler
    name: ${self:provider.stage}-get_userInfo
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/get_userInfo/**'
    events:
      - http:
          path: user/
          method: get
          private: true
          documentation:
            queryParams:
            -
              name: "userId"
              description: "userId of the user desire to get info"
            methodResponses:
            -
              statusCode: "200"
              responseModels:
                "application/json": UserInfoResp

  cognito_checkUser:
    handler: functions/cognito_checkUser/index.handler
    name: ${self:provider.stage}-cognito_checkUser
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/cognito_checkUser/**'

  cognito_createUser:
    handler: functions/cognito_createUser/index.handler
    name: ${self:provider.stage}-cognito_createUser
    package: 
      exclude:
        - functions/**
      include:
        - 'functions/cognito_createUser/**'

resources:
  Resources:
    onlyBody:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true # true or false
        ValidateRequestParameters: false # true or false