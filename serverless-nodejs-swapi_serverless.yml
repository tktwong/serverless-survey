service: swapi

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

plugins:
  - serverless-aws-documentation

functions:

  create:
    handler: films/create.create
    events:
      - httpApi:
          path: /films
          method: post
          documentation:
          summary: "Create film"
          description: "A Film resource is a single film."
          tags:
            - "Film Creation"
          requestBody:
            description: "Request body description"
          requestHeaders:
            -
              name: "x-header"
              description: "Header description"
            -
              name: "Authorization"
              description: "Auth Header description"
          queryParams:
            -
              name: "id"
              description: "ID"
            -
              name: "titulo"
              description: "El título de esta película"
            -
              name: "número de episodio"
              description: "El número de episodio de esta película"
            -
              name: "sinopsis"
              description: "Los párrafos iniciales al comienzo de esta película"
            -
              name: "director"
              description: "El nombre del director de esta película"              
          pathParams:
            -
              name: "id"
              description: "ID of the film you want to create"
          requestModels:
            "application/json": "CreateRequest"
            "application/xml": "CreateRequestXml"
          methodResponses:
            -
              statusCode: "200"
              responseBody:
                description: "Response body description"              
              responseModels:
                "application/json": "CreateResponse"
            -
              statusCode: "400"
              responseModels:
                "application/json": "ErrorResponse"

  list:
    handler: films/list.list
    events:
      - httpApi:
          path: /films
          method: get
          documentation:
          summary: "List films"
          description: "A Film resource is a single film."
          tags:
            - "Films List"
          requestBody:
            description: "Request body description"
          requestHeaders:
            -
              name: "x-header"
              description: "Header description"
            -
              name: "Authorization"
              description: "Auth Header description"
          queryParams:
            -
              name: "id"
              description: "ID"                     
          pathParams:
            -
              name: "id"
              description: "List of Films"
          requestModels:
            "application/json": "ListRequest"
            "application/xml": "ListRequestXml"
          methodResponses:
            -
              statusCode: "200"
              responseBody:
                description: "Response body description"              
              responseModels:
                "application/json": "ListResponse"
            -
              statusCode: "400"
              responseModels:
                "application/json": "ErrorResponse"

  get:
    handler: films/get.get
    events:
      - httpApi:
          path: /films/{id}
          method: get
          documentation:
          summary: "Get film"
          description: "A Film resource is a single film."
          tags:
            - "Film Get"
          requestBody:
            description: "Request body description"
          requestHeaders:
            -
              name: "x-header"
              description: "Header description"
            -
              name: "Authorization"
              description: "Auth Header description"
          queryParams:
            -
              name: "id"
              description: "ID"                     
          pathParams:
            -
              name: "id"
              description: "ID of the film you want to get"
          requestModels:
            "application/json": "GetRequest"
            "application/xml": "GetRequestXml"
          methodResponses:
            -
              statusCode: "200"
              responseBody:
                description: "Response body description"              
              responseModels:
                "application/json": "GetResponse"
            -
              statusCode: "400"
              responseModels:
                "application/json": "ErrorResponse"

  delete:
    handler: films/delete.delete
    events:
      - httpApi:
          path: films/{id}
          method: delete
          documentation:
          summary: "Delete film"
          description: "A Film resource is a single film."
          tags:
            - "Film Delete"
          requestBody:
            description: "Request body description"
          requestHeaders:
            -
              name: "x-header"
              description: "Header description"
            -
              name: "Authorization"
              description: "Auth Header description"
          queryParams:
            -
              name: "id"
              description: "ID"                      
          pathParams:
            -
              name: "id"
              description: "ID of the film you want to delete"
          requestModels:
            "application/json": "DeleteRequest"
            "application/xml": "DeleteRequestXml"
          methodResponses:
            -
              statusCode: "200"
              responseBody:
                description: "Response body description"              
              responseModels:
                "application/json": "DeleteResponse"
            -
              statusCode: "400"
              responseModels:
                "application/json": "ErrorResponse"

resources:
  Resources:
    FilmsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

custom:
  documentation:
    api:
      info:
        version: "1.0.0" 
        title: "SWAPI" 
        description: "API en Node.js con framework Serverless, pruebas unitarias con Jest y documentacion con Swagger"        
        contact:
          name: "Miguel Cabllero"
          url: "http://www.example.com/me"
          email: "medcaballero@gmail.com"
        license:
          name: "Licensing"   