# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: iam-share-first
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

  apiGateway:
    # restApiId: abcoefgh # REST API resource ID. Default is generated by the framework
    # restApiRootResourceId: bbbbbbbb # Root resource, represent as / path
    # websocketApiId: cccccccc # Websocket API resource ID. Default is generated by the framework
    restApiResources:
      /s3:
        Ref: SuzukimaRestApiResourceS3
    #description: Some Description # optional - description of deployment history


# you can overwrite defaults here
  stage: dev
  region: ap-northeast-1
  profile: default

# you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - "s3:*"
  #     Resource: "*"
  #   - Effect: "Allow"
  #     Action:
  #       - "dynamodb:*"
  #     Resource: "*"

plugins:
  - serverless-pseudo-parameters

custom:
  projectName: iam-share-test

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - node_modules
    - node_modules/**

# functions:
#   hello:
#     handler: handler.hello
# #    The following are a few example events you can configure
# #    NOTE: Please make sure to change your handler code to work with those events
# #    Check the event documentation for details
#     events:
#       - http:
#           path: /splitdeploy/hello
#           method: get

#   AuthorizerLambda:
#     handler: handler.authorizer
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    SuzukimaRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:custom.projectName}-RestApi
    SuzukimaRestApiResourceS3:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref SuzukimaRestApi
        ParentId:
          'Fn::GetAtt': [ SuzukimaRestApi, RootResourceId ]
        PathPart: 's3'
      DependsOn:
        - SuzukimaRestApi
    SuzukimaBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: suzukima-${self:custom.projectName}-bucket
    IamRoles3ListObjects:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          -
            PolicyName: ${self:custom.projectName}-s3ListObjectsPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                    - s3:List*
                  Resource:
                    'Fn::GetAtt': [SuzukimaBucket, Arn]
                -
                  Effect: Allow
                  Action:
                    - logs:*
                  Resource:
                    'Fn::Sub': arn:aws:logs:ap-northeast-1:#{AWS::AccountId}:log-group:/aws/lambda/*
        RoleName: ${self:custom.projectName}-s3ListObjectsRole
      DependsOn:
        - SuzukimaBucket
    IamRoles3GetObject:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          -
            PolicyName: ${self:custom.projectName}-s3GetObjectPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                    - s3:Get*
                  Resource:
                    'Fn::Join':
                      - "/"
                      - - 'Fn::GetAtt': [SuzukimaBucket, Arn]
                        - "*"
                -
                  Effect: Allow
                  Action:
                    - logs:*
                  Resource:
                    'Fn::Sub': arn:aws:logs:ap-northeast-1:#{AWS::AccountId}:log-group:/aws/lambda/*
        RoleName: ${self:custom.projectName}-s3GetObjectRole
      DependsOn:
        - SuzukimaBucket
  Outputs:
    apiGatewayRestApiId:
      Value:
        Ref: SuzukimaRestApi
      Export:
        Name: ${self:custom.projectName}-restApiId-${self:provider.stage}
    apiGatewayRestApiRootResourceId:
      Value:
        'Fn::GetAtt': [SuzukimaRestApi, RootResourceId]
      Export:
        Name: ${self:custom.projectName}-rootResourceId-${self:provider.stage}
    apiGatewayResourcesS3:
      Value:
        Ref: SuzukimaRestApiResourceS3
      Export:
        Name: ${self:custom.projectName}-ResourcesS3-${self:provider.stage}
    iamRoleS3ListObjectsArn:
      Value:
        'Fn::GetAtt': [IamRoles3ListObjects, Arn]
      Export:
        Name: ${self:custom.projectName}-iamRoleS3ListObjectsArn-${self:provider.stage}
    iamRoleS3GetObjectArn:
      Value:
        'Fn::GetAtt': [IamRoles3GetObject, Arn]
      Export:
        Name: ${self:custom.projectName}-iamRoleS3GetObjectArn-${self:provider.stage}

