service:
  name: angularfire-aws-backend-demo
  publish: false # disable auto-publishing to the Serverless platform

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, self:custom.default.stage}
  region: ${opt:region, self:custom.default.region}
  timeout: ${self:custom.default.timeout}

plugins:
  - serverless-plugin-additional-stacks
  - serverless-iam-roles-per-function
  - serverless-plugin-include-dependencies

functions:
  api:
    name: ${self:service}-${self:provider.stage}-api
    handler: src/handlers/index.handler
    environment:
      TABLE_NAME: ${self:custom.db.table.name}
    events:
      - http:
          path: /api/sns
          method: post
          # authorizer:
          #   arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.account.id}:userpool/${self:custom.userPoolId}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${self:custom.account.id}:table/${self:custom.db.table.name}

custom:
  # Default values if someone runs `sls deploy -v`
  default:
    stage: dev
    region: us-west-2
    timeout: 30  # API Gateway hard timeout

  # External File Imports
  account: ${file(./config/config.${self:provider.stage}.yml):account}
  db: ${file(./config/config.${self:provider.stage}.yml):db}

  # Base naming convention for all resources
  base: ${self:service}-${self:provider.stage}

  # Stack Name definitions (for consistency across stacks)
  # cognitoStackName: ${self:custom.base}-cognito
  dynamoDBStackName: ${self:custom.base}-dynamodb

  # Plugin: additionalStacks (nesting CF stacks)
  additionalStacks:
    # deploys dynamoDBResources stack
    # creates logging table
    dynamoDBResources:
      Deploy: Before
      StackName: ${self:custom.dynamoDBStackName}
      Resources: ${file(./resources/dynamodb.yml)}
    # deploys cognitoResources stack
    # creates cognito user pool
    # outputs cognito user pool info
    # cognitoResources:
    #   Deploy: Before
    #   StackName: ${self:custom.cognitoStackName}
    #   Resources: ${file(./resources/cognito.yml)}
    #   Outputs: ${file(./resources/cognito-outputs.yml)}

  # Cognito
  # User Pool Id import from Cognito stack
  # userPoolId:
  #   Fn::ImportValue: ${self:custom.cognitoStackName}:${self:provider.stage}:${self:custom.base}-UserPoolId
  # userPoolName: ${self:custom.base}-userpool

  # IAM
  # role:
  #   arn: arn:aws:iam::${self:custom.account.id}:role  # /<role_name>
  #   dynamodb:
  #     name: ${self:custom.base}-DynamoDB-AppSyncServiceRole
  #     arn: ${self:custom.role.arn}/${self:custom.role.dynamodb.name}
  #   lambda:
  #     name: ${self:custom.base}-Lambda-AppSyncServiceRole
  #     arn: ${self:custom.role.arn}/${self:custom.role.lambda.name}
  #   cognito:
  #     auth:
  #       name: ${self:custom.base}-auth-CognitoRole
  #       arn: ${self:custom.role.arn}/${self:custom.role.cognito.auth.name}
  #     unAuth:
  #       name: ${self:custom.base}-unAuth-CognitoRole
  #       arn: ${self:custom.role.arn}/${self:custom.role.cognito.unAuth.name}
  #     sns:
  #       name: ${self:custom.base}-sns-CognitoRole
  #       arn: ${self:custom.role.arn}/${self:custom.role.cognito.sns.name}