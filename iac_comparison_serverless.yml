service: SMSBridge

custom:
  stage: ${opt:stage, self:provider.stage}
  configBucket: smartcat-sms-bridge-config
  pythonVersion: 3.8
  pythonRequirements:
    dockerizePip: true
    dockerImage: python:${self:custom.pythonVersion}-slim
    usePoetry: false

provider:
  name: aws
  runtime: python${self:custom.pythonVersion}
  region: us-east-1
  stage: dev
  tracing:
    lambda: true
  environment:
    bridge_env: ${self:custom.stage}
    bridge_config: s3://${self:custom.configBucket}/bridge.json
    state_dynamodb_table: !Ref BridgeStateTable

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::${self:custom.configBucket}/*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
      Resource:
        - !GetAtt BridgeStateTable.Arn

plugins:
  - serverless-python-requirements

package:
  exclude:
    - 'node_modules/**'
    - '.mypy_cache/**'
    - '**/__pycache__/**'
    - 'cdk/**'
    - 'cdk.out/**'
    - 'presentation/**'
    - 'tfcdk/**'
    - '.venv/**'
    - 'cdk_app.py'
    - 'cdk.json'
    - 'Dockerfile'
    - 'Makefile'
    - 'package.json'
    - 'package-lock.json'
    - 'poetry.lock'
    - 'poetry.toml'
    - 'pyproject.toml'
    - 'README.md'
    - 'serverless.yml'
    - 'setup.cfg'

functions:
  TelegramMessageReceiver:
    handler: aws_lambda.receive_telegram.handler
    memorySize: 128
    events:
      - http:
          path: telegram
          method: post

  TwilioMessageReceiver:
    handler: aws_lambda.receive_twilio.handler
    memorySize: 128
    events:
      - http:
          path: twilio
          method: post

resources:
  Resources:
    BridgeStateTable:
      Type: AWS::DynamoDB::Table
      UpdateReplacePolicy: Retain
      DeletionPolicy: Retain
      Properties:
        TableName: sms-bridge-${self:custom.stage}
        KeySchema:
          - AttributeName: user_number
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: user_number
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
