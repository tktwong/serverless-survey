service: serverless-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  timeout: 60
  region: us-east-2
  environment:
    DYNAMODB_TABLE: users-${opt:stage, self:provider.stage}
  vpc:
    securityGroupIds:
      - sg-dbafccb0
    subnetIds:
      - subnet-b811bbd0
      - subnet-d59412bd
      - subnet-d71db7bf
      - subnet-ffd03f85
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: users/create-rds.create
    events:
      - http:
          path: users
          method: post
          cors: true
  get:
    handler: users/get-rds.get
    events:
      - http:
          path: users
          method: get
          cors: true
  update:
    handler: users/update-rds.update
    events:
      - http:
          path: users
          method: put
          cors: true
          # origin: '*' # <-- Specify allowed origin
          # headers: # <-- Specify allowed headers
          #   - Content-Type
          #   - X-Amz-Date
          #   - Authorization
          #   - X-Api-Key
          #   - X-Amz-Security-Token
          #   - X-Amz-User-Agent
          # allowCredentials: false

# resources:
#   Resources:
#     UsersDynamoDbTable:
#       Type: 'AWS::DynamoDB::Table'
#       # DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: id
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.DYNAMODB_TABLE}
