service: ws-sample
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - Fn::GetAtt: [ConnectionsTable, Arn]
        - Fn::GetAtt: [ContentsTable, Arn]
  environment:
    CONNECTIONS_TABLE_NAME:
      Ref: ConnectionsTable
    CONTENTS_TABLE_NAME:
      Ref: ContentsTable
    COGNITO_USER_POOL:
      Ref: ApiGatewayWithAuthorizationUserPool
  websocketsApiName: ${self:service.name}
  websocketsApiRouteSelectionExpression: $request.body.action

functions:
  # WebSocketAPI
  auth:
    handler: ws/handler.auth_handler
  connect:
    handler: ws/handler.connect_handler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: auth
            identitySource:
              - "route.request.querystring.token"

  disconnect:
    handler: ws/handler.disconnect_handler
    events:
      - websocket:
          route: $disconnect

  sendevent:
    handler: ws/handler.sendevent_handler
    events:
      - websocket:
          route: sendevent

  # RestAPI
  getContent:
    handler: rest/handler.getContent_handler
    events:
      - http:
          path: /contents
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

resources:
  ## DynamoDB
  - ${file(resources/dynamodb.yml)}
  ## Cognito
  - ${file(resources/cognito-user-pool.yml)}
  ## ApiGatewayAuthorizer
  - ${file(resources/apigateway-authorizer.yml)}