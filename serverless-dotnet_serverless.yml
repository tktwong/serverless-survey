service: cwe-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: dotnetcore3.1

# you can overwrite defaults here
  stage: dev
  region: ap-south-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.noteTableName}"

# you can define service wide environment variables here
  environment:
    DYNAMODB_SERVICEURL: https://dynamodb.${self:provider.region}.amazonaws.com

package:
  individually: false
  artifact: bin/Release/netcoreapp3.1/deploy-api.zip

functions:
  lambdaAuthorizer:
    handler: ${self:service}::CWE.Lambda.Functions.Authorizer::Authorize
  getNotes:
    handler: ${self:service}::CWE.Lambda.Functions.GetNotesFunction::Get
    events: 
      - http:
          path: /api/v1/note/list
          method: get
          cors: true
          authorizer: 
              name: lambdaAuthorizer
              managedExternally: false

    # you can add packaging information here
    # package:
    #  artifact: bin/Release/netcoreapp3.1/deploy-api.zip
    #  exclude:
    #    - exclude-me.js
    #    - exclude-me-dir/**

custom:
  dynamodb:
    noteTableName: ${self:service}-note-${self:provider.stage}

# CloudFormation resource templates 
resources:
  Resources:
    noteTable:
      Type: AWS::DynamoDB::Table
      #DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamodb.noteTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

