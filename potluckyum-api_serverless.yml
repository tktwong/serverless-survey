org: jdemilo
app: potluckyum-serverless-api
service: potluckyum-serverless-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-1
  logs:
    restApi: true

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  note-create:
    handler: routes/notes/create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  note-get:
    handler: routes/notes/get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  note-list:
    handler: routes/notes/list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  note-update:
    handler: routes/notes/update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  event-create:
    handler: routes/events/create.main
    events:
      - http:
          path: events
          method: post
          cors: true
          authorizer: aws_iam

  event-get:
    handler: routes/events/get.main
    events:
      - http:
          path: events/{id}
          method: get
          cors: true
          authorizer: aws_iam

  event-list:
    handler: routes/events/list.main
    events:
      - http:
          path: events
          method: get
          cors: true
          authorizer: aws_iam

  event-update:
    handler: routes/events/update.main
    events:
      - http:
          path: events/{id}
          method: put
          cors: true
          authorizer: aws_iam

  invitation-create:
    handler: routes/invitations/create.main
    events:
      - http:
          path: invitations
          method: post
          cors: true
          authorizer: aws_iam

  invitation-get:
    handler: routes/invitations/get.main
    events:
      - http:
          path: invitations/{id}
          method: get
          cors: true
          authorizer: aws_iam

  invitation-list:
    handler: routes/invitations/list.main
    events:
      - http:
          path: invitations
          method: get
          cors: true
          authorizer: aws_iam

  invitation-update:
    handler: routes/invitations/update.main
    events:
      - http:
          path: invitations/{id}
          method: put
          cors: true
          authorizer: aws_iam
