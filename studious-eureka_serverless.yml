# NOTE: update this with your service name
service: prisonDirectory

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  usersTableName: ${self:custom.stage}-${self:provider.stage}-users
  personsTableName: ${self:custom.stage}-${self:provider.stage}-persons
  sightingsTableName: ${self:custom.stage}-${self:provider.stage}-intel
  usersSearchNameGSIName: ${self:custom.stage}-${self:provider.stage}-users-search-name-index
  # usersNameGSIName: ${self:custom.stage}-users-name-index

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${env:STAGE}
  region: ${env:REGION}
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  environment:
    usersTableName: ${self:custom.usersTableName}-${self:provider.stage}-users
    region: ${env:REGION}
    accessKeyId: ${env:ACCESS_KEY_ID},
    secretAccessKey: ${env:SECRET_ACCESS_KEY}
    userPoolId: ${env:USER_POOL_ID}
    appClientId: ${env:APP_CLIENT_ID}
    identityPoolId: ${env:IDENTITY_POOL_ID}
    personsTableName: ${self:custom.stage}-${self:provider.stage}-persons
    sightingsTableName: ${self:custom.stage}-${self:provider.stage}-intel
    usersSearchNameGSIName: ${self:custom.stage}-${self:provider.stage}-users-search-name-index

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [UsersTable, Arn]
        #       # allow all secondary indices on the table
        - "Fn::Join": ["", ["Fn::GetAtt": [UsersTable, Arn], "/index/*"]]

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
  createPerson:
    handler: persons/create.main
    events:
      - http:
          path: persons/create
          method: post
  listPersons:
    handler: persons/list.main
    events:
      - http:
          path: persons/list
          method: get
  getPerson:
    handler: persons/get.main
    events:
      - http:
          path: person/{id}
          method: get
  updatePerson:
    handler: persons/update.main
    events:
      - http:
          path: person/{id}
          method: patch

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
