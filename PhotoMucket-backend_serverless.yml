# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: rekognition-demo
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  environment:
    USER_DYNAMODB_TABLE: ${self:service}-user-${opt:stage, self:provider.stage}
    REK_DYNAMODB_TABLE: ${self:service}-rek-${opt:stage, self:provider.stage}
    BUCKET_NAME: ${self:service}-${self:provider.region}-${opt:stage, self:provider.stage}
    REGISTER_FOLDER_NAME: register
    SEARCHER_FOLDER_NAME: searcher
    REKOGNITION_COLLECTION_NAME: ${self:service}-collection-${opt:stage, self:provider.stage}
    REKOGNITION_API_KEY: ${self:service}_API_KEY
# you can overwrite defaults here
  stage: dev
  region: us-east-1
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  timeout: 10 # The default is 6

  apiKeys:
    - ${self:service}
    - ${opt:stage}-${self:service}
#    - ${environment:MY_API_KEY} # you can hide it in a serverless variable
  usagePlan:
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100

#  deploymentBucket:
#    name: com.serverless.${self:service}.${self:provider.region}.deploys # Deployment bucket name. Default is generated by the framework

#iamRoleStatements:
#   - Effect: "Allow"
#     Action:
#       - "dynamodb:*"
#     Resource:
#       - "*"
#   - Effect: "Allow"
#     Action:
#       - "s3:*"
#     Resource:
#       - "*"
#   - Effect: "Allow"
#     Action:
#       - "rekognition:*"
#     Resource:
#       - "*"
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "s3:ListBucket"
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - Ref: ServerlessDeploymentBucket
    -  Effect: "Allow"
       Action:
         - "s3:PutObject"
       Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - Ref: ServerlessDeploymentBucket
             - "/*"
    -  Effect: "Allow"
       Action:
         - "s3:*"
       Resource: "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*"
    -  Effect: "Allow"
       Action:
         - "dynamodb:*"
       Resource: "arn:aws:dynamodb:us-east-1:*:table/rekognition-demo-rek-dev"
    -  Effect: "Allow"
       Action:
         - "dynamodb:*"
       Resource: "arn:aws:dynamodb:us-east-1:*:table/rekognition-demo-user-dev"
    -  Effect: "Allow"
       Action:
         - "rekognition:*"
       Resource: "*"
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/rekognitionDemo-dev.jar

functions:
  post-userData:
    handler: com.serverless.rekognition.postUserDataHandler
    events:
      - http:
          path: rekognition/register
          method: post
          cors: true
          private: true
          integration: lambda
          request:
            template:
              application/json: >
                     $input.body
#                {
#                  "firstName":"$input.params('firstName')",
#                  "sureName": "$input.params('sureName')",
#                  "nickName": "$input.params('nickName')",
#                  "email": "$input.params('email')",
#                  "birthDay": "$input.params('birthDay')",
#                  "phone": "$input.params('phone')",
#                  "description":"$input.params('description')",
#                  "imageUrl":"$input.params('imageUrl')",
#                  "bucket":"$input.params('bucket')",
#                  "key":"$input.params('key')",
#                }
  search-userData:
    handler: com.serverless.rekognition.getUserDataHandler
    events:
      - http:
          path: rekognition/search
          method: get
          cors: true
          private: true
          integration: lambda
          request:
            template:
              application/json: >
                {
                  "imageUrl":"$input.params('imageUrl')",
                  "bucket":"$input.params('bucket')",
                  "key":"$input.params('key')"
                }
  generate-signurl:
    handler: com.serverless.rekognition.generateSignUrlHandler
    events:
      - http:
          path: rekognition/{type}/signUrl
          method: get
          cors: true
          private: true
          integration: lambda
          request:
            template:
              application/json: >
                {
                  "fileType" : "$input.params('fileType')",
                  "fileName" : "$input.params('fileName')",
                  "pathType" : "$input.params('type')"
                }
            parameters:
              paths:
                type: true
  face-analysis:
    handler: com.serverless.rekognition.FaceAnalysis
    events:
      - http:
          path: rekognition/faceanalysis
          method: get
          cors: true
          private: true
          integration: lambda
          request:
            template:
              application/json: >
                {
                  "bucket":"$input.params('bucket')",
                  "key":"$input.params('key')"
                }
#          request:
#            parameters:
#              paths:
#                id: true
#                type: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    RekognitionS3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    rekognitionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.REK_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: faceid
            AttributeType: S
        KeySchema:
          - AttributeName: faceid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  # The "Outputs" that your AWS CloudFormation Stack should produce.  This allows references between services.
#  Outputs:
#    UsersTableArn:
#      Description: The ARN for the User's Table
#      Value:
#        "Fn::GetAtt": [ usersTable, Arn ]
#      Export: ${self:service}:${opt:stage}:UsersTableArn