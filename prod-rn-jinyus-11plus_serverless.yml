# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: jinyus-apis
# app and org for use with dashboard.serverless.com
app: jinyusapp
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: dotnetcore3.1
  profile: jinyus
  stage: dev
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
# authorisation environment setting for aws cognito
  environment:
    DOMAIN_SUFFIX: dintent
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issueUrl:
          Fn:Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

package:
  individually: true

functions:
  listBooks:
    handler: JinyusApis.Apis::JinyusApis.Apis.BooksController::List
    package:
      artifact: bin/Release/netcoreapp3.1/package.zip
    events:
      - http:
          path: books
          method: get

  getBook:
    handler: JinyusApis.Apis::JinyusApis.Apis.BooksController::Get
    package:
      artifact: bin/Release/netcoreapp3.1/package.zip
    events:
      - http:
          path: books/{id}
          method: get
          request:
            parameters:
              paths:
                id:true
        
# Cognito UserPool setting
resources:
  Resources:
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: jinyus-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: jinyus-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - jinyusapp://callback
#          - http://localhost:8081
#          - http://localhost:3000/sign-in-callback
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: jinyus-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}



#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
