service: bb2

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: eu-north-1
  memorySize: 128
  timeout: 300
  tracing: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource: ${self:custom.kmsSecrets.keyArn}
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource:
        'Fn::Join':
          - ':'
          -
            - 'arn:aws:dynamodb'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'table/bb2-*'

  environment:
    BB2_API_SECRETS: ${self:custom.kmsSecrets.secrets.bb2api}
    SCHEDULE_HOURS: ${file(config.yml):bb2api.synch.interval}
    CONFIG_TABLE: { "Ref": "ConfigTable" }
    COMPETITIONS_TABLE: { "Ref": "CompetitionTable" }

custom:
  kmsSecrets: ${file(kms-secrets.${opt:stage, self:provider.stage}.${opt:region, self:provider.region}.yml)}

package:
  exclude:
    - examples/**
    - config.yml
    - package.json
    - package-lock.json
    - node_modules/**

functions:
  import-config:
    handler: data/importing.import_config

  import-matches:
    handler: data/importing.import_matches

  import-competitions:
    handler: data/importing.import_competitions

  import-competition-rankings:
    handler: data/importing.import_rankings

  extend-matches-rank:
    handler: data/extending.extend_matches_with_rank

  analyze-matches:
    handler: commentator/analyze.analyze

  bigbob:
    handler: commentator/commentator.tweet
    environment:
      TWITTER_API_SECRETS: ${self:custom.kmsSecrets.secrets.twitter}

stepFunctions:
  stateMachines:
    data-import:
      events:
        - schedule:
            name: bb2-import
            description: 'Import data from Cyanide'
            rate: rate(1 hour)

      definition:
        Comment: "Import data from Cyanide"
        StartAt: import-config
        States:
          import-config:
            Type: Task
            ResultPath: $.config
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-import-config"
            Next: import-competitions

          import-competitions:
            Type: Task
            InputPath: $.config
            ResultPath: $.competitions
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-import-competitions"
            Next: import-competition-rankings

          import-competition-rankings:
            Type: Task
            InputPath: $.competitions
            ResultPath: null
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-import-competition-rankings"
            Next: import-matches

          import-matches:
            Type: Task
            InputPath: $.config
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-import-matches"
            Next: extend-matches-rank

          extend-matches-rank:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-extend-matches-rank"
            Next: analyze-matches

          analyze-matches:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-analyze-matches"
            Next: bigbob

          bigbob:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-bigbob"
            End: true

resources:
  Resources:
    ConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: category
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: category
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CompetitionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: entry
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: entry
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-kms-secrets
  - serverless-python-requirements
  - serverless-plugin-tracing
