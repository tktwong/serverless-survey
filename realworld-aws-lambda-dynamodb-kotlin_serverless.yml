service: realworld-kotlin

frameworkVersion: '>=1.68.0 <2.0.0'

provider:
  name: aws
  runtime: java11
  timeout: 30
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "us-west-2"}
  environment:
    STAGE: ${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:BatchGetItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

package:
  artifact: build/libs/realworld-kotlin-${self:provider.stage}-all.jar

functions:
  user-post:
    handler: com.serverless.route.usersPost.Handler
    events:
      - http:
          path: users
          method: post
          cors: true

  users-login-post:
    handler: com.serverless.route.usersLoginPost.Handler
    events:
      - http:
          path: users/login
          method: post
          cors: true

  user-get:
    handler: com.serverless.route.userGet.Handler
    events:
      - http:
          path: user
          method: get
          cors: true

  user-put:
    handler: com.serverless.route.userPut.Handler
    events:
      - http:
          path: user
          method: put
          cors: true

  profiles-get:
    handler: com.serverless.route.profilesGet.Handler
    events:
      - http:
          path: profiles/{username}
          method: get
          cors: true
          request:
            parameters:
              paths:
                username: true

  profiles-follow-post:
    handler: com.serverless.route.profilesFollowPost.Handler
    events:
      - http:
          path: profiles/{username}/follow
          method: post
          cors: true
          request:
            parameters:
              paths:
                username: true

  profiles-follow-delete:
    handler: com.serverless.route.profilesFollowDelete.Handler
    events:
      - http:
          path: profiles/{username}/follow
          method: delete
          cors: true
          request:
            parameters:
              paths:
                username: true

  articles-post:
    handler: com.serverless.route.articlesPost.Handler
    events:
      - http:
          path: articles
          method: post
          cors: true

  articles-get:
    handler: com.serverless.route.articlesGet.Handler
    events:
      - http:
          path: articles
          method: get
          cors: true

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-kotlin-${self:provider.stage}-user
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:  # GET /user, GET /profiles/:username
          - AttributeName: username
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    EmailUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-kotlin-${self:provider.stage}-email-user
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:  # POST /users/login
          - AttributeName: email
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    FollowTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-kotlin-${self:provider.stage}-follow
        AttributeDefinitions:
          - AttributeName: follower
            AttributeType: S
          - AttributeName: publisher
            AttributeType: S
        KeySchema:  # GET /articles/feed
          - AttributeName: follower
            KeyType: HASH
          - AttributeName: publisher
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    ArticleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-kotlin-${self:provider.stage}-article
        AttributeDefinitions:
          - AttributeName: articleId
            AttributeType: N
          - AttributeName: createdAt
            AttributeType: N
          - AttributeName: dummy
            AttributeType: N
          - AttributeName: author
            AttributeType: S
        KeySchema:  # GET /articles/:slug
          - AttributeName: articleId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: createdAt
            KeySchema:  # GET /articles
              - AttributeName: dummy
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
          - IndexName: author
            KeySchema:  # GET /articles?author=:author
              - AttributeName: author
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    ArticleTagTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-kotlin-${self:provider.stage}-article-tag
        AttributeDefinitions:
          - AttributeName: tag
            AttributeType: S
          - AttributeName: articleId
            AttributeType: N
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:  # POST /articles, PUT /articles
          - AttributeName: tag
            KeyType: HASH
          - AttributeName: articleId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: createdAt
            KeySchema:  # GET /articles?tag=:tag
              - AttributeName: tag
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2

    TagTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: realworld-kotlin-${self:provider.stage}-tag
        AttributeDefinitions:
          - AttributeName: tag
            AttributeType: S
          - AttributeName: articleCount
            AttributeType: N
          - AttributeName: dummy
            AttributeType: N
        KeySchema:
          - AttributeName: tag
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: articleCount
            KeySchema:  # GET /tags
              - AttributeName: dummy
                KeyType: HASH
              - AttributeName: articleCount
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
