service: api-documentation-demo

# app and org for use with dashboard.serverless.com
app: socrates-be
org: vstudios

provider:
  name: aws
  runtime: python3.8
  stage: chrisdao
  region: us-east-1
  iamRoleStatements: # you can add statements to the Lambda function's IAM Role here
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:330477736997:table/messageTableTest"
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  #  include:
  #    - include-me.py
  #    - include-me-dir/**
  exclude:
    - .venv/**
    - node_modules/**

functions:
  default_message:
    handler: message.default_message
    events:
      - http:
          path: api/message
          method: get
          documentation:
            summary: Gets a simple message
            description: Demonstrates a GET method.
  create_message:
    handler: message.create_message
    events:
      - http:
          path: api/message
          method: post
          documentation:
            summary: Create a message of you own
            description: Demonstrates a POST method.
  get_message:
    handler: message.get_message
    events:
      - http:
          path: api/message/{name}
          method: get
          documentation:
            summary: Get a specific message
            description: Demonstrates a GET specific NAME method.
  put_message:
    handler: message.put_message
    events:
      - http:
          path: api/message/{name}
          method: put
          documentation:
            summary: Modify your message
            description: Demonstrates a PUT method.
  delete_message:
    handler: message.delete_message
    events:
      - http:
          path: api/message/{name}
          method: delete
          documentation:
            summary: Delete a message you want
            description: Demonstrates a DELETE method.

  #      - websocket: $connect
  #      - s3: ${env:BUCKET}
  #      - schedule: rate(10 minutes)
  #      - sns: greeter-topic
  #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
  #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
  #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
  #      - iot:
  #          sql: "SELECT * FROM 'some_topic'"
  #      - cloudwatchEvent:
  #          event:
  #            source:
  #              - "aws.ec2"
  #            detail-type:
  #              - "EC2 Instance State-change Notification"
  #            detail:
  #              state:
  #                - pending
  #      - cloudwatchLog: '/aws/lambda/hello'
  #      - cognitoUserPool:
  #          pool: MyUserPool
  #          trigger: PreSignUp
  #      - alb:
  #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
  #          priority: 1
  #          conditions:
  #            host: example.com
  #            path: /hello

  #    Define function environment variables here
  #    environment:
  #      variable2: value2

  # you can add CloudFormation resource templates here
resources:
  Resources:
    #    NewResource:
    #      Type: AWS::S3::Bucket
    #      Properties:
    #        BucketName: my-new-bucket
    #  Outputs:
    #     NewOutput:
    #       Description: "Description for the output"
    #       Value: "Some output value"
    messageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: messageTableTest
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  documentation:
    version: '1'
    title: 'Demo of API Documentation'
    description: 'This is a Demo of APIs documentation'
    models: {}

plugins:
  - serverless-openapi-documentation
  - serverless-python-requirements
