service: sls-aws-ws-chat

custom:
  connectionsTableName: 'sls-aws-ws-chat-${self:provider.stage}_Connections'
  messagesTableName: 'sls-aws-ws-chat-${self:provider.stage}_Messages'
  pythonRequirements:
    dockerizePip: true
    noDeploy: []

provider:
  name: aws
  runtime: python3.8
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - { "Fn::GetAtt": ["ConnectionsDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["MessagesDynamoDBTable", "Arn"] }
  environment:
    CONNECTIONS_TABLE: ${self:custom.connectionsTableName}
    MESSAGES_TABLE: ${self:custom.messagesTableName}

functions:
  ping:
    handler: handler.ping
    events:
      - http:
          path: ping
          method: get

resources:
  Resources:
    ConnectionsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.connectionsTableName}
        AttributeDefinitions:
          - AttributeName: ConnectionID
            AttributeType: S
        KeySchema:
          - AttributeName: ConnectionID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    MessagesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.messagesTableName}
        AttributeDefinitions:
          - AttributeName: Room
            AttributeType: S
          - AttributeName: Index
            AttributeType: N
        KeySchema:
          - AttributeName: Room
            KeyType: HASH
          - AttributeName: Index
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

plugins:
  - serverless-python-requirements
