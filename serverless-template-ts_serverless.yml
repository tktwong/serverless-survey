service:
  name: template

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:STAGE}
  region: ${env:REGION}
  logs:
    restApi: true
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DB_HOST: ${env:DB_HOST}
    DB_DATABASE: ${env:DB_DATABASE}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    JWT_KEY: ${env:JWT_KEY}
    JWT_EXPIRE: ${env:JWT_EXPIRE}
    STAGE: ${env:STAGE}
    REGION: ${env:REGION}
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-jetpack
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - axios
        - crypto
        - fcm-push
        - google-auth-library
        - http-errors
        - jsonwebtoken
        - knex
        - lodash
        - middy
        - moment
        - moment-timezone
        - mysql
        - objection
        - sha1
        - uniqid
        - validatorjs
  serverless-offline:
    port: 4000
  serverless-jetpack:
    mode: npm # (default `yarn`)

layers:
  vendor:
    path: layers/vendor

package:
  individually: true
  exclude:
    - './src/*'
    - '.vscode'
    - '.idea'
    - 'package*.json'

functions:
#  Auth
  login:
    handler: handler.hello
    events:
      - http:
          method: get
          path: hello
          cors: true
    layers:
      - {Ref: VendorLambdaLayer}

