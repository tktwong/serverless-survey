app: your-app
org: your-serverless-account

service: myserverlessproject

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
      tableName: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
          - dynamodb:* 
      Resource: '*'
  apiGateway:
    shouldStartNameWithService: true
    apiKeys:
      - MyFirstApiKey
    usagePlan:
      quota:
          limit: 1000
          period: MONTH
      throttle:
          rateLimit: 5
          burstLimit: 20
    # apiKeys:
    #   - free: 
    #       - freeApiKey
    #   - paid:
    #       - paidApiKey
    #       - paidMoreApiKey
    # usagePlan:
    #   - free:
    #       quota:
    #           limit: 1000
    #           period: MONTH
    #       throttle:
    #           rateLimit: 5
    #           burstLimit: 20
    #   - paid:
    #       quota:
    #           limit: 10000
    #           period: MONTH
    #       throttle:
    #           rateLimit: 50
    #           burstLimit: 200

plugins:
  - serverless-s3-sync

custom:
  tableName: player-points
  s3Sync:
    - bucketName: my-serverless-project-bucket-123123
      localDir: UploadData

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
          private: true
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true
          private: true
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
          path: create-player-score/{ID}
          method: POST
          cors: true
          private: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: my-serverless-project-bucket-123123
    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST