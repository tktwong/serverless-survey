# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ${self:custom.service_name}

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x

  stackName: sls-${self:custom.service_name}-${self:custom.stage}-api
  logRetentionInDays: 14
  timeout: 3

  stage: dev
  region: eu-west-3
  # profile: crop-service-${self:custom.stage}

  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
    shouldStartNameWithService: true

  iamRoleStatements:
      
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetBucketLocation"
      Resource: 
        Fn::Join : 
          - ""
          - - "arn:aws:s3:::"
            - Ref : "cropImageBucket"
          
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:PutObjectAcl"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref : "cropImageBucket"
            - "/*"

  apiKeys:
    - ${self:custom.service_name}-${self:custom.stage}-api-key
  usagePlan:
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100

  tracing:
    apiGateway: true
    lambda: true

package:
  exclude:
    - lib/**
    - README.md
    - .gitignore
    - package.json
    - package-lock.json

layers:
  libNodeModule:
    path: lib
    description: "aws-sdk, sharp and busboy node_modules"

custom:
  stage: ${opt:stage, env:STAGE, self:provider.stage}
  region: ${opt:region, self:provider.region}
  service_name: ${env:SERVICE_NAME, 'crop-image'}

  s3:
    imageBucket:
      name: ${env:IMAGE_BUCKET_NAME, 'crop-image-sre-${self:custom.stage}'}

functions:
  crop:
    handler: src/app.lambdaHandler
    layers:
      - Ref: LibNodeModuleLambdaLayer
    environment:
      S3_BUCKET: ${self:custom.s3.imageBucket.name}
    events:
      - http:
          path: image
          method: post
          private: true

resources:
  Resources:
    cropImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3.imageBucket.name}
