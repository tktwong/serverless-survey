service: my-gsheets-htmlform

plugins:
    # plugin for assigning additioanl roles per function
    # - serverless-iam-roles-per-function
    # plugin for testing all offline , without need to deploy it (sls deploy) all the time to AWS
    - serverless-offline
    # plugin for forwarding CloudWatch logs to another Lambda function
    # - serverless-log-forwarding

custom:
  processDataQueue: ${self:service}-${self:provider.stage}-processData

  # Configuration for the serverless-offline plugin https://github.com/dherault/serverless-offline
  serverless-offline:
    host: localhost
    port: 3000
    # Adds a prefix to every path, to send your requests to http://localhost:3000/[prefix]/[your_path] instead. E.g. -p dev
    # prefix: ${self:provider.stage}
    # Disable the authorizers
    # noAuth: true


provider:
  name: aws
  profile: serverless-cli
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${file(env.yml):env.AWS_REGION} # Note this env.AWS_REGION SHOULD NOT be set as environment variable
  
  # Load environment variables externally from 'env.yml' depending on the stage,
  # Fallback to default if it is not in specified stage.
  environment: ${file(env.yml):${self:provider.stage}, file(env.yml):default}

  # Lambda functions'es IAM Roles here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:GetQueueUrl
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt: [ ProcessDataQueue, Arn ]
        
package:
  exclude:
    - .vscode/**
    - cli/**
    - tests/**
    - '**/__mocks__/**'
    - webapp/server.js
    - package.json
    - package-lock.json

functions:
  - webapp:
      handler: handler-webapp.handler
      timeout: 30
      events:
        # all routes get proxied to the Express router
        - http: 
            path: / # this matches the base path
            method: GET
            cors: true
        - http:
            path: /update/{gsheetId+}  # this matches any path, the token 'any' doesn't mean anything special. Note it's greedy path parameter (The + sign indicates whichever child resources are appended to it)
            method: POST
            cors: true
    #   # TODO:
    #   layers:
    #     # Ref name is generated by TitleCasing the layer name & appending LambdaLayer - so Express+LambdaLayer
    #     - {Ref: FfmpegExpressLambdaLayer}      
      environment:
        # needed by the Express HTTP server (to send it to the client for a context path)
        # this could be get though from the API Gateway event (e.g. 'event.requestContext.stage')
        AWS_STAGE: ${self:provider.stage}
        
        AWS_SQS_PROCESSDATA: ${self:custom.processDataQueue}
        GOOGLE_SHEET_ID: ${file(env.yml):env.GOOGLE_SHEET_ID}

  - sqs:
      handler: handler-sqs.handler
      events:
        - sqs:
            arn:
              Fn::GetAtt:
                - ProcessDataQueue
                - Arn
            batchSize: 10  

        
# TODO:
# layers:
#   express:
#     path: layers/express            

resources:
  Resources:
    ProcessDataQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.processDataQueue}