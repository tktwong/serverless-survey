service:  project-dashboard-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  region: us-east-1
  environment:
    DYNAMODB_TABLE_METRICS: ${self:service}-metrics-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_PROJECTS: ${self:service}-projects-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: [
        "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_METRICS}",
        "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_METRICS}/index/*",
        "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PROJECTS}"
      ]
resources:
  Resources:
    DynamoDbTableMetrics:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_METRICS}
        AttributeDefinitions:
          -
            AttributeName: metricId
            AttributeType: S
          -
            AttributeName: metricType
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
        KeySchema:
          -
            AttributeName: metricId
            KeyType: HASH
          -
            AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          -
            IndexName: metricTypeIndex
            KeySchema:
              -
                AttributeName: metricType
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    DynamoDbTableProjects:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PROJECTS}
        AttributeDefinitions:
          -
            AttributeName: projectId
            AttributeType: S
          -
            AttributeName: createdAt
            AttributeType: S
        KeySchema:
          -
            AttributeName: projectId
            KeyType: HASH
          -
            AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'
custom:
  defaultStage: dev
  profiles:
    dev: serverless
    prod: serverless
functions:
  ping:
    handler: com.serverless.Handler
    events:
      - http:
          path: /ping
          method: get
          cors: true
  metricsCreate:
    handler: com.serverless.CreateMetricsHandler
    events:
      - http:
          path: /metrics
          method: post
          cors: true
  githubMetricsCreate:
    handler: com.serverless.GithubMetricsCreateHandler
    events:
      - http:
          path: /metrics/github
          method: post
          cors: true
  projectsCreate:
    handler: com.serverless.projects.CreateHandler
    events:
      - http:
          path: /projects
          method: post
          cors: true
  projectsDelete:
    handler: com.serverless.projects.DeleteHandler
    events:
      - http:
          path: /projects/{id}
          method: delete
          cors: true
  projectsGet:
    handler: com.serverless.projects.GetHandler
    events:
      - http:
          path: /projects/{id}
          method: get
          cors: true
  projectsUpdate:
    handler: com.serverless.projects.UpdateHandler
    events:
      - http:
          path: /projects
          method: put
          cors: true
  projectsListGet:
    handler: com.serverless.projects.GetListHandler
    events:
      - http:
          path: /projects
          method: get
          cors: true
  metricsList:
    handler: com.serverless.metrics.GetListHandler
    events:
      - http:
          path: /metrics
          method: get
          cors: true
  webhooksSonarMetrics:
    handler: com.serverless.webhooks.SonarMetricsHandler
    events:
      - http:
          path: /webhooks/sonar
          method: post
          cors: true
