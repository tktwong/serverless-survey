service:
  name: serverless-todo

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
#package:
#  individually: true
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  environment:
    RSA256CERT: |
      -----BEGIN CERTIFICATE-----
      MIIDAzCCAeugAwIBAgIJeIjFnjhYMLORMA0GCSqGSIb3DQEBCwUAMB8xHTAbBgNV
      BAMTFGFtcmFuMDguYXUuYXV0aDAuY29tMB4XDTE4MTAxMzA1MzU0NVoXDTMyMDYy
      MTA1MzU0NVowHzEdMBsGA1UEAxMUYW1yYW4wOC5hdS5hdXRoMC5jb20wggEiMA0G
      CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC3RGWC3eLwpjLFf++CzOSF2/KVh4rv
      E4adyEy8KjlVUsgreKNywdOMUhSKBSUNZs01CdO8WztqiAlT5YwP7D4vZo2FNr8w
      eaM05ujK+RtT7t71IMPnAjysCh5ve1uQlShLIbwS0HJ6e/rvKKhbtitPNIqD6kv4
      LPmk16xHpK1ZhXUUkAnVd7U42YJRTWx4F9QO46rlauIDhMWGCA0QJcjaIKbIi2ux
      4CYaNEiBpIErXF63NfdIo1UZZON3nPK2Ll7KqiH+3Qw3D6SV7ylfHXlmx2bN7nv7
      si/T5MW2cfDpwWoq/Q3/jN6QLDiTxnqY7OD8FDt3riYXSUHC23REjgd9AgMBAAGj
      QjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFKrDiKt0QPev4tLAvJgeHXxv
      mGm7MA4GA1UdDwEB/wQEAwIChDANBgkqhkiG9w0BAQsFAAOCAQEAUIOM3flHut5l
      R6/T2sVc/8F33IfR8Oca6O6wuIQ28lTcQqbbJbwy99HiJgZRdBYlc83WfgY5Mrs5
      o02TIFUtt413Bd/RQSkp+iFVLUY5J5TNuc5Bmu94Z5wiOpTIotjlM0bYwpvzkJZP
      8yb4AZwpK3MWpXWqK4yvpWQF7fVsL5ngUeQG/1z9PCEWURUhyB7t/T2nE/Imm1f7
      BT8KVu4Pofv/mxMigCMQqHU9oEL+d2pAwB+bNJtzPXFDOygpDWhgL8FFvDuw3X5V
      lnyekSC3ND1+dntleVvdfUZumXCEJzi7oFGKT9liwmyPNiq+Dn2QI6IdyyD1DipY
      w+YoJ3wPMA==
      -----END CERTIFICATE-----
    TODO_TABLE: Todos-cfit-${self:provider.stage}
    S3_BUCKET: amran-cfit-serverless-capstone-${self:provider.stage}
  tracing:
    apiGateway: true
    lambda: true
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title:  Serverless todo
        description: Serverless application for Todo
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}
functions:
  RS256Auth:
    handler: src/lambda/auth/rs256Auth0Authorizer.handler
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          authorizer: RS256Auth
          path: todos
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/UserIdIndex
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo with appropriate values
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: RS256Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a Todo
            description: Update todo with todoid
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: RS256Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"
resources:
  Resources:
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}
    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentBucket
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
