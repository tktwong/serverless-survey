service: cfi-referral-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Below stage setting telling Serverless to first look for the opt:stage (the one passed in through the command line), and then fallback to self:provider.stage (the one in the provider block).
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  dynamodb:
    tableName: ${self:custom.stage}-referrals
    tableNameCount: ${self:custom.stage}-referralsCount
  # Set the s3 bucket name for attachments
  s3:
    bucketAttachments: ${self:service}-${self:custom.stage}-attachments-1cohl5t7ziug3

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stage: ${self:custom.stage}
    lambdaFunctionNamePrefix: ${self:service}-${self:custom.stage}
    tableName: ${self:custom.dynamodb.tableName}
    tableNameCount: ${self:custom.dynamodb.tableNameCount}
    toEmails: ${env:TO_EMAILS}
    fromEmail: ${env:FROM_EMAIL}
    oscarDomain: ${env:OSCAR_DOMAIN}
    s3BucketAttachments: ${self:custom.s3.bucketAttachments}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - ses:*
        - s3:GetObject
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource:
        - "Fn::GetAtt": [ ReferralsTable, Arn ]
        - "Fn::GetAtt": [ ReferralsCountTable, Arn ]
        - Fn::Join: ['', [Fn::GetAtt: [ AttachmentsBucket, Arn ], '/*'] ]
        - Fn::Join:
            [':', [arn, aws, ses, '${self:provider.region}', '${env:AWS_ACCOUNT_ID}', 'identity/*']]
        # Allow any lambda function to be called from another lambda function...
        # NOTE you can't refer to the Logical ID of the Lambda, otherwise
        # there will be a circular reference in CloudFormation
        -
          Fn::Join:
            [':', [arn, aws, lambda, '${self:provider.region}', '${env:AWS_ACCOUNT_ID}', 'function', '*']]

functions:
  create:
    handler: endpoints/create.main
    events:
      - http:
          path: referrals
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: endpoints/get.main
    events:
      - http:
          path: referrals/{id}
          method: get
          cors: true
          authorizer: aws_iam

  count:
    handler: endpoints/count.main
    events:
      - http:
          path: count
          method: get
          cors: true
          authorizer: aws_iam

  sendEmail:
    handler: endpoints/sendEmail.main
    events:
      - http:
          path: send-email
          method: post
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}