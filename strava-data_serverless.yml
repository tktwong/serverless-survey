service: strava-data

# app and org for use with dashboard.serverless.com
app: strava-data
org: samuelwhwillis

plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  dynamodb:
    stages:
      - dev
    start:
      port: ${env:DYNAMO_DB_PORT}
      inMemory: true
      migrate: true
  stage: ${opt:stage, self:provider.stage}
  athleteTableName: ${self:custom.stage}-athletes
  tokensTableName: ${self:custom.stage}-tokens
  statsTableName: ${self:custom.stage}-stats
  activitiesTableName: ${self:custom.stage}-activities
  gearTableName: ${self:custom.stage}-gear

provider:
  name: aws
  stage: dev
  runtime: nodejs10.x
  profile: strava-data-profile
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  apiKeys:
    - ${opt:stage}-api-key
  usagePlan:
    quota:
      limit: 500
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    STRAVA_URL: ${env:STRAVA_URL, param:STRAVA_URL}
    STRAVA_CLIENT_ID: ${env:STRAVA_CLIENT_ID, param:STRAVA_CLIENT_ID}
    STRAVA_CLIENT_SECRET: ${env:STRAVA_CLIENT_SECRET, param:STRAVA_CLIENT_SECRET}
    STRAVA_REFRESH_TOKEN: ${env:STRAVA_REFRESH_TOKEN, param:STRAVA_REFRESH_TOKEN}
    STRAVA_ATHLETE_ID: ${env:STRAVA_ATHLETE_ID, param:STRAVA_ATHLETE_ID}
    ATHLETE_TABLE_NAME: ${self:custom.athleteTableName}
    TOKENS_TABLE_NAME: ${self:custom.tokensTableName}
    STATS_TABLE_NAME: ${self:custom.statsTableName}
    ACTIVITIES_TABLE_NAME: ${self:custom.activitiesTableName}
    GEAR_TABLE_NAME: ${self:custom.gearTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource:
        - "Fn::GetAtt": [ TokensTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource:
        - "Fn::GetAtt": [ StatsTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource:
        - "Fn::GetAtt": [ AthleteTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        - "Fn::GetAtt": [ ActivitiesTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource:
        - "Fn::GetAtt": [ GearTable, Arn ]


functions:
  gatherActivities:
    handler: src/gatherActivities.handler
    timeout: 30
    events:
      - http:
          method: get
          path: strava/gather-activities
      - schedule:
          rate: rate(1 day)
          enabled: false
  api:
    handler: src/api.handler
    events:
      - http:
          method: post
          path: strava/query
          private: true
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent

resources:
  - ${file(resources/dynamodb.yml)}
