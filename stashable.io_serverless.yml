service: dolphin-backend
# frameworkVersion: "=1.74.1"
custom: ${file(./variables.yml)} 
provider:
  name: aws
  stage: ${opt:stage, 'local'}
  runtime: python3.8
  iamRoleStatements:
    - Effect: Allow
      Action:
          - "dynamodb:PutItem"
          - "dynamodb:GetItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:DeleteItem"
          - "dynamodb:BatchGetItem"
          - "dynamodb:BatchWriteItem"
          - "dynamodb:Scan"
          - "dynamodb:Query"
      Resource:
          - "arn:aws:dynamodb:us-east-1:*:*"
          
functions:
  ping:
    handler: handler.ping
    events:
      - http:
          path: ping
          method: get
          cors: true
  ping_auth:
    handler: handler.ping_auth
    events:
      - http:
          path: ping_auth
          method: get
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  # get_resources:
  #   handler: handler.get_resources
  #   events:
  #     - http:
  #         path: resources
  #         method: get
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  # create_resource:
  #   handler: handler.create_resource
  #   events:
  #     - http:
  #         path: resources
  #         method: post
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  # get_resource:
  #   handler: handler.get_resource
  #   events:
  #     - http:
  #         path: resources/{resource_id}
  #         method: get
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  # update_resource:
  #   handler: handler.update_resource
  #   events:
  #     - http:
  #         path: resources/{resource_id}
  #         method: post
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  # delete_resource:
  #   handler: handler.delete_resource
  #   events:
  #     - http:
  #         path: resources/{resource_id}
  #         method: delete
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  # get_namespaces:
  #   handler: handler.get_namespaces
  #   events:
  #     - http:
  #         path: namespaces
  #         method: get
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  # create_namespace:
  #   handler: handler.create_namespace
  #   events:
  #     - http:
  #         path: namespaces
  #         method: post
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  # delete_namespace:
  #   handler: handler.delete_namespace
  #   events:
  #     - http:
  #         path: namespaces/{namespace_id}
  #         method: delete
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  get_api_token:
    handler: handler.get_api_token
    events:
      - http:
          path: api_token
          method: get
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  generate_api_token:
    handler: handler.generate_api_token
    events:
      - http:
          path: api_token
          method: post
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true

  # get_stashes:
  #   handler: handler.get_stashes
  #   events:
  #     - http:
  #         path: stashes
  #         method: get
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  # create_stash:
  #   handler: handler.create_stash
  #   events:
  #     - http:
  #         path: stashes
  #         method: post
  #         authorizer:
  #           arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
  #         cors: true
  index_stashes:
    handler: src/stashes.index_stashes
    events:
      - http:
          path: stashes
          method: get
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  create_stash:
    handler: src/stashes.create_stash
    events:
      - http:
          path: stashes
          method: post
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  delete_stash:
    handler: src/stashes.delete_stash
    events:
      - http:
          path: stashes/{stash_id}
          method: delete
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  get_stash:
    handler: src/stashes.get_stash
    events:
      - http:
          path: stashes/{stash_id}
          method: get
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  index_namespaces:
    handler: src/stashes.index_namespaces
    events:
      - http:
          path: stashes/{stash_id}/namespaces
          method: get
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  create_namespace:
    handler: src/stashes.create_namespace
    events:
      - http:
          path: stashes/{stash_id}/namespaces
          method: post
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  delete_namespace:
    handler: src/stashes.delete_namespace
    events:
      - http:
          path: stashes/{stash_id}/namespaces/{namespace_id}
          method: delete
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  index_resources:
    handler: src/stashes.index_resources
    events:
      - http:
          path: stashes/{stash_id}/resources
          method: get
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  create_resource:
    handler: src/stashes.create_resource
    events:
      - http:
          path: stashes/{stash_id}/resources
          method: post
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  delete_resource:
    handler: src/stashes.delete_resource
    events:
      - http:
          path: stashes/{stash_id}/resources/{resource_id}
          method: delete
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  update_resource:
    handler: src/stashes.update_resource
    events:
      - http:
          path: stashes/{stash_id}/resources/{resource_id}
          method: post
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true
  get_resource:
    handler: src/stashes.get_resource
    events:
      - http:
          path: stashes/{stash_id}/resources/{resource_id}
          method: get
          authorizer:
            arn: ${self:custom.cognitoUserPoolArn.${self:provider.stage, 'local'}}
          cors: true


  # external functions
  external_ping_auth:
    handler: handler.external_ping_auth
    events:
      - http:
          path: external/ping_auth
          method: post
          cors: true
  external_create_resource:
    handler: handler.external_create_resource
    events:
      - http:
          path: external/create_resource
          method: post
          cors: true
  external_get_resources:
    handler: handler.external_get_resources
    events:
      - http:
          path: external/resources
          method: post
          cors: true
package:
  exclude:
    - ./**
  include:
    - ./handler.py
    - requirements.txt
    - ./src/**

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

  