service: workshop-${self:custom.name}

custom:
  name: santiago
  email: santiagopergamo@gmail.com
  apiGatewayThrottling:
    maxRequestsPerSecond: 10
    maxConcurrentRequests: 10
  stage: ${opt:stage, self:provider.stage}
  onFailureQueueNameVar: ${self:service}-${self:custom.stage}-onFailureQueueForNotifyRestaurant
  logLevel:
    prod: INFO
    default: DEBUG
  serverless-iam-roles-per-function:
    defaultInherit: true
  lumigo:
    token: t_ad44ccc902ce40dfbd849
    nodePackageManager: npm

provider:
  name: aws
  runtime: nodejs12.x
  stackTags:
    STACK: ${self:service}
  tags:
    STACK: ${self:service}
  environment:
    serviceName: ${self:service}
    stage: ${self:custom.stage}
    LOG_LEVEL: ${self:custom.logLevel.${self:custom.stage}, self:custom.logLevel.default}
    SAMPLE_DEBUG_LOG_RATE: 0.1
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource: "*"

functions:
  get-index:
    handler: functions/get-index.handler
    events:
      - http:
          path: /
          method: get
    environment:
      restaurants_api:
        Fn::Join:
          - ""
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}/restaurants
      cognito_user_pool_id: !Ref CognitoUserPool
      cognito_client_id: !Ref WebCognitoUserPoolClient
      orders_api:
        Fn::Join:
          - ""
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}/orders
      root_api:
        Fn::Join:
          - ""
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    iamRoleStatements:
      - Effect: Allow
        Action: execute-api:Invoke
        Resource: arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:#{ApiGatewayRestApi}/${self:custom.stage}/GET/restaurants
    memorySize: 512

  get-restaurants:
    handler: functions/get-restaurants.handler
    events:
      - http:
          path: /restaurants
          method: get
          authorizer: aws_iam
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        # Use parameters from dev for all environments
        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/dev/get-restaurants/config
    memorySize: 512

  search-restaurants:
    handler: functions/search-restaurants.handler
    events:
      - http:
          path: /restaurants/search
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      restaurants_table: !Ref RestaurantsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt RestaurantsTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource:
          # Use parameters from dev for all environments
          - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/dev/search-restaurants/config
          - arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:service}/dev/search-restaurants/secretString
      - Effect: Allow
        Action: kms:Decrypt
        # Use parameters from dev for all environments
        Resource: ${ssm:/dev/kmsArn}

  place-order:
    handler: functions/place-order.handler
    events:
      - http:
          path: /orders
          method: post
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      bus_name: !Ref EventBus
      orders_table: !Ref OrdersTable
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: "*"
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt OrdersTable.Arn

  order-acceptance:
    handler: functions/order-acceptance.handler
    events:
      - http:
          path: /order/acceptance
          method: post
    environment:
      bus_name: !Ref EventBus
      orders_table: !Ref OrdersTable
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: !GetAtt OrdersTable.Arn

  notify-restaurant:
    handler: functions/notify-restaurant.handler
    events:
      - eventBridge:
          eventBus: arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:event-bus/order_events_${self:custom.stage}
          pattern:
            source:
              - big-mouth
            detail-type:
              - order_placed
    environment:
      bus_name: !Ref EventBus
      restaurant_notification_topic: !Ref RestaurantNotificationTopic
    iamRoleStatements:
      - Effect: Allow
        Action: events:PutEvents
        Resource: "*"
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref RestaurantNotificationTopic
      - Effect: Allow
        Action: SQS:SendMessage
        Resource: !GetAtt OnFailureQueue.Arn
    destinations:
      onFailure: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.onFailureQueueNameVar}

  orders-status:
    handler: functions/orders-status.handler
    events:
      - http:
          path: /orders/status
          method: get
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      orders_table: !Ref OrdersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !Sub "${OrdersTable.Arn}/index/bySub"

  order-status:
    handler: functions/order-status.handler
    environment:
      orders_table: !Ref OrdersTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt OrdersTable.Arn

  order-complete:
    handler: functions/order-complete.handler
    events:
      - http:
          path: /order/complete/{orderId}
          method: get
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
    environment:
      orders_table: !Ref OrdersTable
      bus_name: !Ref EventBus
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: !GetAtt OrdersTable.Arn
      - Effect: Allow
        Action: events:PutEvents
        Resource: "*"

  order-delete:
    handler: functions/order-delete.handler
    events:
      - http:
          path: /order/delete/{orderId}
          method: get
    environment:
      orders_table: !Ref OrdersTable
      bus_name: !Ref EventBus
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: !GetAtt OrdersTable.Arn
      - Effect: Allow
        Action: events:PutEvents
        Resource: "*"

resources:

# Comment alarms to avoid CloudWatch costs (showed in Cost Explorer as "CW:Alarm Monitor Usage" and "CW:GMD-Metrics" when Group by "Usage Type")
#  Transform:
    # assuming this is the name you gave the macro when you deployed the SAR app
#    - AddCloudWatchAlarms
#  Parameters:
#    MacroParamStage:
#      Type: String
#      Default: ${self:custom.stage}
#    MacroParamTopicArn:
#      Type: String
#      Default: arn:aws:sns:us-east-1:383542339255:AddCloudWatchAlarmsMacro

  Conditions:
    IsE2eTest:
      Fn::Equals:
        # Changed to be always true (instead of only for stage dev), because if we don't include e2e tests infra, those tests will fail
        # - ${self:custom.stage}
        - dev
        - dev

  Resources:
    RestaurantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AliasAttributes:
          - email
        UsernameConfiguration:
          CaseSensitive: false
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: true
            Name: given_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: family_name
            Required: true
            StringAttributeConstraints:
              MinLength: "1"
          - AttributeDataType: String
            Mutable: true
            Name: email
            Required: true
            StringAttributeConstraints:
              MinLength: "1"

    WebCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    ServerCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: server
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    ServiceUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Type: String
        Name: /${self:service}/${self:custom.stage}/serviceUrl
        Value:
          Fn::Join:
            - ""
            - - https://
              - !Ref ApiGatewayRestApi
              - .execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}

    EventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: order_events_${self:custom.stage}

    RestaurantNotificationTopic:
      Type: AWS::SNS::Topic

    E2eTestQueue:
      Type: AWS::SQS::Queue
      Condition: IsE2eTest
      Properties:
        MessageRetentionPeriod: 60
        VisibilityTimeout: 1

    E2eTestQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Condition: IsE2eTest
      Properties:
        Queues:
          - !Ref E2eTestQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref RestaurantNotificationTopic
            - Effect: Allow
              Principal: "*"
              Action: SQS:SendMessage
              Resource: !GetAtt E2eTestQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt E2eTestEventBridgeRule.Arn

    E2eTestSnsSubscription:
      Type: AWS::SNS::Subscription
      Condition: IsE2eTest
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt E2eTestQueue.Arn
        RawMessageDelivery: false
        Region: "#{AWS::Region}"
        TopicArn: !Ref RestaurantNotificationTopic

    E2eTestEventBridgeRule:
      Type: AWS::Events::Rule
      Condition: IsE2eTest
      Properties:
        EventBusName: !Ref EventBus
        EventPattern:
          source: [ "big-mouth" ]
        State: ENABLED
        Targets:
          - Arn: !GetAtt E2eTestQueue.Arn
            Id: e2eTestQueue
            InputTransformer:
              InputPathsMap:
                source: "$.source"
                detailType: "$.detail-type"
                detail: "$.detail"
              InputTemplate: >
                {
                  "event": {
                    "source": <source>,
                    "detail-type": <detailType>,
                    "detail": <detail>
                  },
                  "eventBusName": "#{EventBus}"
                }


    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: sub
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: bySub
            KeySchema:
              - AttributeName: sub
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    OnFailureQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.onFailureQueueNameVar}

  Outputs:
    RestaurantsTableName:
      Value: !Ref RestaurantsTable

    CognitoUserPoolId:
      Value: !Ref CognitoUserPool

    CognitoUserPoolArn:
      Value: !GetAtt CognitoUserPool.Arn

    CognitoUserPoolWebClientId:
      Value: !Ref WebCognitoUserPoolClient

    CognitoUserPoolServerClientId:
      Value: !Ref ServerCognitoUserPoolClient

    EventBusName:
      Value: !Ref EventBus

    RestaurantNotificationTopicName:
      Value: !GetAtt RestaurantNotificationTopic.TopicName

    RestaurantNotificationTopicArn:
      Value: !Ref RestaurantNotificationTopic

    E2eTestQueueUrl:
      Condition: IsE2eTest
      Value: !Ref E2eTestQueue

    RestApiUrl:
      Value:
        Fn::Join:
          - ""
          - - https://
            - !Ref ApiGatewayRestApi
            - .execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}

plugins:
  - serverless-export-env
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-api-gateway-throttling
  - serverless-step-functions
  - serverless-lumigo
