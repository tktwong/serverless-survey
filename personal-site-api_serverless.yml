service:
  name: personal-site-api

custom:
  customDomain:
    certificateName: '*.api.estep.nyc'
    domainName: hello.api.estep.nyc
    basePath: ${self:provider.stage}
    stage: ${self:provider.stage}
    createRoute53Record: false
    apiType: rest
    autoDomain: false
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  serverless-iam-roles-per-function:
    defaultInherit: true # Each function will inherit the service level roles too.
  globalTables:
    regions: # list of regions in which you want to set up global tables
      - us-east-1 
    createStack: true
  prune:
    automatic: true
    number: 3



plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-domain-manager
  # - serverless-iam-roles-per-function
  # - serverless-create-global-dynamodb-table
  - serverless-prune-plugin
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  frameworkVersion: ‘1.64.1’
  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'us-east-1'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    DEBUG: '*'
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  tracing:
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"

functions:
  hello:
    handler: src/handler.hello
    events:
      - http:
          method: get
          path: hello
          cors:
            origin: ${env:HTTP_CORS_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
  sendMessage:
    handler: src/contact.sendMessage
    events:
      - http:
          method: post
          path: sendMessage
          cors:
            origin: ${env:HTTP_CORS_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true