service: ${file(./env.yml):service}

provider:
  name: aws
  stage: ${file(./env.yml):stage}
  region: ${file(./env.yml):region}

runtime: nodejs4.3

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#  exclude:
#    - exclude-me.js
#  artifact: my-service-code.zip

functions:
  graphql:
  handler: handler.graphql
  events:
    - http:
      path: graphql
      method: post
      cors: true
      authorizationType: none
      authorizerFunction: false
      apiKeyRequired: false
      requestParameters:
      requestTemplates:
        application/json: '{"query" : $input.json("$")}'
      responses:
        '400':
          statusCode: '400'
        default:
          statusCode: '200'
          responseParameters:
          responseModels:
          responseTemplates:
          application/json: ""
#    you can add any of the following events
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${file(./env.yml):env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic

# you can add CloudFormation resource templates here
resources:
  Resources:
    # generated using json2yaml cloudformation-resources.json --depth 8
    IamRoleLambda:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: [lambda.amazonaws.com]
              Action:
                - 'sts:AssumeRole'
        Path: /
    IamPolicyLambda:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: '${file(./env.yml):service}-${file(./env.yml):stage}-Lambda'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/${file(./env.yml):service}-${file(./env.yml):stage}-comments*"]]
                - "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/${file(./env.yml):service}-${file(./env.yml):stage}-authors*"]]
                - "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/${file(./env.yml):service}-${file(./env.yml):stage}-posts*"]]
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: 'arn:aws:logs:${file(./env.yml):region}:*:*'
        Roles:
          - Ref: IamRoleLambda
    PostsDynamo:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${file(./env.yml):service}-${file(./env.yml):stage}-posts"
    AuthorsDynamo:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${file(./env.yml):service}-${file(./env.yml):stage}-authors"
    CommentsDynamo:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${file(./env.yml):service}-${file(./env.yml):stage}-comments"
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
  Outputs:
    IamRoleArnLambda:
      Description: 'ARN of the lambda IAM role'
      Value:
        'Fn::GetAtt':
          - IamRoleLambda
          - Arn
