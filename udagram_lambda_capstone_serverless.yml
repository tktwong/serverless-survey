service:
  name: serverless-video-app

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-attach-permission-boundary
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin


provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  permissionsBoundaryArn: "arn:aws:iam::913348900614:policy/acs/acs-boundary-policy"
  rolePermissionsBoundary: "arn:aws:iam::913348900614:policy/acs/acs-boundary-policy"
  tracing:
    lambda: true
    apiGateway: true
  environment:
    VIDEO_TABLE: Datagram264VideoItemTable-${self:provider.stage}
    VIDEO_COMMENT_TABLE: Datagram264VideoCommentItemTable-${self:provider.stage}
    VIDEO_INDEX_NAME: I_VIDEO_TABLE_CreationDate_GlobalIndex
    VIDEO_COMMENT_INDEX_NAME: I_VIDEO_COMMENT_TABLE_LocalIndex
    VIDEO_S3_BUCKET: datagram264videoitembucket-${self:provider.stage}
custom:
  documentation:
    api:
      info:
        version: "1"
        title: "serverless-video-app"
        description: "Api for udacity capstone project from datacamp264 with Video App functionality"
    models:
      - name: CreateVideoRequestVal
        contentType: application/json
        schema: ${file(models/createVideoRequestVal.json)}
      - name: CreateVideoCommentRequestVal
        contentType: application/json
        schema: ${file(models/createVideoCommentRequestVal.json)}
      - name: UpdateVideoRequestVal
        contentType: application/json
        schema: ${file(models/UpdateVideoRequestVal.json)}
functions:

  HS256Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetVideos:
    handler: src/lambda/http/getVideos.handler
    events:
      - http:
          method: get
          path: videos/{yearCalenderWeek}
          authorizer: HS256Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_TABLE}/index/${self:provider.environment.VIDEO_INDEX_NAME}

  GetVideoWithComments:
    handler: src/lambda/http/getVideoWithComments.handler
    events:
      - http:
          method: get
          path: video/{videoId}
          authorizer: HS256Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_COMMENT_TABLE}/index/${self:provider.environment.VIDEO_COMMENT_INDEX_NAME}



  # TODO: Configure this function
  CreateVideo:
    handler: src/lambda/http/createVideo.handler
    events:
      - http:
          method: post
          path: video
          authorizer: HS256Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a Video Item
            description: Create a Video Item
            requestModels:
              'application/json': CreateVideoRequestVal
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_TABLE}

  CreateVideoComment:
    handler: src/lambda/http/createVideoComment.handler
    events:
      - http:
          method: post
          path: video/{videoId}/comment
          authorizer: HS256Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a Video Comment Item
            description: Create a Video Comment Item
            requestModels:
              'application/json': CreateVideoCommentRequestVal
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_COMMENT_TABLE}

  # TODO: Configure this function
  UpdateVideo:
    handler: src/lambda/http/updateVideo.handler
    events:
      - http:
          method: patch
          path: video/{videoId}
          authorizer: HS256Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a Video Item
            description: Update a Video Item
            requestModels:
              'application/json': UpdateVideoRequestVal
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_TABLE}
  # TODO: Configure this function
  DeleteVideo:
    handler: src/lambda/http/deleteVideo.handler
    events:
      - http:
          method: delete
          path: video/{videoId}
          authorizer: HS256Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_COMMENT_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEO_COMMENT_TABLE}/index/${self:provider.environment.VIDEO_COMMENT_INDEX_NAME}

# TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: video/{videoId}/attachment
          authorizer: HS256Auth
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEO_S3_BUCKET}/*
resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    VideosTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: videoId
            AttributeType: S
          - AttributeName: creationDateKey
            AttributeType: S
        KeySchema:
          - AttributeName: videoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VIDEO_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.VIDEO_INDEX_NAME}
            KeySchema:
              - AttributeName: creationDateKey
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    VideoCommentsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: commentId
            AttributeType: S
          - AttributeName: videoId
            AttributeType: S
        KeySchema:
          - AttributeName: commentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VIDEO_COMMENT_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.VIDEO_COMMENT_INDEX_NAME}
            KeySchema:
              - AttributeName: videoId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.VIDEO_S3_BUCKET}
        Tags:
          - Key: 'Allowed_Public_Access'
            Value: 'True'
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: udagramdatadev264Policy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.VIDEO_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
