service: aws-go-lambda

custom:
  todosTableName: ${self:service}-${self:provider.stage}-todos
  todosTableArn:
    Fn::Join:
    - ":"
    - - arn
      - aws
      - dynamodb
      - Ref: AWS::Region
      - Ref: AWS::AccountId
      - table/${self:custom.todosTableName}

provider:
  name: aws
  runtime: go1.x
  stage: dev
  environment:
    TODOS_TABLE_NAME: ${self:custom.todosTableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - ${self:custom.todosTableArn}

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.todosTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

package:
  individually: true
  exclude:
    - ./**

functions:
  addTodo:
    handler: bin/handlers/addTodo
    package:
      include:
        - ./bin/handlers/addTodo
    events:
      - http:
          path: todos
          method: post
          cors: true

  listTodos:
    handler: bin/handlers/listTodos
    package:
      include:
        - ./bin/handlers/listTodos
    events:
      - http:
          path: todos
          method: get
          cors: true

  completeTodo:
    handler: bin/handlers/completeTodo
    package:
      include:
        - ./bin/handlers/completeTodo
    events:
      - http:
          path: todos
          method: patch
          cors: true

  deleteTodo:
    handler: bin/handlers/deleteTodo
    package:
      include:
        - ./bin/handlers/deleteTodo
    events:
      - http:
          path: todos
          method: delete
          cors: true
