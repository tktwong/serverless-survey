service: cryptopage-api

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage}
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "apigateway:GET"
      Resource:
        - "arn:aws:apigateway:${self:provider.region}::/restapis*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
    - Effect : Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:DeleteObject
        - s3:PutObjectAcl
      Resource:
        - "arn:aws:s3:::${self:custom.TextEncryptedContentBucketName}/*"
    - Effect : Allow
      Action:
        - s3:ListBucket
      Resource:
          - "arn:aws:s3:::${self:custom.TextEncryptedContentBucketName}"
  #environment:
  #  TICKET_TABLE_NAME: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
plugins:
  - serverless-webpack
  #- serverless-plugin-typescript
  - serverless-offline
  - serverless-aws-documentation
  #- serverless-domain-manager
  - serverless-stack-output

# package:
  # include:
  #   - src/**/!(*.spec).js
  #   - node_modules/shortid/**/*.js
  # exclude:
  #   - node_modules/**/*
custom:
  FIREBASE_WEBHOOK_URL: "https://us-central1-cryptobin-e87cc.cloudfunctions.net/increaseCounter"
  documentation: ${file(./swagger/documentation.yml)}
  # customDomain:
  #   basePath: "api"
  #   domainName: serverless-sample.balassy.me
  #   certificateName: serverless-sample.balassy.me
  #   stage: ${self:provider.stage}
  #   createRoute53Record: true
  TextEncryptedContentBucketName: "${self:service}-${opt:stage, self:provider.stage}-encrypted-text"
  output:
    file: .serverless/output.json
resources:
  Resources:
    CryptoTicketDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
    TextEncryptedContentBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: "${self:custom.TextEncryptedContentBucketName}"
        AccessControl: "PublicRead"
        CorsConfiguration:
          CorsRules:
             -
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - "GET"
              AllowedOrigins:
                - "*"
              ExposedHeaders:
                - "Date"
              Id: "myCORSRuleId1"
              MaxAge: "3600"

functions:
  getSwaggerJson:
    handler: src/swagger/swagger.getSwaggerJson
    description: Returns the Swagger documentation of the API in JSON format.

    environment:
      REGION_NAME: ${self:provider.region}
      REST_API_NAME: ${self:service}
      STAGE_NAME: ${self:provider.stage}
      API_INFO_VERSION: ${file(./swagger/documentation.yml):api.info.version}
      API_INFO_TITLE: ${file(./swagger/documentation.yml):api.info.title}

    events:
      - http:
          path: swagger.json
          method: get
          cors: true

  getHealthCheck:
    handler: src/health/health.getHealthCheck
    description: Returns the result of a quick health check of the API.

    events:
      - http:
          path: health/check
          method: get
          cors: true
          documentation:
            summary: Returns the result of a quick health check of the API.
            tags:
              - Health
            description: Returns the result of a quick health check of the API.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetHealthCheck
              - ${file(./swagger/error-responses/internal-server-error.yml)}

  getHealthCheckDetailed:
    handler: src/health/health.getHealthCheckDetailed
    description: Returns the result of a detailed health check of the API.

    events:
      - http:
          path: health/detailed
          method: get
          cors: true
          documentation:
            summary: Returns the result of a detailed health check of the API.
            tags:
              - Health
            description: Returns the result of a detailed health check of the API.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": GetHealthCheckDetailed
              - ${file(./swagger/error-responses/internal-server-error.yml)}


  createCryptoTicket:
    handler: src/crypto/crypto.createCryptoTicket
    description: Create and encrypt the ticket
    environment:
      TICKET_TABLE_NAME: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
      ENCRYPTION_ALGORITHM: "aes-256-gcm"
      FIREBASE_WEBHOOK_URL: "${self:custom.FIREBASE_WEBHOOK_URL}"
      CRYPTO_TICKET_BUCKET_NAME: "${self:custom.TextEncryptedContentBucketName}"
    events:
      - http:
          path: crypto/create
          method: post
          cors: true
          documentation:
            summary: Create the crypto ticket.
            tags:
              - Crypto
            description: Returns the result of ticket token name.
            methodResponses:
              - statusCode: '200'
                description: Returned when the operation is completed successfully.
                responseModels:
                  "application/json": CreateCryptoTicketResponse
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  getCryptoTicket:
    handler: src/crypto/crypto.getCryptoTicket
    description: Get encrypt the ticket details
    environment:
      TICKET_TABLE_NAME: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
      ENCRYPTION_ALGORITHM: "aes-256-gcm"
    events:
      - http:
          path: crypto/details/{ticketId}
          method: get
          cors: true
          request:
              parameters:
              paths:
                  ticketId: true
          documentation:
            summary: Get the crypto ticket detail.
            tags:
              - Crypto
            description: Returns the encrypted ticket.
            methodResponses:
              - statusCode: '200'
                description: Ticket valid and return data.
                responseModels:
                  "application/json": GetCryptoTicketResponse
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  decryptCryptoTicket:
    handler: src/crypto/crypto.decryptCryptoTicket
    description: Decrypt encrypt the ticket details
    environment:
      TICKET_TABLE_NAME: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
      ENCRYPTION_ALGORITHM: "aes-256-gcm"
      FIREBASE_WEBHOOK_URL: "${self:custom.FIREBASE_WEBHOOK_URL}"
      CRYPTO_TICKET_BUCKET_NAME: "${self:custom.TextEncryptedContentBucketName}"
    events:
      - http:
          path: crypto/decrypt
          method: post
          cors: true
          documentation:
            summary: Accept the password and decrypt the message to get clear text.
            tags:
              - Crypto
            description: Returns the encrypted ticket.
            methodResponses:
              - statusCode: '200'
                description: Return response message with clear text
                responseModels:
                  "application/json": GetCryptoTicketResponse
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  deleteCryptoTicket:
    handler: src/crypto/crypto.deleteCryptoTicket
    description: Delete the crypto ticket
    environment:
      TICKET_TABLE_NAME: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
      ENCRYPTION_ALGORITHM: "aes-256-gcm"
      CRYPTO_TICKET_BUCKET_NAME: "${self:custom.TextEncryptedContentBucketName}"
    events:
      - http:
          path: crypto/delete
          method: post
          cors: true
          documentation:
            summary: Accept the existing ticket ID and password, if pasword and id are matched. the token will be remove from database
            tags:
              - Crypto
            description: If request is accepted. The crypto ticket will be remove.
            methodResponses:
              - statusCode: '200'
                description: Request accepted and ticket been removed.
                responseModels:
                  "application/json": GetCryptoTicketResponse
              - ${file(./swagger/error-responses/internal-server-error.yml)}
  deleteCryptoTicketSchedule:
    handler: src/crypto/crypto.deleteCryptoTicketSchedule
    description: The schedule to delete expired tickets
    environment:
      TICKET_TABLE_NAME: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
    events:
      - schedule:
          rate: rate(10 minutes)
          enable: true
          input:
            stageParams:
              stage: ${opt:stage, self:provider.stage}
            TICKET_TABLE_NAME: "${self:service}-${opt:stage, self:provider.stage}-crypto-tickets"
