service:
  name: serverless-task-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    AUTH_0_JSON_WEB_KEY_SET: https://dev-bqo5cyuc.auth0.com/.well-known/jwks.json
    SIGNED_URL_EXPIRATION: 300
    REGION: ${self:provider.region}

    # Task table
    TASKS_TABLE: jomendez-tasks-${self:provider.stage}
    TASKS_FILES_S3_BUCKET: jomendez-tasks-attachments-${self:provider.stage}
    TASKS_ID_INDEX: TasksIdIndex

    # Profile table
    PROFILES_TABLE: jomendez-profiles-${self:provider.stage}
    PROFILES_FILES_S3_BUCKET: jomendez-profiles-attachments-${self:provider.stage}
    PROFILES_ID_INDEX: ProfilesIdIndex

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: jomendez TASK API
        description: Serverless TASK application
    models:
      - name: CreateTask
        contentType: "application/json"
        schema: ${file(models/create-task-request.json)}
      - name: UpdateTask
        contentType: "application/json"
        schema: ${file(models/update-task-request.json)}
      - name: CreateProfile
        contentType: "application/json"
        schema: ${file(models/create-profile-request.json)}
      - name: UpdateProfile
        contentType: "application/json"
        schema: ${file(models/update-profile-request.json)}        

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  GetTasks:
    handler: src/lambda/http-task/getTasks.handler
    events:
      - http:
          method: get
          path: tasks
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}/index/${self:provider.environment.TASKS_ID_INDEX}
  CreateTask:
    handler: src/lambda/http-task/createTask.handler
    events:
      - http:
          method: post
          path: tasks
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new TASK entry
            description: Create a new TASK entry
            requestModels:
              'application/json': CreateTask
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
  UpdateTask:
    handler: src/lambda/http-task/updateTask.handler
    events:
      - http:
          method: patch
          path: tasks/{taskId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update TASK
            description: Update TASK
            requestModels:
              'application/json': UpdateTask
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}/index/${self:provider.environment.TASKS_ID_INDEX}
  DeleteTask:
    handler: src/lambda/http-task/deleteTask.handler
    events:
      - http:
          method: delete
          path: tasks/{taskId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}/index/${self:provider.environment.TASKS_ID_INDEX}
  GenerateUploadUrl:
    handler: src/lambda/http-task/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: tasks/{taskId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.TASKS_FILES_S3_BUCKET}/*
  
  # Profile functions
  GetProfiles:
    handler: src/lambda/http-profile/getProfile.handler
    events:
      - http:
          method: get
          path: profiles
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROFILES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROFILES_TABLE}/index/${self:provider.environment.PROFILES_ID_INDEX}
  CreateProfile:
    handler: src/lambda/http-profile/createProfile.handler
    events:
      - http:
          method: post
          path: profiles
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new PROFILE entry
            description: Create a new PROFILE entry
            requestModels:
              'application/json': CreateProfile
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROFILES_TABLE}
  UpdateProfile:
    handler: src/lambda/http-profile/updateProfile.handler
    events:
      - http:
          method: patch
          path: profiles/{profileId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update PROFILE
            description: Update PROFILE
            requestModels:
              'application/json': UpdateProfile
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROFILES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROFILES_TABLE}/index/${self:provider.environment.PROFILES_ID_INDEX}
  DeleteProfile:
    handler: src/lambda/http-profile/deleteProfile.handler
    events:
      - http:
          method: delete
          path: profiles/{profileId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROFILES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PROFILES_TABLE}/index/${self:provider.environment.PROFILES_ID_INDEX}
  GenerateUploadUrlP:
    handler: src/lambda/http-profile/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: profiles/{profileId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.PROFILES_FILES_S3_BUCKET}/*

  # Elastic search
  SyncWithElasticsearch:
    environment:
      ES_ENDPOINT: !GetAtt TaskSearch.DomainEndpoint
    handler: src/lambda/dynamo/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TasksDynamoDBTable.StreamArn  



resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    RequestBodyValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    taskattachmentsbucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.TASKS_FILES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TASKS_FILES_S3_BUCKET}/*'
        Bucket: !Ref taskattachmentsbucket
    TasksDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: taskId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TASKS_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: taskId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.TASKS_TABLE}

    #profile 
    profileattachmentsbucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:provider.environment.PROFILES_FILES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicyProfile:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        PolicyDocument:
          Id: MyPolicyProfile
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.PROFILES_FILES_S3_BUCKET}/*'
        Bucket: !Ref profileattachmentsbucket
    ProfilesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: profileId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.PROFILES_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: profileId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PROFILES_TABLE}

    # Elastic search
    TaskSearch:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: '6.3'
        DomainName: images-search-${self:provider.stage}
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: 'gp2'

        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            -
              Effect: Allow
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: '*'
