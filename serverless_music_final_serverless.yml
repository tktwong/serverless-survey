# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: musicstream


custom:
  bucket: music-stream-app

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3: "*"
      Resource:
        - "arn:aws:s3:::${self:custom.bucket}/*"
            

    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-2:*:*"
        
    # you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  addinglist:
    handler: backend/AddAudio.addinglist
    events:
     - s3:
        bucket: ${self:custom.bucket} 
        event: s3:ObjectCreated:*
    environment:
        TABLE_NAME: AllSongsTable 

  getsonglist:
    handler: backend/Songlist.getsonglist
    events:
      - http:
          path: Audio
          method: get
          cors: true
    environment:
      BUCKET: ${self:custom.bucket} 
      TABLE_NAME: AllSongsTable   

  getsongName:
    handler: backend/Songlist.getsongName
    events:
      - http:
          path: songName
          method: get
          cors: true
    environment:
      BUCKET: ${self:custom.bucket} 
      TABLE_NAME: AllSongsTable 

  newplaylist:
    handler: backend/Customplay.newplaylist
    events:
      - http:
          path: newplaylist
          method: post
          cors: true
    environment:
      BUCKET: ${self:custom.bucket} 
      TABLE_NAME: Customplaylist


resources:
    AllSongsTable:
      Type: AWS::DynamoDB::Table
      
      Properties:
        TableName: AllSongsTable
        
        AttributeDefinitions:
          - AttributeName: nameSong
            AttributeType: S
        
        KeySchema:
          - AttributeName: nameSong
            KeyType: HASH
        
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CustomPlaylistTable:
      Type: AWS::DynamoDB::Table
      
      Properties:
        TableName: customplaylist
       
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
       
        KeySchema:
          - AttributeName: id
            KeyType: HASH
       
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
