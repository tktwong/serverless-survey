service: projects-api

plugins:
  - serverless-bundle
  - serverless-offline

custom: ${file(../../serverless.common.yml):custom}

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  tracing:
    apiGateway: true
    lambda: true

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    stage: ${self:custom.stage}
    tableName: 
      - !ImportValue ${self:custom.sstApp}-GroupsTableName
      - !ImportValue ${self:custom.sstApp}-ProjectsTableName
      - !ImportValue ${self:custom.sstApp}-TodosTableName

  iamRoleStatements:
    - ${file(../../serverless.common.yml):lambdaPolicyXRay}
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue ${self:custom.sstApp}-GroupsTableArn
        - !ImportValue ${self:custom.sstApp}-ProjectsTableArn
        - !ImportValue ${self:custom.sstApp}-TodosTableArn

functions:
  - ${file(groups/functions.yml)}
  - ${file(projects/functions.yml)}
  - ${file(todos/functions.yml)}

resources:
  # # API Gateway Errors
  # - ${file(resources/api-gateway-errors.yml)}
  # # Cognito Identity Pool Policy
  # - ${file(resources/cognito-policy.yml)}

  - Outputs:
      ApiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:custom.stage}-ProjectsApiGatewayRestApiId
    
      ApiGatewayRestApiRootResourceId:
        Value:
           Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId 
        Export:
          Name: ${self:custom.stage}-ProjectsApiGatewayRestApiRootResourceId

