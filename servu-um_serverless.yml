service: ${self:custom.prefix}-functions

provider:
  name: aws
  runtime: python3.8
  stage: production
  region: ${env:AWS_REGION, 'ap-southeast-1'}
  apiGateway:
    restApiId: ${cf:${self:custom.prefix}.restApiId}
    restApiRootResourceId: ${cf:${self:custom.prefix}.restApiRootResourceId}

package:
  individually: true
  exclude:
    - ./**

functions:
  adminAuth:
    environment:
      SECRET: ${env:SECRET, 'secret'}
    package:
      include:
        - functions/__init__.py
        - functions/admin_authorizer/**
        - functions/shared/**
    handler: functions.admin_authorizer.handler
    memorySize: 128
    role: ${cf:${self:custom.prefix}.userRoleArn}
  login:
    environment:
      SECRET: ${env:SECRET, 'secret'}
    package:
      include:
        - functions/__init__.py
        - functions/login/**
        - functions/shared/**
    handler: functions.login.handler
    memorySize: 128
    events:
      - http:
          path: /users/login
          method: post
          cors: true
    role: ${cf:${self:custom.prefix}.userRoleArn}
  signUp:
    package:
      include:
        - functions/__init__.py
        - functions/sign_up/**
        - functions/shared/**
    handler: functions.sign_up.handler
    memorySize: 128
    events:
      - http:
          path: /users/signup
          method: post
          cors: true
    role: ${cf:${self:custom.prefix}.userRoleArn}
  removeUser:
    package:
      include:
        - functions/__init__.py
        - functions/remove_user/**
        - functions/shared/**
    handler: functions.remove_user.handler
    memorySize: 128
    events:
      - http:
          path: /users/{email}
          method: delete
          request:
            parameters:
              paths:
                email: true
          cors: true
          authorizer:
            name: adminAuth
            resultTtlInSeconds: 0
    role: ${cf:${self:custom.prefix}.userRoleArn}
  getUser:
    package:
      include:
        - functions/__init__.py
        - functions/get_user/**
        - functions/shared/**
    handler: functions.get_user.handler
    memorySize: 128
    events:
      - http:
          path: /users/{email}
          method: get
          request:
            parameters:
              paths:
                email: true
          cors: true
          authorizer:
            name: adminAuth
            resultTtlInSeconds: 0
    role: ${cf:${self:custom.prefix}.userRoleArn}
  updateUser:
    package:
      include:
        - functions/__init__.py
        - functions/update_user/**
        - functions/shared/**
    handler: functions.update_user.handler
    memorySize: 128
    events:
      - http:
          path: /users/{email}
          method: post
          request:
            parameters:
              paths:
                email: true
          cors: true
          authorizer:
            name: adminAuth
            resultTtlInSeconds: 0
    role: ${cf:${self:custom.prefix}.userRoleArn}

custom:
  prefix: ${env:SHOP_NAME, 'servu'}-${env:STACK_NAME, 'user-management'}
  pythonRequirements:
    dockerizePip: non-linux
    slim: true

plugins:
  - serverless-python-requirements
