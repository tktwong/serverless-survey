service: gma-service-api

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${env:ENVIRONMENT}
  region: us-east-1
  vpc:
    securityGroupIds:
      - ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.webapp_elb_sg}
    subnetIds: ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.prod_apps_1_all}
  stackTags:
    Name: ${env:PROJECT_NAME}-${self:custom.environmentMap.${env:ENVIRONMENT}}
    owner: apps@cru.org
    application: ${env:PROJECT_NAME}
    env: ${self:custom.environmentMap.${env:ENVIRONMENT}}
    managed_by: serverless-framework
    function: lambda
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SQS:ReceiveMessage
        - SQS:SendMessage
        - SQS:SendMessageBatch
      Resource:
        Fn::GetAtt: [ GMAServerQueryQueue, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt: [ GMAServersDynamoDbTable, Arn ]
  environment: ${file(serverless/environment.js)}

functions:
  queryServer:
    handler: handlers/query-server.handler
    timeout: 30
    events:
      - sqs:
          arn:
            Fn::GetAtt: [GMAServerQueryQueue, Arn]
          batchSize: 1
    environment:
      DYNAMODB_TABLE_NAME: ${cf:gma-service-api-production.DynamDbTableName}

  enqueueServers:
    handler: handlers/enqueue-servers.handler
    timeout: 30
    events:
      - schedule: rate(12 hours)
    environment:
      DYNAMODB_TABLE_NAME: ${cf:gma-service-api-production.DynamDbTableName}
      SQS_QUEUE_URL: ${cf:gma-service-api-production.SQSQueueURL}

  # GET /auth/service
  # POST /auth/login
  # DELETE /auth/session/{sessionId:[0-9a-f]+}
  # GET /{sessionId:(?:[0-9a-f]+/)?}/servers
  api:
    handler: handlers/api.handler
    environment:
      DYNAMODB_TABLE_NAME: ${cf:gma-service-api-production.DynamDbTableName}
    events:
      - alb:
          listenerArn:
            Ref: APILoadBalancerListener
          priority: 1
          conditions:
            path: /gma

package:
  individually: true
  exclude:
    - .git/**
    - test/**
    - '**/*.test.js'
    - '**/*.sql'
    - .deployment/**

plugins:
  - '@cruglobal/serverless-merge-config'
  - serverless-webpack

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: yarn
    excludeFiles: '**/*.test.js'
  environmentMap:
    production: prod
    staging: stage
    development: dev
    lab: lab

resources:
  Resources:
    IamRoleLambdaExecution:
      Properties:
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess

    GMAServerDeadLetterQueue:
      Type: AWS::SQS::Queue

    GMAServerQueryQueue:
      Type: AWS::SQS::Queue
      Properties:
        # See https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-queueconfig
        MessageRetentionPeriod: 604800
        VisibilityTimeout: 360
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [ GMAServerDeadLetterQueue, Arn ]
          maxReceiveCount: 5

    GMAServersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: ServerURL
            AttributeType: S
        KeySchema:
          -
            AttributeName: ServerURL
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    APILoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: gma-service-api-production-alb
        Type: application
        Scheme: internet-facing
        IpAddressType: ipv4
        SecurityGroups:
          - ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.webapp_elb_sg}
        Subnets: ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.prod_public_1_all}

    APILoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn:
          Ref: APILoadBalancer
        Certificates:
          - CertificateArn: arn:aws:acm:us-east-1:056154071827:certificate/e9dd9bfe-2db3-4313-817c-cfb67c4d95d7
        DefaultActions:
          - Type: fixed-response
            Order: 1
            FixedResponseConfig:
              StatusCode: 404
              ContentType: application/json
              MessageBody: '{"error": "Not Found"}'
        Port: 443
        Protocol: HTTPS

  Outputs:
    DynamDbTableName:
      Value:
        Ref: GMAServersDynamoDbTable
    SQSQueueURL:
      Value:
        Ref: GMAServerQueryQueue
