# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    v1.docs.serverless.com
#
# Happy Coding!

service: dev-parking-race
plugins:
  - serverless-webpack
provider:
  name: aws
  runtime: nodejs4.3
  defaults:
    stage: dev
    region: us-east-1
    memory: 128
    timeout: 6

custom:
  stage: dev
  project: string-ai-serverless-graphql-blog
  region: us-east-1

functions:
  graphql:
    handler: handler.graphql
    include:
      - lib/
      - handler.js
    events:
      - http:
          path: graphql
          method: post

resources:
  Resources:
#    ProjectBucket:
#      Type: AWS::S3::Bucket
#      Properties:
        # You can also set properties for the resource, based on the CloudFormation properties
#        BucketName: ${self:custom.stage}-${self:custom.project}
        # Or you could reference an environment variable
        # BucketName: ${self:custom.BUCKET_NAME}
#    IamRoleLambda:
#      Type: AWS::IAM::Role
#      Properties:
#        AssumeRolePolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            -
#              Effect: Allow
#              Principal:
#                Service:
#                  - "lambda.amazonaws.com"
#              Action:
#                - "sts:AssumeRole"
#        Path: "/"
#    IamPolicyLambda:
#      Type: "AWS::IAM::Policy"
#      Properties:
#        PolicyName: "${self:custom.stage}-${self:custom.project}"
#        PolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            -
#              Effect: "Allow"
#              Action:
#                - "logs:CreateLogGroup"
#                - "logs:CreateLogStream"
#                - "logs:PutLogEvents"
#              Resource: "arn:aws:logs:${self:custom.region}:*:*"
#            -
#              Effect: "Allow"
#              Action:
#                - "*"
#              Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.project}-posts-${self:custom.stage}"
#            -
#              Effect: "Allow"
#              Action:
#                - "*"
#              Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.project}-authors-${self:custom.stage}"
#            -
#              Effect: "Allow"
#              Action:
#                - "*"
#              Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.project}-comments-${self:custom.stage}"
#        Roles:
#          - Ref: "IamRoleLambda"
#    CloudWatchRole:
#      Type: "AWS::IAM::Role"
#      Properties:
#        AssumeRolePolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            -
#              Effect: "Allow"
#              Principal:
#                Service:
#                  - "apigateway.amazonaws.com"
#              Action: "sts:AssumeRole"
#        Path: "/"
#        ManagedPolicyArns:
#          - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
#    Account:
#      Type: "AWS::ApiGateway::Account"
#      Properties:
#        CloudWatchRoleArn:
#          Fn::GetAtt:
#            - "CloudWatchRole"
#            - "Arn"
#    PostsDynamo:
#      Type: "AWS::DynamoDB::Table"
#      DeletionPolicy: "Retain"
#      Properties:
#        AttributeDefinitions:
#          - AttributeName: "id"
#            AttributeType: "S"
#        KeySchema:
#          - AttributeName: "id"
#            KeyType: "HASH"
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: "${self:custom.project}-posts-${self:custom.stage}"
#    AuthorsDynamo:
#      Type: "AWS::DynamoDB::Table"
#      DeletionPolicy: "Retain"
#      Properties:
#        AttributeDefinitions:
#          - AttributeName: "id"
#            AttributeType: "S"
#        KeySchema:
#          - AttributeName: "id"
#            KeyType: "HASH"
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: "${self:custom.project}-authors-${self:custom.stage}"
#    CommentsDynamo:
#      Type: "AWS::DynamoDB::Table"
#      DeletionPolicy: "Retain"
#      Properties:
#        AttributeDefinitions:
#          - AttributeName: "id"
#            AttributeType: "S"
#        KeySchema:
#          - AttributeName: "id"
#            KeyType: "HASH"
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
#        TableName: "${self:custom.project}-comments-${self:custom.stage}"
#  Outputs:
#    IamRoleArnLambda:
#      Description: "ARN of the lambda IAM role"
#      Value:
#        Fn::GetAtt:
#          - "IamRoleLambda"
#          - "Arn"