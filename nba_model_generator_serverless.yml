
service: predictionservice

provider:
  name: aws
  runtime: python3.8
  environment:
    db_url : ${env:DB_URL}

package:
  exclude:
    - node_modules/**


functions:
  predict:
    handler: handler.predict
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    timeout: 90
    events:
      - http:
          path: predict
          method: post
  train:
    handler: handler.train
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    timeout: 300 # optional, in seconds, default is 6
    events:
        - http: GET train
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2



plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    layer: true
    dockerizePip: true
    slim: true

