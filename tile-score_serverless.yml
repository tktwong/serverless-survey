# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: server
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  timeout: 15
  memorySize: 5312 # to use 4-cores
  stage: ${opt:stage, self:custom.defaultStage}
  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::tile-score-weights"
        - "arn:aws:s3:::tile-score-images"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
        - "arn:aws:s3:::tile-score-weights/*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::tile-score-images/*"

custom:
  defaultStage: dev
  # NOTE: AWS KMS costs $1/month for each CMS emtry.
  # So the secrets are handled w/ environment variables.
  environment:
    STAGE: ${self:provider.stage}
    MAGIC: ${file(../env/env.yml):MAGIC}
    KEY: ${file(../env/env.yml):KEY}

  pythonRequirements:
    usePoetry: false
    useDownloadCache: true
    useStaticCache: true

package:
  exclude:
    - ./**
  include:
    - ./*.py
    - ./yolov3-tile.cfg
    - ./yolov4-tile.cfg

functions:
  hello:
    handler: handler.hello
    layers:
      - arn:aws:lambda:us-east-1:267725586390:layer:cv2:2
    events:
      - http:
          path: hello
          method: get
      - schedule: rate(5 minutes)
    environment: ${self:custom.environment}

  forbidden:
    handler: handler.forbidden
    layers:
      - arn:aws:lambda:us-east-1:267725586390:layer:cv2:2
    # events:
    #  - http:
    #      path: v1/score
    #      method: post
    environment: ${self:custom.environment}

  score:
    handler: handler.score
    layers:
      - arn:aws:lambda:us-east-1:267725586390:layer:cv2:2
    events:
      - http:
          path: v1/score
          method: post
      - http:
          path: v2/score
          method: post
    environment: ${self:custom.environment}

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
