# NOTE: update this with your service name
service: chuckNorrisVoice

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-offline-scheduler
  - serverless-bundle # Package our functions with Webpack
  - serverless-plugin-offline-dynamodb-stream
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: ap-southeast-2

  environment:
    AWS_ACC_KEY_ID: ${env:AWS_ACC_KEY_ID}
    AWS_SECRET: ${env:AWS_SECRET}
    EMAIL_PASSWD: ${env:EMAIL_PASSWD}
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:DescribeTable
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource: "arn:aws:dynamodb:ap-southeast-2:019137212646:table/chuckNorrisJokes"
# custom:
#   # dynamodbStream:
#   #   host: http://localhost
#   #   port: 3000
#   #   pollForever: true
#   #   streams:
#   #     - table: chuckNorrisJokes
#   #       functions:
#   #         - mainWorker
#   serverless-offline-dynamodb-streams:
#     apiVersion: "2013-12-02"
#     endpoint: http://0.0.0.0:3000
#     region: ap-south-east-2
#     accessKeyId: ${env:AWS_ACC_KEY_ID}
#     secretAccessKey: ${env:AWS_SECRET}
#     skipCacheInvalidation: false
#     readInterval: 500

functions:
  # mainWorker:
  #   handler: handler.mainWorker
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:DescribeStream
  #         - dynamodb:GetRecords
  #         - dynamodb:GetShardIterator
  #         - dynamodb:ListStreams
  #         - dynamodb:Query
  #         - dynamodb:Scan
  #         - dynamodb:GetItem
  #         - dynamodb:PutItem
  #         - dynamodb:UpdateItem
  #         - dynamodb:DeleteItem
  #       Resource: "arn:aws:dynamodb:ap-southeast-2:019137212646:table/chuckNorrisJokes/stream/2020-05-11T01:07:58.471"
  #   events:
  #     # - stream: arn:aws:dynamodb:ap-southeast-2:019137212646:table/chuckNorrisJokes/stream/2020-05-11T01:07:58.471
  #     - stream:
  #         enabled: true
  #         type: dynamodb
  #         arn: arn:aws:dynamodb:ap-southeast-2:019137212646:table/chuckNorrisJokes/stream/2020-05-11T01:07:58.471
  #         batchSize: 1
  #         startingPosition: LATEST

  joke:
    handler: handler.joke
    iamRoleStatements:
      - Effect: Allow
        Action:
          #- dynamodb:DescribeTable
          #- dynamodb:Query
          #- dynamodb:Scan
          #- dynamodb:GetItem
          - dynamodb:PutItem
          - polly:*
          - "s3:*"
          #- dynamodb:UpdateItem
          #- dynamodb:DeleteItem
        Resource:
          - "arn:aws:dynamodb:ap-southeast-2:019137212646:table/chuckNorrisJokes"
          - "arn:aws:s3:::chuck-norris-audio/*"

    events:
      - schedule: rate(1 minute)
