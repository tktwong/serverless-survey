#############################################################################################
# This YML file declares the serverless stack which will be automatically deployed in AWS
# uppon running: $ serverless deploy <environment>.
#
# Author: Victor Santos Uceta
# License: Attribution-NonCommercial-NoDerivatives 4.0 International
#############################################################################################
# name of the service
service: pro-series-serverless
# reinforce the serverless framework version
frameworkVersion: "=1.38.0"
# the provider specification. We will deploy the stack using AWS.
provider:
  name: aws                   # the name of the service(AWS in this case).
  stage: ${opt:stage, 'demo'}  # the stage default, if not provided it will be 'dev'
  runtime: nodejs10.x        # we want the default runtime of the functions to be Node.js 8.10.
  region: us-east-1           # the AWS region where the deployment will reside.
  iamRoleStatements:          # declaration of the permission applied to the serverless functions.
    - Effect: Allow
      Action:
        - s3:DeleteObject
        - s3:GetObject
      Resource:               # allow delete and get on S3 Picture bucket.
         - Fn::Join:
           - ""
           - 
            - "arn:aws:s3:::"
            - Ref: PicturesBucket
            - "/*"
# The following plugins are used to easy some functions of the serverless
# workflow.
plugins:
  - '@anttiviljami/serverless-stack-output'        # will output the stack metadata for .env creation(urls, keys, etc)
  - serverless-finch                  # will deploy app dist to s3 bucket.
  - serverless-webpack                # will pack lambda functions with webpack.
  - serverless-s3-remover             # remove s3 bucket after stack is removed.
  - serverless-dynamodb-autoscaling   # autoconfigures the dynamodb provision autoscaling.
#  - serverless-single-page-app-plugin # deploys CloudFront distribution with provided S3 bucket name.

# The custom definitions will be used by the plugins and other declarations.
# Note that the 'resourceNames' variable is not required by any plugin but is used
# to define resource names who's names are long, so this definitions will help
# simplify referencing all resource names from a single source of truth.
custom:
  resourceNames: 
    # change this word to one of your choice, S3 public web buckets needs to be unique.
    # really... DON'T USE avocado
    uniqueWord: avocado                                           
    userPool: ${self:custom.resourceNames.uniqueStage}-user-pool
    pictureBucket: ${self:custom.resourceNames.uniqueStage}-picture 
    identityPool: ${self:custom.resourceNames.uniqueStage}IdentityPool
    frontEndBucket: ${self:custom.resourceNames.uniqueStage}-front-end 
    pictureTable: ${self:custom.resourceNames.uniqueStage}-picture-table
    poolClient: ${self:custom.resourceNames.uniqueStage}-user-pool-client
    uniqueStage: ${self:provider.stage}${self:custom.resourceNames.uniqueWord}
  # the output custom variable is used by the 'serverless-stack-output' to 
  # determine where is script for output post processing.
  output:
    handler: scripts/config.handler # The output post processing script which will build the .env file.
    # file: ../env.json
  # The capacities environment variable is used by the 'serverless-dynamodb-autoscaling ' plugin to
  # define the dynamodb autoscaling specifications.
  capacities:
    - table: PicturesTable  # DynamoDB Resource
      read:
        minimum: 1        # Minimum read capacity
        maximum: 10     # Maximum read capacity
        usage: 0.75       # Targeted usage percentage
      write:
        minimum: 1       # Minimum write capacity
        maximum: 10      # Maximum write capacity
        usage: 0.5        # Targeted usage percentage
  # the client custom variable is used by the 'serverless-finch' plugin in order to 
  # upload the Front End application to the S3 bucket.
  client:
    indexDocument: index.html
    errorDocument: index.html
    distributionFolder: ../build 
    bucketName: ${self:custom.resourceNames.frontEndBucket}
  # the remover custom variable is used by the 'serverless-s3-remover' plugin in order to specify
  # which buckets should be deleted when the serverless stack is removed. Note that buckets with
  # content are not removed by default and will in fact stop the stack removing process.
  remover:
     buckets:
       - ${self:custom.resourceNames.pictureBucket}
       - ${self:custom.resourceNames.frontEndBucket}
# you can add packaging information here, include or exclude files that will be 
# included or excluded from the server less function deployment package.
# package:
#   include:
#      - src/test.png
#  exclude:
#    - exclude-me.js

# Here is the definition of the serverless functions. This will create one lambda function by
# definition and will automatically create a API Gateway endpoint if the event is 'http'. There
# are many type of events that can trigger a lambda function, for more details
# read: https://serverless.com/framework/docs/providers/aws/events
functions: 
    dynamodb-trigger:                 # the table stream event, which is used to delete
      name: ${self:custom.resourceNames.uniqueStage}-trigger  # the image file after the table record is deleted.
      handler: src/trigger.handler 
      events:
        - stream:                     # when something happens in the dynamoDB picture table
            type: dynamodb            # trigger this function.
            batchSize: 1
            startingPosition: LATEST
            arn:
              Fn::GetAtt:
                - PicturesTable
                - StreamArn
      environment:                    # pass this environment variable to the function.
        PICTURE_BUCKET: ${self:custom.resourceNames.pictureBucket}
    image-analysis:                   # the image analyis http trigger. This function will be trigger
      name: ${self:custom.resourceNames.uniqueStage}-analysis  # when the provided http endpoint is called via POST.
      handler: src/image.handler
      events:
        - http:
            path: image/analysis
            method: post     
            cors: true       
      environment:                    # pass this environment variable to the function.
        PICTURE_BUCKET: ${self:custom.resourceNames.pictureBucket}

# The resources section will follows the AWS cloudformation syntax and it is used
# to define additional AWS resources which you desire to use in your serverless
# stack. You can directly define these resources down here but it is good practice
# to split the resources definition into separate files to prevent overly large
# yml files hard to maintain and read.
resources:
    # - ${file(resources/misc.yml)}     # this is how we specify that this file will be append in this section.
    - ${file(resources/security.yml)}
    - ${file(resources/data-storage.yml)}
    - ${file(resources/object-storage.yml)}
