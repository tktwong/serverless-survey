service: sls-kpobackend

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

plugins:
  - serverless-appsync-plugin

custom:
  appSync: # appsync plugin configuration
    name: sls-kpobackend-dev
    authenticationType: API_KEY # use API_KEY
    dataSources:
      - type: AMAZON_DYNAMODB
        name: UserProfileTable # name of the resource
        config:
          tableName: UserProfile # name of our DynamoDB table
      - type: AMAZON_DYNAMODB
        name: CountryTable # name of the resource
        config:
          tableName: Country # name of our DynamoDB table
      - type: AMAZON_DYNAMODB
        name: TripTable # name of the resource
        config:
          tableName: Trip # name of our DynamoDB table
      - type: AMAZON_DYNAMODB
        name: RegionTable # name of the resource
        config:
          tableName: Region # name of our DynamoDB table
      - type: AMAZON_DYNAMODB
        name: ZoneTable # name of the resource
        config:
          tableName: Zone # name of our DynamoDB table
      - type: AMAZON_DYNAMODB
        name: RankingTable # name of the resource
        config:
          tableName: Ranking # name of our DynamoDB table
    mappingTemplates:
      - dataSource: UserProfileTable
        type: Query
        field: listUserProfiles # from the query in schema.graphql
        request: "Query.listUserProfiles.req.vtl"
        response: "Common.res.vtl"
      - dataSource: UserProfileTable
        type: Query
        field: getUserProfile # from the query in schema.graphql
        request: "Query.getUserProfile.req.vtl"
        response: "Common.res.vtl"
      - dataSource: UserProfileTable
        type: Mutation
        field: createUserProfile # from the mutation in schema.graphql
        request: "Mutation.createUserProfile.req.vtl"
        response: "Common.res.vtl"
      - dataSource: UserProfileTable
        type: Mutation
        field: deleteUserProfile # from the mutation in schema.graphql
        request: "Mutation.deleteUserProfile.req.vtl"
        response: "Common.res.vtl"
      - dataSource: UserProfileTable
        type: Mutation
        field: updateUserProfile # from the mutation in schema.graphql
        request: "Mutation.updateUserProfile.req.vtl"
        response: "Common.res.vtl"
      
      - dataSource: CountryTable
        type: Query
        field: listCountrys # from the query in schema.graphql
        request: "Query.listCountrys.req.vtl"
        response: "Common.res.vtl"
      - dataSource: CountryTable
        type: Query
        field: getCountry # from the query in schema.graphql
        request: "Query.getCountry.req.vtl"
        response: "Common.res.vtl"      
      - dataSource: CountryTable
        type: Mutation
        field: createCountry # from the mutation in schema.graphql
        request: "Mutation.createCountry.req.vtl"
        response: "Common.res.vtl"
      - dataSource: CountryTable
        type: Mutation
        field: deleteCountry # from the mutation in schema.graphql
        request: "Mutation.deleteCountry.req.vtl"
        response: "Common.res.vtl"
      - dataSource: CountryTable
        type: Mutation
        field: updateCountry # from the mutation in schema.graphql
        request: "Mutation.updateCountry.req.vtl"
        response: "Common.res.vtl"  

      - dataSource: TripTable
        type: Query
        field: listTrips # from the query in schema.graphql
        request: "Query.listTrips.req.vtl"
        response: "Common.res.vtl"
      - dataSource: TripTable
        type: Query
        field: getTrip # from the query in schema.graphql
        request: "Query.getTrip.req.vtl"
        response: "Common.res.vtl" 
      - dataSource: TripTable
        type: Mutation
        field: createTrip # from the mutation in schema.graphql
        request: "Mutation.createTrip.req.vtl"
        response: "Common.res.vtl"
      - dataSource: TripTable
        type: Mutation
        field: deleteTrip # from the mutation in schema.graphql
        request: "Mutation.deleteTrip.req.vtl"
        response: "Common.res.vtl"
      - dataSource: TripTable
        type: Mutation
        field: updateTrip # from the mutation in schema.graphql
        request: "Mutation.updateTrip.req.vtl"
        response: "Common.res.vtl"

      - dataSource: RegionTable
        type: Query
        field: listRegions # from the query in schema.graphql
        request: "Query.listRegions.req.vtl"
        response: "Common.res.vtl"
      - dataSource: RegionTable
        type: Query
        field: getRegion # from the query in schema.graphql
        request: "Query.getRegion.req.vtl"
        response: "Common.res.vtl"
      - dataSource: RegionTable
        type: Mutation
        field: createRegion # from the mutation in schema.graphql
        request: "Mutation.createRegion.req.vtl"
        response: "Common.res.vtl"
      - dataSource: RegionTable
        type: Mutation
        field: deleteRegion # from the mutation in schema.graphql
        request: "Mutation.deleteRegion.req.vtl"
        response: "Common.res.vtl"
      - dataSource: RegionTable
        type: Mutation
        field: updateRegion # from the mutation in schema.graphql
        request: "Mutation.updateRegion.req.vtl"
        response: "Common.res.vtl"      

      - dataSource: ZoneTable
        type: Query
        field: listZones # from the query in schema.graphql
        request: "Query.listZones.req.vtl"
        response: "Common.res.vtl"
      - dataSource: ZoneTable
        type: Query
        field: getZone # from the query in schema.graphql
        request: "Query.getZone.req.vtl"
        response: "Common.res.vtl"
      - dataSource: ZoneTable
        type: Mutation
        field: createZone # from the mutation in schema.graphql
        request: "Mutation.createZone.req.vtl"
        response: "Common.res.vtl"
      - dataSource: ZoneTable
        type: Mutation
        field: deleteZone # from the mutation in schema.graphql
        request: "Mutation.deleteZone.req.vtl"
        response: "Common.res.vtl"
      - dataSource: ZoneTable
        type: Mutation
        field: updateZone # from the mutation in schema.graphql
        request: "Mutation.updateZone.req.vtl"
        response: "Common.res.vtl"

      - dataSource: RankingTable
        type: Query
        field: listRankings # from the query in schema.graphql
        request: "Query.listRankings.req.vtl"
        response: "Common.res.vtl"
      - dataSource: RankingTable
        type: Query
        field: getRanking # from the query in schema.graphql
        request: "Query.getRanking.req.vtl"
        response: "Common.res.vtl"
      - dataSource: RankingTable
        type: Mutation
        field: createRanking # from the mutation in schema.graphql
        request: "Mutation.createRanking.req.vtl"
        response: "Common.res.vtl"
      - dataSource: RankingTable
        type: Mutation
        field: deleteRanking # from the mutation in schema.graphql
        request: "Mutation.deleteRanking.req.vtl"
        response: "Common.res.vtl"
      - dataSource: RankingTable
        type: Mutation
        field: updateRanking # from the mutation in schema.graphql
        request: "Mutation.updateRanking.req.vtl"
        response: "Common.res.vtl"

      - dataSource: RegionTable
        type: Country
        field: regions
        request: "Country.regions.req.vtl"
        response: "Country.regions.res.vtl"
      
      - dataSource: UserProfileTable
        type: Ranking
        field: user
        request: "Ranking.user.req.vtl"
        response: "Ranking.user.res.vtl"

      - dataSource: CountryTable
        type: Region
        field: country
        request: "Region.country.req.vtl"
        response: "Region.country.res.vtl"

      - dataSource: ZoneTable
        type: Region
        field: zones
        request: "Region.zones.req.vtl"
        response: "Region.zones.res.vtl"            

      - dataSource: UserProfileTable
        type: Trip
        field: user
        request: "Trip.user.req.vtl"
        response: "Trip.user.res.vtl"

      - dataSource: ZoneTable
        type: Trip
        field: zone
        request: "Trip.zone.req.vtl"
        response: "Trip.zone.res.vtl"

      - dataSource: RankingTable
        type: UserProfile
        field: rankings
        request: "UserProfile.rankings.req.vtl"
        response: "UserProfile.rankings.res.vtl"

      - dataSource: TripTable
        type: UserProfile
        field: trips
        request: "UserProfile.trips.req.vtl"
        response: "UserProfile.trips.res.vtl"

      - dataSource: RegionTable
        type: Zone
        field: region
        request: "Zone.region.req.vtl"
        response: "Zone.region.res.vtl"

      - dataSource: TripTable
        type: Zone
        field: trips
        request: "Zone.trips.req.vtl"
        response: "Zone.trips.res.vtl"
    
functions:
  triggerStream:
      handler: handler.triggerStream
      environment:
        SM_GRAPHQL_API: http://localhost:3000/graphql
        API_KEY: xxxx
      events:
        - stream:
            type: dynamodb
            batchSize: 1
            startingPosition: LATEST
            arn:
              Fn::GetAtt:
                - Trip
                - StreamArn

resources:
  Resources:
    UserProfile: # name of the resource to be use later
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "UserProfile" # name of the table
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id" # partition key
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
    Country: # name of the resource to be use later
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Country" # name of the table
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id" # partition key
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    Trip: # name of the resource to be use later
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Trip" # name of the table
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "tripUserId"
            AttributeType: "S"
          - AttributeName: "tripZoneId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id" # partition key
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: KEYS_ONLY #Valid Values: NEW_IMAGE | OLD_IMAGE | NEW_AND_OLD_IMAGES | KEYS_ONLY        
        GlobalSecondaryIndexes:
          - IndexName: "gsi-UserTrips"
            KeySchema:
            - AttributeName: tripUserId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: "gsi-ZoneTrips"
            KeySchema:
            - AttributeName: tripZoneId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    Region: # name of the resource to be use later
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Region" # name of the table
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "regionCountryId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id" # partition key
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: "gsi-CountryRegions"
            KeySchema:
            - AttributeName: regionCountryId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    Zone: # name of the resource to be use later
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Zone" # name of the table
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "zoneRegionId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id" # partition key
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: "gsi-RegionZones"
            KeySchema:
            - AttributeName: zoneRegionId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    Ranking: # name of the resource to be use later
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "Ranking" # name of the table
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "rankingUserId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id" # partition key
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: "gsi-UserRankings"
            KeySchema:
            - AttributeName: rankingUserId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

 