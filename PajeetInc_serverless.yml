service: back-end

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

package:
  artifact: target/back-end-api-dev.jar

functions:
  signUp:
    handler: com.serverless.cognito.auth.SignUpHandler
    description: Sign up new user
    events:
      - http:
          path: /signUp
          method: post
          cors: true
  confirmSignUp:
    handler: com.serverless.cognito.auth.ConfirmSignUpHandler
    description: Confirm user account email
    events:
      - http:
          path: /confirmSignUp
          method: post
          cors: true
  listCandidates:
    handler: com.serverless.cognito.candidates.ListCandidatesHandler
    description: List all candidates
    events:
      - http:
          path: /listCandidates
          method: get
          cors: true
  signIn:
    handler: com.serverless.cognito.auth.SignInHandler
    description: Sign in user
    events:
      - http:
          path: /signIn
          method: post
          cors: true
  confirmPassword:
    handler: com.serverless.cognito.auth.ConfirmForgotPassword
    description: Confirm changing user password
    events:
      - http:
          path: /confirmPassword
          method: post
          cors: true
  forgotPassword:
    handler: com.serverless.cognito.auth.ForgotPasswordHandler
    description: Attempt changing password
    events:
      - http:
          path: /forgotPassword
          method: post
          cors: true
  forcePasswordChange:
    handler: com.serverless.cognito.auth.ForcePasswordChangeHandler
    description: Force password change after signing in to Candidate account
    events:
      - http:
          path: /forcePasswordChange
          method: post
          cors: true
  createCandidateAccount:
    handler: com.serverless.cognito.candidates.CreateCandidateAccountHandler
    description: Create Candidate account
    events:
      - http:
          path: /createCandidateAccount
          method: post
          cors: true
  deleteCandidateAccount:
    handler: com.serverless.cognito.candidates.DeleteCandidateAccountHandler
    description: Delete Candidate account
    events:
      - http:
          path: /deleteCandidateAccount/{email}
          method: delete
          cors: true

  readTests:
    role: accessToTestsTable
    handler: com.serverless.tests.ReadTestsHandler
    description: Get all tests from Tests table
    events:
      - http:
          path: /tests
          method: get
          cors: true
          integration: lambda
  readTestsByUsername:
    role: accessToTestsTable
    handler: com.serverless.tests.ReadTestsByUsernameHandler
    description: Get all tests assigned to specific candidate
    events:
      - http:
          path: /tests/{username}
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "username": "$input.params("username")"
              }'
  insertTest:
    role: accessToTestsTable
    handler: com.serverless.tests.InsertTestHandler
    description: Insert test into Tests table
    events:
      - http:
          path: /tests
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiterId"),
                "testName": $input.json("$.testName"),
                "minPoints": $input.json("$.minPoints"),
                "maxPoints": $input.json("$.maxPoints"),
                "questions": $input.json("$.questions")
              }'
  passTest:
    role: accessToTestsTable
    handler: com.serverless.tests.PassTestHandler
    description: Updating tests table with candidate answers
    events:
      - http:
          path: /pass-test
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiterId"),
                "testId": $input.json("$.testId"),
                "testName": $input.json("$.testName"),
                "username": $input.json("$.username"),
                "answers": $input.json("$.answers")
              }'
  assignCandidate:
    role: accessToTestsTable
    handler: com.serverless.tests.AssignCandidateHandler
    description: Assigning candidate to test
    events:
      - http:
          path: /assign-candidate
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiterId"),
                "testId": $input.json("$.testId"),
                "testName": $input.json("$.testName"),
                "username": $input.json("$.username")
              }'
  rateTest:
    role: accessToTestsTable
    handler: com.serverless.tests.RateTestHandler
    description: Rate candidate answers
    events:
      - http:
          path: /rate-test
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiterId"),
                "testId": $input.json("$.testId"),
                "testName": $input.json("$.testName"),
                "username": $input.json("$.username"),
                "answers": $input.json("$.answers")
              }'
  getTests:
    role: accessToTestsTable
    handler: com.serverless.tests.GetTestsHandler
    description: Get all tests
    events:
      - http:
          path: /get-tests
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "user": "$input.params("user")",
                "role": "$input.params("role")",
                "status": "$input.params("status")"
              }'
  removeTest:
    role: accessToTestsTable
    handler: com.serverless.tests.RemoveTestHandler
    description: Remove test by primary key
    events:
      - http:
          path: /remove-test
          method: delete
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": "$input.params("recruiterId")",
                "testId": "$input.params("testId")"
              }'
  removeCandidate:
    role: accessToTestsTable
    handler: com.serverless.tests.RemoveCandidateHandler
    description: Remove candidate from test by username
    events:
      - http:
          path: /remove-candidate
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: "{
               'username': $input.json('username'),
               'recruiterId': $input.json('recruiterId'),
               'testId': $input.json('testId')
              }"
  updateTest:
    role: accessToTestsTable
    handler: com.serverless.tests.UpdateTestHandler
    description: Update test
    events:
      - http:
          path: /update-test
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiterId"),
                "testId": $input.json("$.testId"),
                "testName": $input.json("$.testName"),
                "minPoints": $input.json("$.minPoints"),
                "maxPoints": $input.json("$.maxPoints"),
                "questions": $input.json("$.questions")
              }'

resources:
  Resources:
    #    Tests:
    #      Type: AWS::DynamoDB::Table
    #      Properties:
    #        TableName: Tests
    #        AttributeDefinitions:
    #          - AttributeName: recruiterId
    #            AttributeType: S
    #          - AttributeName: testId
    #            AttributeType: S
    #        KeySchema:
    #          - AttributeName: recruiterId
    #            KeyType: HASH
    #          - AttributeName: testId
    #            KeyType: RANGE
    #        ProvisionedThroughput:
    #          ReadCapacityUnits: 1
    #          WriteCapacityUnits: 1
    accessToTestsTable:
      Type: AWS::IAM::Role
      Properties:
        RoleName: accessToTestsTable
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:*
                    - lambda:*
                  Resource: "*"