service: starwars-api-tcs
plugins:
  - serverless-offline
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: production
  region: us-east-1
  profile: serverless-admin
  apiGateway:
    shouldStartNameWithService: true
    apiKeys:
      - starwars-api-tcs
  environment:
    DYNAMODB_TABLE: resistance-members
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
package:
  include:
    - services/**
functions:
  getMembers:
    handler: services/members/handlers/get.getMembers
    events:
      - http:
          path: members
          method: get
          private: true
  getMembersById:
    handler: services/members/handlers/get.getMembersById
    events:
      - http:
          path: members/{id}
          method: get
          private: true
  getPlanetInfo:
    handler: services/swapi/handlers/get.getPlanetInfo
    events:
      - http:
          path: planets/{id}
          method: get
  getSpecieInfo:
    handler: services/swapi/handlers/get.getSpecieInfo
    events:
      - http:
          path: species/{id}
          method: get
  createMember:
    handler: services/members/handlers/post.createMember
    events:
      - http:
          path: members
          method: post
          private: true
resources:
  Resources: ${file(./resources/dynamodb.yml)}
