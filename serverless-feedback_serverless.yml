# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: feedback

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "=1.13.2"

plugins:
  - serverless-secrets-plugin

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_QUESTIONS_TABLE: ${self:service}-questions-${opt:stage,self:provider.stage}
    DYNAMODB_FEEDBACK_TABLE: ${self:service}-feedback-${opt:stage,self:provider.stage}
    SNS_TOPIC_NAME: ${self:service}-feedback-${opt:stage,self:provider.stage}
    GITHUB_WEBHOOK_SECRET: ${file(./secrets.dev.yml):${opt:stage,self:provider.stage}.GITHUB_WEBHOOK_SECRET}
    USER_POOL_ID: ${file(./secrets.dev.yml):${opt:stage,self:provider.stage}.USER_POOL_ID}
    CLIENT_ID: ${file(./secrets.dev.yml):${opt:stage,self:provider.stage}.CLIENT_ID}
  stage: dev
  region: us-west-2
  profile: sourabh
  memorySize: 128
  versionFunctions: false
  timeout: 20
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region,self:provider.region}:*:table/${self:provider.environment.DYNAMODB_QUESTIONS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region,self:provider.region}:*:table/${self:provider.environment.DYNAMODB_FEEDBACK_TABLE}"
#    - Effect: Allow
#      Action:
#        - sns:Publish 
#      Resource: "arn:aws:sns:${opt:region,self:provider.region}:679279306327:${self:provider.environment.SNS_TOPIC_NAME}"
# The below section is needed if you want to send SMS since there is no ARN for SMS
#    - Effect: Allow
#      Action:
#        - sns:Publish
#      Resource: "*"
    - Effect: Allow
      Sid: AuthorizeAccount
#      Principal:
#        AWS: "679279306327"  
      Action:
        - ses:SendRawEmail
        - ses:SendEmail
      Resource: "*"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
#    - exclude-me.js
    - node_modules/

functions:
  locationlisting:
    handler: places.locationlisting
    events:
    - http:
        path: places/locationlisting
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: arn:aws:cognito-idp:us-west-2:679279306327:userpool/us-west-2_vgFmxBLLV

  photoReference:
    handler: places.placeDetails
    events:
    - http:
        path: places/placeDetails
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: arn:aws:cognito-idp:us-west-2:679279306327:userpool/us-west-2_vgFmxBLLV

  getquestions:
    handler: questions.fetchquestions
    events:
    - http:
        path: questions/fetchquestions
        method: get
        cors: true
        authorizer:
          name: authorizer
          arn: arn:aws:cognito-idp:us-west-2:679279306327:userpool/us-west-2_vgFmxBLLV

  postquestions:
    handler: questions.postquestion
    events:
    - http:
        path: questions/postquestion
        method: post
        cors: true
        authorizer:
          name: authorizer
          arn: arn:aws:cognito-idp:us-west-2:679279306327:userpool/us-west-2_vgFmxBLLV

  postfeedback:
    handler: feedback.postfeedback
    events:
    - http:
        path: feedback/postfeedback
        method: post
        cors: true
        integration: lambda
        authorizer:
          name: authorizer
          arn: arn:aws:cognito-idp:us-west-2:679279306327:userpool/us-west-2_vgFmxBLLV
        #  claims:
        #    - email

  emailPushCommits:
    handler: github.pushCommit
    role: SNSPush
    events:
    - http:
        path: github/pushCommit
        method: post
        integration: lambda
        cors: true

  createUser:
    handler: loginUser.createUser
    events:
    - http:
        path: loginUser/createUser
        method: post
        cors: true

  authenticateUser:
    handler: loginUser.authenticateUser
    events:
    - http:
        path: loginUser/authenticateUser
        method: post
        cors: true

  confirmUser:
    handler: loginUser.confirmUser
    events:
    - http:
        path: loginUser/confirmUser
        method: post
        cors: true

  resendConfirmation:
    handler: loginUser.resendConfirmation
    events:
    - http:
        path: loginUser/resendConfirmation
        method: post
        cors: true

  deleteUser:
    handler: loginUser.deleteUser
    events:
    - http:
        path: loginUser/deleteUser
        method: post
        cors: true

resources:
  Resources:
    SNSPush:
      Type: AWS::IAM::Role
      Properties:
        #Path: /my/cust/path/
        RoleName: SNSPushforGitPush
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: myPolicyName
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:${opt:region,self:provider.region}:679279306327:log-group:/aws/lambda/*:*:*
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: "arn:aws:sns:${opt:region,self:provider.region}:679279306327:${self:provider.environment.SNS_TOPIC_NAME}"

    DynamoDBQuestionsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: placeid
            AttributeType: S
        KeySchema:
          -
            AttributeName: placeid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_QUESTIONS_TABLE}
    DynamoDBFeedbackTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_FEEDBACK_TABLE}
    SNSFeedbackTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        DisplayName: ${self:provider.environment.SNS_TOPIC_NAME}
        TopicName: ${self:provider.environment.SNS_TOPIC_NAME}
        Subscription:
          -
            Endpoint: jainsourabh2@gmail.com
            Protocol: email
