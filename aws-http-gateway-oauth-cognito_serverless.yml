service: http-api-node

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DOMAIN_SUFFIX: mandalorian-jedi
  logs:
    httpApi: true
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: ServiceUserPool
        audience:
          - Ref: ServiceUserPoolClient
      vehicleAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: ServiceUserPool
        audience:
          - Ref: ClientServiceUserPoolClient
          
functions:
  getProfileInfo:
    handler: profile.get
    events:
      - httpApi:
            method: GET
            path: /users/profile
            authorizer: serviceAuthorizer

  createProfileInfo:
    handler: profile.post
    events:
      - httpApi:
            method: POST
            path: /vehicles/create
            authorizer: vehicleAuthorizer
  
  getVehicles:
    handler: profile.get
    events:
      - httpApi:
            method: GET
            path: /vehicles/read
            authorizer: vehicleAuthorizer

resources:
  Resources:
    HttpApi:
      DependsOn: ServiceUserPool

    # Creates a role that allows Cognito to send SNS messages
    SNSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'cognito-idp.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - 
           PolicyName: 'CognitoSNSPolicy'
           PolicyDocument:
             Version: '2012-10-17'
             Statement:
                - 
                  Effect: 'Allow'
                  Action: 'sns:publish'
                  Resource: '*'

    ServiceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: service-user-pool-${opt:stage, self:provider.stage}
        AdminCreateUserConfig: 
          AllowAdminCreateUserOnly: false  # Don't allow users to sign themselves up
        MfaConfiguration: ON
        SmsConfiguration:
          ExternalId: service-user-pool-external-${self:provider.stage}
          SnsCallerArn: !GetAtt SNSRole.Arn
        AutoVerifiedAttributes:
          - phone_number
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: phone_number
            AttributeDataType: String
            Mutable: false
            Required: true
          - Name: slackId
            AttributeDataType: String
            Mutable: true

    UserPoolResourceServer:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        Identifier: users
        Name: User API
        UserPoolId:
          Ref: ServiceUserPool
        Scopes:
          - ScopeName: 'profile'
            ScopeDescription: 'Profile access'
          

    VehiclePoolResourceServer:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        Identifier: vehicles
        Name: User API
        UserPoolId:
          Ref: ServiceUserPool
        Scopes:
          - ScopeName: 'create'
            ScopeDescription: 'Vehicle access'
          - ScopeName: 'read'
            ScopeDescription: 'Vehicle read'

    ServiceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: api-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - client_credentials
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - users/profile
          - vehicles/read
        UserPoolId:
          Ref: ServiceUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: true
        SupportedIdentityProviders: 
          - COGNITO

    ClientServiceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: client-service-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
          - vehicles/create
          - vehicles/read
        UserPoolId:
          Ref: ServiceUserPool
        CallbackURLs: 
          - https://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders: 
          - COGNITO

    ServiceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId: 
          Ref: ServiceUserPool
        Domain: service-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
