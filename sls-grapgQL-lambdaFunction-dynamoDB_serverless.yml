
service: slsgraph
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev

  environment:
    CUSTOMER_TABLE: customer-table-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan  
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CUSTOMER_TABLE}"

resources:
  Resources:
    CustomerTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.CUSTOMER_TABLE}
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

plugins:
  - serverless-dynamodb-local
  - serverless-offline #serverless-offline needs to be last in the list 

functions:
  graphql:
    # this is formatted as <FILENAME>.<HANDLER>
    handler: handler.graphqlHandler
    environment:
      URL_API: https://www.myapi.com/api/
    events:
    - http:
        path: graphql
        method: post
        cors: true
    - http:
        path: graphql
        method: get
        cors: true

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      sharedDb: true
      migrate: true

