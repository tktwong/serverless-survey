service: pathmaker-budget-utils-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-aws-documentation

custom:
  documentation:
    api:
      info:
        version: '1'
        title: PathMaker REST API - Utils & Budget
        description: PathMaker REST API - Utils & Budget
        contact:
          name: Matteo Giaccone
          url: https://www.pathmaker.it
          email: drjackdevelopment@gmail.com
        license:
          name: plugins from Anomaly Innovations
      tags:
        -
          name: Budget
          description: Budget API Endpoints - CRD Operations for Budget Entries
        -
          name: Utils
          description: Utils API Endpoints - User Administration

    models:
      -
        name: UserResponseSchema
        description: Schema for User Response Template
        contentType: "application/json"
        schema:
          type: object
          properties:
            id:
              type: string
      -
        name: BudgetResponseSchema
        description: Schema for Budget Response Template
        contentType: "application/json"
        schema:
          type: object
          properties:
            cashId:
              type: string
            amount:
              type: string
            nomeOp:
              type: string
            typeOp:
              type: string
            updatedAt:
              type: integer
      -
        name: ErrorResponse
        description: "Generic Error Response Schema"
        contentType: "application/json"
        schema:
          type: object
          properties:
            body:
              type: object
            statusCode:
              type: number
      -
        name: AuthErrorResponse
        description: "ERROR - Authorization Token Missing"
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
      -
        name: GeneralBudgetResponse
        description: "GET Budget Entry Response Schema"
        contentType: "application/json"
        schema:
          type: object
          properties:
            body:
              $ref: "{{model: BudgetResponseSchema}}"
            statusCode:
              type: string
      -
        name: ScanBudgetResponse
        description: "Scan Response Schema, Array of 'Budget' Objects"
        contentType: "application/json"
        schema:
          type: array
          items:
            $ref: "{{model: BudgetResponseSchema}}"
      -
        name: CreateBudgetRequestModel
        description: "REQUEST - Create Budget Model"
        contentType: "application/json"
        schema:
          type: object
          properties:
            nomeOp:
              type: string
            typeOp:
              type: string
              enum: ["+","-"]
            amount:
              type: string
      -
        name: UserResponse
        description: "ENABLE, DISABLE & DELETE - User Response Schema"
        contentType: "application/json"
        schema:
          type: object
          properties:
            body: 
              $ref: "{{model: UserResponseSchema}}"
            statusCode:
              type: string
      -
        name: ScanUsersResponse
        description: "LIST - User Scan Response Schema"
        contentType: "application/json"
        schema:
          type: array
          items:
            $ref: "{{model: UserResponseSchema}}"

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: eu-central-1

  environment:
    tableNameBudget: PathMaker_Budget
    tableNameReparto: PathMaker_Reparto

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-central-1:280343356630:table/*"
    
    - Effect: Allow
      Action:
        - cognito-idp:AdminDisableUser
        - cognito-idp:AdminEnableUser
        - cognito-idp:AdminDeleteUser
        - cognito-idp:ListUsers
      Resource: "arn:aws:cognito-idp:eu-central-1:280343356630:userpool/eu-central-1_mGorCqMeq"

    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::pathmaker-burocracy/public/*"

functions:

#APIS FOR LAMBDA TRIGGERS
  disableUser:
    handler: awsUtils.disableUser #OK!
    events:
      - http:
          path: utils/disableuser/{user}
          method: put
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "DISABLE USER - NO Request Body needed"
            tags:
              - "Utils"
            description: "PUT Method, Set {user} status to 'disabled'"
            requestBody:
              description: "No Body Needed"
            pathParams:
              -
                name: "user"
                description: "User's ID to disable"
                required: true
            methodResponses:
            -
              statusCode: "200"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "UserResponse"
            -
              statusCode: "403"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "AuthErrorResponse"
            -
              statusCode: "500"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ErrorResponse"

  enableUser:
    handler: awsUtils.enableUser #OK!
    events:
      - http:
          path: utils/enableuser/{user}
          method: put
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "ENABLE USER - NO Request Body needed"
            tags:
              - "Utils"
            description: "PUT Method, Set {user} status to 'enabled'"
            requestBody:
              description: "No Body Needed"
            pathParams:
              -
                name: "user"
                description: "User's ID to enable"
                required: true
            methodResponses:
            -
              statusCode: "200"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "UserResponse"
            -
              statusCode: "403"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "AuthErrorResponse"
            -
              statusCode: "500"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ErrorResponse"

  listUsers:
    handler: awsUtils.listUsers #OK!
    events:
      - http:
          path: utils/listusers
          method: get
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "LIST ALL USERS - No Request Body needed"
            tags:
              - "Utils"
            description: "POST Method, creates New Budget Entry"
            requestBody:
              description: "No Request Body Needed"
            methodResponses:
            -
              statusCode: "200"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ScanUsersResponse"
            -
              statusCode: "403"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "AuthErrorResponse"
            -
              statusCode: "500"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ErrorResponse"

  deleteUser:
    handler: awsUtils.deleteUser
    events:
      - http:
          path: utils/deleteuser/{user}
          method: delete
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "DELETE USER - NO Request Body needed"
            tags:
              - "Utils"
            description: "DELETE Method, Delete {user} from Cognito User Pool"
            requestBody:
              description: "No Body Needed"
            pathParams:
              -
                name: "user"
                description: "User's ID to delete"
                required: true
            methodResponses:
            -
              statusCode: "200"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "UserResponse"
            -
              statusCode: "403"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "AuthErrorResponse"
            -
              statusCode: "500"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ErrorResponse"

#APIS FOR BUDGET TABLE
  createBudget:
    handler: createBudget.main #OK!
    events:
      - http:
          path: budget
          method: post
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "CREATE BUDGET ENTRY - Request Body needed"
            tags:
              - "Budget"
            description: "POST Method, creates New Budget Entry"
            requestBody:
              description: "Amount is a stringified integer, typeOp is + or -"
            requestModels:
              "application/json": CreateBudgetRequestModel
            methodResponses:
            -
              statusCode: "200"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "GeneralBudgetResponse"
            -
              statusCode: "403"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "AuthErrorResponse"
            -
              statusCode: "500"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ErrorResponse"

  getBudget:
    handler: getBudget.main #OK!
    events:
      - http:
          path: budget/{id}
          method: get
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "GET BUDGET ENTRY"
            tags:
              - "Budget"
            description: "GET Method, get specific ID Budget Entry"
            requestBody:
              description: "No Body needed for this API Call"
            pathParams:
              -
                name: "id"
                description: "ID of the Budget Entry you want to get"
                required: true
            methodResponses:
            -
              statusCode: "200"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "GeneralBudgetResponse"
            -
              statusCode: "403"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "AuthErrorResponse"
            -
              statusCode: "500"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ErrorResponse"
  
  #updateBudget:
  #  handler: updateBudget.main
  #  events:
  #    - http:
  #        path: budget/{id}
  #        method: put
  #        cors: true
  #        authorizer: aws_iam

  deleteBudget:
    handler: deleteBudget.main #OK!
    events:
      - http:
          path: budget/{id}
          method: delete
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "DELETE BUDGET ENTRY"
            tags:
              - "Budget"
            description: "DELETE Method, deletes Budget Entry"
            requestBody:
              description: "No Body needed for this API Call"
            pathParams:
              -
                name: "id"
                description: "ID of the Budget Entry you want to delete"
                required: true
            methodResponses:
            -
              statusCode: "200"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "GeneralBudgetResponse"
            -
              statusCode: "403"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "AuthErrorResponse"
            -
              statusCode: "500"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ErrorResponse"

  scanBudget:
    handler: scanBudget.main #OK!
    events:
      - http:
          path: budget/scan
          method: get
          cors: true
          authorizer: aws_iam
          documentation:
            summary: "SCAN BUDGET ENTRIES"
            tags:
              - "Budget"
            description: "GET Method for each DynamoDB Table element, gets all Budget Entries in array form"
            methodResponses:
            -
              statusCode: "200"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ScanBudgetResponse"
            -
              statusCode: "403"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "AuthErrorResponse"
            -
              statusCode: "500"
              responseHeaders:
                -
                  name: "Access-Control-Allow-Origin"
                  description: "\"*\""
                  type: "string"
                -
                  name: "Access-Control-Allow-Credentials"
                  description: "true"
                  type: "string"
              responseModels:
                "application/json": "ErrorResponse"

  #APIS FOR EXTRA UTILS
  #importCSV:
  #  handler: awsUtils.importCSV
  #  events:
  #    - http:
  #        path: import/csv
  #        method: post
  #        cors: true
  #        authorizer: aws_iam

resources:
  - ${file(resources/api-gateway-errors.yml)}