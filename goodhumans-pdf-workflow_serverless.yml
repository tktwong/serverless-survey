org: iconify
service: goodhumans-pdf-workflow
custom: ${file(./yml/custom.yml)}

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  timeout: 10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - arn:aws:lambda:us-east-1::*:*
        - arn:aws:states:us-east-1::*:*
    - Effect: Allow
      Action:
        - sts:StartExecution
      Resource:
        - arn:aws:states:us-east-1::*:*
    - Effect: Allow
      Action:
        - cloudwatch:*
      Resource:
        - arn:aws:cloudwatch:us-east-1::*:*
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"

layers:
  commonLibs:
    path: layer
    compatibleRuntimes:
      - nodejs12.x

functions:

  getLatestCursor:
    handler: getLatestCursor.handler
    layers:
      - {Ref: CommonLibsLambdaLayer}
    environment:
      s3BucketName: ${self:custom.s3BucketName}

  getStoredCursor:
    handler: getStoredCursor.handler
    layers:
      - {Ref: CommonLibsLambdaLayer}
    environment:
      s3BucketName: ${self:custom.s3BucketName}

  getFileList:
    handler: getFileList.handler
    layers:
      - {Ref: CommonLibsLambdaLayer}
    environment:
      s3BucketName: ${self:custom.s3BucketName}

  downloadFile:
    handler: downloadFile.handler
    layers:
      - {Ref: CommonLibsLambdaLayer}
    environment:
      s3BucketName: ${self:custom.s3BucketName}

  mergePdfs:
    handler: mergePdfs.handler
    layers:
      - {Ref: CommonLibsLambdaLayer}
    environment:
      s3BucketName: ${self:custom.s3BucketName}

stepFunctions:
  stateMachines:

    getLatestCursor:
      name: sfGetLatestCursor
      definition:
        Comment: "Get the latest cursor"
        StartAt: GetLatestCursor
        States:

          GetLatestCursor:
            Type: Task
            Resource:
              Fn::GetAtt: [getLatestCursor, Arn]
            TimeoutSeconds: 120
            HeartbeatSeconds: 30
            Catch:
            - ErrorEquals: [States.TaskFailed]
              ResultPath: "$.error"
              Next: SendCursorErrorMessage
            Next : SendCursorSuccessMessage

          SendCursorSuccessMessage:
            Type: Task
            Resource:
              arn:aws:states:::sns:publish
            Parameters:
              Subject: "[SUCCESS] Saved Latest Cursor"
              Message:
                - Input.$ : "$"
              TopicArn:
                !Join [":", ["arn:aws:sns", !Ref "AWS::Region", !Ref "AWS::AccountId", "GoodHumansNotifications"]]
            Next: EndCursorProcess

          SendCursorErrorMessage:
            Type: Task
            Resource:
              arn:aws:states:::sns:publish
            Parameters:
              Subject: "[FAILED] Get Latest Cursor Error"
              Message:
                - Input.$: "$.error"
              TopicArn:
                !Join [":", ["arn:aws:sns", !Ref "AWS::Region", !Ref "AWS::AccountId", "GoodHumansNotifications"]]
            Next: EndCursorProcess

          EndCursorProcess:
            Type: Pass
            End: true

    mergeFileList:
      name: sfMergeFileList
      definition:
        Comment: "Get the stored cursor"
        StartAt: GetStoredCursor
        States:

          GetStoredCursor:
            Type: Task
            Resource:
              Fn::GetAtt: [getStoredCursor, Arn]
            Catch:
            - ErrorEquals : [States.TaskFailed]
              ResultPath  : $.error
              Next        : SendErrorMessage
            Next : GetFileList

          GetFileList:
            Type: Task
            Resource:
              Fn::GetAtt: [getFileList, Arn]
            Catch:
            - ErrorEquals : [States.TaskFailed]
              ResultPath  : $.error
              Next        : SendErrorMessage
            Next : HasFilesToDownload

          HasFilesToDownload:
            Type: Choice
            Choices :
              - Variable      : "$.body.has_files"
                BooleanEquals : true
                Next          : DownloadFiles
            Default : SendNoFilesMessage

          DownloadFiles :
            Type        : Map
            InputPath   : "$.body"
            ItemsPath   : "$.files"
            Parameters  :
              "Index.$" : "$$.Map.Item.Index"
              "Value.$" : "$$.Map.Item.Value"
            MaxConcurrency : 3
            Iterator  :
              StartAt : DownloadFile
              States  :
                DownloadFile:
                  Type: Task
                  Resource: !Join [":", ["arn:aws:lambda", !Ref "AWS::Region", !Ref "AWS::AccountId", "function:goodhumans-pdf-workflow-dev-downloadFile"]]
                  ResultPath : "$.result"
                  TimeoutSeconds : 300
                  HeartbeatSeconds : 30
                  Retry:
                  - ErrorEquals: [ States.TaskFailed ]
                    IntervalSeconds: 1
                    BackoffRate: 2
                    MaxAttempts: 3
                  End: true
            Catch:
            - ErrorEquals : [States.TaskFailed]
              ResultPath  : $.error
              Next        : SendErrorMessage
            Next : MergePdfs
            ResultPath : "$.result"

          MergePdfs:
            Type: Task
            Resource:
              Fn::GetAtt: [mergePdfs, Arn]
            Catch:
              - ErrorEquals: [States.TaskFailed]
                ResultPath: $.error
                Next: SendErrorMessage
            Next: SendFinishedMessage

          SendNoFilesMessage:
            Type: Task
            Resource:
              arn:aws:states:::sns:publish
            Parameters:
              Subject: "No Files to Download"
              Message: "[ABORTED] There are no files to download. Workflow exited."
              TopicArn:
                !Join [":", ["arn:aws:sns", !Ref "AWS::Region", !Ref "AWS::AccountId", "GoodHumansNotifications"]]
            Next: EndProcess

          SendFinishedMessage:
            Type: Task
            Resource:
              arn:aws:states:::sns:publish
            Parameters:
              Subject: "[SUCCESS] PDF Merge Finished"
              Message:
                - Input.$: "$"
              TopicArn:
                !Join [":", ["arn:aws:sns", !Ref "AWS::Region", !Ref "AWS::AccountId", "GoodHumansNotifications"]]
            Next: EndProcess

          SendErrorMessage:
            Type: Task
            Resource:
              arn:aws:states:::sns:publish
            Parameters:
              Subject : "[FAILED] Merge File List Error"
              Message:
                - Input.$ : "$.error"
              TopicArn:
                !Join [":", ["arn:aws:sns", !Ref "AWS::Region", !Ref "AWS::AccountId", "GoodHumansNotifications"]]
            Next: EndProcess

          EndProcess:
            Type: Pass
            End : true

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

resources:
  Resources:

    TriggerGetLatestCursor:
      Type: AWS::Events::Rule
      Properties:
        Name: 'Trigger-Get-Latest-Cursor'
        Description : 'Triggers getLatestCursor step function'
        ScheduleExpression : 'cron(0 2 ? * 1-5 *)'
        State : 'ENABLED'
        Targets :
          - Arn : !Join [ ':', [ 'arn:aws:states', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stateMachine:sfGetLatestCursor' ]]
            Id : TriggerGetLatestCursorStepFunction
            RoleArn : !Join [ ':', [ 'arn:aws:iam:', !Ref 'AWS::AccountId', 'role/goodhumans-pdf-workflow-dev-SfGetLatestCursorRole-1GXNYMTHZZLNX' ] ]

    TriggerMergePdfs:
      Type: AWS::Events::Rule
      Properties:
        Name: 'Trigger-Merge-PDFs'
        Description : 'Triggers mergePdfs step function'
        ScheduleExpression : 'cron(0 11 ? * 1-5 *)'
        State : 'ENABLED'
        Targets :
          - Arn : !Join [ ':', [ 'arn:aws:states', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stateMachine:sfMergeFileList' ]]
            Id : TriggerMergePdfsStepFunction
            RoleArn : !Join [ ':', [ 'arn:aws:iam:', !Ref 'AWS::AccountId', 'role/goodhumans-pdf-workflow-dev-SfMergeFileListRole-12UIYA0MAZF0R' ] ]

    errorMessages:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: 'Good Humans Workflow Notifications'
        TopicName: GoodHumansNotifications
        Subscription:
          - Endpoint: scott@atomiclotus.net
            Protocol: email
          - Endpoint: mike@goodhumans.co.uk
            Protocol: email

    storageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
