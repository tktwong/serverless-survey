# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-test # NOTE: update this with your service name

plugins:
    - serverless-prune-plugin

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  # runtime: nodejs8.10
  runtime: nodejs12.x
  versionFunctions: false

  region: us-west-2

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
    olsRegression:
        handler: functions/models/olsregression.olsRegression
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: models/olsregression
                method: get
                cors: true
    rlsRegression:
        handler: functions/models/rlsregression.rlsRegression
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: models/rlsregression
                method: get
                cors: true
    tsRegression:
        handler: functions/models/tsregression.tsRegression
        memorySize: 3008
        timeout: 30
        events:
            - http:
                path: models/tsregression
                method: get
                cors: true
    tsRegressionPartial:
        handler: functions/models/tsregressionpartial.tsRegressionPartial
        memorySize: 3008
        timeout: 8
        events:
            - http:
                path: models/tsregressionpartial
                method: get
                cors: true
    tsRegressionPartialTwo:
        handler: functions/models/tsregressionpartialtwo.tsRegressionPartialTwo
        memorySize: 3008
        timeout: 8
        events:
            - http:
                path: models/tsregressionpartialtwo
                method: get
                cors: true
    tsRegressionPartialThree:
        handler: functions/models/tsregressionpartialthree.tsRegressionPartialThree
        memorySize: 3008
        timeout: 8
        events:
            - http:
                path: models/tsregressionpartialthree
                method: get
                cors: true
    tsRegressionPartialFour:
        handler: functions/models/tsregressionpartialfour.tsRegressionPartialFour
        memorySize: 3008
        timeout: 8
        events:
            - http:
                path: models/tsregressionpartialfour
                method: get
                cors: true
    pairedSales:
        handler: functions/models/pairedsales.pairedSales
        memorySize: 10240
        timeout: 30
        events:
            - http:
                path: models/pairedsales
                method: get
                cors: true
    pairedSalesPartial:
        handler: functions/models/pairedsalespartial.pairedSalesPartial
        memorySize: 10240
        timeout: 30
        events:
            - http:
                path: models/pairedsalespartial
                method: get
                cors: true
    pairedSalesPartialTwo:
        handler: functions/models/pairedsalespartialtwo.pairedSalesPartialTwo
        memorySize: 10240
        timeout: 30
        events:
            - http:
                path: models/pairedsalespartialtwo
                method: get
                cors: true
    pairedSalesPartialThree:
        handler: functions/models/pairedsalespartialthree.pairedSalesPartialThree
        memorySize: 10240
        timeout: 30
        events:
            - http:
                path: models/pairedsalespartialthree
                method: get
                cors: true
    ladRegression:
        handler: functions/models/ladregression.ladRegression
        memorySize: 10240
        timeout: 30
        events:
            - http:
                path: models/ladregression
                method: get
                cors: true
    ladRegressionPartial:
        handler: functions/models/ladregressionpartial.ladRegressionPartial
        memorySize: 10240
        timeout: 25
        events:
            - http:
                path: models/ladregressionpartial
                method: get
                cors: true
    ladRegressionPartialTwo:
        handler: functions/models/ladregressionpartialtwo.ladRegressionPartialTwo
        memorySize: 10240
        timeout: 25
        events:
            - http:
                path: models/ladregressionpartialtwo
                method: get
                cors: true
    ladRegressionPartialThree:
        handler: functions/models/ladregressionpartialthree.ladRegressionPartialThree
        memorySize: 3008
        timeout: 25
        events:
            - http:
                path: models/ladregressionpartialthree
                method: get
                cors: true
    ladRegressionPartialFour:
        handler: functions/models/ladregressionpartialfour.ladRegressionPartialFour
        memorySize: 10240
        timeout: 25
        events:
            - http:
                path: models/ladregressionpartialfour
                method: get
                cors: true
    wlsRegression:
        handler: functions/models/wlsregression.wlsRegression
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: models/wlsregression
                method: get
                cors: true
    rwlsRegression:
        handler: functions/models/rwlsregression.rwlsRegression
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: models/rwlsregression
                method: get
                cors: true
    mqRegression:
        handler: functions/models/mqregression.mqRegression
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: models/mqregression
                method: get
                cors: true
    lmsRegression:
        handler: functions/models/lmsregression.lmsRegression
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: models/lmsregression
                method: get
                cors: true
    rlmsRegression:
        handler: functions/models/rlmsregression.rlmsRegression
        memorySize: 128
        timeout: 10
        events:
            - http:
                path: models/rlmsregression
                method: get
                cors: true
    sensitivity:
        handler: functions/models/sensitivity.sensitivity
        memorySize: 3008
        timeout: 30
        events:
            - http:
                path: models/sensitivity
                method: get
                cors: true
    pullProperties:
        handler: functions/properties.pullproperties.pullProperties
        memorySize: 128
        events:
            - http:
                path: properties/pull
                method: get
                cors: true
    timeAdjustments:
        handler: functions/transactionaladjustments/time.time
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: transactionaladjustments/time
                method: get
                cors: true
    concessionAdjustments:
        handler: functions/transactionaladjustments/concessions.concessions
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: transactionaladjustments/concessions
                method: get
                cors: true
    lockAndModel:
        handler: functions/lockandmodel/lockandmodel.lockAndModel
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: lockandmodel/lockandmodel
                method: get
                cors: true
    initialSeedForPublicRecords:
        handler: functions/publicrecords/initialseed.initialSeedForPublicRecords
        memorySize: 128
        timeout: 30
        events:
            - http:
                path: publicrecords/initialseed
                method: get
                cors: true
  
    
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
