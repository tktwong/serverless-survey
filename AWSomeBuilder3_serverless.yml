# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: moderator-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
useDotenv: true
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  # memorySize: 512 # optional, in MB, default is 1024
  # timeout: 10 # optional, in seconds, default is 6
  vpc:
    securityGroupIds:
      - !GetAtt VpcEndpointLambdaSecurityGroup.GroupId
    subnetIds:
      - Ref: SubnetAPrivate
      - Ref: SubnetBPrivate
# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource:
        Fn::GetAtt: [SQSQueue, Arn]
    - Effect: "Allow"
      Action:
        - "states:ListStateMachines"
      Resource:
        - 'arn:aws:states:us-east-1:215348766906:stateMachine:*'
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - "arn:aws:states:us-east-1:215348766906:stateMachine:ModerationEngine*"
    - Effect: "Allow"
      Action:
        - "iam:GetRole"
        - "iam:PassRole"
        - "rekognition:*"
        - "sns:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "rekognition:DetectLabels"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:ListAllMyBuckets"
        - "s3:GetBucketLocation"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:GetObjectVersion"
        - "s3:GetBucketAcl"
        - "s3:DeleteObject"
      Resource:
        - "arn:aws:s3:::*"
        - "arn:aws:s3:::*/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeStream"
        - "dynamodb:GetRecords"
        - "dynamodb:GetShardIterator"
        - "dynamodb:ListStreams"
      Resource: "arn:aws:dynamodb:*:*:table/*"
  environment:
      MODERATION_TABLE: "${self:custom.MODERATION_TABLE}"
      HOSTNAME: "localhost"
      PORT: 8080
      REGION: "${self:provider.region}"

# you can add packaging information here
# package:
#   individually: true
#   exclude:
#     - ./**
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

custom:
  QUEUE_NAME: "ModerationQueue-${opt:stage, self:provider.stage}"
  MODERATION_TABLE: "ModerationTable-${opt:stage, self:provider.stage}"
  SNS_TOPIC_NAME: "VideoPipelineChannel-${opt:stage, self:provider.stage}"
  SNS_DISPLAY_NAME: "Video Recognition Pipeline"
  STATE_MACHINE_NAME: "ModerationEngine-${opt:stage, self:provider.stage}"

functions:
  Producer:
    handler: handler.producer
    # events:
      # Invoke Lambda function every minute
      # - schedule: rate(1 minute)
    environment:
      PATH: "api/items/inreview"
      TARGET_BUCKET: "octank-moderation"
      SQS_URL:
        Ref: SQSQueue
  Consumer:
    handler: handler.consumer
    environment:
      STATE_MACHINE_NAME: "${self:custom.STATE_MACHINE_NAME}"
    events:
      - sqs:
          arn:
            Fn::GetAtt: [SQSQueue, Arn]
  
  StartRecognition:
    # description: optional description for your Lambda
    handler: handler.startRecognition
    environment:
      SUPPORTED_IMAGE_FORMATS: ".jpg,.jpeg,.png"
      SUPPORTED_VIDEO_FORMATS: ".mp4,.mov"
    # memorySize: 512 # optional, in MB, default is 1024
    # timeout: 10 # optional, in seconds, default is 6
    # https://www.serverless.com/framework/docs/providers/aws/guide/functions/
  StartSyncRecognition:
    handler: handler.startSyncRecognition
  StartAsyncRecognition:
    handler: handler.startAsyncRecognition
    environment:
      SNS_TOPIC_ARN: !Ref RekognitionNotificationTopic
      ROLE_NAME: !Ref RekognitionNotificationChannelRole
  UpdateRecognitionStatus:
    handler: handler.updateRecognitionStatus
    events:
      - sns:
          arn: !Ref RekognitionNotificationTopic
          topicName: ${self:custom.SNS_TOPIC_NAME}
          displayName: ${self:custom.SNS_DISPLAY_NAME}
  ApiFailed:
    handler: handler.apiFailed
  CheckForDrugs:
    handler: handler.checkForDrugs
    environment:
      DRUGS_NAME_CONFIDENCE: '{"Herbs":92,"Powder":70,"Pill":99,"Medication":99,"Capsule":95,"Weed":95,"Sugar":59,"Smoke Pipe":86}'
  CheckForFirearm:
    handler: handler.checkForFirearm
    environment:
      GUNS_NAME_CONFIDENCE: '{"Gun":98,"Weapon":98,"Weaponry":98,"Handgun":91,"Rifle":63}'
  ReportItem:
    handler: handler.reportItem
  UpdateItemStatus:
    handler: handler.updateItemStatus
  StreamFunction:
    handler: handler.streamFunction
    events:
      - stream: 
          type: dynamodb
          arn:
            Fn::GetAtt: [ModerationDynamoDbTable, StreamArn]
  # orchestrator:
  #   handler: orchestrator.handler
  #   package:
  #     include:
  #       - orchestrator.js
  # job:
  #   handler: job.handler
  #   package:
  #     include:
  #       - job.js

#    Define function environment variables here
#    environment:
#      variable2: value2

stepFunctions:
  stateMachines:
    ModerationStateMachine:
      name: "ModerationEngine"
      definition:
        StartAt: StartRecognition
        States:
          StartRecognition:
            Type: Task
            Resource: {"Fn::GetAtt": ["StartRecognitionLambdaFunction", "Arn"]}
            Next: CheckMediaType
          CheckMediaType:
            Type: Choice
            Choices:
              - Variable: $.MediaType
                StringEquals: "VIDEO"
                Next: StartAsyncRecognition
              - Variable: $.MediaType
                StringEquals: "IMAGE"
                Next: StartSyncRecognition
          StartSyncRecognition:
            Type: Task
            Resource: {"Fn::GetAtt": ["StartSyncRecognitionLambdaFunction", "Arn"]}
            Next: CheckRecognitionComplete
          StartAsyncRecognition:
            Type: Task
            Resource: {"Fn::GetAtt": ["StartAsyncRecognitionLambdaFunction", "Arn"]}
            Next: AwaitRecognition
          AwaitRecognition:
            Type: Wait
            Seconds: 30
            Next: UpdateRecognitionStatus
          UpdateRecognitionStatus:
            Type: Task
            Resource: {"Fn::GetAtt": ["UpdateRecognitionStatusLambdaFunction", "Arn"]}
            Next: CheckRecognitionComplete
          CheckRecognitionComplete:
            Type: Choice
            Choices:
              - Variable: $.Status
                StringEquals: "IN_PROGRESS"
                Next: AwaitRecognition
              - Variable: $.Status
                StringEquals: "SUCCEEDED"
                Next: CheckForDrugs
              - Variable: $.Status
                StringEquals: "FAILED"
                Next: ApiFailed
          ApiFailed:
            Type: Task
            Resource: {"Fn::GetAtt": ["ApiFailedLambdaFunction", "Arn"]}
            End: true
          CheckForDrugs:
            Type: Task
            Resource: {"Fn::GetAtt": ["CheckForDrugsLambdaFunction", "Arn"]}
            Next: FoundDrugs
          FoundDrugs:
            Type: Choice
            Choices:
              - Variable: $.Match
                BooleanEquals: true
                Next: ReportItem
            Default: CheckForFirearm
          CheckForFirearm:
            Type: Task
            Resource: {"Fn::GetAtt": ["CheckForFirearmLambdaFunction", "Arn"]}
            Next: FoundFirearm
          FoundFirearm:
            Type: Choice
            Choices:
              - Variable: $.Match
                BooleanEquals: true
                Next: ReportItem
            Default: UpdateItemStatus
          UpdateItemStatus:
            Type: Task
            Resource: {"Fn::GetAtt": ["UpdateItemStatusLambdaFunction", "Arn"]}
            End: true
          ReportItem:
            Type: Task
            Resource: {"Fn::GetAtt": ["ReportItemLambdaFunction", "Arn"]}
            End: true

# you can add CloudFormation resource templates here
resources:
  Resources:

    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.1.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags:
        - Key: Name
          Value: VPC(10.1.0.0/16)
    
    SubnetAPrivate:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
          - '0'
          - Fn::GetAZs: ''
        CidrBlock: 10.1.16.0/20
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: Private-Subnet-A-us-east-1a
        - Key: Reach
          Value: private
    
    SubnetBPrivate:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
          - '1'
          - Fn::GetAZs: ''
        CidrBlock: 10.1.48.0/20
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: Private-Subnet-B-us-east-1b
        - Key: Reach
          Value: private
    
    RouteTableAssociationAPrivate:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: SubnetAPrivate
        RouteTableId:
          Ref: RouteTablePrivate
    
    RouteTableAssociationBPrivate:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: SubnetBPrivate
        RouteTableId:
          Ref: RouteTablePrivate
    
    SubnetNetworkAclAssociationAPrivate:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId:
          Ref: SubnetAPrivate
        NetworkAclId:
          Ref: NetworkAclPrivate
    
    SubnetNetworkAclAssociationBPrivate:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        SubnetId:
          Ref: SubnetBPrivate
        NetworkAclId:
          Ref: NetworkAclPrivate
    
    RouteTablePrivate:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: Private-Route-Table

    NetworkAclPrivate:
      Type: AWS::EC2::NetworkAcl
      Properties:
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: Private
    
    NetworkAclEntryInPrivateAllowVPC:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NetworkAclPrivate
        RuleNumber: '99'
        Protocol: "-1"
        RuleAction: allow
        Egress: 'false'
        CidrBlock: 0.0.0.0/0

    NetworkAclEntryOutPrivateAllowVPC:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId:
          Ref: NetworkAclPrivate
        RuleNumber: '99'
        Protocol: "-1"
        RuleAction: allow
        Egress: 'true'
        CidrBlock: 0.0.0.0/0

    



    SNSVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PrivateDnsEnabled: True
        SecurityGroupIds: 
          - !GetAtt VpcEndpointSecurityGroup.GroupId
        ServiceName: 'com.amazonaws.us-east-1.sns'
        SubnetIds: 
          - Ref: SubnetAPrivate
          - Ref: SubnetBPrivate
        VpcEndpointType: Interface
        VpcId: !Ref VPC
    
    SQSVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PrivateDnsEnabled: True
        SecurityGroupIds: 
          - !GetAtt VpcEndpointSecurityGroup.GroupId
        ServiceName: 'com.amazonaws.us-east-1.sqs'
        SubnetIds: 
          - Ref: SubnetAPrivate
          - Ref: SubnetBPrivate
        VpcEndpointType: Interface
        VpcId: !Ref VPC

    RekognitionVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PrivateDnsEnabled: True
        SecurityGroupIds: 
          - !GetAtt VpcEndpointSecurityGroup.GroupId
        ServiceName: 'com.amazonaws.us-east-1.rekognition'
        SubnetIds: 
          - Ref: SubnetAPrivate
          - Ref: SubnetBPrivate
        VpcEndpointType: Interface
        VpcId: !Ref VPC
    
    StepFunctionVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PrivateDnsEnabled: True
        SecurityGroupIds: 
          - !GetAtt VpcEndpointSecurityGroup.GroupId
        ServiceName: 'com.amazonaws.us-east-1.states'
        SubnetIds: 
          - Ref: SubnetAPrivate
          - Ref: SubnetBPrivate
        VpcEndpointType: Interface
        VpcId: !Ref VPC

    DynamoDBVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PrivateDnsEnabled: True
        SecurityGroupIds: 
          - !GetAtt VpcEndpointSecurityGroup.GroupId
        ServiceName: 'com.amazonaws.us-east-1.dynamodb'
        SubnetIds: 
          - Ref: SubnetAPrivate
          - Ref: SubnetBPrivate
        VpcEndpointType: Gateway
        VpcId: !Ref VPC

    S3VPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        PrivateDnsEnabled: True
        SecurityGroupIds: 
          - !GetAtt VpcEndpointSecurityGroup.GroupId
        ServiceName: 'com.amazonaws.us-east-1.s3'
        SubnetIds: 
          - Ref: SubnetAPrivate
          - Ref: SubnetBPrivate
        VpcEndpointType: Gateway
        VpcId: !Ref VPC


    VpcEndpointSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref VPC
        GroupName: ${self:service}-${self:provider.stage}-VPC-Endpoint
        GroupDescription: 'Security group for VPC Endpoint'
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !GetAtt VpcEndpointLambdaSecurityGroup.GroupId
    VpcEndpointLambdaSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        VpcId: !Ref VPC
        GroupDescription: 'Security group for VPC Endpoint Lambda'




    SQSQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.QUEUE_NAME}

    ModerationDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:custom.MODERATION_TABLE}
    
    RekognitionNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.SNS_TOPIC_NAME}

    RekognitionNotificationChannelRole: 
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
    RolePolicies: 
      Type: "AWS::IAM::Policy"
      Properties: 
        PolicyName: "RekognitionNotificationChannelPolicy"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: 
                - "iam:GetRole"
                - "iam:PassRole"
                - "rekognition:*"
                - "sns:*"
                - "s3:*"
              Resource: "*"
        Roles: 
          - 
            Ref: "RekognitionNotificationChannelRole"

  Outputs:
    VPC:
      Description: VPC.
      Value:
        Ref: VPC

    SubnetAPrivate:
      Description: Subnet A private.
      Value:
        Ref: SubnetAPrivate

    SubnetBPrivate:
      Description: Subnet B private.
      Value:
        Ref: SubnetBPrivate

    RouteTablePrivate:
      Description: Route table private.
      Value:
        Ref: RouteTablePrivate

    VpcEndpointLambdaSecurityGroup:
      Description: Route table public.
      Value:
        Ref: VpcEndpointLambdaSecurityGroup

# com.amazonaws.us-east-1.dynamodb
# com.amazonaws.us-east-1.s3
# com.amazonaws.us-east-1.iam
# com.amazonaws.us-east-1.sqs
# com.amazonaws.us-east-1.stepFunctions
# com.amazonaws.us-east-1.rekognition
# #{AWS::Region}
# #{AWS::AccountId}
# ${self:service}-${opt:stage}
plugins:
  - serverless-dotenv-plugin
  - serverless-step-functions