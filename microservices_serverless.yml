
service: products

custom:
  defaultStage: dev # default stage to deploy to

  myStage: ${opt:stage, self:custom.defaultStage} # deploy to the stage that is given via a CLI param with fallback to the default stage

  vpc:
    dev:
      securityGroupIds:
        - sg-
      subnetIds:
        - subnet-
        - subnet-
        - subnet-

    staging:
      securityGroupIds:
        - sg-
      subnetIds:
        - subnet-
        - subnet-
        - subnet-

    production:
      securityGroupIds:
        - sg-
      subnetIds:
        - subnet-
        - subnet-
        - subnet-

  environment:
    # LOCAL DEV DB
    # dev:
    #   DB_HOST: localhost
    #   DB_USER: 
    #   DB_PASS: 
    #   DB_NAME: 

    # AWS DEV DB
    dev:
      DB_HOST: 
      DB_USER: 
      DB_PASS: 
      DB_NAME: 

    staging:
      DB_HOST: 
      DB_USER: 
      DB_PASS: 
      DB_NAME: 

    production:
      DB_HOST: 
      DB_USER: 
      DB_PASS: 
      DB_NAME: 

  myVpc: ${self:custom.vpc.${self:custom.myStage}} # set the VPC accordingly to the given stage
  myEnvironment: ${self:custom.environment.${self:custom.myStage}} # helper var to set the env vars accordingly to the given stage

provider:
  name: aws
  stage: ${self:custom.myStage}
  profile: ${self:custom.myStage} # matches the stage name
  runtime: nodejs6.10
  iamRoleStatements:
    - Effect: "Allow"
      Action: ["ec2:DescribeInstances",
               "ec2:CreateNetworkInterface",
               "ec2:AttachNetworkInterface",
               "ec2:DescribeNetworkInterfaces",
               "ec2:DeleteNetworkInterface",
               "ec2:DetachNetworkInterface",
               "ec2:ModifyNetworkInterfaceAttribute",
               "ec2:ResetNetworkInterfaceAttribute"
              ]
      Resource: "*"

  vpc: ${self:custom.myVpc}

  environment: ${self:custom.myEnvironment}

  apiKeys:
    - ${self:custom.myStage}-leadAssignmentAPIKey

plugins:
 - serverless-offline
# to start serverless server: sls offline start

functions:

  # create item
  products-create:
    handler: products.create
    timeout: 5 # we need it to be fast-fast-fast
    memorySize: 1024
    events:
      - http:
          path: snapcap/webapi/products
          method: post
          integration: lambda-proxy
          cors: true
          private: true

  # update item
  products-update:
    handler: products.update
    timeout: 5 # we need it to be fast-fast-fast
    memorySize: 1024
    events:
      - http:
          path: snapcap/webapi/products/{productId}
          method: update
          integration: lambda-proxy
          cors: true
          private: true

  # delete item
  products-delete:
    handler: products.delete
    timeout: 5 # we need it to be fast-fast-fast
    memorySize: 1024
    events:
      - http:
          path: snapcap/webapi/products/{productId}
          method: delete
          integration: lambda-proxy
          cors: true
          private: true
  
  # get one item
  products-getOne:
    handler: products.getOne
    timeout: 5 # we need it to be fast-fast-fast
    memorySize: 1024
    events:
      - http:
          path: snapcap/webapi/products/{productId}
          method: get
          integration: lambda-proxy
          cors: true
          private: true

  # get all items
  products-getAll:
    handler: products.getAll
    timeout: 5 # we need it to be fast-fast-fast
    memorySize: 1024
    events:
      - http:
          path: snapcap/webapi/products
          method: get
          integration: lambda-proxy
          cors: true
          private: true