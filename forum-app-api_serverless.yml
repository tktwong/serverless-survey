# NOTE: update this with your service name
service: forum-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:PutObject
      Resource: "arn:aws:s3:::niro-forum-user-uploads/*"
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}
  environment:
    tableNameUserPosts: userposts
    tableNameComments: usercomments
    tableNameCommentLikes: commentLikes
    tableNamePostLikes: userlikes
    bucketName: niro-forum-user-uploads
    avatarFileName: _user_avatar
    publicKeyURL: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_LBYlIME5a/.well-known/jwks.json

functions:
  create:
    handler: create_post.main
    events:
      - http:
          path: forum
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get_post.main
    events:
      - http:
          path: forum/{postId}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list_posts.main
    events:
      - http:
          path: forum
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update_post.main
    events:
      - http:
          path: forum/{postId}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete_post.main
    events:
      - http:
          path: forum/{postId}
          method: delete
          cors: true
          authorizer: aws_iam
  postComment:
    handler: post_comment.main
    events:
      - http:
          path: comment/{postId}
          method: post
          cors: true
          authorizer: aws_iam
  getComment:
    handler: get_comment.main
    events:
      - http:
          path: comment/{postId}/{commentId}
          method: get
          cors: true
          authorizer: aws_iam
  listComments:
    handler: list_comments.main
    events:
      - http:
          path: comment/{postId}
          method: get
          cors: true
          authorizer: aws_iam
  updateComment:
    handler: update_comment.main
    events:
      - http:
          path: comment/{postId}/{commentId}
          method: put
          cors: true
          authorizer: aws_iam
  uploadAvatar:
    handler: upload_avatar.main
    events:
      - http:
          path: avatar/upload
          method: post
          cors: true
          authorizer: aws_iam
  likePost:
    handler: like_post.main
    events:
      - http:
          path: like/{postId}
          method: post
          cors: true
          authorizer: aws_iam
  likeComment:
      handler: like_comment.main
      events:
        - http:
            path: like/{postId}/{commentId}
            method: post
            cors: true
            authorizer: aws_iam
  getPostLikes:
    handler: get_post_likes.main
    events:
      - http:
          path: like/{postId}
          method: get
          cors: true
          authorizer: aws_iam
  getCommentLikes:
    handler: get_comment_likes.main
    events:
      - http:
          path: like/{postId}/{commentId}
          method: get
          cors: true
          authorizer: aws_iam


resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
