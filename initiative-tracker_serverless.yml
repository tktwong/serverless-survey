service:
  name: initiative-tracker

plugins:
  - serverless-plugin-iopipe
  - serverless-webpack
  - serverless-plugin-iam-checker
  - serverless-cloudformation-resource-counter
  - serverless-domain-manager

provider:
  name: aws
  stage: ${opt:stage, 'local'}
  runtime: nodejs8.10
  environment:
    IOPIPE_TOKEN: ${env:IOPIPE_TOKEN}
    QUERIES_TABLE: { Ref: QueriesTable }
    USERS_TABLE: { Ref: UsersTable }
    INITIATIVES_TABLE: { Ref: InitiativesTable }
    INITIATIVES_TABLE_IDENTIFIERS_INDEX: ${self:custom.identifiersIndex}
    INITIATIVES_TABLE_TYPE_INDEX: ${self:custom.typeIndex}
    INITIATIVES_TABLE_STATUS_INDEX: ${self:custom.statusIndex}
    REQUEST_UPDATE_SNS:
      Fn::Join:
        - ':'
        - - arn:aws:sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - ${self:custom.requestUpdateTopic}
    NOTIFY_ON_JOIN_SNS:
      Fn::Join:
        - ':'
        - - arn:aws:sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - ${self:custom.notifyWhenJoinTopic}
    WELCOME_NEW_USER_SNS:
      Fn::Join:
        - ':'
        - - arn:aws:sns
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - ${self:custom.welcomeNewUserTopic}
    REVISION: ${file(infrastructure/helper.js):revision}
    STAGE: ${self:provider.stage}
    SLACK_CLIENT_ID: ${env:${self:provider.stage}_SLACK_CLIENT_ID, env:SLACK_CLIENT_ID}
    SLACK_CLIENT_SECRET: ${env:${self:provider.stage}_SLACK_CLIENT_SECRET, env:SLACK_CLIENT_SECRET}
    SLACK_SIGNING_SECRET: ${env:${self:provider.stage}_SLACK_SIGNING_SECRET, env:SLACK_SIGNING_SECRET}
    SLACK_ACCESS_TOKEN: ${env:${self:provider.stage}_SLACK_ACCESS_TOKEN, env:SLACK_ACCESS_TOKEN}
    SLACK_REDIRECT_URI: https://initiative.ninja/${self:provider.stage}/auth/redirect
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - { Fn::GetAtt: [UsersTable, Arn] }
        - { Fn::GetAtt: [QueriesTable, Arn] }
        - { Fn::GetAtt: [InitiativesTable, Arn] }
        - { Fn::Join: ['', [{ Fn::GetAtt: [InitiativesTable, Arn] }, '/index/*']] }
    - Effect: Allow
      Action:
        - ssm:PutParameter
        - ssm:GetParameter
      Resource:
        Fn::Join:
          - ':'
          - - arn:aws:ssm
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - parameter/initiative-trackers*
    - Effect: Allow
      Action: sns:Publish
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:sns
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.requestUpdateTopic}
        - Fn::Join:
            - ':'
            - - arn:aws:sns
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.notifyWhenJoinTopic}
        - Fn::Join:
            - ':'
            - - arn:aws:sns
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - ${self:custom.welcomeNewUserTopic}

custom:
  identifiersIndex: IDENTIFIERS_INDEX
  statusIndex: STATUS_INDEX
  typeIndex: TYPE_INDEX
  requestUpdateTopic: request-update-${self:provider.stage}
  notifyWhenJoinTopic: notify-when-join-${self:provider.stage}
  welcomeNewUserTopic: welcome-new-user-${self:provider.stage}
  customDomain:
    basePath: ${self:provider.stage}
    certificateName: initiative.ninja
    domainName: initiative.ninja

functions:
  initiate-update-request:
    handler: app/status-updates/initiate-update-request.handler
    events:
      - schedule: cron(0 15 ? * 2#1 *) # 3PM UTC (10 AM EST) the first Monday of every month
      # - schedule: cron(0/5 * * * ? *) # every 5 minutes for testing

  request-update:
    handler: app/status-updates/request-update.handler
    events:
      - sns: ${self:custom.requestUpdateTopic}

  add-initiative:
    handler: app/slash-commands/add-initiative.handler
    events:
      - http:
          method: post
          path: add

  list-initiatives:
    handler: app/slash-commands/list-initiatives.handler
    events:
      - http:
          method: post
          path: list

  action-endpoint:
    handler: app/interactivity/action-endpoint.handler
    events:
      - http:
          method: post
          path: actions

  stream-initiative-updates:
    handler: app/notifications/stream-initiative-updates.handler
    events:
      - stream:
          type: dynamodb
          arn: { Fn::GetAtt: [InitiativesTable, StreamArn] }

  stream-user-updates:
    handler: app/notifications/stream-user-updates.handler
    events:
      - stream:
          type: dynamodb
          arn: { Fn::GetAtt: [UsersTable, StreamArn] }

  notify-when-join:
    handler: app/notifications/notify-when-join.handler
    events:
      - sns: ${self:custom.notifyWhenJoinTopic}

  welcome-new-user:
    handler: app/notifications/welcome-new-user.handler
    events:
      - sns: ${self:custom.welcomeNewUserTopic}

  auth-redirect:
    handler: app/app-authorization/auth-redirect.handler
    events:
      - http:
          method: get
          path: /auth/redirect

resources:
  Resources:
    InitiativesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: initiativeId
            AttributeType: S
          - AttributeName: identifiers
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: type
            AttributeType: S
        KeySchema:
          - AttributeName: initiativeId
            KeyType: HASH
          - AttributeName: identifiers
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.identifiersIndex}
            KeySchema:
              - AttributeName: identifiers
                KeyType: HASH
              - AttributeName: initiativeId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:custom.statusIndex}
            KeySchema:
              - AttributeName: identifiers
                KeyType: HASH
              - AttributeName: status
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:custom.typeIndex}
            KeySchema:
              - AttributeName: type
                KeyType: HASH
              - AttributeName: initiativeId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    QueriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: queryId
            AttributeType: S
        KeySchema:
          - AttributeName: queryId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiration
          Enabled: true

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: slackUserId
            AttributeType: S
        KeySchema:
          - AttributeName: slackUserId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
