service: serverless-mybestsellers-app
  
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  
provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment: 
   BS_TABLE: MyBestSellers-${self:provider.stage} 
   BS_USER_INDEX: MyBestSellersIndex
   IMAGES_S3_BUCKET: serverless-mybestsellers-project-images-${self:provider.stage}
   SIGNED_URL_EXPIRATION: 300
   AUTH_0_JWKS_URL: https://dev-la879an3.eu.auth0.com/.well-known/jwks.json

  tracing:
   apiGateway: true
   lambda: true    
  
  apiGateway:
   shouldStartNameWithService: true # Preparation for serverless framework v3.0.0

 
custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Project BestSellers List
        description: Serverless application for best sellers books list creation
    models:
      - name: CreateBSRequest
        contentType: application/json
        schema: ${file(models/create-bestseller-list-item-request.json)}
      - name: UpdateBSRequest
        contentType: application/json
        schema: ${file(models/update-bestseller-list-item-request.json)}
      

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  
  GetBS:
    handler: src/lambda/http/getBS.handler
    events:
      - http:
          method: get
          path: bestsellers
          cors: true
          authorizer: Auth
    iamRoleStatementsName: Query-DynamoDB-BestSellers-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BS_TABLE}

  # TODO: Configure this function
  CreateBS:
    handler: src/lambda/http/createBS.handler
    events:
      - http:
          method: post
          path: bestseller
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new bestseller item
            description: Create a new bestseller item in my list
            requestModels:
              'application/json': CreateBSRequest
    iamRoleStatementsName: PutItem-DynamoDB-BestSellers-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
       

    
  # TODO: Configure this function
  UpdateBS:
    handler: src/lambda/http/updateBS.handler
    events:
      - http:
          method: patch
          path: bestsellers/{bsId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a BestSeller item in my list
            description: Update a BestSellers item in my list
            requestModels:
              'application/json': UpdateBSRequest

    iamRoleStatementsName: Update-DynamoDB-BestSeller-Table
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BS_TABLE}

  # TODO: Configure this function
  DeleteBS:
   handler: src/lambda/http/deleteBS.handler
   events:
      - http:
          method: delete
          path: bestsellers/{bsId}
          cors: true
          authorizer: Auth
   iamRoleStatementsName: Delete-DynamoDB-BestSeller-Table
   iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BS_TABLE}


  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: bestsellers/{bsId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: Upgrade-S3-BestSellers-Images
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BS_TABLE}

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    RequestBodyValidator:
        Type: AWS::ApiGateway::RequestValidator
        Properties:
            Name: 'request-body-validator'
            RestApiId:
                Ref: ApiGatewayRestApi
            ValidateRequestBody: true
            ValidateRequestParameters: false

    BSItemDynamoDBTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            TableName: ${self:provider.environment.BS_TABLE}
            AttributeDefinitions:
             - AttributeName: bsId
               AttributeType: S
             - AttributeName: valuation
               AttributeType: S
             - AttributeName: userId
               AttributeType: S
            KeySchema:
             - AttributeName: userId
               KeyType: HASH
             - AttributeName: bsId
               KeyType: RANGE
            GlobalSecondaryIndexes:
             - IndexName: ${self:provider.environment.BS_USER_INDEX}
               KeySchema:
                - AttributeName: userId
                  KeyType: HASH
                - AttributeName: valuation
                  KeyType: RANGE
               Projection:
                  ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
            
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyImagesPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket 