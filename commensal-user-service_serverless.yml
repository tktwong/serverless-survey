service: commensal-user-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:eu-west-1:959782623357:table/commensal-user
  environment:
    REGION: ${self:provider.region}
    TABLE_NAME: commensal-user

package:
  exclude:
    - test/**

custom:
  scope: co_us

functions:  
  userget:
    handler: handler.userGet
    events:
      - http:
          path: user/{id}
          authorizer:
            name: serviceAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token 
          method: get
          cors: true # for testing purposes only
  userpost:
    handler: handler.userPost
    events:
      - http:
          path: user/{id}
          authorizer: 
            name: serviceAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
          method: post
          cors: true # for testing purposes only
  userputpartial:
    handler: handler.userPut
    events:
      - http:
          path: user/{id}/partial
          authorizer: 
            name: serviceAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
          method: put
          cors: true # for testing purposes only
  accountget:
    handler: handler.accountGet
    events:
      - http:
          path: account/id/{id}
          authorizer: 
            name: userAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
          method: get
          cors: true # public facing API
  accountputprofile:
    handler: handler.accountPut
    events:
      - http:
          path: account/id/{id}/profile
          authorizer: 
            name: userAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
          method: put
          cors: true # public facing API
  accountputsearchparams:
    handler: handler.accountPut
    events:
      - http:
          path: account/{id}/searchparams 
          authorizer: 
            name: userAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
          method: put
          cors: true # public facing API
  usersmatch:
    handler: handler.usersPut
    events:
      - http:
          path: users/match
          authorizer: 
            name: serviceAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
          method: put
          cors: true # for testing purposes only
  serviceAuthorizer:
    handler: handler.serviceAuthorizer
  userAuthorizer:
    handler: handler.userAuthorizer