
service: nb-shdsvcnpd-itsm-portal-ld3

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ${opt:region, 'us-east-1'}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
 # deploymentBucket:
   # name: nb-shdsvcnpd-itsm-servonld-sandbox3

plugins:
  - serverless-iam-roles-per-function

functions:
  create:
    handler: handler/create.create
    events:
      - http:
          path: handler
          method: post
          cors: true
    iamRoleStatementsName: nb-shdsvcnpd-itsm-portal-ld3-create
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:PutItem        
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        
  list:
    handler: handler/list.list
    iamRoleStatementsName: nb-shdsvcnpd-itsm-portal-ld3-list
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:Scan        
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    events:
      - http:
          path: handler
          method: get
          cors: true


  get:
    handler: handler/get.get
    events:
      - http:
          path: handler/{id}
          method: get
          cors: true
    iamRoleStatementsName: nb-shdsvcnpd-itsm-portal-ld3-get
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:GetItem        
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

  update:
    handler: handler/update.update
    events:
      - http:
          path: handler/{id}
          method: put
          cors: true
    iamRoleStatementsName: nb-shdsvcnpd-itsm-portal-ld3-update
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:UpdateItem        
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

  delete:
    handler: handler/delete.delete
    events:
      - http:
          path: handler/{id}
          method: delete
          cors: true
    iamRoleStatementsName: nb-shdsvcnpd-itsm-portal-ld3-delete
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - dynamodb:DeleteItem        
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

  getStream:
    handler: handler/stream.getStream
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          cors: true
          arn:
            Fn::GetAtt:
              - handlerTable
              - StreamArn
    iamRoleStatementsName: nb-shdsvcnpd-itsm-portal-ld3-stream
    iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
        - dynamodb:Scan
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

resources:
  Resources:
    handlerTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain # Keeps around the DynamoDB resource when we redeploy/destroy
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
