# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: vendorx

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  # If you want to change to a different AWS profile
  # from ~/.aws/credentials, you can do so here
  profile: default
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  environment:
    DB_CONNECTION_STRING: ${file(./secrets.yml):${self:provider.stage}.database.connectionString}
    S3_ACCESS_KEY_ID: ${file(./secrets.yml):${self:provider.stage}.aws.accessKeyId}
    S3_SECRET_ACCESS_KEY: ${file(./secrets.yml):${self:provider.stage}.aws.secretAccessKey}
    S3_BUCKET_NAME: ${file(./secrets.yml):${self:provider.stage}.aws.s3BucketName}
  memorySize: 128
  timeout: 5

  vpc:
    subnetIds: ${self:custom.${self:provider.stage}.subnetIds}
    securityGroupIds: ${self:custom.${self:provider.stage}.securityGroupIds}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DetachNetworkInterface"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "*"

custom:
  webpackIncludeModules: true
  webpack:
    webpackConfig: ./webpack.config.js
    packager: 'yarn'   # Packager that will be used to package your external modules
  dev:
    subnetIds:
    - subnet-79cf5b30
    - subnet-0de6826a
    - subnet-1483d152
    securityGroupIds:
    - sg-0b481a183dc4c197c


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  phlo:
    handler: src/controllers/phlo.handle
    events:
    - http:
        path: /phlo
        method: post
        cors: true

  customerList:
    handler: src/controllers/customer.index
    events:
    - http:
        path: customers
        method: get
        cors: true

  customerLoad:
    handler: src/controllers/customer.load
    events:
    - http:
        path: customers/{id}
        method: get
        cors: true

  customerCreate:
    handler: src/controllers/customer.store
    events:
    - http:
        path: customers
        method: post
        cors: true

  customerUpdate:
    handler: src/controllers/customer.update
    events:
    - http:
        path: customers/{id}
        method: patch
        cors: true

  customerDelete:
    handler: src/controllers/customer.deleteResource
    events:
    - http:
        path: customers/{id}
        method: delete
        cors: true


  orderList:
    handler: src/controllers/order.index
    events:
    - http:
        path: orders
        method: get
        cors: true

  orderLoad:
    handler: src/controllers/order.load
    events:
    - http:
        path: orders/{id}
        method: get
        cors: true

  orderCreate:
    handler: src/controllers/order.store
    events:
    - http:
        path: orders
        method: post
        cors: true

  orderUpdate:
    handler: src/controllers/order.update
    events:
    - http:
        path: orders/{id}
        method: patch
        cors: true

  orderDelete:
    handler: src/controllers/order.deleteResource
    events:
    - http:
        path: orders/{id}
        method: delete
        cors: true

  productList:
    handler: src/controllers/product.index
    events:
    - http:
        path: products
        method: get
        cors: true

  productLoad:
    handler: src/controllers/product.load
    events:
    - http:
        path: products/{id}
        method: get
        cors: true

  productCreate:
    handler: src/controllers/product.store
    events:
    - http:
        path: products
        method: post
        cors: true

  productUpdate:
    handler: src/controllers/product.update
    events:
    - http:
        path: products/{id}
        method: patch
        cors: true

  productDelete:
    handler: src/controllers/product.deleteResource
    events:
    - http:
        path: products/{id}
        method: delete
        cors: true

  transactionList:
    handler: src/controllers/transaction.index
    events:
    - http:
        path: transactions
        method: get
        cors: true

  transactionLoad:
    handler: src/controllers/transaction.load
    events:
    - http:
        path: transactions/{id}
        method: get
        cors: true

  transactionCreate:
    handler: src/controllers/transaction.store
    events:
    - http:
        path: transactions
        method: post
        cors: true

  transactionUpdate:
    handler: src/controllers/transaction.update
    events:
    - http:
        path: transactions/{id}
        method: patch
        cors: true

  transactionDelete:
    handler: src/controllers/transaction.deleteResource
    events:
    - http:
        path: transactions/{id}
        method: delete
        cors: true

  userList:
    handler: src/controllers/user.index
    events:
    - http:
        path: users
        method: get
        cors: true

  userLoad:
    handler: src/controllers/user.load
    events:
    - http:
        path: users/{id}
        method: get
        cors: true

  userCreate:
    handler: src/controllers/user.store
    events:
    - http:
        path: users
        method: post
        cors: true

  userUpdate:
    handler: src/controllers/user.update
    events:
    - http:
        path: users/{id}
        method: patch
        cors: true

  userDelete:
    handler: src/controllers/user.deleteResource
    events:
    - http:
        path: users/{id}
        method: delete
        cors: true

  ses:
    memorySize: 256
    timeout: 35
    description: listens to events from SES's s3 box, parses emails, and puts them into the system..
    handler: src/controllers/ses.handle
    events:
      - s3:
          bucket: vendorx-in-emails
          event: s3:ObjectCreated:*
          rules:
            - prefix: info/

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-webpack
  - serverless-offline

