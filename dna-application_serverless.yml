service: customer-platform

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: ap-southeast-1

  # 'iamRoleStatement' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:ap-southeast-1:*:*"

functions:
  create:
    handler: create-event.main
    events:
      - http:
          path: return
          method: post
          cors: true
          authorizer: aws_iam

  #Return APIs
  create-returns:
    handler: api/returns/create-returns.main
    events:
      - http:
          path: return
          method: post
          cors: true
          authorizer: aws_iam

  get-returns:
    handler: api/returns/get-returns.main
    events:
      - http:
          path: return/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list-returns:
    handler: api/returns/list-returns.main
    events:
      - http:
          path: return
          method: get
          cors: true
          authorizer: aws_iam


  update-returns:
    handler: api/returns/update-returns.main
    events:
      - http:
          path: return/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete-returns:
    handler: api/returns/delete-returns.main
    events:
      - http:
          path: return/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  #Order APIs
  create-orders:
    handler: api/orders/create-orders.main
    events:
      - http:
          path: return
          method: post
          cors: true
          authorizer: aws_iam

  get-orders:
    handler: api/orders/get-orders.main
    events:
      - http:
          path: return/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list-orders:
    handler: api/orders/list-orders.main
    events:
      - http:
          path: return
          method: get
          cors: true
          authorizer: aws_iam


  update-orders:
    handler: api/orders/update-orders.main
    events:
      - http:
          path: return/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete-orders:
    handler: api/orders/delete-orders.main
    events:
      - http:
          path: return/{id}
          method: delete
          cors: true
          authorizer: aws_iam