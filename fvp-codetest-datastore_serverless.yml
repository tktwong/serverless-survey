service: fvp-datastore-test

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-2
  memorySize: 128

  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      # Restrict our IAM role permissions to the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ FvcDataStoreTable, Arn ]
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource: "arn:aws:s3:::${self:custom.failedPayloadBucket}/*"

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-include-dependencies
  - serverless-offline
  - serverless-prune-plugin
  - serverless-pseudo-parameters

package:
  include:
    - src/*
    - src/**/*

#package:
#  exclude:
#    - "node_modules/**"
#    - "!node_modules/sax/**"
#    - "!node_modules/xml2js/**"
#    - "!node_modules/xmlbuilder/**"
#    - "src/**/*.ts"
#  include:
#    - "src/*"
#    - "src/**/*"

functions:

  onS3Put:
    handler: src/lambda-ingest.onS3Put
    name: ${self:service}-${self:custom.stage}-on-s3-put
    tags:
      Description: Read new payloads from an S3 bucket
      EventSource: s3
    events:
      - s3:
          bucket: ${self:service}-${self:custom.stage}-ingest-bucket
          event: s3:ObjectCreated:*
          rules:
            - suffix: .xml

  onHttpPost:
    handler: src/lambda-ingest.onHttpPost
    name: ${self:service}-${self:custom.stage}-on-http-post
    tags:
      Description: Allow clients to post new payloads
      EventSource: api
    events:
      - http:
          path: /api/transaction/ingest
          method: POST

  onHttpPut:
    handler: src/lambda-ingest.onHttpPost
    name: ${self:service}-${self:custom.stage}-on-http-put
    tags:
      Description: Allow clients to update existing payloads
      EventSource: api
    events:
      - http:
          path: /api/transaction/ingest/{guid}
          method: PUT
          request:
            parameters:
              paths:
                guid: true

  onHttpGetSchedules:
    handler: src/lambda-api.onHttpGetSchedules
    name: ${self:service}-${self:custom.stage}-on-http-get-schedules
    tags:
      Description: Allow clients to query for events
      EventSource: api
    events:
      - http:
          path: /api/schedules
          method: GET

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:service}-${self:custom.stage}-table
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  failedPayloadBucket: ${self:service}-${self:custom.stage}-failed-payloads
  prune:
    automatic: true
    number: 5

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/s3.yml)}
