service: messaging-api

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs8.10
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: 
        - ${self:custom.SNSSendEmailTopicArn}
        - ${self:custom.SNSSmsEmailTopicArn}
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: arn:aws:ses:${self:provider.region}:539272187627:identity/*
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/*

  environment: 
      REPLAY_EMAIL: support@example.com
      MESSAGES_DYNAMODB_TABLE: ${self:custom.DynamoMessagesTable}

custom:
  prefix: ${self:service}-${opt:stage, self:provider.stage}
  SNSSendEmailTopicName: ${self:custom.prefix}-email-topic
  SNSSendSmsTopicName: ${self:custom.prefix}-sms-topic
  SNSSaveEmailToDbTopicName: ${self:custom.SNSSendEmailTopicName}
  SNSSaveSmsToDbTopicName: ${self:custom.SNSSendSmsTopicName}
  SNSSendEmailTopicArn: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.SNSSendEmailTopicName}
  SNSSmsEmailTopicArn: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.SNSSendSmsTopicName}
  DynamoMessagesTable: ${self:custom.prefix}-messages-table
  documentation:
    api:
      info:
        version: '2'
        title: Messaging api
    models:
      - name: SendEmailRequest
        contentType: "application/json"
        schema: ${file(./schemas/sendEmailRequestSchema.json)}
      - name: SendSmsRequest
        contentType: "application/json"
        schema: ${file(./schemas/sendSmsRequestSchema.json)}

functions:
  apiSendEmail:
    handler: src/api/emailsPost.handleEmailPostRequest
    environment: 
      SNS_TOPIC_EMAIL_ARN: ${self:custom.SNSSendEmailTopicArn, env:SNS_TOPIC_EMAIL_ARN}
    events:
      - http:
          path: emails
          method: post
          reqValidatorName: onlyBody
          documentation:
            summary: Send email
            description: Send email to recipient
            requestModels:
              "application/json": SendEmailRequest

  
  apiGetEmail:
    handler: src/api/emailsGet.getEmailsHandler
    environment:
      MESSAGES_DYNAMODB_TABLE: ${self:custom.DynamoMessagesTable}
    events:
      - http:
          path: emails/{recipient}
          method: get

  apiSendSms:
    handler: src/api/smsPost.handleSmsPostRequest
    environment: 
      SNS_TOPIC_SMS_ARN: ${self:custom.SNSSmsEmailTopicArn, env:SNS_TOPIC_SMS_ARN}
    events:
      - http:
          path: sms
          method: post
          reqValidatorName: onlyBody
          documentation:
            summary: Send sms
            description: Send sms to recipient
            requestModels:
              "application/json": SendSmsRequest

  apiGetSms:
    handler: src/api/smsGet.getSmsHandler
    environment:
      MESSAGES_DYNAMODB_TABLE: ${self:custom.DynamoMessagesTable}
    events:
      - http:
         path: sms/{recipient}
         method: get

  sendEmail:
    handler: src/services/email.sendEmailHandler
    events:
      - sns: ${self:custom.SNSSendEmailTopicName}

  sendSms:
    handler: src/services/sms.sendSms
    events:
      - sns: ${self:custom.SNSSendSmsTopicName}

  saveEmail:
      handler: src/services/store.saveMessagesHandler
      environment:
        MESSAGES_DYNAMODB_TABLE: ${self:custom.DynamoMessagesTable}
      events:
        - sns: ${self:custom.SNSSaveEmailToDbTopicName}

  saveSms:
      handler: src/services/store.saveMessagesHandler
      environment:
        MESSAGES_DYNAMODB_TABLE: ${self:custom.DynamoMessagesTable}
      events:
        - sns: ${self:custom.SNSSaveSmsToDbTopicName}

resources:
  - ${file(resources/dynamoDb.yml)}
  - ${file(resources/requestValidators.yml)}

plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-typescript
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
