service: aekos-api-serverless

package:
  exclude:
    - secrets.yml

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  environment:
    # FIXME get these encrypted
    DBURL: ${file(secrets.yml):${self:custom.stage}.DBURL}
    DBPORT: ${file(secrets.yml):${self:custom.stage}.DBPORT}
    DBNAME: ${file(secrets.yml):${self:custom.stage}.DBNAME}
    DBUSER: ${file(secrets.yml):${self:custom.stage}.DBUSER}
    DBPASS: ${file(secrets.yml):${self:custom.stage}.DBPASS}

resources:
  Resources:
    MockMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: None
        HttpMethod: GET
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi # our default Rest API logical ID
            - RootResourceId
        RestApiId:
          Ref: ApiGatewayRestApi
        MethodResponses:
          - ResponseModels:
              text/html: Empty
            ResponseParameters:
              method.response.header.Location: true
            StatusCode: '301'
        Integration:
          RequestTemplates:
            application/json: |
              {"statusCode": 301}
          Type: MOCK
          IntegrationResponses:
            - ResponseParameters:
                method.response.header.Location: "'${self:custom.documentationUrl}'"
              ResponseTemplates:
                text/html: |
                  <html><body>
                    <p>Redirecting to documentation <a href="${self:custom.documentationUrl}">${self:custom.documentationUrl}</a>
                  </body></html>
              StatusCode: '301'

custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):$self:custom.stage} # FIXME get this working
  domainName: ${file(secrets.yml):${self:custom.stage}.domainName}
  documentationUrl: https://www.${self:custom.domainName}
  modelDetails: ${file(./model-schemas.yml):exports}
  customCors:
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - link
    allowCredentials: false
  constants: ${file(./constants.yml)}
  customDomain:
    basePath: '(none)'
    domainName: ${self:custom.domainName}
    stage: ${self:custom.stage}
    createRoute53Record: ${file(secrets.yml):${self:custom.stage}.createRoute53Record}
  tags:
    dataRetrievalTag: Data Retrieval by Species
    everythingRetrievalTag: Data Retrieval (everything)
    searchTag: Search
  commonModelSchemaFragments:
    MethodResponse400Json:
      statusCode: '400'
      responseModels:
        "application/json": 400JsonResponse
    MethodResponse500Json:
      statusCode: '500'
      responseModels:
        "application/json": 500JsonResponse
    StartQueryParam:
      name: ${file(./constants.yml):paramNames.START}
      description: 0-indexed result start index, default=${self:custom.constants.defaults.START}
    RowsQueryParam:
      name: ${file(./constants.yml):paramNames.ROWS}
      description: >
        records per page, default=${self:custom.constants.defaults.ROWS},
        must be ${self:custom.constants.minValues.ROWS} &lt;= rows &lt;= ${self:custom.constants.maxValues.ROWS}
    PageNumQueryParam:
      name: ${file(./constants.yml):paramNames.PAGE_NUM}
      description: 1-indexed page number, default=${self:custom.constants.defaults.PAGE_NUM}
    PageSizeQueryParam:
      name: ${file(./constants.yml):paramNames.PAGE_SIZE}
      description: >
        records per page, default=${self:custom.constants.defaults.PAGE_SIZE},
        must be ${self:custom.constants.minValues.PAGE_SIZE} &lt;= pageSize &lt;= ${self:custom.constants.maxValues.PAGE_SIZE}
    DownloadQueryParam:
      name: ${file(./constants.yml):paramNames.DOWNLOAD}
      description: true to trigger a browser download of the result, default=false
    PartialNameParam:
      name: ${self:custom.constants.paramNames.PARTIAL_NAME}
      description: partial species name
      required: true
    LinkHeader:
      name: link
      description: describes other actions that can be taken
      type: string
  documentation:
    api:
      info:
        version: '2'
        title: AEKOS API
        description: |
          The AEKOS API is used for machine readable HTTP (REST) access to AEKOS ecological data.

          # High level workflow
          1. Start with a trait or species
          1. Find what species have that trait or what traits/environmental variables are available for that species
          1. Use your traits/species/environmental variables to retrieve the data with the retrieval services
          
          # Detailed workflow
          Firstly, start with the search services. You should either find a species with `speciesAutocomplete`
          or find a trait with `getTraitVocab`. Then, for traits, find the species with that trait with
          `getSpeciesByTrait`. For species, you can find what traits or environmental variables are available with
          `getEnvironmentBySpecies` or `getTraitsBySpecies`.
          Now you can retrieve the data. You can get Darwin Core species records (using species names), Darwin Core +
          traits (using species names and optionally filtering by trait names) or environmental variable records
          (using species names and optionally filtering by environmental variable names).
          
          # A note about species names
          We have used Darwin Core terms (version 2015-06-02) as field names for the result of the data retrieval resources.
          There are two fields that are relevant to species names: `scientificName` and `taxonRemarks`. The former is, as the name
          suggests, for scientific species names and the latter is for records that have a common species name or a
          commentary about the organism e.g.: "Grass", "Absent" or "Clover". See http://rs.tdwg.org/dwc/terms/index.htm#scientificName
          and http://rs.tdwg.org/dwc/terms/index.htm#taxonRemarks for more information.
          
          # A note about performance/response times
          This API is running on AWS Lambda and API Gateway. Lambda handler functions will go to sleep
          when they haven't been called for some time (something around 5-10 minutes seems to be the consensus). When the
          resource is warm (it has recently been called) it will respond instantly. However, when it's cold (gone
          to sleep) it will have to start up before it can respond so the total response time could be up to 10 seconds. **All endpoints for this API go through the same handler so calling any endpoint will pre-heat the whole API**.
          
          To build a UI (typically calls are time sensitive) on top of this API, you can "pre-heat" the whole API as the page loads. A workflow like:
          1. user loads page
          1. as page loads, call the `/api` resource
          1. user spends a few seconds filling out form on page
          1. user submits request
          1. AEKOS API responds quickly because the resource is already warmed up
          
          Obviously if you can pre-empt needing to call this API by at least 10 seconds and call the `/api/` resource at that time, you can ensure that you'll get the best performance.
          
          # CORS support
          All resources are CORS-enabled for any origin. In the interest of keeping this documentation clean, the `OPTIONS` methods have been omitted.
        termsOfService: http://www.ecoinformatics.org.au/licensing_and_attributions
        contact:
          name: TERN Ecoinformatics
          url: http://www.ecoinformatics.org.au
          email: api@aekos.org.au
        license:
          name: Licensing and attributions
          url: http://www.ecoinformatics.org.au/licensing_and_attributions
      tags:
        -
          name: ${self:custom.tags.dataRetrievalTag}
          description: Retrieve data using parameters from search
        -
          name: ${self:custom.tags.everythingRetrievalTag}
          description: Retrieve all records
        -
          name: ${self:custom.tags.searchTag}
          description: Find species, traits and environmental variables
    models:
      -
        name: ApiResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            links:
              type: array
              items:
                type: object
                properties:
                  rel:
                    type: string
                  href:
                    type: string
      -
        name: SamplingProtocolSummaryResponse
        contentType: "application/json"
        items: ${self:custom.modelDetails.SamplingProtocolSummaryResponse}
      -
        name: V1SpeciesAutocompleteResponse
        contentType: "application/json"
        schema:
          type: array
          items: ${self:custom.modelDetails.V1SpeciesSummaryResponse}
      -
        name: V2SpeciesAutocompleteResponse
        contentType: "application/json"
        schema:
          type: array
          items: ${self:custom.modelDetails.V2SpeciesSummaryResponse}
      -
        name: V1AllSpeciesDataResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            responseHeader: ${self:custom.modelDetails.v1AllSpeciesResponseHeader}
            response: ${self:custom.modelDetails.v1AllSpeciesDataResponse}
      -
        name: V2AllSpeciesDataResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            responseHeader: ${self:custom.modelDetails.v1AllSpeciesResponseHeader}
            response: ${self:custom.modelDetails.v2AllSpeciesDataResponse}
      -
        name: V1SpeciesDataResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            responseHeader: ${self:custom.modelDetails.v1SpeciesResponseHeader}
            response: ${self:custom.modelDetails.v1AllSpeciesDataResponse}
      -
        name: V2SpeciesDataResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            responseHeader: ${self:custom.modelDetails.v1SpeciesResponseHeader}
            response: ${self:custom.modelDetails.v2AllSpeciesDataResponse}
      -
        name: V1TraitDataJsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            responseHeader: ${self:custom.modelDetails.v1TraitResponseHeader}
            response: ${self:custom.modelDetails.v1TraitResponse}
      -
        name: V2TraitDataJsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            responseHeader: ${self:custom.modelDetails.v1TraitResponseHeader}
            response: ${self:custom.modelDetails.v2TraitResponse}
      -
        name: V1EnvDataResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            responseHeader: ${self:custom.modelDetails.v1EnvResponseHeader}
            response: ${self:custom.modelDetails.v1EnvResponse}
      -
        name: V2EnvDataResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            responseHeader: ${self:custom.modelDetails.v1EnvResponseHeader}
            response: ${self:custom.modelDetails.v2EnvResponse}
      -
        name: CsvResponse
        contentType: "text/csv"
        schema:
          type: string
      -
        name: 400JsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
      -
        name: 500JsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
      -
        name: V1EnvironmentBySpeciesResponse
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.VocabObjectSchema}
      -
        name: V2EnvironmentBySpeciesResponse
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.VocabObjectSchema}
      -
        name: V1EnvironmentalVariableVocabResponse
        contentType: "application/json"
        schema: ${file(./environmentalVariableVocab-json.js):responseSchema}
      -
        name: V1TraitVocabResponse
        contentType: "application/json"
        schema: ${file(./traitVocab-json.js):responseSchema}
      -
        name: V1GetEnvironmentBySpeciesRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.SpeciesNamesPostRequest}
      -
        name: V2EnvironmentBySpeciesRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.SpeciesNamesPostRequest}
      -
        name: V1SpeciesSummaryRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.SpeciesNamesPostRequest}
      -
        name: V2SpeciesSummaryRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.SpeciesNamesPostRequest}
      -
        name: V1SpeciesSummaryResponse
        contentType: "application/json"
        schema:
          type: array
          items: ${self:custom.modelDetails.V1SpeciesSummaryResponse}
      -
        name: V2SpeciesSummaryResponse
        contentType: "application/json"
        schema:
          type: array
          items: ${self:custom.modelDetails.V2SpeciesSummaryResponse}
      -
        name: V1SpeciesByTraitRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.TraitNamesPostRequest}
      -
        name: V2SpeciesByTraitRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.TraitNamesPostRequest}
      -
        name: V1SpeciesByTraitResponse
        contentType: "application/json"
        schema: ${self:custom.modelDetails.V1SpeciesByTraitResponse}
      -
        name: V2SpeciesByTraitResponse
        contentType: "application/json"
        schema: ${self:custom.modelDetails.V2SpeciesByTraitResponse}
      -
        name: V1TraitBySpeciesRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.SpeciesNamesPostRequest}
      -
        name: V2TraitBySpeciesRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.SpeciesNamesPostRequest}
      -
        name: V1TraitBySpeciesResponse
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.VocabObjectSchema}
      -
        name: V2TraitBySpeciesResponse
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.VocabObjectSchema}
      -
        name: V1SpeciesDataRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.SpeciesNamesPostRequest}
      -
        name: V1TraitDataRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.TraitDataPostRequest}
      -
        name: V1EnvDataRequest
        contentType: "application/json"
        schema: ${self:custom.modelDetails.fragments.EnvDataPostRequest}
plugins:
  - serverless-aws-documentation
  - serverless-domain-manager

functions:
  uberRouter:
    handler: uberRouter.handler
    timeout: 100
    events:
      - http:
          path: api
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get API HATEOAS links
            tags:
              - meta
            description: >
              Provides links for actions that can be taken. As a RESTful (HATEOAS) client, this is
              your starting point.
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": ApiResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: sampling-protocol-summary
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get summary of the sampling protocol values in the system
            tags:
              - meta
            description: >
              The response gives 3 levels. The 'datasetGroups' summarises the samplingProtocol
              values at the highest level. Then 'samplingProtocolGroups' summarises at the next
              level down and for some surveys, this is the lowest level available. Finally, the
              'surveys' is a list of all surveys (also samplingProtocol values) in the system.
              You can use this list to build client-side filters for other responses. For example,
              if you didn't want any OEH records, you could find the common samplingProtocol prefix
              for all the OEH surveys and then discard records you recieve that match that prefix.
              See <a href="/sampling-protocol-summary.html" target="_blank">this page</a> for more details.
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": SamplingProtocolSummaryResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/getTraitVocab.json
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get trait vocabulary
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Gets a distinct list of all the traits that appear in the system. The code and label are supplied for
              each trait. The codes are required to use as parameters for other resources and the label information
              is useful for creating UIs.
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1TraitVocabResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/getTraitVocab.json
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get trait vocabulary
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Gets a distinct list of all the traits that appear in the system. The code and label are supplied for
              each trait. The codes are required to use as parameters for other resources and the label information
              is useful for creating UIs. ${file(./constants.yml):messages.documentation.noChangesSinceV1}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1TraitVocabResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/getEnvironmentalVariableVocab.json
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get environmental variable vocabulary
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Gets a distinct list of all the environmental variables that appear in the system. The code and label are supplied for
              each trait. The codes are required to use as parameters for other resources and the label information
              is useful for creating UIs.
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1EnvironmentalVariableVocabResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/getEnvironmentalVariableVocab.json
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get environmental variable vocabulary
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Gets a distinct list of all the environmental variables that appear in the system. The code and label are supplied for
              each trait. The codes are required to use as parameters for other resources and the label information
              is useful for creating UIs. ${file(./constants.yml):messages.documentation.noChangesSinceV1}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1EnvironmentalVariableVocabResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/getTraitsBySpecies.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Retrieve all available traits for specified species
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Finds the traits that the supplied species have. Note that the result doesn't include the value
              of the traits, it only shows that the supplied species have values for those traits. To get
              the values, you need to use the Data Retrieval resources.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.PageNumQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageSizeQueryParam}
            requestModels:
               "application/json": V1TraitBySpeciesRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1TraitBySpeciesResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/getTraitsBySpecies.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Retrieve all available traits for specified species
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Finds the traits that the supplied species have. Note that the result doesn't include the value
              of the traits, it only shows that the supplied species have values for those traits. To get
              the values, you need to use the Data Retrieval resources.
              ${file(./constants.yml):messages.documentation.noChangesSinceV1}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.PageNumQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageSizeQueryParam}
            requestModels:
               "application/json": V2TraitBySpeciesRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V2TraitBySpeciesResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/getSpeciesByTrait.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Retrieve all available species for specified traits
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Finds the species names that the supplied trait(s). Note that the result only shows that the supplied
              traits have species records present in the system. To get the values of the traits, you need to use the Data
              Retrieval resources.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.PageNumQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageSizeQueryParam}
            requestModels:
               "application/json": V1SpeciesByTraitRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1SpeciesByTraitResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/getSpeciesByTrait.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Retrieve all available species for specified traits
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Finds the species names that the supplied trait(s). Note that the result only shows that the supplied
              traits have species records present in the system. To get the values of the traits, you need to use the Data
              Retrieval resources. ${file(./constants.yml):messages.documentation.noIdSinceV1}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.PageNumQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageSizeQueryParam}
            requestModels:
               "application/json": V2SpeciesByTraitRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V2SpeciesByTraitResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/getEnvironmentBySpecies.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Retrieve all available environment variable names for specified species
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Finds the environmental variables that the supplied species have. Note that the result doesn't
              include the value of the environmental variables, it only shows that the supplied species have
              values for those variables. To get the values, you need to use the Data Retrieval resources.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.PageNumQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageSizeQueryParam}
            requestModels:
               "application/json": V1GetEnvironmentBySpeciesRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1EnvironmentBySpeciesResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/getEnvironmentBySpecies.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Retrieve all available environment variable names for specified species
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Finds the environmental variables that the supplied species have. Note that the result doesn't
              include the value of the environmental variables, it only shows that the supplied species have
              values for those variables. To get the values, you need to use the Data Retrieval resources.
              ${file(./constants.yml):messages.documentation.noChangesSinceV1}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.PageNumQueryParam}
              - ${self:custom.commonModelSchemaFragments.PageSizeQueryParam}
            requestModels:
               "application/json": V2EnvironmentBySpeciesRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V2EnvironmentBySpeciesResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/speciesAutocomplete.json
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Autocomplete partial species names
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Performs an autocomplete on the partial species name supplied. Results starting with the supplied
              fragment will be returned ordered by most relevant.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.PartialNameParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1SpeciesAutocompleteResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/speciesAutocomplete.json
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Autocomplete partial species names
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              Performs an autocomplete on the partial species name supplied. Results starting with the supplied
              fragment will be returned ordered by most relevant.
              ${file(./constants.yml):messages.documentation.noIdSinceV1}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.PartialNameParam}
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V2SpeciesAutocompleteResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/speciesSummary.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get a summary of the specified species names
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              A summary of the information that the system holds on the supplied species name(s) including a count
              of records. If the system doesn't have any data on a species name, no record for the species name will
              be in the result.
            requestModels:
               "application/json": V1SpeciesSummaryRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1SpeciesSummaryResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/speciesSummary.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get a summary of the specified species names
            tags:
              - ${self:custom.tags.searchTag}
            description: >
              A summary of the information that the system holds on the supplied species name(s) including a count
              of records. If the system doesn't have any data on a species name, no record for the species name will
              be in the result. ${file(./constants.yml):messages.documentation.noIdSinceV1}
            requestModels:
               "application/json": V2SpeciesSummaryRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V2SpeciesSummaryResponse
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/speciesData
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get species data
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records for the supplied species name(s) using content negotation to determine the response type.
              This resource honours Accept headers represented by any of the /v2/speciesData.* resources.
              ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1SpeciesDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                  "application/json": V2SpeciesDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/speciesData
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get species data
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records for the supplied species name(s) using content negotation to determine the response type.
              This resource honours Accept headers represented by any of the /v1/speciesData.* resources.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1SpeciesDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                  "application/json": V1SpeciesDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/speciesData.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get species data in JSON format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records for the supplied species name(s) in JSON format.
              ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1SpeciesDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V2SpeciesDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/speciesData.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get species data in JSON format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records for the supplied species name(s) in JSON format.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1SpeciesDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1SpeciesDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/speciesData.csv
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get species data in CSV format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records for the supplied species name(s) in CSV format.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
              - ${self:custom.commonModelSchemaFragments.DownloadQueryParam}
            requestModels:
               "application/json": V1SpeciesDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/speciesData.csv
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get species data in CSV format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records for the supplied species name(s) in CSV format.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
              - ${self:custom.commonModelSchemaFragments.DownloadQueryParam}
            requestModels:
               "application/json": V1SpeciesDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/traitData
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get trait data
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records with added trait information for the supplied species name(s) using content negotation to
              determine the response type. If you supply trait names then the result records will have the traits filtered down
              to only the traits you've asked for, otherwise all traits are returned.
              ${file(./constants.yml):messages.documentation.traitDataVsSpeciesData} This resource honours Accept headers
              represented by any of the /v2/traitData.* resources. ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1TraitDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                  "application/json": V2TraitDataJsonResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/traitData
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get trait data
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records with added trait information for the supplied species name(s) using content negotation to
              determine the response type. If you supply trait names then the result records will have the traits filtered down
              to only the traits you've asked for, otherwise all traits are returned.
              ${file(./constants.yml):messages.documentation.traitDataVsSpeciesData} This resource honours Accept headers
              represented by any of the /v1/traitData.* resources.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1TraitDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                  "application/json": V1TraitDataJsonResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/traitData.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get trait data in JSON format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records with added trait information in JSON format. If you supply trait names then the result
              records will have the traits filtered down to only the traits you've asked for, otherwise all traits are returned.
              ${file(./constants.yml):messages.documentation.traitDataVsSpeciesData}
              ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1TraitDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V2TraitDataJsonResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/traitData.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get trait data in JSON format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records with added trait information in JSON format. If you supply trait names then the result
              records will have the traits filtered down to only the traits you've asked for, otherwise all traits are returned.
              ${file(./constants.yml):messages.documentation.traitDataVsSpeciesData}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1TraitDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1TraitDataJsonResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/traitData.csv
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get trait data in CSV format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records with added trait information in CSV format. If you supply trait names then the result
              records will have the traits filtered down to only the traits you've asked for, otherwise all traits are returned.
              ${file(./constants.yml):messages.documentation.traitDataVsSpeciesData}
              ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
              - ${self:custom.commonModelSchemaFragments.DownloadQueryParam}
            requestModels:
               "application/json": V1TraitDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/traitData.csv
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get trait data in CSV format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets Darwin Core records with added trait information in CSV format. If you supply trait names then the result
              records will have the traits filtered down to only the traits you've asked for, otherwise all traits are returned.
              ${file(./constants.yml):messages.documentation.traitDataVsSpeciesData}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
              - ${self:custom.commonModelSchemaFragments.DownloadQueryParam}
            requestModels:
               "application/json": V1TraitDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/environmentData
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get environmental variable data
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets environmental variable data records for the site/study location/plot visits that the supplied species name(s)
              appear at using content negotation to determine the response type. If you supply environmental variable names then
              the result will have the environmental variables filtered down to only the environmental variables you've asked for,
              otherwise all environmental variables are returned. Note: not all sites have environmental variables available.
              This resource honours Accept headers represented by any of the /v2/environmentData.* resources.
              ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1EnvDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                  "application/json": V2EnvDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/environmentData
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get environmental variable data
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets environmental variable data records for the site/study location/plot visits that the supplied species name(s)
              appear at using content negotation to determine the response type. If you supply environmental variable names then
              the result will have the environmental variables filtered down to only the environmental variables you've asked for,
              otherwise all environmental variables are returned. Note: not all sites have environmental variables available.
              This resource honours Accept headers represented by any of the /v1/environmentData.* resources.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1EnvDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                  "application/json": V1EnvDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/environmentData.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get environmental variable data in JSON format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets environmental variable data records for the site/study location/plot visits that the supplied species name(s)
              appear at in JSON format. If you supply environmental variable names then the result will have the environmental
              variables filtered down to only the environmental variables you've asked for, otherwise all environmental
              variables are returned. Note: not all sites have environmental variables available.
              ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1EnvDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V2EnvDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/environmentData.json
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get environmental variable data in JSON format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets environmental variable data records for the site/study location/plot visits that the supplied species name(s)
              appear at in JSON format. If you supply environmental variable names then the result will have the environmental
              variables filtered down to only the environmental variables you've asked for, otherwise all environmental
              variables are returned. Note: not all sites have environmental variables available.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            requestModels:
               "application/json": V1EnvDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1EnvDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/environmentData.csv
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get environmental variable data in CSV format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets environmental variable data records for the site/study location/plot visits that the supplied species name(s)
              appear at in CSV format. If you supply environmental variable names then the result will have the environmental
              variables filtered down to only the environmental variables you've asked for, otherwise all environmental
              variables are returned. Note: not all sites have environmental variables available.
              ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
              - ${self:custom.commonModelSchemaFragments.DownloadQueryParam}
            requestModels:
               "application/json": V1EnvDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/environmentData.csv
          method: post
          cors: ${self:custom.customCors}
          documentation:
            summary: Get environmental variable data in CSV format
            tags:
              - ${self:custom.tags.dataRetrievalTag}
            description: >
              Gets environmental variable data records for the site/study location/plot visits that the supplied species name(s)
              appear at in CSV format. If you supply environmental variable names then the result will have the environmental
              variables filtered down to only the environmental variables you've asked for, otherwise all environmental
              variables are returned. Note: not all sites have environmental variables available.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
              - ${self:custom.commonModelSchemaFragments.DownloadQueryParam}
            requestModels:
               "application/json": V1EnvDataRequest
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/allSpeciesData
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get all species data
            tags:
              - ${self:custom.tags.everythingRetrievalTag}
            description: >
              Gets all Darwin Core records using content negotation to determine the response type. This resource honours Accept
              headers represented by any of the /v2/allSpeciesData.* resources. ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                  "application/json": V2AllSpeciesDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/allSpeciesData
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get all species data
            tags:
              - ${self:custom.tags.everythingRetrievalTag}
            description: >
              Gets all Darwin Core records using content negotation to determine the response type. This resource honours Accept
              headers represented by any of the /v1/allSpeciesData.* resources.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                  "application/json": V1AllSpeciesDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/allSpeciesData.json
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get all species data in JSON format
            tags:
              - ${self:custom.tags.everythingRetrievalTag}
            description: >
              Gets Darwin Core records in JSON format. ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V2AllSpeciesDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/allSpeciesData.json
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get all species data in JSON format
            tags:
              - ${self:custom.tags.everythingRetrievalTag}
            description: >
              Gets Darwin Core records in JSON format.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "application/json": V1AllSpeciesDataResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v2/allSpeciesData.csv
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get all species occurrence data in CSV format
            tags:
              - ${self:custom.tags.everythingRetrievalTag}
            description: >
              Gets all Darwin Core records in CSV format. ${file(./constants.yml):messages.documentation.v2NewFields}
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
              - ${self:custom.commonModelSchemaFragments.DownloadQueryParam}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
      - http:
          path: v1/allSpeciesData.csv
          method: get
          cors: ${self:custom.customCors}
          documentation:
            summary: Get all species occurrence data in CSV format
            tags:
              - ${self:custom.tags.everythingRetrievalTag}
            description: >
              Gets all Darwin Core records in CSV format.
            queryParams:
              - ${self:custom.commonModelSchemaFragments.StartQueryParam}
              - ${self:custom.commonModelSchemaFragments.RowsQueryParam}
              - ${self:custom.commonModelSchemaFragments.DownloadQueryParam}
            methodResponses:
              -
                statusCode: '200'
                responseModels:
                  "text/csv": CsvResponse
                responseHeaders:
                  - ${self:custom.commonModelSchemaFragments.LinkHeader}
              - ${self:custom.commonModelSchemaFragments.MethodResponse400Json}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500Json}
