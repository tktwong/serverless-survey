# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: download-files-service # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.1.0"

custom:
  bucket: lambda-input-files
  mp3bucket: lambda1-output-files
  wavbucket: wav-bucket

provider:
  name: aws
  runtime: python3.6
  profile: mnm-profile
# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
        - 'elastictranscoder:Read*'
        - 'elastictranscoder:List*'
        - 'elastictranscoder:*Job'
      Resource: "*"

#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  download_files_function: 
    name: download_files_function
    handler: handler.entrypoint
    events: 
      - s3:  
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          rules:
      	    - suffix: .csv
    

  convert_files_function:
    name: convert_files_function
    handler: convert_handler.entrypoint
    events:
      - s3:
          bucket: ${self:custom.mp3bucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .mp3
    

  get_prediction_function:
    name: get_prediction_function
    handler: get_prediction_handler.entrypoint
    events:
      - s3:
          bucket: ${self:custom.wavbucket}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .wav 
    



#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2
	
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-offline
#  - serverless-python-requirements


