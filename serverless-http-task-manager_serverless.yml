service: http-task-manager

provider:
  name: aws
  runtime: nodejs6.10
  cfLogs: true
  versionLambda: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - lambda:*
        - s3:PutObject
      Resource: '*'
  environment:
    TASKS_TABLE:
      Ref: Tasks
    TASK_RESULTS_TABLE:
      Ref: TaskResults
    RESPONSE_BUCKET:
      Ref: ResponseBucket
    MAX_HEADERS: 30
    MAX_HEADER_VALUE_SIZE: 500
    MAX_RESPONSE_SIZE: 1500
functions:
  asyncTaskCallback:
    handler: handlers/asyncTaskCallback.handler
    timeout: 7
    environment:
      MAX_TRIES: 2
      RETRY_INTERVAL: 2000
      CALLBACK_FUNCTION_NAME: ${self:service}-${opt:stage}-executeTaskCallback
    events:
      - http:
          method: post
          path: task/callback/{taskId}
          integration: lambda
          request:
            template:
              application/json: '{"taskId": "$input.params(''taskId'')", "body": "$util.escapeJavaScript($input.json(''$..*''))"}'
  executeTaskCallback:
    handler: handlers/executeTaskCallback.handler
    timeout: 7
  executeTaskRequest:
    handler: handlers/executeTaskRequest.handler
    timeout: 30
  receiveTaskCallback:
    handler: handlers/receiveTaskCallback.handler
    timeout: 7
  stream:
    handler: handlers/stream.handler
    timeout: 300
    environment:
      MAX_TRIES: 2
      RETRY_INTERVAL: 2000
      RUN_FUNCTION_NAME: ${self:service}-${opt:stage}-executeTaskRequest
      CALLBACK_FUNCTION_NAME: ${self:service}-${opt:stage}-executeTaskCallback
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [Tasks, StreamArn]
          batchSize: 50
          enabled: true
  addTask:
    handler: handlers/addTask.handler
    events:
      - http:
          method: POST
          path: task/add
          integration: lambda
          request:
            template:
              application/json: '$input.body'
  getTaskResult:
    handler: handlers/getTaskResult.handler
    events:
      - http:
          method: GET
          path: task/result/{id}
          integration: lambda
          request:
            template:
              application/json: '{"id": "$input.params(''id'')"}'

resources:
  Resources:
    Tasks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage}-tasks
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    TaskResults:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage}-task-results
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    ResponseBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${opt:stage}-responses
